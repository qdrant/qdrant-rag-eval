,question,contexts,ground_truth,evolution_type,metadata,episode_done
0,How do you load data into a Qdrant collection?,"['---\n\ntitle: Quickstart\n\nweight: 11\n\naliases:\n\n  - quick_start\n\n---\n\n# Quickstart\n\n\n\nIn this short example, you will use the Python Client to create a Collection, load data into it and run a basic search query.\n\n\n\n<aside role=""status"">Before you start, please make sure Docker is installed and running on your system.</aside>\n\n\n\n## Download and run\n\n\n\nFirst, download the latest Qdrant image from Dockerhub:\n\n\n\n```bash\n\ndocker pull qdrant/qdrant\n\n```\n\n\n\nThen, run the service:\n\n\n\n```bash\n\ndocker run -p 6333:6333 -p 6334:6334 \\\n\n    -v $(pwd)/qdrant_storage:/qdrant/storage:z \\\n\n    qdrant/qdrant\n\n```\n\n\n\nUnder the default configuration all data will be stored in the `./qdrant_storage` directory. This will also be the only directory that both the Container and the host machine can both see.\n\n\n\nQdrant is now accessible:\n\n\n\n- REST API: [localhost:6333](http://localhost:6333)\n\n- Web UI: [localhost:6333/dashboard](http://localhost:6333/dashboard)\n\n- GRPC API: [localhost:6334](http://localhost:6334)\n\n\n\n## Initialize the client\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";\n\n\n\nconst client = new QdrantClient({ host: ""localhost"", port: 6333 });\n\n```\n\n\n\n```rust\n\nuse qdrant_client::client::QdrantClient;\n\n\n\n// The Rust client uses Qdrant\'s GRPC interface\n\nlet client = QdrantClient::from_url(""http://localhost:6334"").build()?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\n\n\n// The Java client uses Qdrant\'s GRPC interface\n\nQdrantClient client = new QdrantClient(\n\n    QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\n\n\n// The C# client uses Qdrant\'s GRPC interface\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n```\n\n\n\n<aside role=""status"">By default, Qdrant starts with no encryption or authentication . This means anyone with network access to your machine can access your Qdrant container instance. Please read <a href=""https://qdrant.tech/documentation/security/"">Security</a> carefully for details on how to secure your instance.</aside>\n\n\n\n## Create a collection\n\n\n\nYou will be storing all of your vector data in a Qdrant collection. Let\'s call it `test_collection`. This collection will be using a dot product distance metric to compare vectors.\n\n\n\n```python\n\nfrom qdrant_client.http.models import Distance, VectorParams\n\n\n\nclient.create_collection(\n\n    collection_name=""test_collection"",\n\n    vectors_config=VectorParams(size=4, distance=Distance.DOT),\n\n)\n\n```\n\n\n\n```typescript\n\nawait client.createCollection(""test_collection"", {\n\n  vectors: { size: 4, distance: ""Dot"" },\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::qdrant::{vectors_config::Config, VectorParams, VectorsConfig};\n\n\n\nclient\n\n    .create_collection(&CreateCollection {\n\n        collection_name: ""test_collection"".to_string(),\n\n        vectors_config: Some(VectorsConfig {\n\n            config: Some(Config::Params(VectorParams {\n\n                size:']","To load data into a Qdrant collection, you can use the `load_collection` method provided by the QdrantClient. This method takes the collection name and a list of vectors as input. Each vector should be a dictionary with a `payload` field and a `vector` field. The `payload` field can be used to store additional information about the vector, while the `vector` field should contain the vector data. Here is an example of how to load data into a Qdrant collection:

```python
from qdrant_client.http.models import CollectionPayload

vectors = [
    {
        'payload': {'id': 1, 'name': 'John'},
        'vector': [0.1, 0.2, 0.3, 0.4]
    },
    {
        'payload': {'id': 2, 'name': 'Jane'},
        'vector': [0.5, 0.6, 0.7, 0.8]
    }
]

client.load_collection(
    collection_name='test_collection',
    vectors=vectors
)
```",simple,[{'source': 'documentation/quick-start.md'}],True
1,What is the purpose of the query vector in the search operation?,"[';\n\n\n\nvar operationInfo = await client.UpsertAsync(\n\n\tcollectionName: ""test_collection"",\n\n\tpoints: new List<PointStruct>\n\n\t{\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tId = 1,\n\n\t\t\tVectors = new float[] { 0.05f, 0.61f, 0.76f, 0.74f },\n\n\t\t\tPayload = { [""city""] = ""Berlin"" }\n\n\t\t},\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tId = 2,\n\n\t\t\tVectors = new float[] { 0.19f, 0.81f, 0.75f, 0.11f },\n\n\t\t\tPayload = { [""city""] = ""London"" }\n\n\t\t},\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tId = 3,\n\n\t\t\tVectors = new float[] { 0.36f, 0.55f, 0.47f, 0.94f },\n\n\t\t\tPayload = { [""city""] = ""Moscow"" }\n\n\t\t},\n\n\t\t// Truncated\n\n\t}\n\n);\n\n\n\nConsole.WriteLine(operationInfo);\n\n```\n\n\n\n**Response:**\n\n\n\n```python\n\noperation_id=0 status=<UpdateStatus.COMPLETED: \'completed\'>\n\n```\n\n\n\n```typescript\n\n{ operation_id: 0, status: \'completed\' }\n\n```\n\n\n\n```rust\n\nPointsOperationResponse {\n\n    result: Some(UpdateResult {\n\n        operation_id: 0,\n\n        status: Completed,\n\n    }),\n\n    time: 0.006347708,\n\n}\n\n```\n\n\n\n```java\n\noperation_id: 0\n\nstatus: Completed\n\n```\n\n\n\n```csharp\n\n{ ""operationId"": ""0"", ""status"": ""Completed"" }\n\n```\n\n\n\n## Run a query\n\n\n\nLet\'s ask a basic question - Which of our stored vectors are most similar to the query vector `[0.2, 0.1, 0.9, 0.7]`?\n\n\n\n```python\n\nsearch_result = client.search(\n\n    collection_name=""test_collection"", query_vector=[0.2, 0.1, 0.9, 0.7], limit=3\n\n)\n\n\n\nprint(search_result)\n\n```\n\n\n\n```typescript\n\nlet searchResult = await client.search(""test_collection"", {\n\n  vector: [0.2, 0.1, 0.9, 0.7],\n\n  limit: 3,\n\n});\n\n\n\nconsole.debug(searchResult);\n\n```\n\n\n\n```rust\n\nuse qdrant_client::qdrant::SearchPoints;\n\n\n\nlet search_result = client\n\n    .search_points(&SearchPoints {\n\n        collection_name: ""test_collection"".to_string(),\n\n        vector: vec![0.2, 0.1, 0.9, 0.7],\n\n        limit: 3,\n\n        with_payload: Some(true.into()),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n\n\ndbg!(search_result);\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport io.qdrant.client.grpc.Points.ScoredPoint;\n\nimport io.qdrant.client.grpc.Points.SearchPoints;\n\n\n\nimport static io.qdrant.client.WithPayloadSelectorFactory.enable;\n\n\n\nList<ScoredPoint> searchResult =\n\n    client\n\n        .searchAsync(\n\n            SearchPoints.newBuilder()\n\n                .setCollectionName(""test_collection"")\n\n                .setLimit(3)\n\n                .addAllVector(List.of(0.2f, 0.1f, 0.9', ';\n\n\n\nvar operationInfo = await client.UpsertAsync(\n\n\tcollectionName: ""test_collection"",\n\n\tpoints: new List<PointStruct>\n\n\t{\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tId = 1,\n\n\t\t\tVectors = new float[] { 0.05f, 0.61f, 0.76f, 0.74f },\n\n\t\t\tPayload = { [""city""] = ""Berlin"" }\n\n\t\t},\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tId = 2,\n\n\t\t\tVectors = new float[] { 0.19f, 0.81f, 0.75f, 0.11f },\n\n\t\t\tPayload = { [""city""] = ""London"" }\n\n\t\t},\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tId = 3,\n\n\t\t\tVectors = new float[] { 0.36f, 0.55f, 0.47f, 0.94f },\n\n\t\t\tPayload = { [""city""] = ""Moscow"" }\n\n\t\t},\n\n\t\t// Truncated\n\n\t}\n\n);\n\n\n\nConsole.WriteLine(operationInfo);\n\n```\n\n\n\n**Response:**\n\n\n\n```python\n\noperation_id=0 status=<UpdateStatus.COMPLETED: \'completed\'>\n\n```\n\n\n\n```typescript\n\n{ operation_id: 0, status: \'completed\' }\n\n```\n\n\n\n```rust\n\nPointsOperationResponse {\n\n    result: Some(UpdateResult {\n\n        operation_id: 0,\n\n        status: Completed,\n\n    }),\n\n    time: 0.006347708,\n\n}\n\n```\n\n\n\n```java\n\noperation_id: 0\n\nstatus: Completed\n\n```\n\n\n\n```csharp\n\n{ ""operationId"": ""0"", ""status"": ""Completed"" }\n\n```\n\n\n\n## Run a query\n\n\n\nLet\'s ask a basic question - Which of our stored vectors are most similar to the query vector `[0.2, 0.1, 0.9, 0.7]`?\n\n\n\n```python\n\nsearch_result = client.search(\n\n    collection_name=""test_collection"", query_vector=[0.2, 0.1, 0.9, 0.7], limit=3\n\n)\n\n\n\nprint(search_result)\n\n```\n\n\n\n```typescript\n\nlet searchResult = await client.search(""test_collection"", {\n\n  vector: [0.2, 0.1, 0.9, 0.7],\n\n  limit: 3,\n\n});\n\n\n\nconsole.debug(searchResult);\n\n```\n\n\n\n```rust\n\nuse qdrant_client::qdrant::SearchPoints;\n\n\n\nlet search_result = client\n\n    .search_points(&SearchPoints {\n\n        collection_name: ""test_collection"".to_string(),\n\n        vector: vec![0.2, 0.1, 0.9, 0.7],\n\n        limit: 3,\n\n        with_payload: Some(true.into()),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n\n\ndbg!(search_result);\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport io.qdrant.client.grpc.Points.ScoredPoint;\n\nimport io.qdrant.client.grpc.Points.SearchPoints;\n\n\n\nimport static io.qdrant.client.WithPayloadSelectorFactory.enable;\n\n\n\nList<ScoredPoint> searchResult =\n\n    client\n\n        .searchAsync(\n\n            SearchPoints.newBuilder()\n\n                .setCollectionName(""test_collection"")\n\n                .setLimit(3)\n\n                .addAllVector(List.of(0.2f, 0.1f, 0.9']",nan,simple,"[{'source': 'documentation/quick-start.md'}, {'source': 'documentation/quick-start.md'}]",True
2,How does the multi-language model help in categorizing e-commerce products?,"['---\n\ndraft: false\n\ntitle: E-commerce products categorization\n\nshort_description: E-commerce products categorization demo from Qdrant vector database\n\ndescription: This demo shows how you can use vector database in e-commerce. Enter the name of the product and the application will understand which category it belongs to, based on the multi-language model. The dots represent clusters of products.\n\npreview_image: /demo/products_categorization_demo.jpg\n\nlink: https://qdrant.to/extreme-classification-demo\n\nweight: 3\n\nsitemapExclude: True\n\n---\n']",nan,simple,[{'source': 'demo/demo-3.md'}],True
3,What is the purpose of the Food Discovery Demo in the Delivery Service?,"[""---\n\ndraft: false\n\ntitle: Food Discovery\n\nshort_description: Qdrant Food Discovery Demo recommends more similar meals based on how they look\n\ndescription: This demo uses data from Delivery Service. Users may like or dislike the photo of a dish, and the app will recommend more similar meals based on how they look. It's also possible to choose to view results from the restaurants within the delivery radius.\n\npreview_image: /demo/food-discovery-demo.png\n\nlink: https://food-discovery.qdrant.tech/\n\nweight: 2\n\nsitemapExclude: True\n\n---\n""]","This demo uses data from Delivery Service. Users may like or dislike the photo of a dish, and the app will recommend more similar meals based on how they look. It's also possible to choose to view results from the restaurants within the delivery radius.",simple,[{'source': 'demo/demo-2.md'}],True
4,What is the Basic RAG pipeline and how does it incorporate Qdrant and OpenAI SDKs?,"[' for Skin Conditions](https://colab.research.google.com/github/qdrant/examples/blob/master/qdrant_101_image_data/04_qdrant_101_cv.ipynb)                                                                      | Use Qdrant to compare challenging images with labels representing different skin diseases.      | Qdrant                     | \n\n| [Question and Answer System with LlamaIndex](https://githubtocolab.com/qdrant/examples/blob/master/llama_index_recency/Qdrant%20and%20LlamaIndex%20%E2%80%94%20A%20new%20way%20to%20keep%20your%20Q%26A%20systems%20up-to-date.ipynb) | Combine Qdrant and LlamaIndex to create a self-updating Q&A system.                             | Qdrant, LlamaIndex, Cohere | \n\n| [Extractive QA System](https://githubtocolab.com/qdrant/examples/blob/master/extractive_qa/extractive-question-answering.ipynb)                                                                                                       | Extract answers directly from context to generate highly relevant answers.                      | Qdrant                     | \n\n| [Ecommerce Reverse Image Search](https://githubtocolab.com/qdrant/examples/blob/master/ecommerce_reverse_image_search/ecommerce-reverse-image-search.ipynb)                                                                           | Accept images as search queries to receive semantically appropriate answers.                    | Qdrant                     | \n\n| [Basic RAG](https://githubtocolab.com/qdrant/examples/blob/master/rag-openai-qdrant/rag-openai-qdrant.ipynb)                                                                                                                          | Basic RAG pipeline with Qdrant and OpenAI SDKs                                                  | OpenAI, Qdrant, FastEmbed  |\n']",Basic RAG pipeline is a pipeline that incorporates Qdrant and OpenAI SDKs. It utilizes Qdrant and OpenAI SDKs to perform various tasks.,simple,[{'source': 'documentation/examples.md'}],True
5,"What does the ""limit"" parameter do in the query for similar vectors to [0.2, 0.1, 0.9, 0.7]?","[';\n\n\n\nvar operationInfo = await client.UpsertAsync(\n\n\tcollectionName: ""test_collection"",\n\n\tpoints: new List<PointStruct>\n\n\t{\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tId = 1,\n\n\t\t\tVectors = new float[] { 0.05f, 0.61f, 0.76f, 0.74f },\n\n\t\t\tPayload = { [""city""] = ""Berlin"" }\n\n\t\t},\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tId = 2,\n\n\t\t\tVectors = new float[] { 0.19f, 0.81f, 0.75f, 0.11f },\n\n\t\t\tPayload = { [""city""] = ""London"" }\n\n\t\t},\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tId = 3,\n\n\t\t\tVectors = new float[] { 0.36f, 0.55f, 0.47f, 0.94f },\n\n\t\t\tPayload = { [""city""] = ""Moscow"" }\n\n\t\t},\n\n\t\t// Truncated\n\n\t}\n\n);\n\n\n\nConsole.WriteLine(operationInfo);\n\n```\n\n\n\n**Response:**\n\n\n\n```python\n\noperation_id=0 status=<UpdateStatus.COMPLETED: \'completed\'>\n\n```\n\n\n\n```typescript\n\n{ operation_id: 0, status: \'completed\' }\n\n```\n\n\n\n```rust\n\nPointsOperationResponse {\n\n    result: Some(UpdateResult {\n\n        operation_id: 0,\n\n        status: Completed,\n\n    }),\n\n    time: 0.006347708,\n\n}\n\n```\n\n\n\n```java\n\noperation_id: 0\n\nstatus: Completed\n\n```\n\n\n\n```csharp\n\n{ ""operationId"": ""0"", ""status"": ""Completed"" }\n\n```\n\n\n\n## Run a query\n\n\n\nLet\'s ask a basic question - Which of our stored vectors are most similar to the query vector `[0.2, 0.1, 0.9, 0.7]`?\n\n\n\n```python\n\nsearch_result = client.search(\n\n    collection_name=""test_collection"", query_vector=[0.2, 0.1, 0.9, 0.7], limit=3\n\n)\n\n\n\nprint(search_result)\n\n```\n\n\n\n```typescript\n\nlet searchResult = await client.search(""test_collection"", {\n\n  vector: [0.2, 0.1, 0.9, 0.7],\n\n  limit: 3,\n\n});\n\n\n\nconsole.debug(searchResult);\n\n```\n\n\n\n```rust\n\nuse qdrant_client::qdrant::SearchPoints;\n\n\n\nlet search_result = client\n\n    .search_points(&SearchPoints {\n\n        collection_name: ""test_collection"".to_string(),\n\n        vector: vec![0.2, 0.1, 0.9, 0.7],\n\n        limit: 3,\n\n        with_payload: Some(true.into()),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n\n\ndbg!(search_result);\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport io.qdrant.client.grpc.Points.ScoredPoint;\n\nimport io.qdrant.client.grpc.Points.SearchPoints;\n\n\n\nimport static io.qdrant.client.WithPayloadSelectorFactory.enable;\n\n\n\nList<ScoredPoint> searchResult =\n\n    client\n\n        .searchAsync(\n\n            SearchPoints.newBuilder()\n\n                .setCollectionName(""test_collection"")\n\n                .setLimit(3)\n\n                .addAllVector(List.of(0.2f, 0.1f, 0.9', ';\n\n\n\nvar operationInfo = await client.UpsertAsync(\n\n\tcollectionName: ""test_collection"",\n\n\tpoints: new List<PointStruct>\n\n\t{\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tId = 1,\n\n\t\t\tVectors = new float[] { 0.05f, 0.61f, 0.76f, 0.74f },\n\n\t\t\tPayload = { [""city""] = ""Berlin"" }\n\n\t\t},\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tId = 2,\n\n\t\t\tVectors = new float[] { 0.19f, 0.81f, 0.75f, 0.11f },\n\n\t\t\tPayload = { [""city""] = ""London"" }\n\n\t\t},\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tId = 3,\n\n\t\t\tVectors = new float[] { 0.36f, 0.55f, 0.47f, 0.94f },\n\n\t\t\tPayload = { [""city""] = ""Moscow"" }\n\n\t\t},\n\n\t\t// Truncated\n\n\t}\n\n);\n\n\n\nConsole.WriteLine(operationInfo);\n\n```\n\n\n\n**Response:**\n\n\n\n```python\n\noperation_id=0 status=<UpdateStatus.COMPLETED: \'completed\'>\n\n```\n\n\n\n```typescript\n\n{ operation_id: 0, status: \'completed\' }\n\n```\n\n\n\n```rust\n\nPointsOperationResponse {\n\n    result: Some(UpdateResult {\n\n        operation_id: 0,\n\n        status: Completed,\n\n    }),\n\n    time: 0.006347708,\n\n}\n\n```\n\n\n\n```java\n\noperation_id: 0\n\nstatus: Completed\n\n```\n\n\n\n```csharp\n\n{ ""operationId"": ""0"", ""status"": ""Completed"" }\n\n```\n\n\n\n## Run a query\n\n\n\nLet\'s ask a basic question - Which of our stored vectors are most similar to the query vector `[0.2, 0.1, 0.9, 0.7]`?\n\n\n\n```python\n\nsearch_result = client.search(\n\n    collection_name=""test_collection"", query_vector=[0.2, 0.1, 0.9, 0.7], limit=3\n\n)\n\n\n\nprint(search_result)\n\n```\n\n\n\n```typescript\n\nlet searchResult = await client.search(""test_collection"", {\n\n  vector: [0.2, 0.1, 0.9, 0.7],\n\n  limit: 3,\n\n});\n\n\n\nconsole.debug(searchResult);\n\n```\n\n\n\n```rust\n\nuse qdrant_client::qdrant::SearchPoints;\n\n\n\nlet search_result = client\n\n    .search_points(&SearchPoints {\n\n        collection_name: ""test_collection"".to_string(),\n\n        vector: vec![0.2, 0.1, 0.9, 0.7],\n\n        limit: 3,\n\n        with_payload: Some(true.into()),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n\n\ndbg!(search_result);\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport io.qdrant.client.grpc.Points.ScoredPoint;\n\nimport io.qdrant.client.grpc.Points.SearchPoints;\n\n\n\nimport static io.qdrant.client.WithPayloadSelectorFactory.enable;\n\n\n\nList<ScoredPoint> searchResult =\n\n    client\n\n        .searchAsync(\n\n            SearchPoints.newBuilder()\n\n                .setCollectionName(""test_collection"")\n\n                .setLimit(3)\n\n                .addAllVector(List.of(0.2f, 0.1f, 0.9']",nan,reasoning,"[{'source': 'documentation/quick-start.md'}, {'source': 'documentation/quick-start.md'}]",True
6,How does the Qdrant Startup Search demo perform semantic search using vectorized startup descriptions and a pre-trained SentenceTransformer model?,['---\n\ndraft: false\n\ntitle: Startup Search\n\nshort_description: Qdrant Startup Search. This demo uses short descriptions of startups to perform a semantic search\n\ndescription: This demo uses short descriptions of startups to perform a semantic search. Each startup description converted into a vector using a pre-trained SentenceTransformer model and uploaded to the Qdrant vector search engine. Demo service processes text input with the same model and uses its output to query Qdrant for similar vectors. You can turn neural search on and off to compare the result with regular full-text search.\n\npreview_image: /demo/startup_search_demo.jpg\n\nlink: https://qdrant.to/semantic-search-demo\n\nweight: 1\n\nsitemapExclude: True\n\n---\n'],This demo uses short descriptions of startups to perform a semantic search. Each startup description is converted into a vector using a pre-trained SentenceTransformer model and uploaded to the Qdrant vector search engine. The demo service processes text input with the same model and uses its output to query Qdrant for similar vectors.,reasoning,[{'source': 'demo/demo-1.md'}],True
7,"How does the Qdrant Startup Search demo use short descriptions for semantic search, and how is it different from full-text search?",['---\n\ndraft: false\n\ntitle: Startup Search\n\nshort_description: Qdrant Startup Search. This demo uses short descriptions of startups to perform a semantic search\n\ndescription: This demo uses short descriptions of startups to perform a semantic search. Each startup description converted into a vector using a pre-trained SentenceTransformer model and uploaded to the Qdrant vector search engine. Demo service processes text input with the same model and uses its output to query Qdrant for similar vectors. You can turn neural search on and off to compare the result with regular full-text search.\n\npreview_image: /demo/startup_search_demo.jpg\n\nlink: https://qdrant.to/semantic-search-demo\n\nweight: 1\n\nsitemapExclude: True\n\n---\n'],This demo uses short descriptions of startups to perform a semantic search. Each startup description is converted into a vector using a pre-trained SentenceTransformer model and uploaded to the Qdrant vector search engine. The demo service processes text input with the same model and uses its output to query Qdrant for similar vectors. The neural search can be turned on and off to compare the result with regular full-text search.,multi_context,[{'source': 'demo/demo-1.md'}],True
8,"What community resources are available for building a semantic search stack using Qdrant, HuggingFace, SentenceTransformers, and transformers.js?","['---\n\ntitle: Community links\n\nweight: 42\n\n---\n\n\n\n# Community Contributions\n\n\n\nThough we do not officially maintain this content, we still feel that is is valuable and thank our dedicated contributors. \n\n\n\n| Link | Description                  | Stack  |   \n\n|------|------------------------------|--------|\n\n| [Pinecone to Qdrant Migration](https://github.com/NirantK/qdrant_tools)       | Complete python toolset that supports migration between two products.       | Qdrant, Pinecone |  \n\n| [LlamaIndex Support for Qdrant](https://gpt-index.readthedocs.io/en/latest/examples/vector_stores/QdrantIndexDemo.html)   | Documentation on common integrations with LlamaIndex.    | Qdrant, LlamaIndex |   \n\n| [Geo.Rocks Semantic Search Tutorial](https://geo.rocks/post/qdrant-transformers-js-semantic-search/)           | Create a fully working semantic search stack with a built in search API and a minimal stack.  | Qdrant, HuggingFace, SentenceTransformers, transformers.js | \n']","The community resources available for building a semantic search stack using Qdrant, HuggingFace, SentenceTransformers, and transformers.js include:

- [Geo.Rocks Semantic Search Tutorial](https://geo.rocks/post/qdrant-transformers-js-semantic-search/): This tutorial provides guidance on creating a fully working semantic search stack with a built-in search API and a minimal stack.

",multi_context,[{'source': 'documentation/community-links.md'}],True
9,How does the multi-language model help categorize e-commerce products based on their descriptions and summaries?,"['---\n\ndraft: false\n\ntitle: E-commerce products categorization\n\nshort_description: E-commerce products categorization demo from Qdrant vector database\n\ndescription: This demo shows how you can use vector database in e-commerce. Enter the name of the product and the application will understand which category it belongs to, based on the multi-language model. The dots represent clusters of products.\n\npreview_image: /demo/products_categorization_demo.jpg\n\nlink: https://qdrant.to/extreme-classification-demo\n\nweight: 3\n\nsitemapExclude: True\n\n---\n']",nan,multi_context,[{'source': 'demo/demo-3.md'}],True
