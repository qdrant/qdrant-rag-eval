input_text,answer,documents,context
What is vaccum optimizer ?,"The Vacuum Optimizer is a feature in the Qdrant database designed to manage and improve system performance by removing obsolete data. In Qdrant, when records are deleted, they are not immediately removed from the database. Instead, they are marked as deleted and subsequently ignored in future queries. This approach helps minimize disk access but results in accumulated deleted records that can occupy valuable memory and degrade performance over time.
The Vacuum Optimizer addresses this issue by systematically clearing out these marked-as-deleted records once they reach a certain threshold. This threshold is configurable and includes conditions such as the minimum fraction of deleted vectors in a segment and the minimum number of vectors present in a segment. ","['So, for example, if the number of points is less than 10000, using any index would be less efficient than a brute force scan.\n\n\n\nThe Indexing Optimizer is used to implement the enabling of indexes and memmap storage when the minimal amount of records is reached.\n\n\n\nThe criteria for starting the optimizer are defined in the configuration file.\n\n\n\nHere is an example of parameter values:\n\n\n\n```yaml\n\nstorage:\n\n  optimizers:\n\n    # Maximum size (in kilobytes) of vectors to store in-memory per segment.', '#### Optimization with Web Workers', 'collection_name: ""{collection_name}"".to_string(),\n\n        vectors_config: Some(VectorsConfig {\n\n            config: Some(Config::Params(VectorParams {\n\n                size: 768,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        optimizers_config: Some(OptimizersConfigDiff {\n\n            memmap_threshold: Some(20000),\n\n            ..Default::default()\n\n        }),\n\n        hnsw_config: Some(HnswConfigDiff {', 'config: Some(Config::Params(VectorParams {\n\n                size: 768,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        optimizers_config: Some(OptimizersConfigDiff {\n\n            memmap_threshold: Some(20000),\n\n            ..Default::default()\n\n        }),\n\n        hnsw_config: Some(HnswConfigDiff {\n\n            on_disk: Some(true),\n\n            ..Default::default()\n\n        }),\n\n        ..Default::default()', ""So it's a shorthand to say that they optimize CPU performance. I think the more correct way to look at it is that we use the CPU better. But let's talk about optimization or quantization, which we do here, right? So most of what we do is from optimum and the way optimum call set up is they call these levels. So you can basically go from let's say level zero, which is there are no optimizations to let's say 99 where there's a bunch of extra optimizations happening""]","So, for example, if the number of points is less than 10000, using any index would be less efficient than a brute force scan.



The Indexing Optimizer is used to implement the enabling of indexes and memmap storage when the minimal amount of records is reached.



The criteria for starting the optimizer are defined in the configuration file.



Here is an example of parameter values:



```yaml

storage:

  optimizers:

    # Maximum size (in kilobytes) of vectors to store in-memory per segment.
#### Optimization with Web Workers
collection_name: ""{collection_name}"".to_string(),

        vectors_config: Some(VectorsConfig {

            config: Some(Config::Params(VectorParams {

                size: 768,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        optimizers_config: Some(OptimizersConfigDiff {

            memmap_threshold: Some(20000),

            ..Default::default()

        }),

        hnsw_config: Some(HnswConfigDiff {
config: Some(Config::Params(VectorParams {

                size: 768,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        optimizers_config: Some(OptimizersConfigDiff {

            memmap_threshold: Some(20000),

            ..Default::default()

        }),

        hnsw_config: Some(HnswConfigDiff {

            on_disk: Some(true),

            ..Default::default()

        }),

        ..Default::default()
So it's a shorthand to say that they optimize CPU performance. I think the more correct way to look at it is that we use the CPU better. But let's talk about optimization or quantization, which we do here, right? So most of what we do is from optimum and the way optimum call set up is they call these levels. So you can basically go from let's say level zero, which is there are no optimizations to let's say 99 where there's a bunch of extra optimizations happening"
Tell me about ‘always_ram’ parameter?,"In the context of vector quantization in Qdrant, the 'always_ram' parameter determines whether quantized vectors should be kept always cached in RAM or not. By default, quantized vectors are loaded in the same manner as the original vectors. Setting 'always_ram' to true ensures that the quantized vectors are consistently cached in RAM, providing faster access times.","['Using quantiles lower than `1.0` might be useful if there are outliers in your vector components.\n\nThis parameter only affects the resulting precision and not the memory footprint.\n\nIt might be worth tuning this parameter if you experience a significant decrease in search quality.\n\n\n\n`always_ram` - whether to keep quantized vectors always cached in RAM or not. By default, quantized vectors are loaded in the same way as the original vectors.', 'always_ram: Some(true),\n\n            })),\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.BinaryQuantization;\n\nimport io.qdrant.client.grpc.Collections.CreateCollection;\n\nimport io.qdrant.client.grpc.Collections.Distance;\n\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;', '""size"": 1536,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""quantization_config"": {\n\n        ""binary"": {\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),', '```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(', 'This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": false\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models']","Using quantiles lower than `1.0` might be useful if there are outliers in your vector components.

This parameter only affects the resulting precision and not the memory footprint.

It might be worth tuning this parameter if you experience a significant decrease in search quality.



`always_ram` - whether to keep quantized vectors always cached in RAM or not. By default, quantized vectors are loaded in the same way as the original vectors.
always_ram: Some(true),

            })),

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.BinaryQuantization;

import io.qdrant.client.grpc.Collections.CreateCollection;

import io.qdrant.client.grpc.Collections.Distance;

import io.qdrant.client.grpc.Collections.QuantizationConfig;
""size"": 1536,

      ""distance"": ""Cosine""

    },

    ""quantization_config"": {

        ""binary"": {

            ""always_ram"": true

        }

    }

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),
```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": true

        }

    }

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(
This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": false

        }

    }

}

```



```python

from qdrant_client import QdrantClient, models"
What is difference between scalar and product quantization?,"While both methods aim to reduce the memory footprint and potentially speed up operations, scalar quantization offers faster processing with SIMD-friendly operations and minimal accuracy loss, making it suitable for scenarios where speed is critical. Product quantization achieves higher compression rates and is better suited for handling very high-dimensional vectors where memory space is more of a concern than computation speed.","['<td>474 s</td>\n\n      </tr>\n\n   </tbody>\n\n</table>\n\n\n\nIt turns out that in some cases, Product Quantization may not only reduce the memory usage, \n\nbut also the search time.\n\n\n\n## Good practices\n\n\n\nCompared to Scalar Quantization, Product Quantization offers a higher compression rate. However, this comes with considerable trade-offs in accuracy, and at times, in-RAM search speed.\n\n\n\nProduct Quantization tends to be favored in certain specific scenarios:', '* **Product Quantization** may provide a better compression ratio, but it has a significant loss of accuracy and is slower than scalar quantization. It is recommended if the memory footprint is the top priority and the search speed is not critical.\n\n\n\n## Setting up Quantization in Qdrant\n\n\n\nYou can configure quantization for a collection by specifying the quantization parameters in the `quantization_config` section of the collection configuration.', '- Deployment in a low-RAM environment where the limiting factor is the number of disk reads rather than the vector comparison itself\n\n- Situations where the dimensionality of the original vectors is sufficiently high\n\n- Cases where indexing speed is not a critical factor\n\n\n\nIn circumstances that do not align with the above, Scalar Quantization should be the preferred choice.\n\n\n\nQdrant documentation on [Product Quantization](/documentation/guides/quantization/#setting-up-product-quantization)', 'But there are some tradeoffs. Product quantization distance calculations are not SIMD-friendly, so it is slower than scalar quantization.\n\nAlso, product quantization has a loss of accuracy, so it is recommended to use it only for high-dimensional vectors.\n\n\n\nPlease refer to the [Quantization Tips](#quantization-tips) section for more information on how to optimize the quantization parameters for your use case.\n\n\n\n## How to choose the right quantization method', '<td>0.993</td>\n\n         <td>0.060</td>\n\n         <td>0.996</td>\n\n         <td>0.115</td>\n\n      </tr>\n\n      <tr>\n\n         <td>Difference</td>\n\n         <td><span style=""color: green;"">-23.57%</span></td>\n\n         <td><span style=""color: red;"">-0.3%</span></td>\n\n         <td><span style=""color: green;"">-60.64%</span></td>\n\n         <td><span style=""color: red;"">-0.1%</span></td>\n\n         <td><span style=""color: green;"">-35.62%</span></td>\n\n         <td>0%</td>']","<td>474 s</td>

      </tr>

   </tbody>

</table>



It turns out that in some cases, Product Quantization may not only reduce the memory usage, 

but also the search time.



## Good practices



Compared to Scalar Quantization, Product Quantization offers a higher compression rate. However, this comes with considerable trade-offs in accuracy, and at times, in-RAM search speed.



Product Quantization tends to be favored in certain specific scenarios:
* **Product Quantization** may provide a better compression ratio, but it has a significant loss of accuracy and is slower than scalar quantization. It is recommended if the memory footprint is the top priority and the search speed is not critical.



## Setting up Quantization in Qdrant



You can configure quantization for a collection by specifying the quantization parameters in the `quantization_config` section of the collection configuration.
- Deployment in a low-RAM environment where the limiting factor is the number of disk reads rather than the vector comparison itself

- Situations where the dimensionality of the original vectors is sufficiently high

- Cases where indexing speed is not a critical factor



In circumstances that do not align with the above, Scalar Quantization should be the preferred choice.



Qdrant documentation on [Product Quantization](/documentation/guides/quantization/#setting-up-product-quantization)
But there are some tradeoffs. Product quantization distance calculations are not SIMD-friendly, so it is slower than scalar quantization.

Also, product quantization has a loss of accuracy, so it is recommended to use it only for high-dimensional vectors.



Please refer to the [Quantization Tips](#quantization-tips) section for more information on how to optimize the quantization parameters for your use case.



## How to choose the right quantization method
<td>0.993</td>

         <td>0.060</td>

         <td>0.996</td>

         <td>0.115</td>

      </tr>

      <tr>

         <td>Difference</td>

         <td><span style=""color: green;"">-23.57%</span></td>

         <td><span style=""color: red;"">-0.3%</span></td>

         <td><span style=""color: green;"">-60.64%</span></td>

         <td><span style=""color: red;"">-0.1%</span></td>

         <td><span style=""color: green;"">-35.62%</span></td>

         <td>0%</td>"
What is ‘best_score’ strategy?,"The `best_score` strategy is based on the idea of finding similar vectors by identifying those that are closer to a positive example while avoiding those that are closer to a negative one. This strategy measures each candidate against every example and selects the best positive and best negative scores. The final score is determined using a specific formula: if the best positive score is greater than the best negative score, the final score is set as the best positive score. Otherwise, the final score is calculated as the negative of the square of the best negative score. It is important to note that the performance of the `best_score` strategy is linearly impacted by the number of examples provided.","['This is the default strategy that\'s going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.\n\n\n\n### Best score strategy\n\n\n\n*Available as of v1.6.0*\n\n\n\nA new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.', '### The new hotness - Best score\n\n\n\nThe new strategy is called `best_score`. It does not rely on averages and is more flexible. It allows you to pass just negative \n\nsamples and uses a slightly more sophisticated algorithm under the hood.\n\n\n\nThe best score is chosen at every step of HNSW graph traversal. We separately calculate the distance between a traversed point \n\nand every positive and negative example. In the case of the best score strategy, **there is no single query vector anymore, but a', 'The way it works is that each candidate is measured against every example, then we select the best positive and best negative scores. The final score is chosen with this step formula:\n\n\n\n```rust\n\nlet score = if best_positive_score > best_negative_score {\n\n    best_positive_score;\n\n} else {\n\n    -(best_negative_score * best_negative_score);\n\n};\n\n```\n\n\n\n<aside role=""alert"">\n\nThe performance of <code>best_score</code> strategy will be linearly impacted by the amount of examples.\n\n</aside>', '```\n\n\n\nExample result of this API would be\n\n\n\n```json\n\n{\n\n  ""result"": [\n\n    { ""id"": 10, ""score"": 0.81 },\n\n    { ""id"": 14, ""score"": 0.75 },\n\n    { ""id"": 11, ""score"": 0.73 }\n\n  ],\n\n  ""status"": ""ok"",\n\n  ""time"": 0.001\n\n}\n\n```\n\n\n\nThe algorithm used to get the recommendations is selected from the available `strategy` options. Each of them has its own strengths and weaknesses, so experiment and choose the one that works best for your case.\n\n\n\n### Average vector strategy', '##### One positive and one negative example\n\n\n\n<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>\n\n\n\nThe more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there \n\nis just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making \n\nthe variety richer.']","This is the default strategy that's going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.



### Best score strategy



*Available as of v1.6.0*



A new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.
### The new hotness - Best score



The new strategy is called `best_score`. It does not rely on averages and is more flexible. It allows you to pass just negative 

samples and uses a slightly more sophisticated algorithm under the hood.



The best score is chosen at every step of HNSW graph traversal. We separately calculate the distance between a traversed point 

and every positive and negative example. In the case of the best score strategy, **there is no single query vector anymore, but a
The way it works is that each candidate is measured against every example, then we select the best positive and best negative scores. The final score is chosen with this step formula:



```rust

let score = if best_positive_score > best_negative_score {

    best_positive_score;

} else {

    -(best_negative_score * best_negative_score);

};

```



<aside role=""alert"">

The performance of <code>best_score</code> strategy will be linearly impacted by the amount of examples.

</aside>
```



Example result of this API would be



```json

{

  ""result"": [

    { ""id"": 10, ""score"": 0.81 },

    { ""id"": 14, ""score"": 0.75 },

    { ""id"": 11, ""score"": 0.73 }

  ],

  ""status"": ""ok"",

  ""time"": 0.001

}

```



The algorithm used to get the recommendations is selected from the available `strategy` options. Each of them has its own strengths and weaknesses, so experiment and choose the one that works best for your case.



### Average vector strategy
##### One positive and one negative example



<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>



The more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there 

is just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making 

the variety richer."
How does oversampling helps?,"Defines how many extra vectors should be pre-selected using quantized index, and then re-scored using original vectors. For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring. Oversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time.","['oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.', '- **Oversampling**: By oversampling, we can limit the loss of information inherent in quantization. This also helps to preserve the semantic richness of your OpenAI embeddings. We experimented with different oversampling factors, and identified the impact on the accuracy and efficiency of search. Spoiler: higher oversampling factors tend to improve the accuracy of searches. However, they usually require more computational resources.', 'We see that ""correct"" results i.e. recall increases as the number of potential ""candidates"" increase (limit x oversampling). To highlight the impact of changing the `limit`, different limit values are broken apart into different curves. For example, we see that the lowest recall for limit 50 is around 94 correct, with 100 candidates. This also implies we used an oversampling of 2.0\n\n\n\nAs oversampling increases, we see a general improvement in results – but that does not hold in every case.', 'Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user', 'IO-induced delays.\n\n\n\nOversampling is a new feature to improve accuracy at the cost of some\n\nperformance. It allows setting a factor, which is multiplied with the `limit`\n\nwhile doing the search. The results are then re-scored using the original vector\n\nand only then the top results up to the limit are selected.\n\n\n\n## Discussion\n\n\n\nLooking back, disk IO used to be very serialized; re-positioning read-write\n\nheads on moving platter was a slow and messy business. So the system overhead']","oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.
- **Oversampling**: By oversampling, we can limit the loss of information inherent in quantization. This also helps to preserve the semantic richness of your OpenAI embeddings. We experimented with different oversampling factors, and identified the impact on the accuracy and efficiency of search. Spoiler: higher oversampling factors tend to improve the accuracy of searches. However, they usually require more computational resources.
We see that ""correct"" results i.e. recall increases as the number of potential ""candidates"" increase (limit x oversampling). To highlight the impact of changing the `limit`, different limit values are broken apart into different curves. For example, we see that the lowest recall for limit 50 is around 94 correct, with 100 candidates. This also implies we used an oversampling of 2.0



As oversampling increases, we see a general improvement in results – but that does not hold in every case.
Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user
IO-induced delays.



Oversampling is a new feature to improve accuracy at the cost of some

performance. It allows setting a factor, which is multiplied with the `limit`

while doing the search. The results are then re-scored using the original vector

and only then the top results up to the limit are selected.



## Discussion



Looking back, disk IO used to be very serialized; re-positioning read-write

heads on moving platter was a slow and messy business. So the system overhead"
What is the purpose of ‘CreatePayloadIndexAsync’?,CreatePayloadIndexAsync is a method in the Qdrant library that enables the creation of a payload index in Qdrant. A payload index is a data structure designed to store supplemental information about the data stored in Qdrant. This method requires a Qdrant instance and a payload index name as input parameters.,"['client\n\n    .createPayloadIndexAsync(\n\n        ""{collection_name}"",\n\n        ""name_of_the_field_to_index"",\n\n        PayloadSchemaType.Keyword,\n\n        null,\n\n        null,\n\n        null,\n\n        null)\n\n    .get();\n\n```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""name_of_the_field_to_index"");\n\n```\n\n\n\nAvailable field types are:', '---\n\ndraft: false\n\nimage: ""content/images/logos/alphasense-logo-mono""\n\nname: ""AlphaSense""\n\nsitemapExclude: True\n\n---', '""type"": ""user_http"",\n\n    ""authorization_type"": ""bearer""\n\n  },\n\n  ""api"": {\n\n    ""type"": ""openapi"",\n\n    ""url"": ""https://your-application-name.fly.dev/.well-known/openapi.yaml"",\n\n    ""has_user_authentication"": false\n\n  },\n\n  ""logo_url"": ""https://your-application-name.fly.dev/.well-known/logo.png"",\n\n  ""contact_email"": ""email@domain.com"",\n\n  ""legal_info_url"": ""email@domain.com""\n\n}\n\n```\n\n\n\nThat was the last step before running the final command. The command that will deploy', 'const client = new QdrantClient({ host: ""localhost"", port: 6333 });\n\n\n\nclient.createPayloadIndex(""{collection_name}"", {\n\n  field_name: ""name_of_the_field_to_index"",\n\n  field_schema: {\n\n    type: ""text"",\n\n    tokenizer: ""word"",\n\n    min_token_len: 2,\n\n    max_token_len: 15,\n\n    lowercase: true,\n\n  },\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::{\n\n    client::QdrantClient,\n\n    qdrant::{\n\n        payload_index_params::IndexParams, FieldType, PayloadIndexParams, TextIndexParams,\n\n        TokenizerType,', '.get();\n\n```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""group_id"");\n\n```\n\n\n\n## Limitations\n\n\n\nOne downside to this approach is that global requests (without the `group_id` filter) will be slower since they will necessitate scanning all groups to identify the nearest neighbors.']","client

    .createPayloadIndexAsync(

        ""{collection_name}"",

        ""name_of_the_field_to_index"",

        PayloadSchemaType.Keyword,

        null,

        null,

        null,

        null)

    .get();

```



```csharp

using Qdrant.Client;



var client = new QdrantClient(""localhost"", 6334);



await client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""name_of_the_field_to_index"");

```



Available field types are:
---

draft: false

image: ""content/images/logos/alphasense-logo-mono""

name: ""AlphaSense""

sitemapExclude: True

---
""type"": ""user_http"",

    ""authorization_type"": ""bearer""

  },

  ""api"": {

    ""type"": ""openapi"",

    ""url"": ""https://your-application-name.fly.dev/.well-known/openapi.yaml"",

    ""has_user_authentication"": false

  },

  ""logo_url"": ""https://your-application-name.fly.dev/.well-known/logo.png"",

  ""contact_email"": ""email@domain.com"",

  ""legal_info_url"": ""email@domain.com""

}

```



That was the last step before running the final command. The command that will deploy
const client = new QdrantClient({ host: ""localhost"", port: 6333 });



client.createPayloadIndex(""{collection_name}"", {

  field_name: ""name_of_the_field_to_index"",

  field_schema: {

    type: ""text"",

    tokenizer: ""word"",

    min_token_len: 2,

    max_token_len: 15,

    lowercase: true,

  },

});

```



```rust

use qdrant_client::{

    client::QdrantClient,

    qdrant::{

        payload_index_params::IndexParams, FieldType, PayloadIndexParams, TextIndexParams,

        TokenizerType,
.get();

```



```csharp

using Qdrant.Client;



var client = new QdrantClient(""localhost"", 6334);



await client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""group_id"");

```



## Limitations



One downside to this approach is that global requests (without the `group_id` filter) will be slower since they will necessitate scanning all groups to identify the nearest neighbors."
What is the purpose of ef_construct in HNSW ?,"In HNSW algorithm the ef_construct parameter is the number of neighbours to consider during the index building. The larger the value, the higher the precision, but the longer the indexing time. The default values of this parameters 100","['In order to improve performance, HNSW limits the maximum degree of nodes on each layer of the graph to `m`. In addition, you can use `ef_construct` (when building index) or `ef` (when searching targets) to specify a search range.\n\n\n\nThe corresponding parameters could be configured in the configuration file:\n\n\n\n```yaml\n\nstorage:\n\n  # Default parameters of HNSW Index. Could be overridden for each collection or named vector individually\n\n  hnsw_index:\n\n    # Number of edges per node in the index graph.', ""Rishabh Bhardwaj:\n\nSo should I go with the slide first or should I answer your question first?\n\n\n\nDemetrios:\n\nProbably answer the question so we don't get too far off track, and then we can hit up your slides. And the slides, I'm sure, will prompt many other questions from my side and the audience's side.\n\n\n\nRishabh Bhardwaj:\n\nSo, for HNSW configuration, we have specified the value of M, which is, I think, basically the layers as 64, and the value for EF construct is 256.\n\n\n\nDemetrios:"", '(""my_vector"".into()),\n\n                        VectorParamsDiff {\n\n                            hnsw_config: Some(HnswConfigDiff {\n\n                                m: Some(32),\n\n                                ef_construct: Some(123),\n\n                                ..Default::default()\n\n                            }),\n\n                            ..Default::default()\n\n                        },\n\n                    )]),\n\n                },\n\n            )),\n\n        }),', '""hnsw_config"": {\n\n        ""ef_construct"": 123\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""quantile"": 0.8,\n\n            ""always_ram"": false\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```bash\n\ncurl -X PATCH http://localhost:6333/collections/test_collection1 \\\n\n  -H \'Content-Type: application/json\' \\\n\n  --data-raw \'{\n\n    ""vectors"": {\n\n        ""my_vector"": {\n\n            ""hnsw_config"": {\n\n                ""m"": 32,\n\n                ""ef_construct"": 123', '""m"": 32,\n\n                ""ef_construct"": 123\n\n            },\n\n            ""quantization_config"": {\n\n                ""product"": {\n\n                    ""compression"": ""x32"",\n\n                    ""always_ram"": true\n\n                }\n\n            },\n\n            ""on_disk"": true\n\n        }\n\n    },\n\n    ""hnsw_config"": {\n\n        ""ef_construct"": 123\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""quantile"": 0.8,']","In order to improve performance, HNSW limits the maximum degree of nodes on each layer of the graph to `m`. In addition, you can use `ef_construct` (when building index) or `ef` (when searching targets) to specify a search range.



The corresponding parameters could be configured in the configuration file:



```yaml

storage:

  # Default parameters of HNSW Index. Could be overridden for each collection or named vector individually

  hnsw_index:

    # Number of edges per node in the index graph.
Rishabh Bhardwaj:

So should I go with the slide first or should I answer your question first?



Demetrios:

Probably answer the question so we don't get too far off track, and then we can hit up your slides. And the slides, I'm sure, will prompt many other questions from my side and the audience's side.



Rishabh Bhardwaj:

So, for HNSW configuration, we have specified the value of M, which is, I think, basically the layers as 64, and the value for EF construct is 256.



Demetrios:
(""my_vector"".into()),

                        VectorParamsDiff {

                            hnsw_config: Some(HnswConfigDiff {

                                m: Some(32),

                                ef_construct: Some(123),

                                ..Default::default()

                            }),

                            ..Default::default()

                        },

                    )]),

                },

            )),

        }),
""hnsw_config"": {

        ""ef_construct"": 123

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""quantile"": 0.8,

            ""always_ram"": false

        }

    }

}

```



```bash

curl -X PATCH http://localhost:6333/collections/test_collection1 \

  -H 'Content-Type: application/json' \

  --data-raw '{

    ""vectors"": {

        ""my_vector"": {

            ""hnsw_config"": {

                ""m"": 32,

                ""ef_construct"": 123
""m"": 32,

                ""ef_construct"": 123

            },

            ""quantization_config"": {

                ""product"": {

                    ""compression"": ""x32"",

                    ""always_ram"": true

                }

            },

            ""on_disk"": true

        }

    },

    ""hnsw_config"": {

        ""ef_construct"": 123

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""quantile"": 0.8,"
How do you use ‘ordering’ parameter?,"Write ordering can be specified for any write request to serialize it through a single “leader” node, which ensures that all write operations (issued with the same ordering) are performed and observed sequentially. It is of 3 types weak , medium and strong and is used in python with additional param ordering=models.WriteOrdering.STRONG to upsert request.","['Since the `filter` parameter is specified, the search is performed only among those points that satisfy the filter condition.\n\nSee details of possible filters and their work in the [filtering](../filtering) section.\n\n\n\nExample result of this API would be\n\n\n\n```json\n\n{\n\n  ""result"": [\n\n    { ""id"": 10, ""score"": 0.81 },\n\n    { ""id"": 14, ""score"": 0.75 },\n\n    { ""id"": 11, ""score"": 0.73 }\n\n  ],\n\n  ""status"": ""ok"",\n\n  ""time"": 0.001\n\n}\n\n```\n\n\n\nThe `result` contains ordered by `score` list of found point ids.', '{""color"": ""blue""},\n\n        ],\n\n        vectors=[\n\n            [0.9, 0.1, 0.1],\n\n            [0.1, 0.9, 0.1],\n\n            [0.1, 0.1, 0.9],\n\n        ],\n\n    ),\n\n    ordering=""strong"",\n\n)\n\n```\n\n\n\n```typescript\n\nclient.upsert(""{collection_name}"", {\n\n  batch: {\n\n    ids: [1, 2, 3],\n\n    payloads: [{ color: ""red"" }, { color: ""green"" }, { color: ""blue"" }],\n\n    vectors: [\n\n      [0.9, 0.1, 0.1],\n\n      [0.1, 0.9, 0.1],\n\n      [0.1, 0.1, 0.9],\n\n    ],\n\n  },\n\n  ordering: ""strong"",\n\n});\n\n```', '```http\n\nPOST /collections/{collection_name}/points/payload\n\n{\n\n    ""payload"": {\n\n        ""property1"": ""string"",\n\n        ""property2"": ""string""\n\n    },\n\n    ""filter"": {\n\n        ""must"": [\n\n            {\n\n                ""key"": ""color"",\n\n                ""match"": {\n\n                    ""value"": ""red""\n\n                }\n\n            }\n\n        ]\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.set_payload(\n\n    collection_name=""{collection_name}"",\n\n    payload={\n\n        ""property1"": ""string"",', ');\n\n```\n\n\n\nThe rule of thumb to set the memmap threshold parameter is simple:\n\n\n\n- if you have a balanced use scenario - set memmap threshold the same as `indexing_threshold` (default is 20000). In this case the optimizer will not make any extra runs and will optimize all thresholds at once.', '{\n\n    ""filter"": {\n\n        ""must"": [\n\n            { ""key"": ""city"", ""match"": { ""value"": ""London"" } }\n\n        ],\n\n        ""must_not"": [\n\n            { ""key"": ""color"", ""match"": { ""value"": ""red"" } }\n\n        ]\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.scroll(\n\n    collection_name=""{collection_name}"",\n\n    scroll_filter=models.Filter(\n\n        must=[\n\n            models.FieldCondition(key=""city"", match=models.MatchValue(value=""London"")),\n\n        ],\n\n        must_not=[']","Since the `filter` parameter is specified, the search is performed only among those points that satisfy the filter condition.

See details of possible filters and their work in the [filtering](../filtering) section.



Example result of this API would be



```json

{

  ""result"": [

    { ""id"": 10, ""score"": 0.81 },

    { ""id"": 14, ""score"": 0.75 },

    { ""id"": 11, ""score"": 0.73 }

  ],

  ""status"": ""ok"",

  ""time"": 0.001

}

```



The `result` contains ordered by `score` list of found point ids.
{""color"": ""blue""},

        ],

        vectors=[

            [0.9, 0.1, 0.1],

            [0.1, 0.9, 0.1],

            [0.1, 0.1, 0.9],

        ],

    ),

    ordering=""strong"",

)

```



```typescript

client.upsert(""{collection_name}"", {

  batch: {

    ids: [1, 2, 3],

    payloads: [{ color: ""red"" }, { color: ""green"" }, { color: ""blue"" }],

    vectors: [

      [0.9, 0.1, 0.1],

      [0.1, 0.9, 0.1],

      [0.1, 0.1, 0.9],

    ],

  },

  ordering: ""strong"",

});

```
```http

POST /collections/{collection_name}/points/payload

{

    ""payload"": {

        ""property1"": ""string"",

        ""property2"": ""string""

    },

    ""filter"": {

        ""must"": [

            {

                ""key"": ""color"",

                ""match"": {

                    ""value"": ""red""

                }

            }

        ]

    }

}

```



```python

client.set_payload(

    collection_name=""{collection_name}"",

    payload={

        ""property1"": ""string"",
);

```



The rule of thumb to set the memmap threshold parameter is simple:



- if you have a balanced use scenario - set memmap threshold the same as `indexing_threshold` (default is 20000). In this case the optimizer will not make any extra runs and will optimize all thresholds at once.
{

    ""filter"": {

        ""must"": [

            { ""key"": ""city"", ""match"": { ""value"": ""London"" } }

        ],

        ""must_not"": [

            { ""key"": ""color"", ""match"": { ""value"": ""red"" } }

        ]

    }

}

```



```python

client.scroll(

    collection_name=""{collection_name}"",

    scroll_filter=models.Filter(

        must=[

            models.FieldCondition(key=""city"", match=models.MatchValue(value=""London"")),

        ],

        must_not=["
What is significance of ‘on_disk_payload’ setting?,"The `on_disk_payload` setting in the storage configuration determines whether a point's payload will be stored in memory or read from disk every time it is requested. When set to `true`, the point's payload will not be stored in memory, saving RAM but slightly increasing the response time as the data needs to be retrieved from disk. It is important to note that payload values involved in filtering and indexed values will still remain in RAM for efficient access. This setting allows for a balance between RAM usage and response time in handling data storage and retrieval processes.","['* `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.\n\n* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.\n\n* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.', 'To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""hnsw_config"": {\n\n        ""on_disk"": true\n\n    }\n\n}\n\n```\n\n\n\n```python', '""on_disk_payload"": false\n\n            },\n\n            ""hnsw_config"": {\n\n                ""m"": 16,\n\n                ""ef_construct"": 100,\n\n                ""full_scan_threshold"": 10000,\n\n                ""max_indexing_threads"": 0\n\n            },\n\n            ""optimizer_config"": {\n\n                ""deleted_threshold"": 0.2,\n\n                ""vacuum_min_vector_number"": 1000,\n\n                ""default_segment_number"": 0,\n\n                ""max_segment_size"": null,', ""temp_path: null\n\n\n\n  # If true - point's payload will not be stored in memory.\n\n  # It will be read from the disk every time it is requested.\n\n  # This setting saves RAM by (slightly) increasing the response time.\n\n  # Note: those payload values that are involved in filtering and are indexed - remain in RAM.\n\n  on_disk_payload: true\n\n\n\n  # Maximum number of concurrent updates to shard replicas\n\n  # If `null` - maximum concurrency is used.\n\n  update_concurrency: null"", '""on_disk"": true\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n\n    optimizers_config=models.OptimizersConfigDiff(memmap_threshold=20000),\n\n    hnsw_config=models.HnswConfigDiff(on_disk=True),\n\n)\n\n```\n\n\n\n```typescript']","* `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.

* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.

* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.
To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""hnsw_config"": {

        ""on_disk"": true

    }

}

```



```python
""on_disk_payload"": false

            },

            ""hnsw_config"": {

                ""m"": 16,

                ""ef_construct"": 100,

                ""full_scan_threshold"": 10000,

                ""max_indexing_threads"": 0

            },

            ""optimizer_config"": {

                ""deleted_threshold"": 0.2,

                ""vacuum_min_vector_number"": 1000,

                ""default_segment_number"": 0,

                ""max_segment_size"": null,
temp_path: null



  # If true - point's payload will not be stored in memory.

  # It will be read from the disk every time it is requested.

  # This setting saves RAM by (slightly) increasing the response time.

  # Note: those payload values that are involved in filtering and are indexed - remain in RAM.

  on_disk_payload: true



  # Maximum number of concurrent updates to shard replicas

  # If `null` - maximum concurrency is used.

  update_concurrency: null
""on_disk"": true

    }

}

```



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),

    optimizers_config=models.OptimizersConfigDiff(memmap_threshold=20000),

    hnsw_config=models.HnswConfigDiff(on_disk=True),

)

```



```typescript"
What is the impact of ‘write_consistency_factor’ ?,"The `write_consistency_factor` parameter in a distributed deployment using Qdrant defines the number of replicas that must acknowledge a write operation before responding to the client. By increasing this value, the write operations become more tolerant to network partitions within the cluster. However, this also means that a higher number of replicas need to be active in order to perform write operations successfully.","['### Write consistency factor\n\n\n\nThe `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to one by default.\n\nIt can be configured at the collection\'s creation time.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""size"": 300,\n\n        ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 6,\n\n    ""replication_factor"": 2,\n\n    ""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python', '- `write_consistency_factor` - defines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations tolerant to network partitions in the cluster, but will require a higher number of replicas to be active to perform write operations.', '""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n\n    shard_number=6,\n\n    replication_factor=2,\n\n    write_consistency_factor=2,\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";', 'collectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\n\tshardNumber: 6,\n\n\treplicationFactor: 2,\n\n\twriteConsistencyFactor: 2\n\n);\n\n```\n\n\n\nWrite operations will fail if the number of active replicas is less than the `write_consistency_factor`.\n\n\n\n### Read consistency\n\n\n\nRead `consistency` can be specified for most read requests and will ensure that the returned result\n\nis consistent across cluster nodes.', '""vectors_count"": 1068786,\n\n        ""indexed_vectors_count"": 1024232,\n\n        ""points_count"": 1068786,\n\n        ""segments_count"": 31,\n\n        ""config"": {\n\n            ""params"": {\n\n                ""vectors"": {\n\n                    ""size"": 384,\n\n                    ""distance"": ""Cosine""\n\n                },\n\n                ""shard_number"": 1,\n\n                ""replication_factor"": 1,\n\n                ""write_consistency_factor"": 1,\n\n                ""on_disk_payload"": false\n\n            },']","### Write consistency factor



The `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to one by default.

It can be configured at the collection's creation time.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 300,

        ""distance"": ""Cosine""

    },

    ""shard_number"": 6,

    ""replication_factor"": 2,

    ""write_consistency_factor"": 2,

}

```



```python
- `write_consistency_factor` - defines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations tolerant to network partitions in the cluster, but will require a higher number of replicas to be active to perform write operations.
""write_consistency_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),

    shard_number=6,

    replication_factor=2,

    write_consistency_factor=2,

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";
collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

	shardNumber: 6,

	replicationFactor: 2,

	writeConsistencyFactor: 2

);

```



Write operations will fail if the number of active replicas is less than the `write_consistency_factor`.



### Read consistency



Read `consistency` can be specified for most read requests and will ensure that the returned result

is consistent across cluster nodes.
""vectors_count"": 1068786,

        ""indexed_vectors_count"": 1024232,

        ""points_count"": 1068786,

        ""segments_count"": 31,

        ""config"": {

            ""params"": {

                ""vectors"": {

                    ""size"": 384,

                    ""distance"": ""Cosine""

                },

                ""shard_number"": 1,

                ""replication_factor"": 1,

                ""write_consistency_factor"": 1,

                ""on_disk_payload"": false

            },"
What is the purpose of oversampling in Qdrant search process?,Oversampling in Qdrant search process defines how many extra vectors should be pre-selected using quantized index and then re-scored using original vectors to improve search quality.,"['### Oversampling for quantization\n\n\n\nWe are introducing [oversampling](/documentation/guides/quantization/#oversampling) as a new way to help you improve the accuracy and performance of similarity search algorithms. With this method, you are able to significantly compress high-dimensional vectors in memory and then compensate the accuracy loss by re-scoring additional points with the original vectors.', '### Oversampling and Rescoring\n\n\n\nA distinctive feature of the Qdrant architecture is the ability to combine the search for quantized and original vectors in a single query.\n\nThis enables the best combination of speed, accuracy, and RAM usage.\n\n\n\nQdrant stores the original vectors, so it is possible to rescore the top-k results with\n\nthe original vectors after doing the neighbours search in quantized space. That obviously', '#### Set the oversampling factor via query:\n\n\n\nHere is how you can configure the oversampling factor - define how many extra vectors should be pre-selected using the quantized index, and then re-scored using original vectors.  \n\n\n\n```http\n\nPOST /collections/{collection_name}/points/search\n\n{\n\n  ""params"": {\n\n    ""quantization"": {\n\n      ""ignore"": false,\n\n      ""rescore"": true,\n\n      ""oversampling"": 2.4\n\n    }\n\n  },\n\n  ""vector"": [0.2, 0.1, 0.9, 0.7],\n\n  ""limit"": 100\n\n}\n\n```\n\n\n\n```python', '```http\n\nPOST /collections/{collection_name}/points/search\n\n{\n\n    ""params"": {\n\n        ""quantization"": {\n\n            ""ignore"": false,\n\n            ""rescore"": true,\n\n            ""oversampling"": 2.0\n\n        }\n\n    },\n\n    ""vector"": [0.2, 0.1, 0.9, 0.7],\n\n    ""limit"": 10\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.search(\n\n    collection_name=""{collection_name}"",', 'Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user']","### Oversampling for quantization



We are introducing [oversampling](/documentation/guides/quantization/#oversampling) as a new way to help you improve the accuracy and performance of similarity search algorithms. With this method, you are able to significantly compress high-dimensional vectors in memory and then compensate the accuracy loss by re-scoring additional points with the original vectors.
### Oversampling and Rescoring



A distinctive feature of the Qdrant architecture is the ability to combine the search for quantized and original vectors in a single query.

This enables the best combination of speed, accuracy, and RAM usage.



Qdrant stores the original vectors, so it is possible to rescore the top-k results with

the original vectors after doing the neighbours search in quantized space. That obviously
#### Set the oversampling factor via query:



Here is how you can configure the oversampling factor - define how many extra vectors should be pre-selected using the quantized index, and then re-scored using original vectors.  



```http

POST /collections/{collection_name}/points/search

{

  ""params"": {

    ""quantization"": {

      ""ignore"": false,

      ""rescore"": true,

      ""oversampling"": 2.4

    }

  },

  ""vector"": [0.2, 0.1, 0.9, 0.7],

  ""limit"": 100

}

```



```python
```http

POST /collections/{collection_name}/points/search

{

    ""params"": {

        ""quantization"": {

            ""ignore"": false,

            ""rescore"": true,

            ""oversampling"": 2.0

        }

    },

    ""vector"": [0.2, 0.1, 0.9, 0.7],

    ""limit"": 10

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.search(

    collection_name=""{collection_name}"",
Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user"
How does Qdrant address the search accuracy problem in comparison to other search engines using HNSW?,"Qdrant uses a different approach that does not require pre- or post-filtering, effectively addressing the accuracy problem while maintaining search efficiency.","['- Others use **pre-filtering**, which requires a binary mask of the whole dataset to be passed into the ANN algorithm. It is also not scalable, as the mask size grows linearly with the dataset size.\n\n\n\nOn top of it, there is also a problem with search accuracy.\n\nIt appears if too many vectors are filtered out, so the HNSW graph becomes disconnected.\n\n\n\nQdrant uses a different approach, not requiring pre- or post-filtering while addressing the accuracy problem.', 'but they usually [perform worse than HNSW in terms of quality and performance](https://nirantk.com/writing/pgvector-vs-qdrant/#correctness).', 'HNSW is chosen for several reasons.\n\nFirst, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search.\n\nSecond, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).\n\n\n\n*Available as of v1.1.1*\n\n\n\nThe HNSW parameters can also be configured on a collection and named vector\n\nlevel by setting [`hnsw_config`](../indexing/#vector-index) to fine-tune search\n\nperformance.', '. In this article, we will compare how Qdrant performs against the other vector search engines.', 'Read more about the Qdrant approach in our [Filtrable HNSW](/articles/filtrable-hnsw/) article.']","- Others use **pre-filtering**, which requires a binary mask of the whole dataset to be passed into the ANN algorithm. It is also not scalable, as the mask size grows linearly with the dataset size.



On top of it, there is also a problem with search accuracy.

It appears if too many vectors are filtered out, so the HNSW graph becomes disconnected.



Qdrant uses a different approach, not requiring pre- or post-filtering while addressing the accuracy problem.
but they usually [perform worse than HNSW in terms of quality and performance](https://nirantk.com/writing/pgvector-vs-qdrant/#correctness).
HNSW is chosen for several reasons.

First, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search.

Second, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).



*Available as of v1.1.1*



The HNSW parameters can also be configured on a collection and named vector

level by setting [`hnsw_config`](../indexing/#vector-index) to fine-tune search

performance.
. In this article, we will compare how Qdrant performs against the other vector search engines.
Read more about the Qdrant approach in our [Filtrable HNSW](/articles/filtrable-hnsw/) article."
What is the difference between regular and neural search?,"Regular full-text search involves searching for keywords within a document, while neural search considers the real meaning of the query and documents, allowing for more accurate results.","['**What is neural search?**\n\n\n\nA regular full-text search, such as Google’s, consists of searching for keywords inside a document. For this reason, the algorithm can not take into account the real meaning of the query and documents. Many documents that might be of interest to the user are not found because they use different wording.', 'In this tutorial we are going to find answers to these questions:\n\n\n\n* What is the difference between regular and neural search?\n\n* What neural networks could be used for search?\n\n* In what tasks is neural network search useful?\n\n* How to build and deploy own neural search service step-by-step?\n\n\n\n**What is neural search?**', ""These days, search technology is the heart of a variety of applications.\n\nFrom web-pages search to product recommendations.\n\nFor many years, this technology didn't get much change until neural networks came into play.\n\n\n\nIn this tutorial we are going to find answers to these questions:\n\n\n\n* What is the difference between regular and neural search?\n\n* What neural networks could be used for search?\n\n* In what tasks is neural network search useful?"", 'You can try it to get an intuition for cases when the neural search is useful. The demo contains a switch that selects between neural and full-text searches. You can turn neural search on and off to compare the result with regular full-text search. Try to use startup description to find similar ones.\n\n\n\n**Conclusion**', 'The demo contains a switch that selects between neural and full-text searches.\n\nYou can turn neural search on and off to compare the result with regular full-text search.\n\nTry to use startup description to find similar ones. \n\n\n\n## Conclusion\n\n\n\nIn this tutorial, I have tried to give minimal information about neural search, but enough to start using it.\n\nMany potential applications are not mentioned here, this is a space to go further into the subject.']","**What is neural search?**



A regular full-text search, such as Google’s, consists of searching for keywords inside a document. For this reason, the algorithm can not take into account the real meaning of the query and documents. Many documents that might be of interest to the user are not found because they use different wording.
In this tutorial we are going to find answers to these questions:



* What is the difference between regular and neural search?

* What neural networks could be used for search?

* In what tasks is neural network search useful?

* How to build and deploy own neural search service step-by-step?



**What is neural search?**
These days, search technology is the heart of a variety of applications.

From web-pages search to product recommendations.

For many years, this technology didn't get much change until neural networks came into play.



In this tutorial we are going to find answers to these questions:



* What is the difference between regular and neural search?

* What neural networks could be used for search?

* In what tasks is neural network search useful?
You can try it to get an intuition for cases when the neural search is useful. The demo contains a switch that selects between neural and full-text searches. You can turn neural search on and off to compare the result with regular full-text search. Try to use startup description to find similar ones.



**Conclusion**
The demo contains a switch that selects between neural and full-text searches.

You can turn neural search on and off to compare the result with regular full-text search.

Try to use startup description to find similar ones. 



## Conclusion



In this tutorial, I have tried to give minimal information about neural search, but enough to start using it.

Many potential applications are not mentioned here, this is a space to go further into the subject."
How can I use Qdrant as a vector store in Langchain Go?,"You can use Qdrant as a vector store in Langchain Go by installing the `langchain-go` project dependency and customizing the values for your configuration, such as the Qdrant REST URL and collection name.","['---\n\ntitle: Langchain Go\n\nweight: 120\n\n---\n\n\n\n# Langchain Go\n\n\n\n[Langchain Go](https://tmc.github.io/langchaingo/docs/) is a framework for developing data-aware applications powered by language models in Go.\n\n\n\nYou can use Qdrant as a vector store in Langchain Go.\n\n\n\n## Setup\n\n\n\nInstall the `langchain-go` project dependency\n\n\n\n```bash\n\ngo get -u github.com/tmc/langchaingo\n\n```\n\n\n\n## Usage\n\n\n\nBefore you use the following code sample, customize the following values for your configuration:', '```bash\n\npip install langchain\n\n```\n\n\n\nQdrant acts as a vector index that may store the embeddings with the documents used to generate them. There are various ways \n\nhow to use it, but calling `Qdrant.from_texts` is probably the most straightforward way how to get started:\n\n\n\n```python\n\nfrom langchain.vectorstores import Qdrant\n\nfrom langchain.embeddings import HuggingFaceEmbeddings\n\n\n\nembeddings = HuggingFaceEmbeddings(\n\n    model_name=""sentence-transformers/all-mpnet-base-v2""\n\n)', '""github.com/tmc/langchaingo/vectorstores""\n\n        ""github.com/tmc/langchaingo/vectorstores/qdrant""\n\n)\n\n\n\n llm, err := openai.New()\n\n if err != nil {\n\n  log.Fatal(err)\n\n }\n\n\n\n e, err := embeddings.NewEmbedder(llm)\n\n if err != nil {\n\n  log.Fatal(err)\n\n }\n\n\n\n url, err := url.Parse(""YOUR_QDRANT_REST_URL"")\n\n if err != nil {\n\n  log.Fatal(err)\n\n }\n\n\n\n store, err := qdrant.New(\n\n  qdrant.WithURL(*url),\n\n  qdrant.WithCollectionName(""YOUR_COLLECTION_NAME""),\n\n  qdrant.WithEmbedder(e),\n\n )\n\n if err != nil {', 'might also be found in the [LangChain documentation](https://python.langchain.com/docs/integrations/vectorstores/qdrant).', '- `YOUR_QDRANT_REST_URL`: If you\'ve set up Qdrant using the [Quick Start](/documentation/quick-start/) guide,\n\n  set this value to `http://localhost:6333`.\n\n- `YOUR_COLLECTION_NAME`: Use our [Collections](/documentation/concepts/collections) guide to create or\n\n  list collections.\n\n\n\n```go\n\nimport (\n\n        ""fmt""\n\n        ""log""\n\n\n\n        ""github.com/tmc/langchaingo/embeddings""\n\n        ""github.com/tmc/langchaingo/llms/openai""\n\n        ""github.com/tmc/langchaingo/vectorstores""']","---

title: Langchain Go

weight: 120

---



# Langchain Go



[Langchain Go](https://tmc.github.io/langchaingo/docs/) is a framework for developing data-aware applications powered by language models in Go.



You can use Qdrant as a vector store in Langchain Go.



## Setup



Install the `langchain-go` project dependency



```bash

go get -u github.com/tmc/langchaingo

```



## Usage



Before you use the following code sample, customize the following values for your configuration:
```bash

pip install langchain

```



Qdrant acts as a vector index that may store the embeddings with the documents used to generate them. There are various ways 

how to use it, but calling `Qdrant.from_texts` is probably the most straightforward way how to get started:



```python

from langchain.vectorstores import Qdrant

from langchain.embeddings import HuggingFaceEmbeddings



embeddings = HuggingFaceEmbeddings(

    model_name=""sentence-transformers/all-mpnet-base-v2""

)
""github.com/tmc/langchaingo/vectorstores""

        ""github.com/tmc/langchaingo/vectorstores/qdrant""

)



 llm, err := openai.New()

 if err != nil {

  log.Fatal(err)

 }



 e, err := embeddings.NewEmbedder(llm)

 if err != nil {

  log.Fatal(err)

 }



 url, err := url.Parse(""YOUR_QDRANT_REST_URL"")

 if err != nil {

  log.Fatal(err)

 }



 store, err := qdrant.New(

  qdrant.WithURL(*url),

  qdrant.WithCollectionName(""YOUR_COLLECTION_NAME""),

  qdrant.WithEmbedder(e),

 )

 if err != nil {
might also be found in the [LangChain documentation](https://python.langchain.com/docs/integrations/vectorstores/qdrant).
- `YOUR_QDRANT_REST_URL`: If you've set up Qdrant using the [Quick Start](/documentation/quick-start/) guide,

  set this value to `http://localhost:6333`.

- `YOUR_COLLECTION_NAME`: Use our [Collections](/documentation/concepts/collections) guide to create or

  list collections.



```go

import (

        ""fmt""

        ""log""



        ""github.com/tmc/langchaingo/embeddings""

        ""github.com/tmc/langchaingo/llms/openai""

        ""github.com/tmc/langchaingo/vectorstores"""
How did Dust leverage compression features in Qdrant to manage the balance between storing vectors on disk and keeping quantized vectors in RAM effectively?,Dust leveraged the control of the MMAP payload threshold and Scalar Quantization in Qdrant to manage the balance between storing vectors on disk and keeping quantized vectors in RAM effectively.,"['compression features](https://qdrant.tech/documentation/guides/quantization/). In particular, Dust leveraged the control of the [MMAP\n\npayload threshold](https://qdrant.tech/documentation/concepts/storage/#configuring-memmap-storage) as well as [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/), which enabled Dust to manage\n\nthe balance between storing vectors on disk and keeping quantized vectors in RAM,\n\nmore effectively. “This allowed us to scale smoothly from there,” Polu says.', '![“We were able to reduce the footprint of vectors in memory, which led to a significant cost reduction as\n\nwe don’t have to run lots of nodes in parallel. While being memory-bound, we were\n\nable to push the same instances further with the help of quantization. While you\n\nget pressure on MMAP in this case you maintain very good performance even if the\n\nRAM is fully used. With this we were able to reduce our cost by 2x.” - Stanislas Polu, Co-Founder of Dust](/case-studies/dust/Dust-Quote.jpg)', 'Beyond performance, we provide our users with the most flexibility in cost savings and deployment options. A combination of cutting-edge efficiency features, like [built-in compression options](https://qdrant.tech/documentation/guides/quantization/), [multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) and the ability to [offload data to disk](https://qdrant.tech/documentation/concepts/storage/), dramatically reduce memory consumption', '## Results\n\n\n\nDust has seen success in using Qdrant as their vector database of choice, as Polu\n\nacknowledges: “Qdrant’s ability to handle large-scale models and the flexibility\n\nit offers in terms of data management has been crucial for us. The observability\n\nfeatures, such as historical graphs of RAM, Disk, and CPU, provided by Qdrant are\n\nalso particularly useful, allowing us to plan our scaling strategy effectively.”', ""support for disk-stored collections, as storage space is way cheaper than memory. That's also \n\nwhy we have introduced the [Scalar Quantization](/articles/scalar-quantization) mechanism recently, \n\nwhich makes it possible to reduce the memory requirements by up to four times.\n\n\n\nToday, we are bringing a new quantization mechanism to life. A separate article on [Product \n\nQuantization](/documentation/quantization/#product-quantization) will describe that feature in more""]","compression features](https://qdrant.tech/documentation/guides/quantization/). In particular, Dust leveraged the control of the [MMAP

payload threshold](https://qdrant.tech/documentation/concepts/storage/#configuring-memmap-storage) as well as [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/), which enabled Dust to manage

the balance between storing vectors on disk and keeping quantized vectors in RAM,

more effectively. “This allowed us to scale smoothly from there,” Polu says.
![“We were able to reduce the footprint of vectors in memory, which led to a significant cost reduction as

we don’t have to run lots of nodes in parallel. While being memory-bound, we were

able to push the same instances further with the help of quantization. While you

get pressure on MMAP in this case you maintain very good performance even if the

RAM is fully used. With this we were able to reduce our cost by 2x.” - Stanislas Polu, Co-Founder of Dust](/case-studies/dust/Dust-Quote.jpg)
Beyond performance, we provide our users with the most flexibility in cost savings and deployment options. A combination of cutting-edge efficiency features, like [built-in compression options](https://qdrant.tech/documentation/guides/quantization/), [multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) and the ability to [offload data to disk](https://qdrant.tech/documentation/concepts/storage/), dramatically reduce memory consumption
## Results



Dust has seen success in using Qdrant as their vector database of choice, as Polu

acknowledges: “Qdrant’s ability to handle large-scale models and the flexibility

it offers in terms of data management has been crucial for us. The observability

features, such as historical graphs of RAM, Disk, and CPU, provided by Qdrant are

also particularly useful, allowing us to plan our scaling strategy effectively.”
support for disk-stored collections, as storage space is way cheaper than memory. That's also 

why we have introduced the [Scalar Quantization](/articles/scalar-quantization) mechanism recently, 

which makes it possible to reduce the memory requirements by up to four times.



Today, we are bringing a new quantization mechanism to life. A separate article on [Product 

Quantization](/documentation/quantization/#product-quantization) will describe that feature in more"
Why do we still need keyword search?,"Keyword search is still useful in cases of out-of-domain search, where words are just words regardless of their meaning.","[""2. Vector search with keyword-based search. This one is covered in this article.\n\n3. A mix of dense and sparse vectors. That strategy will be covered in the upcoming article.\n\n\n\n## Why do we still need keyword search?\n\n\n\nA keyword-based search was the obvious choice for search engines in the past. It struggled with some\n\ncommon issues, but since we didn't have any alternatives, we had to overcome them with additional"", 'on those candidates only. This is an approach that makes it possible to use the power of semantic and keyword based \n\n   search together.\n\n\n\n![The design of all the three experiments](/articles_data/hybrid-search/experiments-design.png)\n\n\n\n### Quality metrics\n\n\n\nThere are various ways of how to measure the performance of search engines, and *[Recommender Systems: Machine Learning', 'needed to find what we’re looking for. Semantic search enables us to find things without knowing the exact \n\nterminology. For example, if an engineer wanted to understand “*What library is used for payment processing?*” \n\na semantic code search engine would be able to retrieve results containing “*Stripe*” or “*PayPal*”. A traditional \n\nlexical search engine would not.\n\n\n\nOne peculiarity of this problem is that the **usefulness of the solution increases with the size of the code', '. We also started converting words into their root forms to cover more cases, removing stopwords, etc. Effectively we were becoming more and more user-friendly. Still, the idea behind the whole process is derived from the most straightforward keyword-based search known since the Middle Ages, with some tweaks.', '# The fast search: A Fallback strategy\n\n\n\nThe easiest way to incorporate vector search into the existing stack is to treat it as some sort of\n\nfallback strategy. So whenever your keyword search struggle with finding proper results, you can\n\nrun a semantic search to extend the results. That is especially important in cases like search-as-you-type\n\nin which a new query is fired every single time your user types the next character in. For such cases']","2. Vector search with keyword-based search. This one is covered in this article.

3. A mix of dense and sparse vectors. That strategy will be covered in the upcoming article.



## Why do we still need keyword search?



A keyword-based search was the obvious choice for search engines in the past. It struggled with some

common issues, but since we didn't have any alternatives, we had to overcome them with additional
on those candidates only. This is an approach that makes it possible to use the power of semantic and keyword based 

   search together.



![The design of all the three experiments](/articles_data/hybrid-search/experiments-design.png)



### Quality metrics



There are various ways of how to measure the performance of search engines, and *[Recommender Systems: Machine Learning
needed to find what we’re looking for. Semantic search enables us to find things without knowing the exact 

terminology. For example, if an engineer wanted to understand “*What library is used for payment processing?*” 

a semantic code search engine would be able to retrieve results containing “*Stripe*” or “*PayPal*”. A traditional 

lexical search engine would not.



One peculiarity of this problem is that the **usefulness of the solution increases with the size of the code
. We also started converting words into their root forms to cover more cases, removing stopwords, etc. Effectively we were becoming more and more user-friendly. Still, the idea behind the whole process is derived from the most straightforward keyword-based search known since the Middle Ages, with some tweaks.
# The fast search: A Fallback strategy



The easiest way to incorporate vector search into the existing stack is to treat it as some sort of

fallback strategy. So whenever your keyword search struggle with finding proper results, you can

run a semantic search to extend the results. That is especially important in cases like search-as-you-type

in which a new query is fired every single time your user types the next character in. For such cases"
What principles did Qdrant follow while designing benchmarks for vector search engines?,"Qdrant followed the principles of doing comparative benchmarks focusing on relative numbers rather than absolute numbers, and using affordable hardware for easy result reproduction.","['title: High-Performance Vector Search at Scale\n\n    description: The leading open-source vector database designed to handle high-dimensional vectors for performance and massive-scale AI applications. Qdrant is purpose-built in Rust for unmatched speed and reliability even when processing billions of vectors.\n\n    buttonLeft:\n\n        text: Start Free\n\n        link: https://qdrant.to/cloud\n\n    buttonRight:\n\n        text: See Benchmarks\n\n        link: /benchmarks/', 'Here are the principles we followed while designing these benchmarks:\n\n\n\n- We do comparative benchmarks, which means we focus on **relative numbers** rather than absolute numbers.\n\n- We use affordable hardware, so that you can reproduce the results easily.\n\n- We run benchmarks on the same exact machines to avoid any possible hardware bias.\n\n- All the benchmarks are [open-sourced](https://github.com/qdrant/vector-db-benchmark), so you can contribute and improve them.\n\n\n\n<details>', '. In this article, we will compare how Qdrant performs against the other vector search engines.', '- embedding\n\npreview_image: /benchmarks/benchmark-1.png\n\nseo_schema: { ""@context"": ""https://schema.org"", ""@type"": ""Article"", ""headline"": ""Vector Search Comparative Benchmarks"", ""image"": [ ""https://qdrant.tech/benchmarks/benchmark-1.png"" ], ""abstract"": ""The first comparative benchmark and benchmarking framework for vector search engines"", ""datePublished"": ""2022-08-23"", ""dateModified"": ""2022-08-23"", ""author"": [{ ""@type"": ""Organization"", ""name"": ""Qdrant"", ""url"": ""https://qdrant.tech"" }] }\n\n \n\n---', '## Why Qdrant?']","title: High-Performance Vector Search at Scale

    description: The leading open-source vector database designed to handle high-dimensional vectors for performance and massive-scale AI applications. Qdrant is purpose-built in Rust for unmatched speed and reliability even when processing billions of vectors.

    buttonLeft:

        text: Start Free

        link: https://qdrant.to/cloud

    buttonRight:

        text: See Benchmarks

        link: /benchmarks/
Here are the principles we followed while designing these benchmarks:



- We do comparative benchmarks, which means we focus on **relative numbers** rather than absolute numbers.

- We use affordable hardware, so that you can reproduce the results easily.

- We run benchmarks on the same exact machines to avoid any possible hardware bias.

- All the benchmarks are [open-sourced](https://github.com/qdrant/vector-db-benchmark), so you can contribute and improve them.



<details>
. In this article, we will compare how Qdrant performs against the other vector search engines.
- embedding

preview_image: /benchmarks/benchmark-1.png

seo_schema: { ""@context"": ""https://schema.org"", ""@type"": ""Article"", ""headline"": ""Vector Search Comparative Benchmarks"", ""image"": [ ""https://qdrant.tech/benchmarks/benchmark-1.png"" ], ""abstract"": ""The first comparative benchmark and benchmarking framework for vector search engines"", ""datePublished"": ""2022-08-23"", ""dateModified"": ""2022-08-23"", ""author"": [{ ""@type"": ""Organization"", ""name"": ""Qdrant"", ""url"": ""https://qdrant.tech"" }] }

 

---
## Why Qdrant?"
What models does Qdrant support for embedding generation?,"Qdrant supports a reasonable range of models, including a few multilingual ones.","[""As of now, we only support models which are open source so that we can serve those models directly. Embed V three is cloud only at the moment, so that is why it is not supported yet. But that said, we are not opposed to it. In case there's a requirement for that, we are happy to support that so that people can use it seamlessly with Qdrant and fast embed does the heavy lifting of passing it to Qdrant, structuring the schema and all of those for you. So that's perfectly fair"", 'Selecting the right embedding model for your use case is crucial to your application performance. Qdrant makes it easier by offering seamless integration with the best selection of embedding APIs, including [Cohere](https://qdrant.tech/documentation/embeddings/cohere/), [Gemini](https://qdrant.tech/documentation/embeddings/gemini/), [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/), [OpenAI](https://qdrant.tech/documentation/embeddings/openai/), [Aleph Alpha](https://qdrant', '. So we did a lot of experiments. We used, I think, Mpnet model and a lot of multilingual models as well. But after doing those experiments, we realized that this is the best model that offers the best balance between speed and accuracy cool of the Embeddings. So we have deployed it in a serverless inference endpoint in SageMaker. And once we generate the Embeddings in a glue job, we then store them into the vector database Qdrant.', "". So this is taken care of. So whatever is your best practices for the Embedding model, make sure you use it when you're using it with Qdrant or just in isolation as well."", ""So one thing which I mean, one is definitely try the different models which we support. We support a reasonable range of models, including a few multilingual ones. Second is while we take care of this when you do use with Qdrants. So, for instance, let's say this is how you would have to manually specify, let's say, passage or query. When you do this, let's say add and query. What we do, we add the passage and query keys while creating the Embeddings for you. So this is taken care of""]","As of now, we only support models which are open source so that we can serve those models directly. Embed V three is cloud only at the moment, so that is why it is not supported yet. But that said, we are not opposed to it. In case there's a requirement for that, we are happy to support that so that people can use it seamlessly with Qdrant and fast embed does the heavy lifting of passing it to Qdrant, structuring the schema and all of those for you. So that's perfectly fair
Selecting the right embedding model for your use case is crucial to your application performance. Qdrant makes it easier by offering seamless integration with the best selection of embedding APIs, including [Cohere](https://qdrant.tech/documentation/embeddings/cohere/), [Gemini](https://qdrant.tech/documentation/embeddings/gemini/), [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/), [OpenAI](https://qdrant.tech/documentation/embeddings/openai/), [Aleph Alpha](https://qdrant
. So we did a lot of experiments. We used, I think, Mpnet model and a lot of multilingual models as well. But after doing those experiments, we realized that this is the best model that offers the best balance between speed and accuracy cool of the Embeddings. So we have deployed it in a serverless inference endpoint in SageMaker. And once we generate the Embeddings in a glue job, we then store them into the vector database Qdrant.
. So this is taken care of. So whatever is your best practices for the Embedding model, make sure you use it when you're using it with Qdrant or just in isolation as well.
So one thing which I mean, one is definitely try the different models which we support. We support a reasonable range of models, including a few multilingual ones. Second is while we take care of this when you do use with Qdrants. So, for instance, let's say this is how you would have to manually specify, let's say, passage or query. When you do this, let's say add and query. What we do, we add the passage and query keys while creating the Embeddings for you. So this is taken care of"
How can you parallelize the upload of a large dataset using shards in Qdrant?,"By creating multiple shards in Qdrant, you can parallelize the upload of a large dataset. It is recommended to have 2 to 4 shards per machine for efficient processing. When creating a collection in Qdrant, you can specify the number of shards to use for that collection. ","['## Parallel upload into multiple shards\n\n\n\nIn Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.\n\nBy creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 2\n\n}\n\n```\n\n\n\n```python', 'We recommend using our [Rust client library](https://github.com/qdrant/rust-client) for this purpose, as it is the fastest client library available for Qdrant.\n\n\n\nIf you are not using Rust, you might want to consider parallelizing your upload process.\n\n\n\n## Disable indexing during upload\n\n\n\nIn case you are doing an initial upload of a large dataset, you might want to disable indexing during upload.\n\nIt will enable to avoid unnecessary indexing of vectors, which will be overwritten by the next batch.', '},\n\n    ""shard_number"": 2\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n\n    shard_number=2,\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";\n\n\n\nconst client = new QdrantClient({ host: ""localhost"", port: 6333 });', 'setup with distributed deployment out of the box. This, combined with sharding, enables you to horizontally scale \n\nboth the size of your collections and the throughput of your cluster. This means that you can use Qdrant to handle \n\nlarge amounts of data without sacrificing performance or reliability.\n\n\n\n## Administration API\n\n\n\nAnother new feature is the administration API, which allows you to disable write operations to the service. This is', 'client.recoverSnapshot(""{collection_name}"", {\n\n  location: ""http://qdrant-node-1:6333/collections/{collection_name}/snapshots/snapshot-2022-10-10.shapshot"",\n\n  priority: ""snapshot""\n\n});\n\n```\n\n\n\n```bash\n\ncurl -X POST \'http://qdrant-node-1:6333/collections/{collection_name}/snapshots/upload?priority=snapshot\' \\\n\n    -H \'api-key: ********\' \\\n\n    -H \'Content-Type:multipart/form-data\' \\\n\n    -F \'snapshot=@/path/to/snapshot-2022-10-10.shapshot\'\n\n```\n\n\n\n## Snapshots for the whole storage']","## Parallel upload into multiple shards



In Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.

By creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""shard_number"": 2

}

```



```python
We recommend using our [Rust client library](https://github.com/qdrant/rust-client) for this purpose, as it is the fastest client library available for Qdrant.



If you are not using Rust, you might want to consider parallelizing your upload process.



## Disable indexing during upload



In case you are doing an initial upload of a large dataset, you might want to disable indexing during upload.

It will enable to avoid unnecessary indexing of vectors, which will be overwritten by the next batch.
},

    ""shard_number"": 2

}

```



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),

    shard_number=2,

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({ host: ""localhost"", port: 6333 });
setup with distributed deployment out of the box. This, combined with sharding, enables you to horizontally scale 

both the size of your collections and the throughput of your cluster. This means that you can use Qdrant to handle 

large amounts of data without sacrificing performance or reliability.



## Administration API



Another new feature is the administration API, which allows you to disable write operations to the service. This is
client.recoverSnapshot(""{collection_name}"", {

  location: ""http://qdrant-node-1:6333/collections/{collection_name}/snapshots/snapshot-2022-10-10.shapshot"",

  priority: ""snapshot""

});

```



```bash

curl -X POST 'http://qdrant-node-1:6333/collections/{collection_name}/snapshots/upload?priority=snapshot' \

    -H 'api-key: ********' \

    -H 'Content-Type:multipart/form-data' \

    -F 'snapshot=@/path/to/snapshot-2022-10-10.shapshot'

```



## Snapshots for the whole storage"
What is the significance of maximizing the distance between all points in the response when utilizing vector similarity for diversity search?,"Maximizing the distance between all points in the response when utilizing vector similarity for diversity search is crucial as it allows for the algorithm to sequentially output dissimilar results. By doing so, a diverse selection of the collection can be made possible without the need for any labeling efforts. This approach ensures that the algorithm can effectively identify and retrieve a wide range of diverse items or data points.","['{{< figure width=80% src=/articles_data/vector-similarity-beyond-search/diversity-force.png caption=""Example of similarity-based sampling"" >}}\n\n\n\n\n\nThe power of vector similarity, in the context of being able to compare any two points, allows making a diverse selection of the collection possible without any labeling efforts.\n\nBy maximizing the distance between all points in the response, we can have an algorithm that will sequentially output dissimilar results.', ""Let's imagine how to get 3 points with similarity search and then with diversity search.\n\n\n\nSimilarity:\n\n1. Calculate distance matrix\n\n2. Choose your anchor\n\n3. Get a vector corresponding to the distances from the selected anchor from the distance matrix\n\n4. Sort fetched vector\n\n5. Get top-3 embeddings\n\n \n\nDiversity:\n\n1. Calculate distance matrix\n\n2. Initialize starting point (randomly or according to the certain conditions)"", '3. Get a distance vector for the selected starting point from the distance matrix\n\n4. Find the furthest point\n\n5. Get a distance vector for the new point\n\n6. Find the furthest point from all of already fetched points \n\n\n\n{{< figure src=https://storage.googleapis.com/demo-dataset-quality-public/article/diversity_transparent.png caption=""Diversity search"" >}}\n\n\n\nDiversity search utilizes the very same embeddings, and you can reuse them.', '{{< figure src=/articles_data/vector-similarity-beyond-search/diversity.png caption=""Diversity Search"" >}}\n\n\n\n\n\nSome forms of diversity sampling are already used in the industry and are known as [Maximum Margin Relevance](https://python.langchain.com/docs/integrations/vectorstores/qdrant#maximum-marginal-relevance-search-mmr) (MMR). Techniques like this were developed to enhance similarity on a universal search API.\n\nHowever, there is still room for new ideas, particularly regarding diversity retrieval.', '{{< figure  width=80% src=/articles_data/vector-similarity-beyond-search/diversity-random.png caption=""Example of random sampling"" >}}\n\n\n\n\n\nThe similarity information can increase the diversity of those results and make the first overview more interesting.\n\nThat is especially useful when users do not yet know what they are looking for and want to explore the dataset.']","{{< figure width=80% src=/articles_data/vector-similarity-beyond-search/diversity-force.png caption=""Example of similarity-based sampling"" >}}





The power of vector similarity, in the context of being able to compare any two points, allows making a diverse selection of the collection possible without any labeling efforts.

By maximizing the distance between all points in the response, we can have an algorithm that will sequentially output dissimilar results.
Let's imagine how to get 3 points with similarity search and then with diversity search.



Similarity:

1. Calculate distance matrix

2. Choose your anchor

3. Get a vector corresponding to the distances from the selected anchor from the distance matrix

4. Sort fetched vector

5. Get top-3 embeddings

 

Diversity:

1. Calculate distance matrix

2. Initialize starting point (randomly or according to the certain conditions)
3. Get a distance vector for the selected starting point from the distance matrix

4. Find the furthest point

5. Get a distance vector for the new point

6. Find the furthest point from all of already fetched points 



{{< figure src=https://storage.googleapis.com/demo-dataset-quality-public/article/diversity_transparent.png caption=""Diversity search"" >}}



Diversity search utilizes the very same embeddings, and you can reuse them.
{{< figure src=/articles_data/vector-similarity-beyond-search/diversity.png caption=""Diversity Search"" >}}





Some forms of diversity sampling are already used in the industry and are known as [Maximum Margin Relevance](https://python.langchain.com/docs/integrations/vectorstores/qdrant#maximum-marginal-relevance-search-mmr) (MMR). Techniques like this were developed to enhance similarity on a universal search API.

However, there is still room for new ideas, particularly regarding diversity retrieval.
{{< figure  width=80% src=/articles_data/vector-similarity-beyond-search/diversity-random.png caption=""Example of random sampling"" >}}





The similarity information can increase the diversity of those results and make the first overview more interesting.

That is especially useful when users do not yet know what they are looking for and want to explore the dataset."
How can you ensure that collection shards are replicated in Qdrant after adding a new node to the cluster?,"To ensure that collection shards are replicated in Qdrant after adding a new node to the cluster, you can use the Replicate Shard Operation. This operation allows you to create another copy of the shard on the newly connected node. It's important to note that Qdrant does not automatically balance shards as it is considered an expensive operation.","['Once the new node is ready and synchronized with the cluster, you might want to ensure that the collection shards are replicated enough. Remember that Qdrant will not automatically balance shards since this is an expensive operation.\n\nUse the [Replicate Shard Operation](https://qdrant.github.io/qdrant/redoc/index.html#tag/cluster/operation/update_collection_cluster) to create another copy of the shard on the newly connected node.', 'Shards are evenly distributed across all existing nodes when a collection is first created, but Qdrant does not automatically rebalance shards if your cluster size or replication factor changes (since this is an expensive operation on large clusters). See the next section for how to move shards after scaling operations.\n\n\n\n### Moving shards\n\n\n\n*Available as of v0.9.0*', 'Practically, it means that if the cluster is in a transition state - either electing a new leader after a failure or starting up, the collection update operations will be denied.\n\n\n\nYou may use the cluster [REST API](https://qdrant.github.io/qdrant/redoc/index.html?v=master#tag/cluster) to check the state of the consensus.\n\n\n\n## Sharding\n\n\n\nA Collection in Qdrant is made of one or more shards.\n\nA shard is an independent store of points which is able to perform all operations provided by collections.', 'Currently, the replication factor of a collection can only be configured at creation time.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""size"": 300,\n\n        ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 6,\n\n    ""replication_factor"": 2,\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",', ""will be recovered onto the cluster. With `replica` priority _(default)_, you'd\n\nend up with an empty collection because the collection on the cluster did not\n\ncontain any points and that source was preferred.\n\n\n\n`no_sync` is for specialized use cases and is not commonly used. It allows\n\nmanaging shards and transferring shards between clusters manually without any\n\nadditional synchronization. Using it incorrectly will leave your cluster in a\n\nbroken state.""]","Once the new node is ready and synchronized with the cluster, you might want to ensure that the collection shards are replicated enough. Remember that Qdrant will not automatically balance shards since this is an expensive operation.

Use the [Replicate Shard Operation](https://qdrant.github.io/qdrant/redoc/index.html#tag/cluster/operation/update_collection_cluster) to create another copy of the shard on the newly connected node.
Shards are evenly distributed across all existing nodes when a collection is first created, but Qdrant does not automatically rebalance shards if your cluster size or replication factor changes (since this is an expensive operation on large clusters). See the next section for how to move shards after scaling operations.



### Moving shards



*Available as of v0.9.0*
Practically, it means that if the cluster is in a transition state - either electing a new leader after a failure or starting up, the collection update operations will be denied.



You may use the cluster [REST API](https://qdrant.github.io/qdrant/redoc/index.html?v=master#tag/cluster) to check the state of the consensus.



## Sharding



A Collection in Qdrant is made of one or more shards.

A shard is an independent store of points which is able to perform all operations provided by collections.
Currently, the replication factor of a collection can only be configured at creation time.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 300,

        ""distance"": ""Cosine""

    },

    ""shard_number"": 6,

    ""replication_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",
will be recovered onto the cluster. With `replica` priority _(default)_, you'd

end up with an empty collection because the collection on the cluster did not

contain any points and that source was preferred.



`no_sync` is for specialized use cases and is not commonly used. It allows

managing shards and transferring shards between clusters manually without any

additional synchronization. Using it incorrectly will leave your cluster in a

broken state."
Why would someone use a vector database?,"A vector database is used for various reasons, primarily for its efficiency in handling complex data structures and enabling advanced search capabilities. In the context of search and discovery, a vector database allows for state-of-the-art vector-search functionalities, making it ideal for applications requiring similarity search, recommendation systems, and content-based search. By leveraging vectors to represent data points, a vector database can efficiently compute similarities between vectors, enabling quick and accurate retrieval of relevant information","['advantage of their efficient indexing and searching techniques, vector databases enable faster \n\nand more accurate retrieval of unstructured data already represented as vectors, which can \n\nhelp put in front of users the most relevant results to their queries.\n\n\n\nIn addition, other benefits of using vector databases include:\n\n1. Efficient storage and indexing of high-dimensional data.\n\n3. Ability to handle large-scale datasets with billions of data points.\n\n4. Support for real-time analytics and queries.', ""And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query"", ""## Why use a Vector Database?\n\n\n\nThe data flood is real. \n\n\n\nIn 2024, we're drowning in unstructured data like images, text, and audio, that don’t fit into neatly organized tables. Still, we need a way to easily tap into the value within this chaos of almost 330 million terabytes of data being created each day.\n\n\n\nTraditional databases, even with extensions that provide some vector handling capabilities, struggle with the complexities and demands of high-dimensional vector data."", ""We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. \n\n\n\nWhy?"", 'aliases: [ /blog/what-is-a-vector-database/ ]\n\n---\n\n\n\n> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.\n\n\n\n\n\n## Why use a Vector Database?\n\n\n\nThe data flood is real.']","advantage of their efficient indexing and searching techniques, vector databases enable faster 

and more accurate retrieval of unstructured data already represented as vectors, which can 

help put in front of users the most relevant results to their queries.



In addition, other benefits of using vector databases include:

1. Efficient storage and indexing of high-dimensional data.

3. Ability to handle large-scale datasets with billions of data points.

4. Support for real-time analytics and queries.
And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query
## Why use a Vector Database?



The data flood is real. 



In 2024, we're drowning in unstructured data like images, text, and audio, that don’t fit into neatly organized tables. Still, we need a way to easily tap into the value within this chaos of almost 330 million terabytes of data being created each day.



Traditional databases, even with extensions that provide some vector handling capabilities, struggle with the complexities and demands of high-dimensional vector data.
We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. 



Why?
aliases: [ /blog/what-is-a-vector-database/ ]

---



> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.





## Why use a Vector Database?



The data flood is real."
What benefits does Qdrant Cloud on Microsoft Azure offer for rapid application development?,"Qdrant Cloud on Microsoft Azure offers the benefit of rapid application development by allowing users to deploy their own cluster through the Qdrant Cloud Console within seconds. This means that users can set up their environment on Azure quickly, reducing deployment time and enabling them to scale their resources as needed. This rapid deployment capability enables users to hit the ground running with their development projects, facilitating faster development cycles and improved scalability.","[""What this means for you:\n\n\n\n- **Rapid application development**: Deploy your own cluster through the Qdrant Cloud Console within seconds and scale your resources as needed.\n\n- **Billion vector scale**: Seamlessly grow and handle large-scale datasets with billions of vectors. Leverage Qdrant features like horizontal scaling and binary quantization with Microsoft Azure's scalable infrastructure."", '---\n\ndraft: false\n\ntitle: Introducing Qdrant Cloud on Microsoft Azure\n\nslug: qdrant-cloud-on-microsoft-azure\n\nshort_description: Qdrant Cloud is now available on Microsoft Azure\n\ndescription: ""Learn the benefits of Qdrant Cloud on Azure.""\n\npreview_image: /blog/from_cms/qdrant-azure-2-1.png\n\ndate: 2024-01-17T08:40:42Z\n\nauthor: Manuel Meyer\n\nfeatured: false\n\ntags:\n\n  - Data Science\n\n  - Vector Database\n\n  - Machine Learning\n\n  - Information Retrieval\n\n  - Cloud\n\n  - Azure\n\n---', ""- Information Retrieval\n\n  - Cloud\n\n  - Azure\n\n---\n\nGreat news! We've expanded Qdrant's managed vector database offering — [Qdrant Cloud](https://cloud.qdrant.io/) — to be available on Microsoft Azure. \n\nYou can now effortlessly set up your environment on Azure, which reduces deployment time, so you can hit the ground running.\n\n\n\n[Get started](https://cloud.qdrant.io/)\n\n\n\nWhat this means for you:"", '```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\n\n\nvar client = new QdrantClient(\n\n  host: ""xyz-example.eu-central.aws.cloud.qdrant.io"",\n\n  https: true,\n\n  apiKey: ""<paste-your-api-key-here>""\n\n);\n\n```', 'Transitioning from on-premise to the cloud version of Qdrant does not require changing anything in the way you interact with the service. All you have to do is [create a Qdrant Cloud account](https://qdrant.to/cloud) and [provide a new API key]({{< ref ""/documentation/cloud/authentication"" >}}) to each request.']","What this means for you:



- **Rapid application development**: Deploy your own cluster through the Qdrant Cloud Console within seconds and scale your resources as needed.

- **Billion vector scale**: Seamlessly grow and handle large-scale datasets with billions of vectors. Leverage Qdrant features like horizontal scaling and binary quantization with Microsoft Azure's scalable infrastructure.
---

draft: false

title: Introducing Qdrant Cloud on Microsoft Azure

slug: qdrant-cloud-on-microsoft-azure

short_description: Qdrant Cloud is now available on Microsoft Azure

description: ""Learn the benefits of Qdrant Cloud on Azure.""

preview_image: /blog/from_cms/qdrant-azure-2-1.png

date: 2024-01-17T08:40:42Z

author: Manuel Meyer

featured: false

tags:

  - Data Science

  - Vector Database

  - Machine Learning

  - Information Retrieval

  - Cloud

  - Azure

---
- Information Retrieval

  - Cloud

  - Azure

---

Great news! We've expanded Qdrant's managed vector database offering — [Qdrant Cloud](https://cloud.qdrant.io/) — to be available on Microsoft Azure. 

You can now effortlessly set up your environment on Azure, which reduces deployment time, so you can hit the ground running.



[Get started](https://cloud.qdrant.io/)



What this means for you:
```



```csharp

using Qdrant.Client;



var client = new QdrantClient(

  host: ""xyz-example.eu-central.aws.cloud.qdrant.io"",

  https: true,

  apiKey: ""<paste-your-api-key-here>""

);

```
Transitioning from on-premise to the cloud version of Qdrant does not require changing anything in the way you interact with the service. All you have to do is [create a Qdrant Cloud account](https://qdrant.to/cloud) and [provide a new API key]({{< ref ""/documentation/cloud/authentication"" >}}) to each request."
What is the purpose of the `groupBy` parameter?,"The `groupBy` parameter is used to specify how the results should be grouped based on a specific field, like ""document_id"". By setting the `groupBy` parameter to ""document_id"", the results are organized into groups where each group contains all the hits associated with a particular document_id.","['},\n\n        ""vector"": [0.6]\n\n    }\n\n]\n\n```\n\n\n\nWith the ***groups*** API, you will be able to get the best *N* points for each document, assuming that the payload of the points contains the document ID. Of course there will be times where the best *N* points cannot be fulfilled due to lack of points or a big distance with respect to the query. In every case, the `group_size` is a best-effort parameter, akin to the `limit` parameter.\n\n\n\n### Search groups', '<aside role=""status"">This feature relies heavily on the `group_by` key provided. To improve performance, make sure to create a dedicated index for it.</aside>\n\n\n\n**Limitations**:\n\n\n\n* Only [keyword](../payload/#keyword) and [integer](../payload/#integer) payload values are supported for the `group_by` parameter. Payload values with other types will be ignored.\n\n* At the moment, pagination is not enabled when using **groups**, so the `offset` parameter is not allowed.\n\n\n\n### Lookup in groups', 'vector: new float[] { 1.1f },\n\n\tgroupBy: ""document_id"",\n\n\tlimit: 4,\n\n\tgroupSize: 2\n\n);\n\n```\n\n\n\nThe output of a ***groups*** call looks like this:\n\n\n\n```json\n\n{\n\n    ""result"": {\n\n        ""groups"": [\n\n            {\n\n                ""id"": ""a"",\n\n                ""hits"": [\n\n                    { ""id"": 0, ""score"": 0.91 },\n\n                    { ""id"": 1, ""score"": 0.85 }\n\n                ]\n\n            },\n\n            {\n\n                ""id"": ""b"",\n\n                ""hits"": [', '""with_payload"": [""title"", ""text""],\n\n\n\n        // Options for specifying what to bring from the vector(s) \n\n        // of the looked up point, true by default\n\n        ""with_vectors: false\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.search_groups(\n\n    collection_name=""chunks"",\n\n    # Same as in the regular search() API\n\n    query_vector=[1.1],\n\n    # Grouping parameters\n\n    group_by=""document_id"",  # Path of the field to group by\n\n    limit=2,  # Max amount of groups', '}\n\n```\n\n\n\n```python\n\nclient.search_groups(\n\n    collection_name=""{collection_name}"",\n\n    # Same as in the regular search() API\n\n    query_vector=g,\n\n    # Grouping parameters\n\n    group_by=""document_id"",  # Path of the field to group by\n\n    limit=4,  # Max amount of groups\n\n    group_size=2,  # Max amount of points per group\n\n)\n\n```\n\n\n\n```typescript\n\nclient.searchPointGroups(""{collection_name}"", {\n\n  vector: [1.1],\n\n  group_by: ""document_id"",\n\n  limit: 4,\n\n  group_size: 2,\n\n});\n\n```\n\n\n\n```rust']","},

        ""vector"": [0.6]

    }

]

```



With the ***groups*** API, you will be able to get the best *N* points for each document, assuming that the payload of the points contains the document ID. Of course there will be times where the best *N* points cannot be fulfilled due to lack of points or a big distance with respect to the query. In every case, the `group_size` is a best-effort parameter, akin to the `limit` parameter.



### Search groups
<aside role=""status"">This feature relies heavily on the `group_by` key provided. To improve performance, make sure to create a dedicated index for it.</aside>



**Limitations**:



* Only [keyword](../payload/#keyword) and [integer](../payload/#integer) payload values are supported for the `group_by` parameter. Payload values with other types will be ignored.

* At the moment, pagination is not enabled when using **groups**, so the `offset` parameter is not allowed.



### Lookup in groups
vector: new float[] { 1.1f },

	groupBy: ""document_id"",

	limit: 4,

	groupSize: 2

);

```



The output of a ***groups*** call looks like this:



```json

{

    ""result"": {

        ""groups"": [

            {

                ""id"": ""a"",

                ""hits"": [

                    { ""id"": 0, ""score"": 0.91 },

                    { ""id"": 1, ""score"": 0.85 }

                ]

            },

            {

                ""id"": ""b"",

                ""hits"": [
""with_payload"": [""title"", ""text""],



        // Options for specifying what to bring from the vector(s) 

        // of the looked up point, true by default

        ""with_vectors: false

    }

}

```



```python

client.search_groups(

    collection_name=""chunks"",

    # Same as in the regular search() API

    query_vector=[1.1],

    # Grouping parameters

    group_by=""document_id"",  # Path of the field to group by

    limit=2,  # Max amount of groups
}

```



```python

client.search_groups(

    collection_name=""{collection_name}"",

    # Same as in the regular search() API

    query_vector=g,

    # Grouping parameters

    group_by=""document_id"",  # Path of the field to group by

    limit=4,  # Max amount of groups

    group_size=2,  # Max amount of points per group

)

```



```typescript

client.searchPointGroups(""{collection_name}"", {

  vector: [1.1],

  group_by: ""document_id"",

  limit: 4,

  group_size: 2,

});

```



```rust"
How can one change or correct Qdrant's behavior and default collection settings using configuration files?,"To change or correct Qdrant's behavior and default collection settings, one can utilize configuration files. The default configuration file for Qdrant is located at [config/config.yaml](https://github.com/qdrant/qdrant/blob/master/config/config.yaml). If you wish to modify the default configuration, you can add a new configuration file and specify the path using `--config-path path/to/custom_config.yaml","[""---\n\ntitle: Configuration\n\nweight: 160\n\naliases:\n\n  - ../configuration\n\n---\n\n\n\n# Configuration\n\n\n\nTo change or correct Qdrant's behavior, default collection settings, and network interface parameters, you can use configuration files.\n\n\n\nThe default configuration file is located at [config/config.yaml](https://github.com/qdrant/qdrant/blob/master/config/config.yaml).\n\n\n\nTo change the default configuration, add a new configuration file and specify"", 'collection_name: ""{collection_name}"".to_string(),\n\n        vectors_config: Some(VectorsConfig {\n\n            config: Some(Config::Params(VectorParams {\n\n                size: 100,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        init_from_collection: Some(""{from_collection_name}"".to_string()),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;', ""```bash\n\npip install qdrant-haystack\n\n```\n\n\n\n`QdrantDocumentStore` supports [all the configuration properties](/documentation/collections/#create-collection) available in \n\nthe Qdrant Python client. If you want to customize the default configuration of the collection used under the hood, you can\n\nprovide that settings when you create an instance of the `QdrantDocumentStore`. For example, if you'd like to enable the\n\nScalar Quantization, you'd make that in the following way:\n\n\n\n```python"", '## Configuration\n\n\n\nQdrant settings can be configured by setting values to the qdrant property in the `settings.yaml` file. By default, Qdrant tries to connect to an instance at http://localhost:3000.\n\n\n\nExample: \n\n```yaml\n\nqdrant:\n\n    url: ""https://xyz-example.eu-central.aws.cloud.qdrant.io:6333""\n\n    api_key: ""<your-api-key>""\n\n```\n\n\n\nThe available [configuration options](https://docs.privategpt.dev/manual/storage/vector-stores#qdrant-configuration) are:\n\n| Field        | Description |', 'To change it, access `config.yaml` and set `storage.temp_path` to another directory location.\n\n\n\n## Important changes\n\n\n\nThe latest release focuses not only on the new features but also introduces some changes making \n\nQdrant even more reliable.\n\n\n\n### Optimizing group requests']","---

title: Configuration

weight: 160

aliases:

  - ../configuration

---



# Configuration



To change or correct Qdrant's behavior, default collection settings, and network interface parameters, you can use configuration files.



The default configuration file is located at [config/config.yaml](https://github.com/qdrant/qdrant/blob/master/config/config.yaml).



To change the default configuration, add a new configuration file and specify
collection_name: ""{collection_name}"".to_string(),

        vectors_config: Some(VectorsConfig {

            config: Some(Config::Params(VectorParams {

                size: 100,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        init_from_collection: Some(""{from_collection_name}"".to_string()),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;
```bash

pip install qdrant-haystack

```



`QdrantDocumentStore` supports [all the configuration properties](/documentation/collections/#create-collection) available in 

the Qdrant Python client. If you want to customize the default configuration of the collection used under the hood, you can

provide that settings when you create an instance of the `QdrantDocumentStore`. For example, if you'd like to enable the

Scalar Quantization, you'd make that in the following way:



```python
## Configuration



Qdrant settings can be configured by setting values to the qdrant property in the `settings.yaml` file. By default, Qdrant tries to connect to an instance at http://localhost:3000.



Example: 

```yaml

qdrant:

    url: ""https://xyz-example.eu-central.aws.cloud.qdrant.io:6333""

    api_key: ""<your-api-key>""

```



The available [configuration options](https://docs.privategpt.dev/manual/storage/vector-stores#qdrant-configuration) are:

| Field        | Description |
To change it, access `config.yaml` and set `storage.temp_path` to another directory location.



## Important changes



The latest release focuses not only on the new features but also introduces some changes making 

Qdrant even more reliable.



### Optimizing group requests"
What are the two ways of creating batches supported by the Qdrant API and how do they differ internally?,"The Qdrant API supports two ways of creating batches - record-oriented and column-oriented. Internally, these options do not differ and are made only for the convenience of interaction. This means that both record-oriented and column-oriented batch creation methods achieve the same result in terms of processing and storing data within the Qdrant system.","['}\n\n\t}\n\n);\n\n\n\n```\n\n\n\nare both possible.\n\n\n\n## Upload points\n\n\n\nTo optimize performance, Qdrant supports batch loading of points. I.e., you can load several points into the service in one API call.\n\nBatching allows you to minimize the overhead of creating a network connection.\n\n\n\nThe Qdrant API supports two ways of creating batches - record-oriented and column-oriented.\n\nInternally, these options do not differ and are made only for the convenience of interaction.\n\n\n\nCreate points with batch:\n\n\n\n```http', 'Now, thanks to the new batch search, you don’t need to worry about that. Qdrant will handle multiple search requests in just one API call and will perform those requests in the most optimal way.\n\n\n\n## An example of using the batch search\n\n\n\nWe’ve used the official Python client to show how the batch search might be integrated with your application. Since there have been some changes in the interfaces of Qdrant 0.10.0, we’ll go step by step.\n\n\n\n## Creating the collection', 'batch by batch, into Qdrant:\n\n\n\n```python\n\nbatch_size = 100\n\n\n\nfor batch in batched(dataset, batch_size):\n\n    ids = [point.pop(""id"") for point in batch]\n\n    vectors = [point.pop(""vector"") for point in batch]\n\n\n\n    client.upsert(\n\n        collection_name=""arxiv-titles-instructorxl-embeddings"",\n\n        points=models.Batch(\n\n            ids=ids,\n\n            vectors=vectors,\n\n            payloads=batch,\n\n        ),\n\n    )\n\n```', '## Summary\n\n\n\nBatch search allows packing different queries into a single API call and retrieving the results in a single response. If you ever struggled with sending several consecutive queries into Qdrant, then you can easily switch to the new batch search method and simplify your application code. As shown in the benchmarks, that may almost effortlessly speed up your interactions with Qdrant even by over 30%, even not considering the spare network overhead and possible reuse of filters!', 'Fortunately, the [new batch search feature](https://blog.qdrant.tech/batch-vector-search-with-qdrant-8c4d598179d5) allows \n\nyou to avoid this issue. With just one API call, Qdrant will handle multiple search requests in the most efficient way \n\npossible. This means that you can perform multiple tasks simultaneously without having to worry about network overhead\n\nor slow performance.\n\n\n\n## Built-in ARM support']","}

	}

);



```



are both possible.



## Upload points



To optimize performance, Qdrant supports batch loading of points. I.e., you can load several points into the service in one API call.

Batching allows you to minimize the overhead of creating a network connection.



The Qdrant API supports two ways of creating batches - record-oriented and column-oriented.

Internally, these options do not differ and are made only for the convenience of interaction.



Create points with batch:



```http
Now, thanks to the new batch search, you don’t need to worry about that. Qdrant will handle multiple search requests in just one API call and will perform those requests in the most optimal way.



## An example of using the batch search



We’ve used the official Python client to show how the batch search might be integrated with your application. Since there have been some changes in the interfaces of Qdrant 0.10.0, we’ll go step by step.



## Creating the collection
batch by batch, into Qdrant:



```python

batch_size = 100



for batch in batched(dataset, batch_size):

    ids = [point.pop(""id"") for point in batch]

    vectors = [point.pop(""vector"") for point in batch]



    client.upsert(

        collection_name=""arxiv-titles-instructorxl-embeddings"",

        points=models.Batch(

            ids=ids,

            vectors=vectors,

            payloads=batch,

        ),

    )

```
## Summary



Batch search allows packing different queries into a single API call and retrieving the results in a single response. If you ever struggled with sending several consecutive queries into Qdrant, then you can easily switch to the new batch search method and simplify your application code. As shown in the benchmarks, that may almost effortlessly speed up your interactions with Qdrant even by over 30%, even not considering the spare network overhead and possible reuse of filters!
Fortunately, the [new batch search feature](https://blog.qdrant.tech/batch-vector-search-with-qdrant-8c4d598179d5) allows 

you to avoid this issue. With just one API call, Qdrant will handle multiple search requests in the most efficient way 

possible. This means that you can perform multiple tasks simultaneously without having to worry about network overhead

or slow performance.



## Built-in ARM support"
How can you create an index for a specific field in a payload using the Qdrant library?,"To create an index for a specific field in a payload using the Qdrant library, you can utilize the `CreatePayloadIndexAsync` method provided by the client. This method takes in the parameters `collectionName` and `fieldName`. ","['keys: [""color"", ""price""],\n\n\tfilter: MatchKeyword(""color"", ""red"")\n\n);\n\n```\n\n\n\n## Payload indexing\n\n\n\nTo search more efficiently with filters, Qdrant allows you to create indexes for payload fields by specifying the name and type of field it is intended to be.\n\n\n\nThe indexed fields also affect the vector index. See [Indexing](../indexing) for details.\n\n\n\nIn practice, we recommend creating an index on those fields that could potentially constrain the results the most.', '```http\n\nPUT /collections/{collection_name}/index\n\n{\n\n    ""field_name"": ""name_of_the_field_to_index"",\n\n    ""field_schema"": ""keyword""\n\n}\n\n```\n\n\n\n```python\n\nclient.create_payload_index(\n\n    collection_name=""{collection_name}"",\n\n    field_name=""name_of_the_field_to_index"",\n\n    field_schema=""keyword"",\n\n)\n\n```\n\n\n\n```typescript\n\nclient.createPayloadIndex(""{collection_name}"", {\n\n  field_name: ""name_of_the_field_to_index"",\n\n  field_schema: ""keyword"",\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::qdrant::FieldType;', 'const client = new QdrantClient({ host: ""localhost"", port: 6333 });\n\n\n\nclient.createPayloadIndex(""{collection_name}"", {\n\n  field_name: ""name_of_the_field_to_index"",\n\n  field_schema: {\n\n    type: ""text"",\n\n    tokenizer: ""word"",\n\n    min_token_len: 2,\n\n    max_token_len: 15,\n\n    lowercase: true,\n\n  },\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::{\n\n    client::QdrantClient,\n\n    qdrant::{\n\n        payload_index_params::IndexParams, FieldType, PayloadIndexParams, TextIndexParams,\n\n        TokenizerType,', '});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::qdrant::FieldType;\n\n\n\nclient\n\n    .create_field_index(\n\n        ""{collection_name}"",\n\n        ""name_of_the_field_to_index"",\n\n        FieldType::Keyword,\n\n        None,\n\n        None,\n\n    )\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\n\n\n\nclient.createPayloadIndexAsync(\n\n    ""{collection_name}"",\n\n    ""name_of_the_field_to_index"",\n\n    PayloadSchemaType.Keyword,\n\n    null,\n\n    true,\n\n    null,\n\n    null);\n\n```', '### Full-text index\n\n\n\n*Available as of v0.10.0*\n\n\n\nQdrant supports full-text search for string payload.\n\nFull-text index allows you to filter points by the presence of a word or a phrase in the payload field.\n\n\n\nFull-text index configuration is a bit more complex than other indexes, as you can specify the tokenization parameters.\n\nTokenization is the process of splitting a string into tokens, which are then indexed in the inverted index.\n\n\n\nTo create a full-text index, you can use the following:']","keys: [""color"", ""price""],

	filter: MatchKeyword(""color"", ""red"")

);

```



## Payload indexing



To search more efficiently with filters, Qdrant allows you to create indexes for payload fields by specifying the name and type of field it is intended to be.



The indexed fields also affect the vector index. See [Indexing](../indexing) for details.



In practice, we recommend creating an index on those fields that could potentially constrain the results the most.
```http

PUT /collections/{collection_name}/index

{

    ""field_name"": ""name_of_the_field_to_index"",

    ""field_schema"": ""keyword""

}

```



```python

client.create_payload_index(

    collection_name=""{collection_name}"",

    field_name=""name_of_the_field_to_index"",

    field_schema=""keyword"",

)

```



```typescript

client.createPayloadIndex(""{collection_name}"", {

  field_name: ""name_of_the_field_to_index"",

  field_schema: ""keyword"",

});

```



```rust

use qdrant_client::qdrant::FieldType;
const client = new QdrantClient({ host: ""localhost"", port: 6333 });



client.createPayloadIndex(""{collection_name}"", {

  field_name: ""name_of_the_field_to_index"",

  field_schema: {

    type: ""text"",

    tokenizer: ""word"",

    min_token_len: 2,

    max_token_len: 15,

    lowercase: true,

  },

});

```



```rust

use qdrant_client::{

    client::QdrantClient,

    qdrant::{

        payload_index_params::IndexParams, FieldType, PayloadIndexParams, TextIndexParams,

        TokenizerType,
});

```



```rust

use qdrant_client::qdrant::FieldType;



client

    .create_field_index(

        ""{collection_name}"",

        ""name_of_the_field_to_index"",

        FieldType::Keyword,

        None,

        None,

    )

    .await?;

```



```java

import io.qdrant.client.grpc.Collections.PayloadSchemaType;



client.createPayloadIndexAsync(

    ""{collection_name}"",

    ""name_of_the_field_to_index"",

    PayloadSchemaType.Keyword,

    null,

    true,

    null,

    null);

```
### Full-text index



*Available as of v0.10.0*



Qdrant supports full-text search for string payload.

Full-text index allows you to filter points by the presence of a word or a phrase in the payload field.



Full-text index configuration is a bit more complex than other indexes, as you can specify the tokenization parameters.

Tokenization is the process of splitting a string into tokens, which are then indexed in the inverted index.



To create a full-text index, you can use the following:"
What is the purpose of the Quantization?,"Quantization is primarily used to reduce the memory footprint and accelerate the search process in high-dimensional vector spaces. In the context of the Qdrant, quantization allows you to optimize the search engine for specific use cases, striking a balance between accuracy, storage efficiency, and search speed.","['Quantization is primarily used to reduce the memory footprint and accelerate the search process in high-dimensional vector spaces.\n\nIn the context of the Qdrant, quantization allows you to optimize the search engine for specific use cases, striking a balance between accuracy, storage efficiency, and search speed.\n\n\n\nThere are tradeoffs associated with quantization.\n\nOn the one hand, quantization allows for significant reductions in storage requirements and faster search times.', "". So without further ado, let's jump into this, Andrey, we're talking about binary quantization, but let's maybe start a step back. Why do we need any quantization at all? Why not just use original vectors?"", '---\n\ntitle: Quantization\n\nweight: 120\n\naliases:\n\n  - ../quantization\n\n---\n\n\n\n# Quantization\n\n\n\nQuantization is an optional feature in Qdrant that enables efficient storage and search of high-dimensional vectors.\n\nBy transforming original vectors into a new representations, quantization compresses data while preserving close to original relative distances between vectors.\n\nDifferent quantization methods have different mechanics and tradeoffs. We will cover them in this section.', ""Right, so our choice of quantization is mostly defined by available CPU instructions we can apply to perform those computations. In case of binary quantization, it's straightforward and very simple. That's why we like binary quantization so much. In case of, for example, four bit quantization, it is not as clear which operation we should use. It's not yet clear"", 'Demetrios:\n\nExcellent. Okay, so then it looks simple enough, right? Why are you implementing it now after much more complicated product quantization?\n\n\n\nAndrey Vasnetsov:']","Quantization is primarily used to reduce the memory footprint and accelerate the search process in high-dimensional vector spaces.

In the context of the Qdrant, quantization allows you to optimize the search engine for specific use cases, striking a balance between accuracy, storage efficiency, and search speed.



There are tradeoffs associated with quantization.

On the one hand, quantization allows for significant reductions in storage requirements and faster search times.
. So without further ado, let's jump into this, Andrey, we're talking about binary quantization, but let's maybe start a step back. Why do we need any quantization at all? Why not just use original vectors?
---

title: Quantization

weight: 120

aliases:

  - ../quantization

---



# Quantization



Quantization is an optional feature in Qdrant that enables efficient storage and search of high-dimensional vectors.

By transforming original vectors into a new representations, quantization compresses data while preserving close to original relative distances between vectors.

Different quantization methods have different mechanics and tradeoffs. We will cover them in this section.
Right, so our choice of quantization is mostly defined by available CPU instructions we can apply to perform those computations. In case of binary quantization, it's straightforward and very simple. That's why we like binary quantization so much. In case of, for example, four bit quantization, it is not as clear which operation we should use. It's not yet clear
Demetrios:

Excellent. Okay, so then it looks simple enough, right? Why are you implementing it now after much more complicated product quantization?



Andrey Vasnetsov:"
How can the retrieval quality of an approximation be measured in the context of semantic search?,"The retrieval quality of an approximation in semantic search can be measured using various quality metrics. Some of these metrics include Precision@k, Mean Reciprocal Rank (MRR), and DCG and NDCG.","['them with the ground truth. In that setup, **finding the most similar documents is implemented as full kNN search, without any approximation**.\n\nAs a result, we can measure the quality of the embeddings themselves, without the influence of the ANN algorithm.\n\n\n\n## Retrieval quality\n\n\n\nEmbeddings quality is indeed the most important factor in the semantic search quality. However, vector search engines, such as Qdrant, do not', 'to do it. \n\n\n\n## Wrapping up\n\n\n\nAssessing the quality of retrieval is a critical aspect of evaluating semantic search performance. It is imperative to measure retrieval quality when aiming for optimal quality of.\n\nyour search results. Qdrant provides a built-in exact search mode, which can be used to measure the quality of the ANN algorithm itself, \n\neven in an automated way, as part of your CI/CD pipeline.', '---\n\ntitle: Measure retrieval quality\n\nweight: 21\n\n---\n\n\n\n# Measure retrieval quality\n\n\n\n| Time: 30 min | Level: Intermediate |  |    |\n\n|--------------|---------------------|--|----|\n\n\n\nSemantic search pipelines are as good as the embeddings they use. If your model cannot properly represent input data, similar objects might\n\nbe far away from each other in the vector space. No surprise, that the search results will be poor in this case. There is, however, another', 'on those candidates only. This is an approach that makes it possible to use the power of semantic and keyword based \n\n   search together.\n\n\n\n![The design of all the three experiments](/articles_data/hybrid-search/experiments-design.png)\n\n\n\n### Quality metrics\n\n\n\nThere are various ways of how to measure the performance of search engines, and *[Recommender Systems: Machine Learning', 'search quality.\n\n\n\n### Quality metrics\n\n\n\nThere are various ways of how quantify the quality of semantic search. Some of them, such as [Precision@k](https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Precision_at_k), \n\nare based on the number of relevant documents in the top-k search results. Others, such as [Mean Reciprocal Rank (MRR)](https://en.wikipedia.org/wiki/Mean_reciprocal_rank),']","them with the ground truth. In that setup, **finding the most similar documents is implemented as full kNN search, without any approximation**.

As a result, we can measure the quality of the embeddings themselves, without the influence of the ANN algorithm.



## Retrieval quality



Embeddings quality is indeed the most important factor in the semantic search quality. However, vector search engines, such as Qdrant, do not
to do it. 



## Wrapping up



Assessing the quality of retrieval is a critical aspect of evaluating semantic search performance. It is imperative to measure retrieval quality when aiming for optimal quality of.

your search results. Qdrant provides a built-in exact search mode, which can be used to measure the quality of the ANN algorithm itself, 

even in an automated way, as part of your CI/CD pipeline.
---

title: Measure retrieval quality

weight: 21

---



# Measure retrieval quality



| Time: 30 min | Level: Intermediate |  |    |

|--------------|---------------------|--|----|



Semantic search pipelines are as good as the embeddings they use. If your model cannot properly represent input data, similar objects might

be far away from each other in the vector space. No surprise, that the search results will be poor in this case. There is, however, another
on those candidates only. This is an approach that makes it possible to use the power of semantic and keyword based 

   search together.



![The design of all the three experiments](/articles_data/hybrid-search/experiments-design.png)



### Quality metrics



There are various ways of how to measure the performance of search engines, and *[Recommender Systems: Machine Learning
search quality.



### Quality metrics



There are various ways of how quantify the quality of semantic search. Some of them, such as [Precision@k](https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Precision_at_k), 

are based on the number of relevant documents in the top-k search results. Others, such as [Mean Reciprocal Rank (MRR)](https://en.wikipedia.org/wiki/Mean_reciprocal_rank),"
Why does Qdrant deliberately exclude libraries or algorithm implementations in their benchmark comparisons?,"Qdrant excludes libraries or algorithm implementations in their benchmark comparisons because their primary focus is on vector databases. By limiting their comparisons to open-source solutions and avoiding external cloud components, Qdrant ensures hardware parity and minimizes biases. This allows them to provide accurate and unbiased benchmarks specifically tailored to the performance of vector databases, enabling users to make informed decisions based on the data provided.","[""We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. \n\n\n\nWhy?"", 'Why?\n\n\n\nBecause libraries like FAISS, while useful for experiments, don’t fully address the complexities of real-world production environments. They lack features like real-time updates, CRUD operations, high availability, scalability, and concurrent access – essentials in production scenarios. A vector search engine is not only its indexing algorithm, but its overall performance in production.', '| **Supported Technologies**          | Python, JavaScript/TypeScript | Python, JavaScript/TypeScript, Rust, Go      | Qdrant supports a broader range of programming languages |\n\n| **Performance** (e.g., query speed) | TnC Prohibit Benchmarking     | [Benchmark result](/benchmarks/)             | Compare performance metrics                              |', '. In this article, we will compare how Qdrant performs against the other vector search engines.', '## Why Qdrant?']","We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. 



Why?
Why?



Because libraries like FAISS, while useful for experiments, don’t fully address the complexities of real-world production environments. They lack features like real-time updates, CRUD operations, high availability, scalability, and concurrent access – essentials in production scenarios. A vector search engine is not only its indexing algorithm, but its overall performance in production.
| **Supported Technologies**          | Python, JavaScript/TypeScript | Python, JavaScript/TypeScript, Rust, Go      | Qdrant supports a broader range of programming languages |

| **Performance** (e.g., query speed) | TnC Prohibit Benchmarking     | [Benchmark result](/benchmarks/)             | Compare performance metrics                              |
. In this article, we will compare how Qdrant performs against the other vector search engines.
## Why Qdrant?"
What is the primary purpose of a Vector Database and why would someone choose to use it over traditional databases?,"A Vector Database is a specialized database system that is specifically designed for efficiently indexing, querying, and retrieving high-dimensional vector data. The primary purpose of a Vector Database is to enable advanced data analysis and similarity-search operations that go beyond the capabilities of traditional, structured query approaches used in conventional databases.","['advantage of their efficient indexing and searching techniques, vector databases enable faster \n\nand more accurate retrieval of unstructured data already represented as vectors, which can \n\nhelp put in front of users the most relevant results to their queries.\n\n\n\nIn addition, other benefits of using vector databases include:\n\n1. Efficient storage and indexing of high-dimensional data.\n\n3. Ability to handle large-scale datasets with billions of data points.\n\n4. Support for real-time analytics and queries.', 'aliases: [ /blog/what-is-a-vector-database/ ]\n\n---\n\n\n\n> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.\n\n\n\n\n\n## Why use a Vector Database?\n\n\n\nThe data flood is real.', ""## Why use a Vector Database?\n\n\n\nThe data flood is real. \n\n\n\nIn 2024, we're drowning in unstructured data like images, text, and audio, that don’t fit into neatly organized tables. Still, we need a way to easily tap into the value within this chaos of almost 330 million terabytes of data being created each day.\n\n\n\nTraditional databases, even with extensions that provide some vector handling capabilities, struggle with the complexities and demands of high-dimensional vector data."", 'Those are just a few examples. The ability of vector databases to “match” data with queries makes them essential for multiple types of applications. Here are some more [use cases examples](https://qdrant.tech/use-cases/) you can take a look at.\n\n\n\n\n\n### Starting Your First Vector Database Project', ""And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query""]","advantage of their efficient indexing and searching techniques, vector databases enable faster 

and more accurate retrieval of unstructured data already represented as vectors, which can 

help put in front of users the most relevant results to their queries.



In addition, other benefits of using vector databases include:

1. Efficient storage and indexing of high-dimensional data.

3. Ability to handle large-scale datasets with billions of data points.

4. Support for real-time analytics and queries.
aliases: [ /blog/what-is-a-vector-database/ ]

---



> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.





## Why use a Vector Database?



The data flood is real.
## Why use a Vector Database?



The data flood is real. 



In 2024, we're drowning in unstructured data like images, text, and audio, that don’t fit into neatly organized tables. Still, we need a way to easily tap into the value within this chaos of almost 330 million terabytes of data being created each day.



Traditional databases, even with extensions that provide some vector handling capabilities, struggle with the complexities and demands of high-dimensional vector data.
Those are just a few examples. The ability of vector databases to “match” data with queries makes them essential for multiple types of applications. Here are some more [use cases examples](https://qdrant.tech/use-cases/) you can take a look at.





### Starting Your First Vector Database Project
And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query"
"How does oversampling impact the performance of machine learning models, especially in the context of imbalanced datasets?","Oversampling is a technique used in machine learning to address imbalances in datasets, where one class significantly outnumbers others. This imbalance can lead to skewed model performance, as the model may favor the majority class at the expense of minority classes. By generating additional samples from the minority classes, oversampling helps to equalize the representation of different classes in the training dataset.","['acc = average_accuracy.pivot(\n\n        index=""limit"", columns=[""oversampling"", ""rescore""], values=""accuracy""\n\n    )\n\n    print(acc)\n\n```\n\n\n\n#### Impact of Oversampling\n\n\n\nYou can use oversampling in machine learning to counteract imbalances in datasets.\n\nIt works well when one class significantly outnumbers others. This imbalance\n\ncan skew the performance of models, which favors the majority class at the\n\nexpense of others. By creating additional samples from the minority classes,', ""The screenshot showcases the effect of oversampling on model performance metrics. While the actual metrics aren't shown, we expect to see improvements in measures such as precision, recall, or F1-score. These improvements illustrate the effectiveness of oversampling in creating a more balanced dataset. It allows the model to learn a better representation of all classes, not just the dominant one."", 'Without an explicit code snippet or output, we focus on the role of oversampling in model fairness and performance. Through graphical representation, you can set up before-and-after comparisons. These comparisons illustrate the contribution to machine learning projects.\n\n\n\n![Measuring the impact of oversampling](/blog/openai/Oversampling_Impact.png)\n\n\n\n### Leveraging Binary Quantization: Best Practices', 'oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.', 'In contrast, for lower dimension models (such as text-embedding-3-small with 512 dimensions), the incremental accuracy gains from increased oversampling levels are less significant, even with rescoring enabled. This suggests a diminishing return on accuracy improvement with higher oversampling in lower dimension spaces.\n\n\n\n3. **Influence of Search Limit**:']","acc = average_accuracy.pivot(

        index=""limit"", columns=[""oversampling"", ""rescore""], values=""accuracy""

    )

    print(acc)

```



#### Impact of Oversampling



You can use oversampling in machine learning to counteract imbalances in datasets.

It works well when one class significantly outnumbers others. This imbalance

can skew the performance of models, which favors the majority class at the

expense of others. By creating additional samples from the minority classes,
The screenshot showcases the effect of oversampling on model performance metrics. While the actual metrics aren't shown, we expect to see improvements in measures such as precision, recall, or F1-score. These improvements illustrate the effectiveness of oversampling in creating a more balanced dataset. It allows the model to learn a better representation of all classes, not just the dominant one.
Without an explicit code snippet or output, we focus on the role of oversampling in model fairness and performance. Through graphical representation, you can set up before-and-after comparisons. These comparisons illustrate the contribution to machine learning projects.



![Measuring the impact of oversampling](/blog/openai/Oversampling_Impact.png)



### Leveraging Binary Quantization: Best Practices
oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.
In contrast, for lower dimension models (such as text-embedding-3-small with 512 dimensions), the incremental accuracy gains from increased oversampling levels are less significant, even with rescoring enabled. This suggests a diminishing return on accuracy improvement with higher oversampling in lower dimension spaces.



3. **Influence of Search Limit**:"
How does binary quantization work in the context of vector comparisons?,"Binary quantization is a method used in indexing and data compression, particularly by Qdrant, that involves splitting a data point's vector in half at a certain point. This process essentially divides the vector into two parts, marking everything above the split point as ""1"" and everything below as ""0"". The result is a string of bits that represents the original vector in a compressed form. This quantized code is much smaller and easier to compare. Especially for OpenAI embeddings, this type of quantization has proven to achieve a massive performance improvement at a lower cost of accuracy.","['#### What is Binary Quantization?\n\n\n\nQuantization is a technique used for reducing the total size of the database. It works by compressing vectors into a more compact representation at the cost of accuracy.\n\n\n\n[Binary Quantization](https://qdrant.tech/articles/binary-quantization/) is a fast indexing and data compression method used by Qdrant. It supports vector comparisons, which can dramatically speed up query processing times (up to 40x faster!).', ""Right, so binary quantization is actually very simple. The main idea that we convert the float point elements of the vector into binary representation. So it's either zero or one, depending if the original element is positive or negative. And by doing this we can approximate dot production or cosine similarity, whatever metric you use to compare vectors with just hemming distance, and hemming distance is turned to be very simple to compute. It uses only two most optimized CPU instructions ever"", 'Andrey Vasnetsov:', '| 0        | 0        | 0                |\n\n\n\n</details>\n\n\n\nAs you can see, both functions are equal up to a constant factor, which makes similarity search equivalent.\n\nBinary quantization makes it efficient to compare vectors using this representation.\n\n\n\n\n\n## Product Quantization\n\n\n\n*Available as of v1.2.0*\n\n\n\nProduct quantization is a method of compressing vectors to minimize their memory usage by dividing them into \n\nchunks and quantizing each segment individually.', 'Andrey Vasnetsov:']","#### What is Binary Quantization?



Quantization is a technique used for reducing the total size of the database. It works by compressing vectors into a more compact representation at the cost of accuracy.



[Binary Quantization](https://qdrant.tech/articles/binary-quantization/) is a fast indexing and data compression method used by Qdrant. It supports vector comparisons, which can dramatically speed up query processing times (up to 40x faster!).
Right, so binary quantization is actually very simple. The main idea that we convert the float point elements of the vector into binary representation. So it's either zero or one, depending if the original element is positive or negative. And by doing this we can approximate dot production or cosine similarity, whatever metric you use to compare vectors with just hemming distance, and hemming distance is turned to be very simple to compute. It uses only two most optimized CPU instructions ever
Andrey Vasnetsov:
| 0        | 0        | 0                |



</details>



As you can see, both functions are equal up to a constant factor, which makes similarity search equivalent.

Binary quantization makes it efficient to compare vectors using this representation.





## Product Quantization



*Available as of v1.2.0*



Product quantization is a method of compressing vectors to minimize their memory usage by dividing them into 

chunks and quantizing each segment individually.
Andrey Vasnetsov:"
What is the significance of the 'always_ram' parameter in the context of vector quantization in Qdrant?,"In the context of vector quantization in Qdrant, the 'always_ram' parameter determines whether quantized vectors should be kept always cached in RAM or not. By default, quantized vectors are loaded in the same manner as the original vectors. Setting 'always_ram' to true ensures that the quantized vectors are consistently cached in RAM, providing faster access times.","[""However, in some setups you might want to keep quantized vectors in RAM to speed up the search process. Then set `always_ram` to `true`.\n\n\n\n### Searching with Quantization\n\n\n\nOnce you have configured quantization for a collection, you don't need to do anything extra to search with quantization.\n\nQdrant will automatically use quantized vectors if they are available.\n\n\n\nHowever, there are a few options that you can use to control the search process:\n\n\n\n```http"", 'This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": false\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models', '```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(', 'always_ram=True,\n\n        ),\n\n    ),\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";\n\n\n\nconst client = new QdrantClient({ host: ""localhost"", port: 6333 });\n\n\n\nclient.createCollection(""{collection_name}"", {\n\n  vectors: {\n\n    size: 768,\n\n    distance: ""Cosine"",\n\n  },\n\n  quantization_config: {\n\n    product: {\n\n      compression: ""x16"",\n\n      always_ram: true,\n\n    },\n\n  },\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::{\n\n    client::QdrantClient,\n\n    qdrant::{', '""size"": 1536,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""quantization_config"": {\n\n        ""binary"": {\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),']","However, in some setups you might want to keep quantized vectors in RAM to speed up the search process. Then set `always_ram` to `true`.



### Searching with Quantization



Once you have configured quantization for a collection, you don't need to do anything extra to search with quantization.

Qdrant will automatically use quantized vectors if they are available.



However, there are a few options that you can use to control the search process:



```http
This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": false

        }

    }

}

```



```python

from qdrant_client import QdrantClient, models
```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": true

        }

    }

}

```



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(
always_ram=True,

        ),

    ),

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({ host: ""localhost"", port: 6333 });



client.createCollection(""{collection_name}"", {

  vectors: {

    size: 768,

    distance: ""Cosine"",

  },

  quantization_config: {

    product: {

      compression: ""x16"",

      always_ram: true,

    },

  },

});

```



```rust

use qdrant_client::{

    client::QdrantClient,

    qdrant::{
""size"": 1536,

      ""distance"": ""Cosine""

    },

    ""quantization_config"": {

        ""binary"": {

            ""always_ram"": true

        }

    }

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),"
How can automatic backups be set up for clusters using the Cloud UI?,"Automatic backups for clusters can be set up using the Cloud UI by following the procedures listed on the page. These procedures allow you to configure snapshots on a daily, weekly, or monthly basis. You have the flexibility to keep as many snapshots as needed and can restore a cluster from the snapshot of your choice. It is important to note that during the restoration of a snapshot, the affected cluster will not be available.","['- [Create a cluster](/documentation/cloud/create-cluster/)\n\n- Set up [Authentication](/documentation/cloud/authentication/)\n\n- Configure one or more [Collections](/documentation/concepts/collections/)\n\n\n\n## Automatic backups\n\n\n\nYou can set up automatic backups of your clusters with our Cloud UI. With the\n\nprocedures listed in this page, you can set up\n\nsnapshots on a daily/weekly/monthly basis. You can keep as many snapshots as you\n\nneed. You can restore a cluster from the snapshot of your choice.', ""recommend replication. It guarantees the proper cluster functionality as long as\n\nat least one replica is running.\n\n\n\nFor other use-cases such as disaster recovery, you can set up automatic or\n\nself-service backups.\n\n\n\n## Prerequisites\n\n\n\nYou can back up your Qdrant clusters though the Qdrant Cloud\n\nDashboard at https://cloud.qdrant.io. This section assumes that you've already\n\nset up your cluster, as described in the following sections:\n\n\n\n- [Create a cluster](/documentation/cloud/create-cluster/)"", '[Qdrant Cloud Dashboard](https://cloud.qdrant.io). To do so, take these steps:\n\n\n\n1. Sign in to the dashboard\n\n1. Select Clusters.\n\n1. Select the cluster that you want to back up.\n\n   ![Select a cluster](/documentation/cloud/select-cluster.png)\n\n1. Find and select the **Backups** tab.\n\n1. Now you can set up a backup schedule.\n\n   The **Days of Retention** is the number of days after a backup snapshot is\n\n   deleted.\n\n1. Alternatively, you can select **Backup now** to take an immediate snapshot.', ""![Configure a cluster backup](/documentation/cloud/backup-schedule.png)\n\n\n\n### Restore a backup\n\n\n\nIf you have a backup, it appears in the list of **Available Backups**. You can\n\nchoose to restore or delete the backups of your choice.\n\n\n\n![Restore or delete a cluster backup](/documentation/cloud/restore-delete.png)\n\n\n\n<!-- I think we should move this to the Snapshot page, but I'll do it later -->\n\n\n\n## Backups with a snapshot\n\n\n\nQdrant also offers a snapshot API which allows you to create a snapshot"", '1. [**Create a Free Tier cluster**]({{< ref ""/documentation/cloud/quickstart-cloud"" >}}) with 1 node and a default configuration (1GB RAM, 0.5 CPU and 4GB Disk). This option is perfect for prototyping and you don\'t need a credit card to join.\n\n2. [**Configure a custom cluster**]({{< ref ""/documentation/cloud/create-cluster"" >}}) with additional nodes and more resources. For this option, you will have to provide billing information.']","- [Create a cluster](/documentation/cloud/create-cluster/)

- Set up [Authentication](/documentation/cloud/authentication/)

- Configure one or more [Collections](/documentation/concepts/collections/)



## Automatic backups



You can set up automatic backups of your clusters with our Cloud UI. With the

procedures listed in this page, you can set up

snapshots on a daily/weekly/monthly basis. You can keep as many snapshots as you

need. You can restore a cluster from the snapshot of your choice.
recommend replication. It guarantees the proper cluster functionality as long as

at least one replica is running.



For other use-cases such as disaster recovery, you can set up automatic or

self-service backups.



## Prerequisites



You can back up your Qdrant clusters though the Qdrant Cloud

Dashboard at https://cloud.qdrant.io. This section assumes that you've already

set up your cluster, as described in the following sections:



- [Create a cluster](/documentation/cloud/create-cluster/)
[Qdrant Cloud Dashboard](https://cloud.qdrant.io). To do so, take these steps:



1. Sign in to the dashboard

1. Select Clusters.

1. Select the cluster that you want to back up.

   ![Select a cluster](/documentation/cloud/select-cluster.png)

1. Find and select the **Backups** tab.

1. Now you can set up a backup schedule.

   The **Days of Retention** is the number of days after a backup snapshot is

   deleted.

1. Alternatively, you can select **Backup now** to take an immediate snapshot.
![Configure a cluster backup](/documentation/cloud/backup-schedule.png)



### Restore a backup



If you have a backup, it appears in the list of **Available Backups**. You can

choose to restore or delete the backups of your choice.



![Restore or delete a cluster backup](/documentation/cloud/restore-delete.png)



<!-- I think we should move this to the Snapshot page, but I'll do it later -->



## Backups with a snapshot



Qdrant also offers a snapshot API which allows you to create a snapshot
1. [**Create a Free Tier cluster**]({{< ref ""/documentation/cloud/quickstart-cloud"" >}}) with 1 node and a default configuration (1GB RAM, 0.5 CPU and 4GB Disk). This option is perfect for prototyping and you don't need a credit card to join.

2. [**Configure a custom cluster**]({{< ref ""/documentation/cloud/create-cluster"" >}}) with additional nodes and more resources. For this option, you will have to provide billing information."
What are snapshots in the context of Qdrant Cloud and how are they used in a distributed setup?,"Snapshots in Qdrant Cloud are `tar` archive files that contain data and configuration of a specific collection on a specific node at a specific time. In a distributed setup with multiple nodes in a cluster, snapshots must be created for each node separately when dealing with a single collection. These snapshots can be used to archive data or easily replicate an existing deployment.","[""That's why using snapshots is the best way to export and import Qdrant collections, as they contain all the bits and pieces required to restore the entire collection efficiently.\n\n\n\nThis tutorial will show you how to create a snapshot of a collection and restore it. Since working with snapshots in a distributed environment might be thought to be a bit more complex, we will use a 3-node Qdrant cluster. However, the same approach applies to a single-node setup."", 'client.recoverSnapshot(""{collection_name}"", {\n\n  location: ""http://qdrant-node-1:6333/collections/{collection_name}/snapshots/snapshot-2022-10-10.shapshot"",\n\n  priority: ""snapshot""\n\n});\n\n```\n\n\n\n```bash\n\ncurl -X POST \'http://qdrant-node-1:6333/collections/{collection_name}/snapshots/upload?priority=snapshot\' \\\n\n    -H \'api-key: ********\' \\\n\n    -H \'Content-Type:multipart/form-data\' \\\n\n    -F \'snapshot=@/path/to/snapshot-2022-10-10.shapshot\'\n\n```\n\n\n\n## Snapshots for the whole storage', '../../concepts/snapshots/).                                                                                 |', ""It's worth mentioning that Qdrant only provides the necessary building blocks to create an automated failure recovery.\n\nBuilding a completely automatic process of collection scaling would require control over the cluster machines themself.\n\nCheck out our [cloud solution](https://qdrant.to/cloud), where we made exactly that.\n\n\n\n\n\n**Recover from snapshot**\n\n\n\nIf there are no copies of data in the cluster, it is still possible to recover from a snapshot."", 'This feature can be used to archive data or easily replicate an existing deployment. For disaster recovery, Qdrant Cloud users may prefer to use [Backups](/documentation/cloud/backups/) instead, which are physical disk-level copies of your data.\n\n\n\nFor a step-by-step guide on how to use snapshots, see our [tutorial](/documentation/tutorials/create-snapshot/).\n\n\n\n## Store snapshots']","That's why using snapshots is the best way to export and import Qdrant collections, as they contain all the bits and pieces required to restore the entire collection efficiently.



This tutorial will show you how to create a snapshot of a collection and restore it. Since working with snapshots in a distributed environment might be thought to be a bit more complex, we will use a 3-node Qdrant cluster. However, the same approach applies to a single-node setup.
client.recoverSnapshot(""{collection_name}"", {

  location: ""http://qdrant-node-1:6333/collections/{collection_name}/snapshots/snapshot-2022-10-10.shapshot"",

  priority: ""snapshot""

});

```



```bash

curl -X POST 'http://qdrant-node-1:6333/collections/{collection_name}/snapshots/upload?priority=snapshot' \

    -H 'api-key: ********' \

    -H 'Content-Type:multipart/form-data' \

    -F 'snapshot=@/path/to/snapshot-2022-10-10.shapshot'

```



## Snapshots for the whole storage
../../concepts/snapshots/).                                                                                 |
It's worth mentioning that Qdrant only provides the necessary building blocks to create an automated failure recovery.

Building a completely automatic process of collection scaling would require control over the cluster machines themself.

Check out our [cloud solution](https://qdrant.to/cloud), where we made exactly that.





**Recover from snapshot**



If there are no copies of data in the cluster, it is still possible to recover from a snapshot.
This feature can be used to archive data or easily replicate an existing deployment. For disaster recovery, Qdrant Cloud users may prefer to use [Backups](/documentation/cloud/backups/) instead, which are physical disk-level copies of your data.



For a step-by-step guide on how to use snapshots, see our [tutorial](/documentation/tutorials/create-snapshot/).



## Store snapshots"
What is the significance of the lowercase parameter in the context of text filters in Qdrant?,"The lowercase parameter in Qdrant is used to specify whether the index should be case-insensitive or not. When set to true, Qdrant will convert all the texts to lowercase before indexing them. This means that during searches, the case of the letters in the query will not affect the results.","['## Using text filters in practice\n\n\n\n![](/blog/from_cms/1_pbtd2tzqtjqqlbi61r8czg.webp ""There are also some additional parameters you can provide, such as  min_token_len — minimal length of the token max_token_len — maximal length of the token lowercase — if set to true, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase Using text filters in practice"")', '* **min_token_len**\xa0— minimal length of the token\n\n* **max_token_len**\xa0— maximal length of the token\n\n* **lowercase**\xa0— if set to\xa0*true*, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase\n\n\n\n## Using text filters in practice', '```\n\n\n\n```java\n\nimport static io.qdrant.client.ConditionFactory.matchText;\n\n\n\nmatchText(""description"", ""good cheap"");\n\n```\n\n\n\n```csharp\n\nusing static Qdrant.Client.Grpc.Conditions;\n\n\n\nMatchText(""description"", ""good cheap"");\n\n```\n\n\n\nIf the query has several words, then the condition will be satisfied only if all of them are present in the text.\n\n\n\n### Range\n\n\n\n```json\n\n{\n\n  ""key"": ""price"",\n\n  ""range"": {\n\n    ""gt"": null,\n\n    ""gte"": 100.0,\n\n    ""lt"": null,\n\n    ""lte"": 450.0\n\n  }\n\n}\n\n```\n\n\n\n```python', 'Condition::matches(""city"", ""london"".to_string()),\n\n            Condition::matches(""color"", ""red"".to_string()),\n\n        ])),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Points.Filter;\n\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\n\n\nQdrantClient client =', 'filter: Some(Filter::should([\n\n            Condition::matches(""city"", ""london"".to_string()),\n\n            Condition::matches(""color"", ""red"".to_string()),\n\n        ])),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\n\nimport io.qdrant.client.grpc.Points.Filter;\n\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nimport java.util.List;\n\n\n\nclient\n\n    .scrollAsync(\n\n        ScrollPoints.newBuilder()']","## Using text filters in practice



![](/blog/from_cms/1_pbtd2tzqtjqqlbi61r8czg.webp ""There are also some additional parameters you can provide, such as  min_token_len — minimal length of the token max_token_len — maximal length of the token lowercase — if set to true, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase Using text filters in practice"")
* **min_token_len** — minimal length of the token

* **max_token_len** — maximal length of the token

* **lowercase** — if set to *true*, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase



## Using text filters in practice
```



```java

import static io.qdrant.client.ConditionFactory.matchText;



matchText(""description"", ""good cheap"");

```



```csharp

using static Qdrant.Client.Grpc.Conditions;



MatchText(""description"", ""good cheap"");

```



If the query has several words, then the condition will be satisfied only if all of them are present in the text.



### Range



```json

{

  ""key"": ""price"",

  ""range"": {

    ""gt"": null,

    ""gte"": 100.0,

    ""lt"": null,

    ""lte"": 450.0

  }

}

```



```python
Condition::matches(""city"", ""london"".to_string()),

            Condition::matches(""color"", ""red"".to_string()),

        ])),

        ..Default::default()

    })

    .await?;

```



```java

import java.util.List;



import static io.qdrant.client.ConditionFactory.matchKeyword;



import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Points.Filter;

import io.qdrant.client.grpc.Points.ScrollPoints;



QdrantClient client =
filter: Some(Filter::should([

            Condition::matches(""city"", ""london"".to_string()),

            Condition::matches(""color"", ""red"".to_string()),

        ])),

        ..Default::default()

    })

    .await?;

```



```java

import static io.qdrant.client.ConditionFactory.matchKeyword;



import io.qdrant.client.grpc.Points.Filter;

import io.qdrant.client.grpc.Points.ScrollPoints;

import java.util.List;



client

    .scrollAsync(

        ScrollPoints.newBuilder()"
How does adjusting the `write_consistency_factor` parameter impact write operations in a distributed deployment using Qdrant?,"The `write_consistency_factor` parameter in a distributed deployment using Qdrant defines the number of replicas that must acknowledge a write operation before responding to the client. By increasing this value, the write operations become more tolerant to network partitions within the cluster. However, this also means that a higher number of replicas need to be active in order to perform write operations successfully.","['- Read `consistency` param, can be used with search and retrieve operations to ensure that the results obtained from all replicas are the same. If this option is used, Qdrant will perform the read operation on multiple replicas and resolve the result according to the selected strategy. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents. This options is preferred if the update operations are frequent and the number of replicas is low.', 'Once all shards of the collection are recovered, the collection will become operational again.\n\n\n\n## Consistency guarantees\n\n\n\nBy default, Qdrant focuses on availability and maximum throughput of search operations.\n\nFor the majority of use cases, this is a preferable trade-off.\n\n\n\nDuring the normal state of operation, it is possible to search and modify data from any peers in the cluster.', '""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n\n    shard_number=6,\n\n    replication_factor=2,\n\n    write_consistency_factor=2,\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";', 'replication_factor: Some(2),\n\n        write_consistency_factor: Some(2),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.CreateCollection;\n\nimport io.qdrant.client.grpc.Collections.Distance;\n\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\n\n\nQdrantClient client =', 'collectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\n\tshardNumber: 6,\n\n\treplicationFactor: 2,\n\n\twriteConsistencyFactor: 2\n\n);\n\n```\n\n\n\nWrite operations will fail if the number of active replicas is less than the `write_consistency_factor`.\n\n\n\n### Read consistency\n\n\n\nRead `consistency` can be specified for most read requests and will ensure that the returned result\n\nis consistent across cluster nodes.']","- Read `consistency` param, can be used with search and retrieve operations to ensure that the results obtained from all replicas are the same. If this option is used, Qdrant will perform the read operation on multiple replicas and resolve the result according to the selected strategy. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents. This options is preferred if the update operations are frequent and the number of replicas is low.
Once all shards of the collection are recovered, the collection will become operational again.



## Consistency guarantees



By default, Qdrant focuses on availability and maximum throughput of search operations.

For the majority of use cases, this is a preferable trade-off.



During the normal state of operation, it is possible to search and modify data from any peers in the cluster.
""write_consistency_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),

    shard_number=6,

    replication_factor=2,

    write_consistency_factor=2,

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";
replication_factor: Some(2),

        write_consistency_factor: Some(2),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.CreateCollection;

import io.qdrant.client.grpc.Collections.Distance;

import io.qdrant.client.grpc.Collections.VectorParams;

import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =
collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

	shardNumber: 6,

	replicationFactor: 2,

	writeConsistencyFactor: 2

);

```



Write operations will fail if the number of active replicas is less than the `write_consistency_factor`.



### Read consistency



Read `consistency` can be specified for most read requests and will ensure that the returned result

is consistent across cluster nodes."
What are some of the features and support services that come pre-configured with each instance in Qdrant Cloud?,"Each instance in Qdrant Cloud comes pre-configured with the following tools, features, and support services:1. Automatically created with the latest available version of Qdrant.
2. Upgradeable to later versions of Qdrant as they are released.
3. Equipped with monitoring and logging to observe the health of each cluster.
4. Accessible through the Qdrant Cloud Console.
5. Vertically scalable.
6. Offered on AWS and GCP, with Azure currently in development.
","['The transition is even easier if you use the official client libraries. For example, the [Python Client](https://github.com/qdrant/qdrant-client) has the support of the API key already built-in, so you only need to provide it once, when the QdrantClient instance is created.\n\n\n\n### Cluster configuration\n\n\n\nEach instance comes pre-configured with the following tools, features and support services:\n\n\n\n- Automatically created with the latest available version of Qdrant.', 'Transitioning from on-premise to the cloud version of Qdrant does not require changing anything in the way you interact with the service. All you have to do is [create a Qdrant Cloud account](https://qdrant.to/cloud) and [provide a new API key]({{< ref ""/documentation/cloud/authentication"" >}}) to each request.', '```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\n\n\nvar client = new QdrantClient(\n\n  host: ""xyz-example.eu-central.aws.cloud.qdrant.io"",\n\n  https: true,\n\n  apiKey: ""<paste-your-api-key-here>""\n\n);\n\n```', '## Configuration\n\n\n\nQdrant settings can be configured by setting values to the qdrant property in the `settings.yaml` file. By default, Qdrant tries to connect to an instance at http://localhost:3000.\n\n\n\nExample: \n\n```yaml\n\nqdrant:\n\n    url: ""https://xyz-example.eu-central.aws.cloud.qdrant.io:6333""\n\n    api_key: ""<your-api-key>""\n\n```\n\n\n\nThe available [configuration options](https://docs.privategpt.dev/manual/storage/vector-stores#qdrant-configuration) are:\n\n| Field        | Description |', '- Upgradeable to later versions of Qdrant as they are released.\n\n- Equipped with monitoring and logging to observe the health of each cluster. \n\n- Accessible through the Qdrant Cloud Console.\n\n- Vertically scalable.\n\n- Offered on AWS and GCP, with Azure currently in development. \n\n\n\n### Getting started with Qdrant Cloud\n\n\n\nTo use Qdrant Cloud, you will need to create at least one cluster. There are two ways to start:']","The transition is even easier if you use the official client libraries. For example, the [Python Client](https://github.com/qdrant/qdrant-client) has the support of the API key already built-in, so you only need to provide it once, when the QdrantClient instance is created.



### Cluster configuration



Each instance comes pre-configured with the following tools, features and support services:



- Automatically created with the latest available version of Qdrant.
Transitioning from on-premise to the cloud version of Qdrant does not require changing anything in the way you interact with the service. All you have to do is [create a Qdrant Cloud account](https://qdrant.to/cloud) and [provide a new API key]({{< ref ""/documentation/cloud/authentication"" >}}) to each request.
```



```csharp

using Qdrant.Client;



var client = new QdrantClient(

  host: ""xyz-example.eu-central.aws.cloud.qdrant.io"",

  https: true,

  apiKey: ""<paste-your-api-key-here>""

);

```
## Configuration



Qdrant settings can be configured by setting values to the qdrant property in the `settings.yaml` file. By default, Qdrant tries to connect to an instance at http://localhost:3000.



Example: 

```yaml

qdrant:

    url: ""https://xyz-example.eu-central.aws.cloud.qdrant.io:6333""

    api_key: ""<your-api-key>""

```



The available [configuration options](https://docs.privategpt.dev/manual/storage/vector-stores#qdrant-configuration) are:

| Field        | Description |
- Upgradeable to later versions of Qdrant as they are released.

- Equipped with monitoring and logging to observe the health of each cluster. 

- Accessible through the Qdrant Cloud Console.

- Vertically scalable.

- Offered on AWS and GCP, with Azure currently in development. 



### Getting started with Qdrant Cloud



To use Qdrant Cloud, you will need to create at least one cluster. There are two ways to start:"
How is the `must_not` clause used in conjunction with other clauses in filtering data?,"The `must_not` clause in filtering data is used to exclude documents that meet specific criteria. The `must_not` clause can be used in combination with the `must` clause to create a more refined filter. Specifically, the `must_not` clause is used to specify conditions that must not be met for a document to be included in the results.","['{ ""id"": 6, ""city"": ""Moscow"", ""color"": ""blue"" }\n\n]\n\n```\n\n\n\nWhen using `must_not`, the clause becomes `true` if none if the conditions listed inside `should` is satisfied.\n\nIn this sense, `must_not` is equivalent to the expression `(NOT A) AND (NOT B) AND (NOT C)`.\n\n\n\n### Clauses combination\n\n\n\nIt is also possible to use several clauses simultaneously:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/scroll\n\n{\n\n    ""filter"": {\n\n        ""must"": [', '[{ ""id"": 2, ""city"": ""London"", ""color"": ""red"" }]\n\n```\n\n\n\nWhen using `must`, the clause becomes `true` only if every condition listed inside `must` is satisfied.\n\nIn this sense, `must` is equivalent to the operator `AND`.\n\n\n\n### Should\n\n\n\nExample:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/scroll\n\n{\n\n    ""filter"": {\n\n        ""should"": [\n\n            { ""key"": ""city"", ""match"": { ""value"": ""London"" } },\n\n            { ""key"": ""color"", ""match"": { ""value"": ""red"" } }\n\n        ]\n\n    }\n\n}\n\n```', '{ ""id"": 3, ""city"": ""London"", ""color"": ""blue"" },\n\n  { ""id"": 4, ""city"": ""Berlin"", ""color"": ""red"" }\n\n]\n\n```\n\n\n\nWhen using `should`, the clause becomes `true` if at least one condition listed inside `should` is satisfied.\n\nIn this sense, `should` is equivalent to the operator `OR`.\n\n\n\n### Must Not\n\n\n\nExample:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/scroll\n\n{\n\n    ""filter"": {\n\n        ""must_not"": [\n\n            { ""key"": ""city"", ""match"": { ""value"": ""London"" } },', '{\n\n    ""filter"": {\n\n        ""must"": [\n\n            { ""key"": ""city"", ""match"": { ""value"": ""London"" } }\n\n        ],\n\n        ""must_not"": [\n\n            { ""key"": ""color"", ""match"": { ""value"": ""red"" } }\n\n        ]\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.scroll(\n\n    collection_name=""{collection_name}"",\n\n    scroll_filter=models.Filter(\n\n        must=[\n\n            models.FieldCondition(key=""city"", match=models.MatchValue(value=""London"")),\n\n        ],\n\n        must_not=[', '```\n\n\n\nIn this case, the conditions are combined by `AND`.\n\n\n\nAlso, the conditions could be recursively nested. Example:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/scroll\n\n{\n\n    ""filter"": {\n\n        ""must_not"": [\n\n            {\n\n                ""must"": [\n\n                    { ""key"": ""city"", ""match"": { ""value"": ""London"" } },\n\n                    { ""key"": ""color"", ""match"": { ""value"": ""red"" } }\n\n                ]\n\n            }\n\n        ]\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.scroll(']","{ ""id"": 6, ""city"": ""Moscow"", ""color"": ""blue"" }

]

```



When using `must_not`, the clause becomes `true` if none if the conditions listed inside `should` is satisfied.

In this sense, `must_not` is equivalent to the expression `(NOT A) AND (NOT B) AND (NOT C)`.



### Clauses combination



It is also possible to use several clauses simultaneously:



```http

POST /collections/{collection_name}/points/scroll

{

    ""filter"": {

        ""must"": [
[{ ""id"": 2, ""city"": ""London"", ""color"": ""red"" }]

```



When using `must`, the clause becomes `true` only if every condition listed inside `must` is satisfied.

In this sense, `must` is equivalent to the operator `AND`.



### Should



Example:



```http

POST /collections/{collection_name}/points/scroll

{

    ""filter"": {

        ""should"": [

            { ""key"": ""city"", ""match"": { ""value"": ""London"" } },

            { ""key"": ""color"", ""match"": { ""value"": ""red"" } }

        ]

    }

}

```
{ ""id"": 3, ""city"": ""London"", ""color"": ""blue"" },

  { ""id"": 4, ""city"": ""Berlin"", ""color"": ""red"" }

]

```



When using `should`, the clause becomes `true` if at least one condition listed inside `should` is satisfied.

In this sense, `should` is equivalent to the operator `OR`.



### Must Not



Example:



```http

POST /collections/{collection_name}/points/scroll

{

    ""filter"": {

        ""must_not"": [

            { ""key"": ""city"", ""match"": { ""value"": ""London"" } },
{

    ""filter"": {

        ""must"": [

            { ""key"": ""city"", ""match"": { ""value"": ""London"" } }

        ],

        ""must_not"": [

            { ""key"": ""color"", ""match"": { ""value"": ""red"" } }

        ]

    }

}

```



```python

client.scroll(

    collection_name=""{collection_name}"",

    scroll_filter=models.Filter(

        must=[

            models.FieldCondition(key=""city"", match=models.MatchValue(value=""London"")),

        ],

        must_not=[
```



In this case, the conditions are combined by `AND`.



Also, the conditions could be recursively nested. Example:



```http

POST /collections/{collection_name}/points/scroll

{

    ""filter"": {

        ""must_not"": [

            {

                ""must"": [

                    { ""key"": ""city"", ""match"": { ""value"": ""London"" } },

                    { ""key"": ""color"", ""match"": { ""value"": ""red"" } }

                ]

            }

        ]

    }

}

```



```python

client.scroll("
What are some advantages of vector search over keyword-based search?,"Vector search has clear advantages over keyword-based search in various scenarios as outlined in the document chunk. Some of these advantages include:

1. Multi-lingual & multi-modal search: Vector search is effective in handling searches across multiple languages and modalities.
2. For short texts with typos and ambiguous content-dependent meanings: Vector search excels in situations where the search queries are short, contain typos, or have ambiguous meanings.
3. Specialized domains with tuned encoder models: Vector search is beneficial in specialized domains where encoder models can be fine-tuned for better search results.
4. Document-as-a-Query similarity search: Vector search allows for similarity searches where the entire document can be used as a query to find similar documents.

While vector search offers these advantages, it is important to note that keyword-based search still has its relevance in certain cases. For example, in out-of-domain search.","[""preprocessing of the documents and queries. Vector search turned out to be a breakthrough, as it has\n\nsome clear advantages in the following scenarios:\n\n\n\n- 🌍 Multi-lingual & multi-modal search\n\n- 🤔 For short texts with typos and ambiguous content-dependent meanings\n\n- 👨\u200d🔬 Specialized domains with tuned encoder models\n\n- 📄 Document-as-a-Query similarity search\n\n\n\nIt doesn't mean we do not keyword search anymore. There are also some cases in which this kind of method\n\nmight be useful:"", 'advantage of their efficient indexing and searching techniques, vector databases enable faster \n\nand more accurate retrieval of unstructured data already represented as vectors, which can \n\nhelp put in front of users the most relevant results to their queries.\n\n\n\nIn addition, other benefits of using vector databases include:\n\n1. Efficient storage and indexing of high-dimensional data.\n\n3. Ability to handle large-scale datasets with billions of data points.\n\n4. Support for real-time analytics and queries.', ""documents. There are also some cases in which your users use different terminology than the one you have in your database. \n\nThose problems are easily solvable with neural vector embeddings, and combining both approaches with an additional reranking \n\nstep is possible. So you don't need to resign from your well-known full-text search mechanism but extend it with vector \n\nsearch to support the queries you haven't foreseen."", ""</tr>\n\n   </tbody>\n\n</table>\n\n\n\n\n\n# A wrap up\n\n\n\nEach search scenario requires a specialized tool to achieve the best results possible. Still, combining multiple tools with \n\nminimal overhead is possible to improve the search precision even further. Introducing vector search into an existing search \n\nstack doesn't need to be a revolution but just one small step at a time. \n\n\n\nYou'll never cover all the possible queries with a list of synonyms, so a full-text search may not find all the relevant"", ""are able to benefit the advantages of both methods.\n\n\n\nAgain, it's worth mentioning that with the 3rd experiment, with cross-encoder reranking, Qdrant returned more than 48.12% of \n\nthe relevant items and BM25 around 66.66%.\n\n\n\n## Some anecdotal observations\n\n\n\nNone of the algorithms works better in all the cases. There might be some specific queries in which keyword-based search\n\nwill be a winner and the other way around. The table shows some interesting examples we could find in WANDS dataset""]","preprocessing of the documents and queries. Vector search turned out to be a breakthrough, as it has

some clear advantages in the following scenarios:



- 🌍 Multi-lingual & multi-modal search

- 🤔 For short texts with typos and ambiguous content-dependent meanings

- 👨‍🔬 Specialized domains with tuned encoder models

- 📄 Document-as-a-Query similarity search



It doesn't mean we do not keyword search anymore. There are also some cases in which this kind of method

might be useful:
advantage of their efficient indexing and searching techniques, vector databases enable faster 

and more accurate retrieval of unstructured data already represented as vectors, which can 

help put in front of users the most relevant results to their queries.



In addition, other benefits of using vector databases include:

1. Efficient storage and indexing of high-dimensional data.

3. Ability to handle large-scale datasets with billions of data points.

4. Support for real-time analytics and queries.
documents. There are also some cases in which your users use different terminology than the one you have in your database. 

Those problems are easily solvable with neural vector embeddings, and combining both approaches with an additional reranking 

step is possible. So you don't need to resign from your well-known full-text search mechanism but extend it with vector 

search to support the queries you haven't foreseen.
</tr>

   </tbody>

</table>





# A wrap up



Each search scenario requires a specialized tool to achieve the best results possible. Still, combining multiple tools with 

minimal overhead is possible to improve the search precision even further. Introducing vector search into an existing search 

stack doesn't need to be a revolution but just one small step at a time. 



You'll never cover all the possible queries with a list of synonyms, so a full-text search may not find all the relevant
are able to benefit the advantages of both methods.



Again, it's worth mentioning that with the 3rd experiment, with cross-encoder reranking, Qdrant returned more than 48.12% of 

the relevant items and BM25 around 66.66%.



## Some anecdotal observations



None of the algorithms works better in all the cases. There might be some specific queries in which keyword-based search

will be a winner and the other way around. The table shows some interesting examples we could find in WANDS dataset"
What is the purpose of the DocArray library and how does it relate to the Qdrant engine?,"The DocArray library is designed to define a structure for unstructured data, making it easier to process a collection of documents that may include various data types such as audio, video, and text. This library simplifies the handling of these diverse types of data within a single framework. On the other hand, the Qdrant engine focuses on enabling the scaling of vector search and storage capabilities. By integrating the DocArray library with the Qdrant engine, users can benefit from efficient processing of unstructured data and enhanced scalability for vector search operations. This integration streamlines the handling of different data types while also optimizing the performance of vector search and storage functions.","['DocArray library defines a structure for the unstructured data and simplifies processing a collection of documents,\n\nincluding audio, video, text, and other data types. Qdrant engine empowers scaling of its vector search and storage.\n\n\n\nRead more about the integration by this [link](/documentation/install/#docarray)', '---\n\ntitle: DocArray\n\nweight: 300\n\naliases: [ ../integrations/docarray/ ]\n\n---\n\n\n\n# DocArray\n\nYou can use Qdrant natively in DocArray, where Qdrant serves as a high-performance document store to enable scalable vector search.\n\n\n\nDocArray is a library from Jina AI for nested, unstructured data in transit, including text, image, audio, video, 3D mesh, etc.\n\nIt allows deep-learning engineers to efficiently process, embed, search, recommend, store, and transfer the data with a Pythonic API.', ""We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. \n\n\n\nWhy?"", '---\n\ndraft: false\n\npreview_image: /blog/from_cms/docarray.png\n\nsitemapExclude: true\n\ntitle: ""Qdrant and Jina integration: storage backend support for DocArray""\n\nslug: qdrant-and-jina-integration\n\nshort_description: ""One more way to use Qdrant: Jina\'s DocArray is now\n\n  supporting Qdrant as a storage backend.""\n\ndescription: We are happy to announce that Jina.AI integrates Qdrant engine as a\n\n  storage backend to their DocArray solution.\n\ndate: 2022-03-15T15:00:00+03:00\n\nauthor: Alyona Kavyerina', '## Why Qdrant?']","DocArray library defines a structure for the unstructured data and simplifies processing a collection of documents,

including audio, video, text, and other data types. Qdrant engine empowers scaling of its vector search and storage.



Read more about the integration by this [link](/documentation/install/#docarray)
---

title: DocArray

weight: 300

aliases: [ ../integrations/docarray/ ]

---



# DocArray

You can use Qdrant natively in DocArray, where Qdrant serves as a high-performance document store to enable scalable vector search.



DocArray is a library from Jina AI for nested, unstructured data in transit, including text, image, audio, video, 3D mesh, etc.

It allows deep-learning engineers to efficiently process, embed, search, recommend, store, and transfer the data with a Pythonic API.
We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. 



Why?
---

draft: false

preview_image: /blog/from_cms/docarray.png

sitemapExclude: true

title: ""Qdrant and Jina integration: storage backend support for DocArray""

slug: qdrant-and-jina-integration

short_description: ""One more way to use Qdrant: Jina's DocArray is now

  supporting Qdrant as a storage backend.""

description: We are happy to announce that Jina.AI integrates Qdrant engine as a

  storage backend to their DocArray solution.

date: 2022-03-15T15:00:00+03:00

author: Alyona Kavyerina
## Why Qdrant?"
What are the search-time parameters that can be used to tune the search accuracy and speed?,"The search-time parameters that can be used to tune the search accuracy and speed are ""hnsw_ef"" and ""exact"". The ""hnsw_ef"" parameter is set to 128, which controls the search accuracy by specifying the number of neighbors to inspect during the search process. The ""exact"" parameter is set to false, indicating that an approximate search method is used for faster retrieval of results. These parameters are essential for optimizing the search process in the context of the QdrantClient for efficient retrieval of relevant data points.","['collectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },\n\n\toptimizersConfig: new OptimizersConfigDiff { MemmapThreshold = 20000 },\n\n\tquantizationConfig: new QuantizationConfig\n\n\t{\n\n\t\tScalar = new ScalarQuantization { Type = QuantizationType.Int8, AlwaysRam = true }\n\n\t}\n\n);\n\n```\n\n\n\nThere are also some search-time parameters you can use to tune the search accuracy and speed:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/search\n\n{', '- `exact` - if set to `true`, will perform exact search, which will be slower, but more accurate. You can use it to compare results of the search with different `hnsw_ef` values versus the ground truth.\n\n\n\n## Latency vs Throughput\n\n\n\n- There are two main approaches to measure the speed of search:\n\n  - latency of the request - the time from the moment request is submitted to the moment a response is received\n\n  - throughput - the number of requests per second the system can handle', '```text\n\navg(precision@5) = 0.9969999999999998\n\n```\n\n\n\nThe precision has obviously increased, and we know how to control it. However, there is a trade-off between the precision and the search\n\nlatency and memory requirements. In some specific cases, we may want to increase the precision as much as possible, so now we know how\n\nto do it. \n\n\n\n## Wrapping up', 'HNSW is chosen for several reasons.\n\nFirst, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search.\n\nSecond, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).\n\n\n\n*Available as of v1.1.1*\n\n\n\nThe HNSW parameters can also be configured on a collection and named vector\n\nlevel by setting [`hnsw_config`](../indexing/#vector-index) to fine-tune search\n\nperformance.', '<td>0%</td>\n\n         <td><span style=""color: green;"">-28.57%</span></td>\n\n      </tr>\n\n   </tbody>\n\n</table>\n\n\n\nA slight decrease in search precision results in a considerable improvement in the \n\nlatency. Unless you aim for the highest precision possible, you should not notice the \n\ndifference in your search quality.\n\n\n\n#### Gist-960\n\n\n\n<table>\n\n   <thead>\n\n      <tr>\n\n         <th colspan=""2""></th>\n\n         <th colspan=""2"">ef = 128</th>\n\n         <th colspan=""2"">ef = 256</th>']","collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },

	optimizersConfig: new OptimizersConfigDiff { MemmapThreshold = 20000 },

	quantizationConfig: new QuantizationConfig

	{

		Scalar = new ScalarQuantization { Type = QuantizationType.Int8, AlwaysRam = true }

	}

);

```



There are also some search-time parameters you can use to tune the search accuracy and speed:



```http

POST /collections/{collection_name}/points/search

{
- `exact` - if set to `true`, will perform exact search, which will be slower, but more accurate. You can use it to compare results of the search with different `hnsw_ef` values versus the ground truth.



## Latency vs Throughput



- There are two main approaches to measure the speed of search:

  - latency of the request - the time from the moment request is submitted to the moment a response is received

  - throughput - the number of requests per second the system can handle
```text

avg(precision@5) = 0.9969999999999998

```



The precision has obviously increased, and we know how to control it. However, there is a trade-off between the precision and the search

latency and memory requirements. In some specific cases, we may want to increase the precision as much as possible, so now we know how

to do it. 



## Wrapping up
HNSW is chosen for several reasons.

First, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search.

Second, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).



*Available as of v1.1.1*



The HNSW parameters can also be configured on a collection and named vector

level by setting [`hnsw_config`](../indexing/#vector-index) to fine-tune search

performance.
<td>0%</td>

         <td><span style=""color: green;"">-28.57%</span></td>

      </tr>

   </tbody>

</table>



A slight decrease in search precision results in a considerable improvement in the 

latency. Unless you aim for the highest precision possible, you should not notice the 

difference in your search quality.



#### Gist-960



<table>

   <thead>

      <tr>

         <th colspan=""2""></th>

         <th colspan=""2"">ef = 128</th>

         <th colspan=""2"">ef = 256</th>"
What is the significance of using named vectors in a collection within the Qdrant system?,"Named vectors in a collection within the Qdrant system allow for the inclusion of multiple vectors in a single point, with each vector having its own dimensionality and metric requirements. This feature enables more flexibility in organizing and structuring data within a collection, as different vectors can represent distinct aspects or features of the data points. By utilizing named vectors, users can better tailor the representation of their data to suit specific analysis or search requirements, enhancing the overall efficiency and effectiveness of the system.","['## Searching with multiple vectors\n\n\n\nIf you decided to describe each object with several neural embeddings, then at each search operation you need to provide the vector name along with the embedding, so the engine knows which one to use. The interface of the search operation is pretty straightforward and requires an instance of NamedVector.\n\n\n\n```python\n\nfrom qdrant_client.http.models import NamedVector\n\n\n\ntext_results = client.search(\n\n   collection_name=""ms-coco-2017"",\n\n   query_vector=NamedVector(', 'Even with such a system, Qdrant ensures data consistency.\n\n\n\n[*Available as of v0.10.0*](#create-vector-name)\n\n\n\nIf the collection was created with multiple vectors, each vector data can be provided using the vector\'s name:\n\n\n\n```http\n\nPUT /collections/{collection_name}/points\n\n{\n\n    ""points"": [\n\n        {\n\n            ""id"": 1,\n\n            ""vector"": {\n\n                ""image"": [0.9, 0.1, 0.1, 0.2],\n\n                ""text"": [0.4, 0.7, 0.1, 0.8, 0.1, 0.1, 0.9, 0.2]\n\n            }\n\n        },\n\n        {', '),\n\n   }\n\n)\n\n```\n\n\n\nIn case you want to keep a single vector per collection, you can still do it without putting a name though.\n\n\n\n```python\n\nclient.recreate_collection(\n\n   collection_name=""single_vector"",\n\n   vectors_config=VectorParams(\n\n       size=100,\n\n       distance=Distance.COSINE,\n\n   )\n\n)\n\n```', 'collection_name: ""{collection_name}"".to_string(),\n\n        vectors_config: Some(VectorsConfig {\n\n            config: Some(Config::Params(VectorParams {\n\n                size: 100,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        init_from_collection: Some(""{from_collection_name}"".to_string()),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;', 'query_vector=NamedVector(\n\n       name=""text"",\n\n       vector=row[""text_vector""],\n\n   ),\n\n   limit=5,\n\n   with_vectors=False,\n\n   with_payload=True,\n\n)\n\n```\n\n\n\nIf we, on the other hand, decided to search using the image embedding, then we just provide the vector name we have chosen while creating the collection, so instead of “text”, we would provide “image”, as this is how we configured it at the very beginning.\n\n\n\n## The results: image vs text search']","## Searching with multiple vectors



If you decided to describe each object with several neural embeddings, then at each search operation you need to provide the vector name along with the embedding, so the engine knows which one to use. The interface of the search operation is pretty straightforward and requires an instance of NamedVector.



```python

from qdrant_client.http.models import NamedVector



text_results = client.search(

   collection_name=""ms-coco-2017"",

   query_vector=NamedVector(
Even with such a system, Qdrant ensures data consistency.



[*Available as of v0.10.0*](#create-vector-name)



If the collection was created with multiple vectors, each vector data can be provided using the vector's name:



```http

PUT /collections/{collection_name}/points

{

    ""points"": [

        {

            ""id"": 1,

            ""vector"": {

                ""image"": [0.9, 0.1, 0.1, 0.2],

                ""text"": [0.4, 0.7, 0.1, 0.8, 0.1, 0.1, 0.9, 0.2]

            }

        },

        {
),

   }

)

```



In case you want to keep a single vector per collection, you can still do it without putting a name though.



```python

client.recreate_collection(

   collection_name=""single_vector"",

   vectors_config=VectorParams(

       size=100,

       distance=Distance.COSINE,

   )

)

```
collection_name: ""{collection_name}"".to_string(),

        vectors_config: Some(VectorsConfig {

            config: Some(Config::Params(VectorParams {

                size: 100,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        init_from_collection: Some(""{from_collection_name}"".to_string()),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;
query_vector=NamedVector(

       name=""text"",

       vector=row[""text_vector""],

   ),

   limit=5,

   with_vectors=False,

   with_payload=True,

)

```



If we, on the other hand, decided to search using the image embedding, then we just provide the vector name we have chosen while creating the collection, so instead of “text”, we would provide “image”, as this is how we configured it at the very beginning.



## The results: image vs text search"
What parameters can be configured in the configuration file to improve performance in HNSW indexing?,"In the context of HNSW indexing, the parameters that can be configured in the configuration file to enhance performance are `m`, `ef_construct`, and `ef`. 

- `m`: This parameter represents the number of edges per node in the index graph. A higher value for `m` leads to more accurate search results but also requires more space. By adjusting `m`, you can control the trade-off between search accuracy and space efficiency.

- `ef_construct`: When building the index, `ef_construct` specifies the number of neighbors to consider. Increasing the value of `ef_construct` improves the accuracy of the search but also increases the time required to build the index. 

- `ef`: This parameter is used when searching for targets. It determines the search range for finding nearest neighbors. By setting an appropriate value for `ef`, you can optimize the search process to balance efficiency and accuracy in finding the nearest neighbors within the specified search range.","['In order to improve performance, HNSW limits the maximum degree of nodes on each layer of the graph to `m`. In addition, you can use `ef_construct` (when building index) or `ef` (when searching targets) to specify a search range.\n\n\n\nThe corresponding parameters could be configured in the configuration file:\n\n\n\n```yaml\n\nstorage:\n\n  # Default parameters of HNSW Index. Could be overridden for each collection or named vector individually\n\n  hnsw_index:\n\n    # Number of edges per node in the index graph.', '}),\n\n        hnsw_config: Some(HnswConfigDiff {\n\n            on_disk: Some(true),\n\n            ..Default::default()\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.CreateCollection;\n\nimport io.qdrant.client.grpc.Collections.Distance;\n\nimport io.qdrant.client.grpc.Collections.HnswConfigDiff;', '""hnsw_config"": {\n\n        ""ef_construct"": 123\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""quantile"": 0.8,\n\n            ""always_ram"": false\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```bash\n\ncurl -X PATCH http://localhost:6333/collections/test_collection1 \\\n\n  -H \'Content-Type: application/json\' \\\n\n  --data-raw \'{\n\n    ""vectors"": {\n\n        ""my_vector"": {\n\n            ""hnsw_config"": {\n\n                ""m"": 32,\n\n                ""ef_construct"": 123', 'HNSW is chosen for several reasons.\n\nFirst, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search.\n\nSecond, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).\n\n\n\n*Available as of v1.1.1*\n\n\n\nThe HNSW parameters can also be configured on a collection and named vector\n\nlevel by setting [`hnsw_config`](../indexing/#vector-index) to fine-tune search\n\nperformance.', 'queries will be executed on the whole collection, we can also change its configuration, so the HNSW \n\ngraph is not built globally. This is also done due to [performance reasons](/documentation/guides/multiple-partitions/#calibrate-performance).\n\n**You should not be changing these parameters, if you know there will be some global search operations\n\ndone on the collection.**\n\n\n\n```python\n\nclient.update_collection(\n\n    collection_name=""my_collection"",']","In order to improve performance, HNSW limits the maximum degree of nodes on each layer of the graph to `m`. In addition, you can use `ef_construct` (when building index) or `ef` (when searching targets) to specify a search range.



The corresponding parameters could be configured in the configuration file:



```yaml

storage:

  # Default parameters of HNSW Index. Could be overridden for each collection or named vector individually

  hnsw_index:

    # Number of edges per node in the index graph.
}),

        hnsw_config: Some(HnswConfigDiff {

            on_disk: Some(true),

            ..Default::default()

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.CreateCollection;

import io.qdrant.client.grpc.Collections.Distance;

import io.qdrant.client.grpc.Collections.HnswConfigDiff;
""hnsw_config"": {

        ""ef_construct"": 123

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""quantile"": 0.8,

            ""always_ram"": false

        }

    }

}

```



```bash

curl -X PATCH http://localhost:6333/collections/test_collection1 \

  -H 'Content-Type: application/json' \

  --data-raw '{

    ""vectors"": {

        ""my_vector"": {

            ""hnsw_config"": {

                ""m"": 32,

                ""ef_construct"": 123
HNSW is chosen for several reasons.

First, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search.

Second, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).



*Available as of v1.1.1*



The HNSW parameters can also be configured on a collection and named vector

level by setting [`hnsw_config`](../indexing/#vector-index) to fine-tune search

performance.
queries will be executed on the whole collection, we can also change its configuration, so the HNSW 

graph is not built globally. This is also done due to [performance reasons](/documentation/guides/multiple-partitions/#calibrate-performance).

**You should not be changing these parameters, if you know there will be some global search operations

done on the collection.**



```python

client.update_collection(

    collection_name=""my_collection"","
How does product quantization differ from scalar quantization in terms of compression and computational efficiency?,"Product quantization involves dividing data into chunks and quantizing each segment individually, approximating each chunk with a centroid index that represents the original vector component. The positions of these centroids are determined through clustering algorithms like k-means, with Qdrant currently utilizing 256 centroids, allowing each centroid index to be represented by a single byte. Product quantization can achieve higher compression factors compared to scalar quantization. However, there are tradeoffs to consider. Product quantization distance calculations are not SIMD-friendly, resulting in slower computational speed compared to scalar quantization. Additionally, product quantization introduces a loss of accuracy, making it more suitable for high-dimensional vectors. To optimize quantization parameters for specific use cases, it is recommended to refer to the ""Quantization Tips"" section for more information.","['<td>474 s</td>\n\n      </tr>\n\n   </tbody>\n\n</table>\n\n\n\nIt turns out that in some cases, Product Quantization may not only reduce the memory usage, \n\nbut also the search time.\n\n\n\n## Good practices\n\n\n\nCompared to Scalar Quantization, Product Quantization offers a higher compression rate. However, this comes with considerable trade-offs in accuracy, and at times, in-RAM search speed.\n\n\n\nProduct Quantization tends to be favored in certain specific scenarios:', '* **Product Quantization** may provide a better compression ratio, but it has a significant loss of accuracy and is slower than scalar quantization. It is recommended if the memory footprint is the top priority and the search speed is not critical.\n\n\n\n## Setting up Quantization in Qdrant\n\n\n\nYou can configure quantization for a collection by specifying the quantization parameters in the `quantization_config` section of the collection configuration.', 'weight: 4\n\nauthor: Kacper Łukawski\n\nauthor_link: https://medium.com/@lukawskikacper\n\ndate: 2023-05-30T09:45:00+02:00\n\ndraft: false\n\nkeywords:\n\n  - vector search\n\n  - product quantization\n\n  - memory optimization\n\naliases: [ /articles/product_quantization/ ]\n\n---\n\n\n\nQdrant 1.1.0 brought the support of [Scalar Quantization](/articles/scalar-quantization/),\n\na technique of reducing the memory footprint by even four times, by using `int8` to represent', '<th><small>Mean search time</small></th>\n\n      </tr>\n\n   </thead>\n\n   <tbody>\n\n      <tr>\n\n         <th>Non-quantized vectors</th>\n\n         <td>452</td>\n\n         <td>0.802</td>\n\n         <td>0.077</td>\n\n         <td>0.887</td>\n\n         <td>0.135</td>\n\n         <td>0.941</td>\n\n         <td>0.231</td>\n\n      </tr>\n\n      <tr>\n\n         <th>Scalar Quantization</th>\n\n         <td>312</td>\n\n         <td>0.802</td>\n\n         <td>0.043</td>\n\n         <td>0.888</td>\n\n         <td>0.077</td>', '<td>147 s</td>\n\n         <td>339 s</td>\n\n         <td>217 s</td>\n\n         <td>178 s</td>\n\n      </tr>\n\n   </tbody>\n\n</table>\n\n\n\nProduct Quantization increases both indexing and searching time. The higher the compression ratio, \n\nthe lower the search precision. The main benefit is undoubtedly the reduced usage of memory.\n\n\n\n#### Arxiv-titles-384-angular-no-filters\n\n\n\n<table>\n\n   <thead>\n\n      <tr>\n\n         <th></th>\n\n         <th>Original</th>\n\n         <th>1D clusters</th>']","<td>474 s</td>

      </tr>

   </tbody>

</table>



It turns out that in some cases, Product Quantization may not only reduce the memory usage, 

but also the search time.



## Good practices



Compared to Scalar Quantization, Product Quantization offers a higher compression rate. However, this comes with considerable trade-offs in accuracy, and at times, in-RAM search speed.



Product Quantization tends to be favored in certain specific scenarios:
* **Product Quantization** may provide a better compression ratio, but it has a significant loss of accuracy and is slower than scalar quantization. It is recommended if the memory footprint is the top priority and the search speed is not critical.



## Setting up Quantization in Qdrant



You can configure quantization for a collection by specifying the quantization parameters in the `quantization_config` section of the collection configuration.
weight: 4

author: Kacper Łukawski

author_link: https://medium.com/@lukawskikacper

date: 2023-05-30T09:45:00+02:00

draft: false

keywords:

  - vector search

  - product quantization

  - memory optimization

aliases: [ /articles/product_quantization/ ]

---



Qdrant 1.1.0 brought the support of [Scalar Quantization](/articles/scalar-quantization/),

a technique of reducing the memory footprint by even four times, by using `int8` to represent
<th><small>Mean search time</small></th>

      </tr>

   </thead>

   <tbody>

      <tr>

         <th>Non-quantized vectors</th>

         <td>452</td>

         <td>0.802</td>

         <td>0.077</td>

         <td>0.887</td>

         <td>0.135</td>

         <td>0.941</td>

         <td>0.231</td>

      </tr>

      <tr>

         <th>Scalar Quantization</th>

         <td>312</td>

         <td>0.802</td>

         <td>0.043</td>

         <td>0.888</td>

         <td>0.077</td>
<td>147 s</td>

         <td>339 s</td>

         <td>217 s</td>

         <td>178 s</td>

      </tr>

   </tbody>

</table>



Product Quantization increases both indexing and searching time. The higher the compression ratio, 

the lower the search precision. The main benefit is undoubtedly the reduced usage of memory.



#### Arxiv-titles-384-angular-no-filters



<table>

   <thead>

      <tr>

         <th></th>

         <th>Original</th>

         <th>1D clusters</th>"
What is the significance of Qdrant's approach to storing multiple vectors per object in data indexing?,"Qdrant's approach to storing multiple vectors per object in data indexing is significant as it opens up new possibilities in data representation and retrieval. By allowing multiple vectors to be associated with a single object, Qdrant enables more nuanced and detailed analysis of the data. This approach can be particularly beneficial in applications such as data science, neural networks, database management, and similarity search. It provides a more comprehensive understanding of the relationships between objects and enhances the accuracy and efficiency of search and retrieval processes. Overall, Qdrant's innovative vector storage strategy contributes to pushing the boundaries of data indexing and offers practical applications and benefits in various fields.","[""---\n\ndraft: false\n\ntitle: Storing multiple vectors per object in Qdrant\n\nslug: storing-multiple-vectors-per-object-in-qdrant\n\nshort_description: Qdrant's approach to storing multiple vectors per object,\n\n  unraveling new possibilities in data representation and retrieval.\n\ndescription: Discover how Qdrant continues to push the boundaries of data\n\n  indexing, providing insights into the practical applications and benefits of\n\n  this novel vector storage strategy."", '.co/docs/datasets/index)\xa0library.', 'It is not surprising that a method used for creating neural encoding plays an important role in the search process and its quality. If your data points might be described using several vectors, then the latest release of Qdrant gives you an opportunity to store them together and reuse the payloads, instead of creating several collections and querying them separately.', 'If you’d like to check out some other examples, please check out our\xa0[full notebook](https://gist.github.com/kacperlukawski/961aaa7946f55110abfcd37fbe869b8f)\xa0presenting the search results and the whole pipeline implementation.', 'detail. In a nutshell, you can **reduce the memory requirements by up to 64 times**!\n\n\n\n### Optional named vectors\n\n\n\nQdrant has been supporting multiple named vectors per point for quite a long time. Those may have \n\nutterly different dimensionality and distance functions used to calculate similarity. Having multiple \n\nembeddings per item is an essential real-world scenario. For example, you might be encoding textual']","---

draft: false

title: Storing multiple vectors per object in Qdrant

slug: storing-multiple-vectors-per-object-in-qdrant

short_description: Qdrant's approach to storing multiple vectors per object,

  unraveling new possibilities in data representation and retrieval.

description: Discover how Qdrant continues to push the boundaries of data

  indexing, providing insights into the practical applications and benefits of

  this novel vector storage strategy.
.co/docs/datasets/index) library.
It is not surprising that a method used for creating neural encoding plays an important role in the search process and its quality. If your data points might be described using several vectors, then the latest release of Qdrant gives you an opportunity to store them together and reuse the payloads, instead of creating several collections and querying them separately.
If you’d like to check out some other examples, please check out our [full notebook](https://gist.github.com/kacperlukawski/961aaa7946f55110abfcd37fbe869b8f) presenting the search results and the whole pipeline implementation.
detail. In a nutshell, you can **reduce the memory requirements by up to 64 times**!



### Optional named vectors



Qdrant has been supporting multiple named vectors per point for quite a long time. Those may have 

utterly different dimensionality and distance functions used to calculate similarity. Having multiple 

embeddings per item is an essential real-world scenario. For example, you might be encoding textual"
What configuration is required to enable in-memory quantization with on-disk original vectors in Qdrant?,"To configure in-memory quantization with on-disk original vectors in Qdrant, you need to create a collection with the following configuration:

```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 768,

        ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": true

        }

    }

}
```

Additionally, in the Python code snippet provided, you can use the QdrantClient library to create the collection with the specified configuration parameters. This includes defining vector size, distance metric (such as Cosine similarity), memmap threshold for optimization, and scalar quantization configuration with type set to INT8","['- **Enable rescore**: Having the original vectors available, Qdrant can re-evaluate top-k search results using the original vectors. On large collections, this can improve the search quality, with just minor performance impact.\n\n\n\n\n\n#### Memory and speed tuning\n\n\n\nIn this section, we will discuss how to tune the memory and speed of the search process with quantization.\n\n\n\nThere are 3 possible modes to place storage of vectors within the qdrant collection:', 'To configure in-memory quantization, with on-disk original vectors, you need to create a collection with the following configuration:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""size"": 768,\n\n        ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python', '```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(', ');\n\n```\n\n\n\nThe following parameters can be updated:\n\n\n\n* `optimizers_config` - see [optimizer](../optimizer/) for details.\n\n* `hnsw_config` - see [indexing](../indexing/#vector-index) for details.\n\n* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.\n\n* `vectors` - vector-specific configuration, including individual `hnsw_config`, `quantization_config` and `on_disk` settings.', '..Default::default()\n\n        }),\n\n        quantization_config: Some(QuantizationConfig {\n\n            quantization: Some(Quantization::Scalar(ScalarQuantization {\n\n                r#type: QuantizationType::Int8.into(),\n\n                always_ram: Some(true),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;']","- **Enable rescore**: Having the original vectors available, Qdrant can re-evaluate top-k search results using the original vectors. On large collections, this can improve the search quality, with just minor performance impact.





#### Memory and speed tuning



In this section, we will discuss how to tune the memory and speed of the search process with quantization.



There are 3 possible modes to place storage of vectors within the qdrant collection:
To configure in-memory quantization, with on-disk original vectors, you need to create a collection with the following configuration:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 768,

        ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": true

        }

    }

}

```



```python
```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": true

        }

    }

}

```



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(
);

```



The following parameters can be updated:



* `optimizers_config` - see [optimizer](../optimizer/) for details.

* `hnsw_config` - see [indexing](../indexing/#vector-index) for details.

* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.

* `vectors` - vector-specific configuration, including individual `hnsw_config`, `quantization_config` and `on_disk` settings.
..Default::default()

        }),

        quantization_config: Some(QuantizationConfig {

            quantization: Some(Quantization::Scalar(ScalarQuantization {

                r#type: QuantizationType::Int8.into(),

                always_ram: Some(true),

                ..Default::default()

            })),

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;"
How can dissimilarity search be used for outlier detection in a dataset?,"Dissimilarity search can be utilized for outlier detection in a dataset by first establishing a set of reference points that are considered ""normal"". These reference points serve as a benchmark for comparison. Subsequently, the dissimilarity search algorithm is applied to identify the data points that are the most dissimilar to the reference set. These identified points are then flagged as potential outliers or anomalies in the dataset. This approach allows for the detection of abnormal data points even in cases where labels are not available, enabling the identification of outliers based on their deviation from the established ""normal"" reference points. This method can be a valuable tool in data analysis and anomaly detection tasks.","['### Case: Outlier Detection\n\n\n\nIn some cases, we might not even have labels, but it is still possible to try to detect anomalies in our dataset.\n\nDissimilarity search can be used for this purpose as well.\n\n\n\n{{< figure width=80% src=/articles_data/vector-similarity-beyond-search/anomaly-detection.png caption=""Anomaly Detection"" >}}\n\n\n\nThe only thing we need is a bunch of reference points that we consider ""normal"".', 'There is no silver bullet. You should validate your dataset thoroughly, and you need tools for this.\n\n\n\nWhen you are sure that there are not many objects placed in the wrong category, they can be considered outliers or anomalies.\n\nThus, you can train a model or a bunch of models capable of looking for anomalies, e.g. autoencoder and a classifier on it.\n\nHowever, this is again a resource-intensive task, both in terms of time and manual labour, since labels have to be provided for classification.', 'You might find yourself in a situation when the model focuses on non-important features, selects a lot of irrelevant elements, and fails to find genuine errors. \n\nTo mitigate this issue, you can perform a diversity search.\n\n\n\nDiversity search is a method for finding the most distinctive examples in the data.\n\nAs similarity search, it also operates on embeddings and measures the distances between them.\n\nThe difference lies in deciding which point should be extracted next.', '### Case: Mislabeling Detection\n\n\n\nFor example, we have a dataset of furniture in which we have classified our items into what kind of furniture they are: tables, chairs, lamps, etc.\n\nTo ensure our catalog is accurate, we can use a dissimilarity search to highlight items that are most likely mislabeled.\n\n\n\nTo do this, we only need to search for the most dissimilar items using the \n\nembedding of the category title itself as a query.', 'If your data is huge and does not fit into memory, vector search engines like [Qdrant](https://qdrant.tech/) might be helpful.\n\n\n\nAlthough the described methods can be used independently. But they are simple to combine and improve detection capabilities.\n\nIf the quality remains insufficient, you can fine-tune the models using a similarity learning approach (e.g. with [Quaterion](https://quaterion.qdrant.tech) both to provide a better representation of your data and pull apart dissimilar objects in space.']","### Case: Outlier Detection



In some cases, we might not even have labels, but it is still possible to try to detect anomalies in our dataset.

Dissimilarity search can be used for this purpose as well.



{{< figure width=80% src=/articles_data/vector-similarity-beyond-search/anomaly-detection.png caption=""Anomaly Detection"" >}}



The only thing we need is a bunch of reference points that we consider ""normal"".
There is no silver bullet. You should validate your dataset thoroughly, and you need tools for this.



When you are sure that there are not many objects placed in the wrong category, they can be considered outliers or anomalies.

Thus, you can train a model or a bunch of models capable of looking for anomalies, e.g. autoencoder and a classifier on it.

However, this is again a resource-intensive task, both in terms of time and manual labour, since labels have to be provided for classification.
You might find yourself in a situation when the model focuses on non-important features, selects a lot of irrelevant elements, and fails to find genuine errors. 

To mitigate this issue, you can perform a diversity search.



Diversity search is a method for finding the most distinctive examples in the data.

As similarity search, it also operates on embeddings and measures the distances between them.

The difference lies in deciding which point should be extracted next.
### Case: Mislabeling Detection



For example, we have a dataset of furniture in which we have classified our items into what kind of furniture they are: tables, chairs, lamps, etc.

To ensure our catalog is accurate, we can use a dissimilarity search to highlight items that are most likely mislabeled.



To do this, we only need to search for the most dissimilar items using the 

embedding of the category title itself as a query.
If your data is huge and does not fit into memory, vector search engines like [Qdrant](https://qdrant.tech/) might be helpful.



Although the described methods can be used independently. But they are simple to combine and improve detection capabilities.

If the quality remains insufficient, you can fine-tune the models using a similarity learning approach (e.g. with [Quaterion](https://quaterion.qdrant.tech) both to provide a better representation of your data and pull apart dissimilar objects in space."
How does binary quantization work and what benefits does it offer in terms of query processing times and data compression?,"Binary quantization is a method used by Qdrant for fast indexing and data compression. In this process, each data point is represented as a vector. The quantization splits the vector in half at a certain point, marking everything above as ""1"" and everything below as ""0"". This results in a string of bits that represents the original vector, making it much smaller and easier to compare. By supporting vector comparisons, binary quantization can significantly speed up query processing times, up to 40 times faster. This method is especially effective for OpenAI embeddings, where it has been shown to achieve a massive performance improvement at a lower cost of accuracy.","['#### What is Binary Quantization?\n\n\n\nQuantization is a technique used for reducing the total size of the database. It works by compressing vectors into a more compact representation at the cost of accuracy.\n\n\n\n[Binary Quantization](https://qdrant.tech/articles/binary-quantization/) is a fast indexing and data compression method used by Qdrant. It supports vector comparisons, which can dramatically speed up query processing times (up to 40x faster!).', '![](/blog/openai/Accuracy_Models.png)\n\n\n\nThe efficiency gains from Binary Quantization are as follows: \n\n\n\n- Reduced storage footprint: It helps with large-scale datasets. It also saves on memory, and scales up to 30x at the same cost. \n\n- Enhanced speed of data retrieval: Smaller data sizes generally leads to faster searches. \n\n- Accelerated search process: It is based on simplified distance calculations between vectors to bitwise operations. This enables real-time querying even in extensive databases.', '5 Keys to Learning from the Episode:\n\n\n\n1. The necessity of quantization and the complex challenges it helps to overcome.\n\n2. The transformative effects of binary quantization on processing speed and storage size reduction.\n\n3. A detailed exploration of oversampling and its real-time precision control in query search.\n\n4. Understanding the simplicity and effectiveness of binary quantization, especially when compared to more intricate quantization methods.', ""|Cohere AI embed-english-v2.0|4096|[Wikipedia](https://huggingface.co/datasets/nreimers/wikipedia-22-12-large/tree/main) 1M|0.98|2x|\n\n\n\nIf you determine that binary quantization is appropriate for your datasets and queries then we suggest the following:\n\n- Binary Quantization with always_ram=True \n\n- Vectors stored on disk\n\n- Oversampling=2.0 (or more) \n\n- Rescore=True\n\n\n\n## What's next?"", 'By reducing storage needs, you can scale applications with lower costs. This addresses a critical challenge posed by the original embedding sizes. Binary Quantization also speeds the search process. It simplifies the complex distance calculations between vectors into more manageable bitwise operations, which supports potentially real-time searches across vast datasets.']","#### What is Binary Quantization?



Quantization is a technique used for reducing the total size of the database. It works by compressing vectors into a more compact representation at the cost of accuracy.



[Binary Quantization](https://qdrant.tech/articles/binary-quantization/) is a fast indexing and data compression method used by Qdrant. It supports vector comparisons, which can dramatically speed up query processing times (up to 40x faster!).
![](/blog/openai/Accuracy_Models.png)



The efficiency gains from Binary Quantization are as follows: 



- Reduced storage footprint: It helps with large-scale datasets. It also saves on memory, and scales up to 30x at the same cost. 

- Enhanced speed of data retrieval: Smaller data sizes generally leads to faster searches. 

- Accelerated search process: It is based on simplified distance calculations between vectors to bitwise operations. This enables real-time querying even in extensive databases.
5 Keys to Learning from the Episode:



1. The necessity of quantization and the complex challenges it helps to overcome.

2. The transformative effects of binary quantization on processing speed and storage size reduction.

3. A detailed exploration of oversampling and its real-time precision control in query search.

4. Understanding the simplicity and effectiveness of binary quantization, especially when compared to more intricate quantization methods.
|Cohere AI embed-english-v2.0|4096|[Wikipedia](https://huggingface.co/datasets/nreimers/wikipedia-22-12-large/tree/main) 1M|0.98|2x|



If you determine that binary quantization is appropriate for your datasets and queries then we suggest the following:

- Binary Quantization with always_ram=True 

- Vectors stored on disk

- Oversampling=2.0 (or more) 

- Rescore=True



## What's next?
By reducing storage needs, you can scale applications with lower costs. This addresses a critical challenge posed by the original embedding sizes. Binary Quantization also speeds the search process. It simplifies the complex distance calculations between vectors into more manageable bitwise operations, which supports potentially real-time searches across vast datasets."
What is the primary function of vector embeddings in the context of machine learning and artificial intelligence?,"Vector embeddings play a crucial role in machine learning and artificial intelligence by converting complex data into a format that machines can easily understand and process. These embeddings represent data points in a multi-dimensional space, where similar data points are closer together and dissimilar data points are farther apart. By capturing the underlying relationships and similarities between data points, vector embeddings enable algorithms to perform tasks such as similarity search, recommendation systems, and natural language processing more effectively. In essence, vector embeddings help in transforming raw data into a structured and meaningful representation that can be utilized by machine learning models to make accurate predictions and decisions.","['- machine-learning\n\n  - artificial intelligence\n\n\n\n---\n\n\n\n> **Embeddings** are numerical machine learning representations of the semantic of the input data. They capture the meaning of complex, high-dimensional data, like text, images, or audio, into vectors. Enabling algorithms to process and analyze the data more efficiently.', '* Support for multiple embeddings;\n\n* Fundraising and VC discussions;\n\n* Vision for vector search evolution;\n\n* Finetuning for out of domain.\n\n\n\n<!--EndFragment-->', '![How embeddings are applied to perform recommendantions and other use cases](/articles_data/what-are-embeddings/Embeddings-Use-Case.jpg)\n\n\n\n\n\nThey make [high-dimensional](https://www.sciencedirect.com/topics/computer-science/high-dimensional-data) data more manageable. This reduces storage requirements, improves computational efficiency, and makes sense of a ton of **unstructured** data.\n\n\n\n\n\n## Why Use Vector Embeddings?', '> The quality of the vector representations drives the performance. The embedding model that works best for you depends on your use case.\n\n\n\n\n\n### Creating Vector Embeddings\n\n\n\nEmbeddings translate the complexities of human language to a format that computers can understand. It uses neural networks to assign **numerical values** to the input data, in a way that similar data has similar values.', '## How do embeddings work?\n\n\n\nEmbeddings are created through neural networks. They capture complex relationships and semantics into [dense vectors](https://www1.se.cuhk.edu.hk/~seem5680/lecture/semantics-with-dense-vectors-2018.pdf) which are more suitable for machine learning and data processing applications. They can then project these vectors into a proper **high-dimensional** space, specifically, a [Vector Database](https://qdrant.tech/articles/what-is-a-vector-database/).']","- machine-learning

  - artificial intelligence



---



> **Embeddings** are numerical machine learning representations of the semantic of the input data. They capture the meaning of complex, high-dimensional data, like text, images, or audio, into vectors. Enabling algorithms to process and analyze the data more efficiently.
* Support for multiple embeddings;

* Fundraising and VC discussions;

* Vision for vector search evolution;

* Finetuning for out of domain.



<!--EndFragment-->
![How embeddings are applied to perform recommendantions and other use cases](/articles_data/what-are-embeddings/Embeddings-Use-Case.jpg)





They make [high-dimensional](https://www.sciencedirect.com/topics/computer-science/high-dimensional-data) data more manageable. This reduces storage requirements, improves computational efficiency, and makes sense of a ton of **unstructured** data.





## Why Use Vector Embeddings?
> The quality of the vector representations drives the performance. The embedding model that works best for you depends on your use case.





### Creating Vector Embeddings



Embeddings translate the complexities of human language to a format that computers can understand. It uses neural networks to assign **numerical values** to the input data, in a way that similar data has similar values.
## How do embeddings work?



Embeddings are created through neural networks. They capture complex relationships and semantics into [dense vectors](https://www1.se.cuhk.edu.hk/~seem5680/lecture/semantics-with-dense-vectors-2018.pdf) which are more suitable for machine learning and data processing applications. They can then project these vectors into a proper **high-dimensional** space, specifically, a [Vector Database](https://qdrant.tech/articles/what-is-a-vector-database/)."
What is the concept of the `best_score` strategy introduced in version 1.6.0 of the recommendation system?,"The `best_score` strategy, introduced in version 1.6.0 of the recommendation system, is based on the idea of finding similar vectors by identifying those that are closer to a positive example while avoiding those that are closer to a negative one. This strategy measures each candidate against every example and selects the best positive and best negative scores. The final score is determined using a specific formula: if the best positive score is greater than the best negative score, the final score is set as the best positive score. Otherwise, the final score is calculated as the negative of the square of the best negative score. It is important to note that the performance of the `best_score` strategy is linearly impacted by the number of examples provided.","['This is the default strategy that\'s going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.\n\n\n\n### Best score strategy\n\n\n\n*Available as of v1.6.0*\n\n\n\nA new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.', 'extended the API, so **you can now choose the strategy of how to find the recommended points**.\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/recommend\n\n{\n\n  ""positive"": [100, 231],\n\n  ""negative"": [718, [0.2, 0.3, 0.4, 0.5]],\n\n  ""filter"": {\n\n        ""must"": [\n\n            {\n\n                ""key"": ""city"",\n\n                ""match"": {\n\n                    ""value"": ""London""\n\n                }\n\n            }\n\n        ]\n\n  },\n\n  ""strategy"": ""average_vector"",\n\n  ""limit"": 3\n\n}\n\n```', '},\n\n  ""strategy"": ""average_vector"",\n\n  ""limit"": 3\n\n}\n\n```\n\n\n\nThere are two key changes in the request. First of all, we can adjust the strategy of search and set it to `average_vector` (the \n\ndefault) or `best_score`. Moreover, we can pass both IDs (`718`) and embeddings (`[0.2, 0.3, 0.4, 0.5]`) as both positive and \n\nnegative examples. \n\n\n\n## HNSW ANN example and strategy', '##### One positive and one negative example\n\n\n\n<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>\n\n\n\nThe more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there \n\nis just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making \n\nthe variety richer.', '### The new hotness - Best score\n\n\n\nThe new strategy is called `best_score`. It does not rely on averages and is more flexible. It allows you to pass just negative \n\nsamples and uses a slightly more sophisticated algorithm under the hood.\n\n\n\nThe best score is chosen at every step of HNSW graph traversal. We separately calculate the distance between a traversed point \n\nand every positive and negative example. In the case of the best score strategy, **there is no single query vector anymore, but a']","This is the default strategy that's going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.



### Best score strategy



*Available as of v1.6.0*



A new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.
extended the API, so **you can now choose the strategy of how to find the recommended points**.



```http

POST /collections/{collection_name}/points/recommend

{

  ""positive"": [100, 231],

  ""negative"": [718, [0.2, 0.3, 0.4, 0.5]],

  ""filter"": {

        ""must"": [

            {

                ""key"": ""city"",

                ""match"": {

                    ""value"": ""London""

                }

            }

        ]

  },

  ""strategy"": ""average_vector"",

  ""limit"": 3

}

```
},

  ""strategy"": ""average_vector"",

  ""limit"": 3

}

```



There are two key changes in the request. First of all, we can adjust the strategy of search and set it to `average_vector` (the 

default) or `best_score`. Moreover, we can pass both IDs (`718`) and embeddings (`[0.2, 0.3, 0.4, 0.5]`) as both positive and 

negative examples. 



## HNSW ANN example and strategy
##### One positive and one negative example



<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>



The more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there 

is just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making 

the variety richer.
### The new hotness - Best score



The new strategy is called `best_score`. It does not rely on averages and is more flexible. It allows you to pass just negative 

samples and uses a slightly more sophisticated algorithm under the hood.



The best score is chosen at every step of HNSW graph traversal. We separately calculate the distance between a traversed point 

and every positive and negative example. In the case of the best score strategy, **there is no single query vector anymore, but a"
How does Qdrant handle sparse vectors and what changes have been made to accommodate them?,"Qdrant, until recently, was not able to handle sparse vectors natively. The majority of dimensions in sparse vectors are usually zeros, making them theoretically high dimensional. However, Qdrant stores sparse vectors differently by only keeping track of the non-zero dimensions. Previously, some users attempted to convert sparse vectors to dense vectors as a workaround, but this was not considered the best solution. In response to user demand for a single tool that can handle both sparse and dense vectors, Qdrant has now introduced support for sparse vectors. This change allows users to work with both sparse and dense vectors seamlessly within the Qdrant tool, eliminating the need for alternative solutions or tools for keyword lookup.","['Until now, Qdrant has not been able to handle sparse vectors natively. Some were trying to convert them to dense vectors, but that was not the best solution or a suggested way. We even wrote a piece with [our thoughts on building a hybrid search](/articles/hybrid-search/), and we encouraged you to use a different tool for keyword lookup.', ""- hybrid search\n\n  - bm25\n\n  - tfidf\n\n  - splade\n\n---\n\n\n\nPlease welcome the long-awaited [Qdrant 1.7.0 release](https://github.com/qdrant/qdrant/releases/tag/v1.7.0). Except for a handful of minor fixes and improvements, this release brings some cool brand-new features that we are excited to share! \n\nThe latest version of your favorite vector search engine finally supports **sparse vectors**. That's the feature many of you requested, so why should we ignore it?"", ""## Conclusion\n\n\n\nAlright, folks, let's wrap it up. Better search isn't a 'nice-to-have,' it's a game-changer, and Qdrant can get you there.\n\n\n\nGot questions? Our [Discord community](https://qdrant.to/discord?utm_source=qdrant&utm_medium=website&utm_campaign=sparse-vectors&utm_content=article&utm_term=sparse-vectors) is teeming with answers."", '},\n\n)\n\n```\n\n\n\n\n\n### 3. Inserting Sparse Vectors\n\n\n\nHere, we see the process of inserting a sparse vector into the Qdrant collection. This step is key to building a dataset that can be quickly retrieved in the first stage of the retrieval process, utilizing the efficiency of sparse vectors. Since this is for demonstration purposes, we insert only one point with Sparse Vector and no dense vector.\n\n\n\n```python\n\nclient.upsert(\n\n    collection_name=COLLECTION_NAME,\n\n    points=[', ""Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk.""]","Until now, Qdrant has not been able to handle sparse vectors natively. Some were trying to convert them to dense vectors, but that was not the best solution or a suggested way. We even wrote a piece with [our thoughts on building a hybrid search](/articles/hybrid-search/), and we encouraged you to use a different tool for keyword lookup.
- hybrid search

  - bm25

  - tfidf

  - splade

---



Please welcome the long-awaited [Qdrant 1.7.0 release](https://github.com/qdrant/qdrant/releases/tag/v1.7.0). Except for a handful of minor fixes and improvements, this release brings some cool brand-new features that we are excited to share! 

The latest version of your favorite vector search engine finally supports **sparse vectors**. That's the feature many of you requested, so why should we ignore it?
## Conclusion



Alright, folks, let's wrap it up. Better search isn't a 'nice-to-have,' it's a game-changer, and Qdrant can get you there.



Got questions? Our [Discord community](https://qdrant.to/discord?utm_source=qdrant&utm_medium=website&utm_campaign=sparse-vectors&utm_content=article&utm_term=sparse-vectors) is teeming with answers.
},

)

```





### 3. Inserting Sparse Vectors



Here, we see the process of inserting a sparse vector into the Qdrant collection. This step is key to building a dataset that can be quickly retrieved in the first stage of the retrieval process, utilizing the efficiency of sparse vectors. Since this is for demonstration purposes, we insert only one point with Sparse Vector and no dense vector.



```python

client.upsert(

    collection_name=COLLECTION_NAME,

    points=[
Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk."
What is the purpose of the `prefix` parameter in the configuration options for the Qdrant instance?,"The `prefix` parameter in the configuration options for the Qdrant instance serves the purpose of adding a specific prefix to the REST URL path. For example, setting the `prefix` parameter to `service/v1` would result in the REST API endpoint being accessed at `http://localhost:6333/service/v1/{qdrant-endpoint}`. This allows for customization and organization of the API endpoints under a specific path, making it easier to manage and access different functionalities within the Qdrant instance.","['* **word**\xa0— spaces, punctuation marks and special characters define the token boundaries\n\n* **whitespace**\xa0— token boundaries defined by whitespace characters\n\n* **prefix**\xa0— token boundaries are the same as for the “word” tokenizer, but in addition to that, there are prefixes created for every single token. As a result, “Qdrant” will be indexed as “Q”, “Qd”, “Qdr”, “Qdra”, “Qdran”, and “Qdrant”.\n\n\n\nThere are also some additional parameters you can provide, such as', '(see [ordering](#order-and-priority)).\n\n\n\nAll environment variables are prefixed with `QDRANT__` and are separated with\n\n`__`.\n\n\n\nThese variables:\n\n\n\n```bash\n\nQDRANT__LOG_LEVEL=INFO\n\nQDRANT__SERVICE__HTTP_PORT=6333\n\nQDRANT__SERVICE__ENABLE_TLS=1\n\nQDRANT__TLS__CERT=./tls/cert.pem\n\nQDRANT__TLS__CERT_TTL=3600\n\n```\n\n\n\nresult in this configuration:\n\n\n\n```yaml\n\nlog_level: INFO\n\nservice:\n\n  http_port: 6333\n\n  enable_tls: true\n\ntls:\n\n  cert: ./tls/cert.pem\n\n  cert_ttl: 3600\n\n```', '| Field        | Description |\n\n|--------------|-------------|\n\n| location     | If `:memory:` - use in-memory Qdrant instance.<br>If `str` - use it as a `url` parameter.|\n\n| url          | Either host or str of `Optional[scheme], host, Optional[port], Optional[prefix]`.<br> Eg. `http://localhost:6333` |\n\n| port         | Port of the REST API interface. Default: `6333` |\n\n| grpc_port    | Port of the gRPC interface. Default: `6334` |', 'config: Some(Config::Params(VectorParams {\n\n                size: 768,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        optimizers_config: Some(OptimizersConfigDiff {\n\n            memmap_threshold: Some(20000),\n\n            ..Default::default()\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;', '## Configuration\n\n\n\nQdrant settings can be configured by setting values to the qdrant property in the `settings.yaml` file. By default, Qdrant tries to connect to an instance at http://localhost:3000.\n\n\n\nExample: \n\n```yaml\n\nqdrant:\n\n    url: ""https://xyz-example.eu-central.aws.cloud.qdrant.io:6333""\n\n    api_key: ""<your-api-key>""\n\n```\n\n\n\nThe available [configuration options](https://docs.privategpt.dev/manual/storage/vector-stores#qdrant-configuration) are:\n\n| Field        | Description |']","* **word** — spaces, punctuation marks and special characters define the token boundaries

* **whitespace** — token boundaries defined by whitespace characters

* **prefix** — token boundaries are the same as for the “word” tokenizer, but in addition to that, there are prefixes created for every single token. As a result, “Qdrant” will be indexed as “Q”, “Qd”, “Qdr”, “Qdra”, “Qdran”, and “Qdrant”.



There are also some additional parameters you can provide, such as
(see [ordering](#order-and-priority)).



All environment variables are prefixed with `QDRANT__` and are separated with

`__`.



These variables:



```bash

QDRANT__LOG_LEVEL=INFO

QDRANT__SERVICE__HTTP_PORT=6333

QDRANT__SERVICE__ENABLE_TLS=1

QDRANT__TLS__CERT=./tls/cert.pem

QDRANT__TLS__CERT_TTL=3600

```



result in this configuration:



```yaml

log_level: INFO

service:

  http_port: 6333

  enable_tls: true

tls:

  cert: ./tls/cert.pem

  cert_ttl: 3600

```
| Field        | Description |

|--------------|-------------|

| location     | If `:memory:` - use in-memory Qdrant instance.<br>If `str` - use it as a `url` parameter.|

| url          | Either host or str of `Optional[scheme], host, Optional[port], Optional[prefix]`.<br> Eg. `http://localhost:6333` |

| port         | Port of the REST API interface. Default: `6333` |

| grpc_port    | Port of the gRPC interface. Default: `6334` |
config: Some(Config::Params(VectorParams {

                size: 768,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        optimizers_config: Some(OptimizersConfigDiff {

            memmap_threshold: Some(20000),

            ..Default::default()

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
## Configuration



Qdrant settings can be configured by setting values to the qdrant property in the `settings.yaml` file. By default, Qdrant tries to connect to an instance at http://localhost:3000.



Example: 

```yaml

qdrant:

    url: ""https://xyz-example.eu-central.aws.cloud.qdrant.io:6333""

    api_key: ""<your-api-key>""

```



The available [configuration options](https://docs.privategpt.dev/manual/storage/vector-stores#qdrant-configuration) are:

| Field        | Description |"
What is the default scoring metric used in Qdrant for search operations?,"The default scoring metric used in Qdrant for search operations is `Dot product`. It is not necessary to specify this metric explicitly as it is the default setting. However, Qdrant also supports other distance metrics such as Cosine for scoring. When performing a search operation in Qdrant, if no specific metric is mentioned, the system will automatically use the Dot product as the scoring metric.","['| Index| Sparse Query | Dense Query |\n\n| --- | --- | --- | \n\n| Scoring Metric | Default is `Dot product`, no need to specify it | `Distance` has supported metrics e.g. Dot, Cosine |\n\n| Search Type | Always exact in Qdrant | HNSW is an approximate NN |\n\n| Return Behaviour | Returns only vectors with non-zero values in the same indices as the query vector | Returns `limit` vectors |\n\n\n\nIn general, the speed of the search is proportional to the number of non-zero values in the query vector.\n\n\n\n```http', 'qdrant: &QdrantClient,\n\n) -> Result<Vec<ScoredPoint>> {\n\n    Ok(qdrant.search_points(&SearchPoints {\n\n        collection_name,\n\n        limit: 5, // use what fits your use case here\n\n        with_payload: Some(true.into()),\n\n        vector: embed(client, text, api_key)?,\n\n        ..Default::default()\n\n    }).await?.result)\n\n}\n\n```', 'let search_result = client\n\n    .search_points(&SearchPoints {\n\n        collection_name: ""test_collection"".to_string(),\n\n        vector: vec![0.2, 0.1, 0.9, 0.7],\n\n        filter: Some(Filter::all([Condition::matches(\n\n            ""city"",\n\n            ""London"".to_string(),\n\n        )])),\n\n        limit: 2,\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n\n\ndbg!(search_result);\n\n```\n\n\n\n```java\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\n\nList<ScoredPoint> searchResult =\n\n    client', '#   [ScoredPoint(id=3, version=0, score=0.09, \n\n#                payload=None, vector=[0.0, 0.0, 0.0, 0.1]),\n\n#    ScoredPoint(id=1, version=0, score=0.10049876, \n\n#                payload=None, vector=[0.0, 0.1, 0.0, 0.0])]\n\n# ]\n\n\n\n```', '* Evaluation of results size for faceted search\n\n* Determining the number of pages for pagination\n\n* Debugging the query execution speed\n\n\n\nREST API ([Schema](https://qdrant.github.io/qdrant/redoc/index.html#tag/points/operation/count_points)):\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/count\n\n{\n\n    ""filter"": {\n\n        ""must"": [\n\n            {\n\n                ""key"": ""color"",\n\n                ""match"": {\n\n                    ""value"": ""red""\n\n                }\n\n            }\n\n        ]']","| Index| Sparse Query | Dense Query |

| --- | --- | --- | 

| Scoring Metric | Default is `Dot product`, no need to specify it | `Distance` has supported metrics e.g. Dot, Cosine |

| Search Type | Always exact in Qdrant | HNSW is an approximate NN |

| Return Behaviour | Returns only vectors with non-zero values in the same indices as the query vector | Returns `limit` vectors |



In general, the speed of the search is proportional to the number of non-zero values in the query vector.



```http
qdrant: &QdrantClient,

) -> Result<Vec<ScoredPoint>> {

    Ok(qdrant.search_points(&SearchPoints {

        collection_name,

        limit: 5, // use what fits your use case here

        with_payload: Some(true.into()),

        vector: embed(client, text, api_key)?,

        ..Default::default()

    }).await?.result)

}

```
let search_result = client

    .search_points(&SearchPoints {

        collection_name: ""test_collection"".to_string(),

        vector: vec![0.2, 0.1, 0.9, 0.7],

        filter: Some(Filter::all([Condition::matches(

            ""city"",

            ""London"".to_string(),

        )])),

        limit: 2,

        ..Default::default()

    })

    .await?;



dbg!(search_result);

```



```java

import static io.qdrant.client.ConditionFactory.matchKeyword;



List<ScoredPoint> searchResult =

    client
#   [ScoredPoint(id=3, version=0, score=0.09, 

#                payload=None, vector=[0.0, 0.0, 0.0, 0.1]),

#    ScoredPoint(id=1, version=0, score=0.10049876, 

#                payload=None, vector=[0.0, 0.1, 0.0, 0.0])]

# ]



```
* Evaluation of results size for faceted search

* Determining the number of pages for pagination

* Debugging the query execution speed



REST API ([Schema](https://qdrant.github.io/qdrant/redoc/index.html#tag/points/operation/count_points)):



```http

POST /collections/{collection_name}/points/count

{

    ""filter"": {

        ""must"": [

            {

                ""key"": ""color"",

                ""match"": {

                    ""value"": ""red""

                }

            }

        ]"
What options are available for using Qdrant if the official clients do not support the language you are using?,"If the official clients for Qdrant do not support the language you are using, you have the option to either use the REST API directly or generate a client for your language using OpenAPI definitions or protobuf definitions. By utilizing the OpenAPI definitions available at [this link](https://github.com/qdrant/qdrant/blob/master/docs/redoc/master/openapi.json) or the protobuf definitions at [this link](https://github.com/qdrant/qdrant/tree/master/lib/api/src/grpc/proto), you can interact with Qdrant's functionalities even if there is no official client available for your specific programming language. This flexibility allows developers to integrate Qdrant into a wide range of applications and environments.","['---\n\ntitle: Interfaces\n\nweight: 14\n\n---\n\n\n\n# Interfaces\n\n\n\nQdrant supports these ""official"" clients. \n\n\n\n> **Note:** If you are using a language that is not listed here, you can use the REST API directly or generate a client for your language \n\nusing [OpenAPI](https://github.com/qdrant/qdrant/blob/master/docs/redoc/master/openapi.json)\n\nor [protobuf](https://github.com/qdrant/qdrant/tree/master/lib/api/src/grpc/proto) definitions. \n\n\n\n## Client Libraries\n\n||Client Repository|Installation|Version|\n\n|-|-|-|-|', '| **Python**                | ✅                    | ✅                    |\n\n| **JavaScript/TypeScript** | ✅                    | ✅                    |\n\n| **Rust**                  | ❌                    | ✅                    |\n\n| **Go**                    | ❌                    | ✅                    |\n\n\n\nThere are also various community-driven projects aimed to provide the support for the other languages, but those are not officially', 'If you prefer reusing an existing collection, you can create an instance of Qdrant on your own:\n\n\n\n```python\n\nimport qdrant_client\n\n\n\nembeddings = HuggingFaceEmbeddings(\n\n    model_name=""sentence-transformers/all-mpnet-base-v2""\n\n)\n\n\n\nclient = qdrant_client.QdrantClient(\n\n    ""<qdrant-url>"",\n\n    api_key=""<qdrant-api-key>"", # For Qdrant Cloud, None for local instance\n\n)\n\n\n\ndoc_store = Qdrant(\n\n    client=client, collection_name=""texts"", \n\n    embeddings=embeddings,\n\n)\n\n```\n\n\n\n## Local mode', '```python\n\nurl = ""<---qdrant url here --->""\n\nqdrant = Qdrant.from_documents(\n\n    docs, \n\n    embeddings, \n\n    url, \n\n    prefer_grpc=True, \n\n    collection_name=""my_documents"",\n\n)\n\n```\n\n\n\n## Next steps\n\n\n\nIf you\'d like to know more about running Qdrant in a LangChain-based application, please read our article \n\n[Question Answering with LangChain and Qdrant without boilerplate](/articles/langchain-integration/). Some more information', '. In the default build configuration, qdrant does not include support for all languages, due to the increasing size of the resulting binary. Chinese, Japanese and Korean languages are not enabled by default, but can be enabled by building qdrant from source with `--features multiling-chinese,multiling-japanese,multiling-korean` flags.']","---

title: Interfaces

weight: 14

---



# Interfaces



Qdrant supports these ""official"" clients. 



> **Note:** If you are using a language that is not listed here, you can use the REST API directly or generate a client for your language 

using [OpenAPI](https://github.com/qdrant/qdrant/blob/master/docs/redoc/master/openapi.json)

or [protobuf](https://github.com/qdrant/qdrant/tree/master/lib/api/src/grpc/proto) definitions. 



## Client Libraries

||Client Repository|Installation|Version|

|-|-|-|-|
| **Python**                | ✅                    | ✅                    |

| **JavaScript/TypeScript** | ✅                    | ✅                    |

| **Rust**                  | ❌                    | ✅                    |

| **Go**                    | ❌                    | ✅                    |



There are also various community-driven projects aimed to provide the support for the other languages, but those are not officially
If you prefer reusing an existing collection, you can create an instance of Qdrant on your own:



```python

import qdrant_client



embeddings = HuggingFaceEmbeddings(

    model_name=""sentence-transformers/all-mpnet-base-v2""

)



client = qdrant_client.QdrantClient(

    ""<qdrant-url>"",

    api_key=""<qdrant-api-key>"", # For Qdrant Cloud, None for local instance

)



doc_store = Qdrant(

    client=client, collection_name=""texts"", 

    embeddings=embeddings,

)

```



## Local mode
```python

url = ""<---qdrant url here --->""

qdrant = Qdrant.from_documents(

    docs, 

    embeddings, 

    url, 

    prefer_grpc=True, 

    collection_name=""my_documents"",

)

```



## Next steps



If you'd like to know more about running Qdrant in a LangChain-based application, please read our article 

[Question Answering with LangChain and Qdrant without boilerplate](/articles/langchain-integration/). Some more information
. In the default build configuration, qdrant does not include support for all languages, due to the increasing size of the resulting binary. Chinese, Japanese and Korean languages are not enabled by default, but can be enabled by building qdrant from source with `--features multiling-chinese,multiling-japanese,multiling-korean` flags."
What are the two main interfaces available for interacting with Qdrant and where can the documentation for each be found?,"The two main interfaces available for interacting with Qdrant are REST API and gRPC API. The documentation for REST API can be found in the [OpenAPI Specification](https://qdrant.github.io/qdrant/redoc/index.html), while the documentation for gRPC API can be found [here](https://github.com/qdrant/qdrant/blob/master/docs/grpc/docs.md). The gRPC methods in Qdrant follow the same principles as REST, with each REST endpoint having a corresponding gRPC method. The gRPC interface in Qdrant is available on a specified port as outlined in the configuration file, with the default port being 6334. If choosing to use gRPC, it is necessary to expose the port when starting Qdrant, such as when running the service inside a Docker container.","['## Project Overview\n\n\n\nQdrant is a powerful vector search engine widely used for similarity search and clustering. However, it lacked a user-friendly web-based UI for data visualization and exploration. My project aimed to bridge this gap by developing a web-based user interface that allows users to easily interact with and explore their vector data.\n\n\n\n## Milestones and Achievements', '.                                                                                    |', '|![java](/docs/misc/java.webp)|**[Java](https://github.com/qdrant/java-client)**|[Available on Maven Central](https://central.sonatype.com/artifact/io.qdrant/client)|[Latest Release](https://github.com/qdrant/java-client/releases)|\n\n\n\n\n\n## API Reference\n\n\n\nAll interaction with Qdrant takes place via the REST API. We recommend using REST API if you are using Qdrant for the first time or if you are working on a prototype.\n\n\n\n|API|Documentation|\n\n|-|-|', '.                                                                                                                                                  |', '.                                                                                                                                                                                                        |']","## Project Overview



Qdrant is a powerful vector search engine widely used for similarity search and clustering. However, it lacked a user-friendly web-based UI for data visualization and exploration. My project aimed to bridge this gap by developing a web-based user interface that allows users to easily interact with and explore their vector data.



## Milestones and Achievements
.                                                                                    |
|![java](/docs/misc/java.webp)|**[Java](https://github.com/qdrant/java-client)**|[Available on Maven Central](https://central.sonatype.com/artifact/io.qdrant/client)|[Latest Release](https://github.com/qdrant/java-client/releases)|





## API Reference



All interaction with Qdrant takes place via the REST API. We recommend using REST API if you are using Qdrant for the first time or if you are working on a prototype.



|API|Documentation|

|-|-|
.                                                                                                                                                  |
.                                                                                                                                                                                                        |"
When should one use gRPC with Qdrant and what factors should be considered in making this choice?,"gRPC is recommended for use with Qdrant when optimizing the performance of an application is a priority and when the user is already familiar with Qdrant. The decision to use gRPC over the REST API is a trade-off between convenience and speed. gRPC is a binary protocol that offers higher performance compared to REST API, but it can be more challenging to debug. Therefore, if the goal is to maximize performance and the user is comfortable with the potential debugging complexities associated with gRPC, it is advisable to opt for gRPC when interacting with Qdrant.","[""qdrant/qdrant\n\n```\n\n\n\n**When to use gRPC:** The choice between gRPC and the REST API is a trade-off between convenience and speed. gRPC is a binary protocol and can be more challenging to debug. We recommend using gRPC if you are already familiar with Qdrant and are trying to optimize the performance of your application.\n\n\n\n## Qdrant Web UI\n\n\n\nQdrant's Web UI is an intuitive and efficient graphic interface for your Qdrant Collections, REST API and data points."", '![REST API vs gRPC upload time, sec](/blog/qdrant-v-0-6-0-engine-with-grpc-released/upload_time.png)\n\n\n\nRead more about the gRPC interface and whether you should use it by this [link](/documentation/quick_start/#grpc).\n\n\n\nThe release v0.6.0 includes several bug fixes. More information is available in a [changelog](https://github.com/qdrant/qdrant/releases/tag/v0.6.0).\n\n\n\nNew version was provided in addition to the REST API that the company keeps supporting due to its easy debugging.', '| Field        | Description |\n\n|--------------|-------------|\n\n| location     | If `:memory:` - use in-memory Qdrant instance.<br>If `str` - use it as a `url` parameter.|\n\n| url          | Either host or str of `Optional[scheme], host, Optional[port], Optional[prefix]`.<br> Eg. `http://localhost:6333` |\n\n| port         | Port of the REST API interface. Default: `6333` |\n\n| grpc_port    | Port of the gRPC interface. Default: `6334` |', '- GRPC API: [localhost:6334](http://localhost:6334)\n\n\n\n## Initialize the client\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";\n\n\n\nconst client = new QdrantClient({ host: ""localhost"", port: 6333 });\n\n```\n\n\n\n```rust\n\nuse qdrant_client::client::QdrantClient;\n\n\n\n// The Rust client uses Qdrant\'s GRPC interface', 'maintained, thus not mentioned here. However, it is still possible to interact with both engines through the HTTP REST or gRPC API. \n\nThat makes it easy to integrate with any technology of your choice.\n\n\n\nIf you are a Python user, then both tools are well-integrated with the most popular libraries like [LangChain](../integrations/langchain/), [LlamaIndex](../integrations/llama-index/), [Haystack](../integrations/haystack/), and more.']","qdrant/qdrant

```



**When to use gRPC:** The choice between gRPC and the REST API is a trade-off between convenience and speed. gRPC is a binary protocol and can be more challenging to debug. We recommend using gRPC if you are already familiar with Qdrant and are trying to optimize the performance of your application.



## Qdrant Web UI



Qdrant's Web UI is an intuitive and efficient graphic interface for your Qdrant Collections, REST API and data points.
![REST API vs gRPC upload time, sec](/blog/qdrant-v-0-6-0-engine-with-grpc-released/upload_time.png)



Read more about the gRPC interface and whether you should use it by this [link](/documentation/quick_start/#grpc).



The release v0.6.0 includes several bug fixes. More information is available in a [changelog](https://github.com/qdrant/qdrant/releases/tag/v0.6.0).



New version was provided in addition to the REST API that the company keeps supporting due to its easy debugging.
| Field        | Description |

|--------------|-------------|

| location     | If `:memory:` - use in-memory Qdrant instance.<br>If `str` - use it as a `url` parameter.|

| url          | Either host or str of `Optional[scheme], host, Optional[port], Optional[prefix]`.<br> Eg. `http://localhost:6333` |

| port         | Port of the REST API interface. Default: `6333` |

| grpc_port    | Port of the gRPC interface. Default: `6334` |
- GRPC API: [localhost:6334](http://localhost:6334)



## Initialize the client



```python

from qdrant_client import QdrantClient



client = QdrantClient(""localhost"", port=6333)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({ host: ""localhost"", port: 6333 });

```



```rust

use qdrant_client::client::QdrantClient;



// The Rust client uses Qdrant's GRPC interface
maintained, thus not mentioned here. However, it is still possible to interact with both engines through the HTTP REST or gRPC API. 

That makes it easy to integrate with any technology of your choice.



If you are a Python user, then both tools are well-integrated with the most popular libraries like [LangChain](../integrations/langchain/), [LlamaIndex](../integrations/llama-index/), [Haystack](../integrations/haystack/), and more."
Where can the GUI for Qdrant be accessed?,"The GUI for Qdrant can be accessed at `http://localhost:6333/dashboard`. This web address will lead you to the graphical user interface (GUI) for Qdrant, providing a visual interface for interacting with the Qdrant system. The GUI allows users to perform various operations and tasks related to Qdrant, such as managing indexes, querying data, and configuring settings. By accessing the GUI at the specified URL, users can easily navigate and interact with the Qdrant system in a user-friendly and intuitive manner.","['In the **Console**, you may use the REST API to interact with Qdrant, while in **Collections**, you can manage all the collections and upload Snapshots. \n\n\n\n![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)\n\n\n\n### Accessing the Web UI\n\n\n\nFirst, run the Docker container:\n\n\n\n```bash\n\ndocker run -p 6333:6333 -p 6334:6334 \\\n\n    -v $(pwd)/qdrant_storage:/qdrant/storage:z \\\n\n    qdrant/qdrant\n\n```\n\n\n\nThe GUI is available at `http://localhost:6333/dashboard`', 'Try it out now! If you have Docker running, you can [quickstart Qdrant](https://qdrant.tech/documentation/quick-start/) and access the Dashboard locally from [http://localhost:6333/dashboard](http://localhost:6333/dashboard). You should see this simple access point to Qdrant:\n\n\n\n![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)\n\n\n\n### Temporary directory for Snapshots', '.                                                                                                                                                                                                        |', '.                                                                                    |', '.                                                                                                                                                  |']","In the **Console**, you may use the REST API to interact with Qdrant, while in **Collections**, you can manage all the collections and upload Snapshots. 



![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)



### Accessing the Web UI



First, run the Docker container:



```bash

docker run -p 6333:6333 -p 6334:6334 \

    -v $(pwd)/qdrant_storage:/qdrant/storage:z \

    qdrant/qdrant

```



The GUI is available at `http://localhost:6333/dashboard`
Try it out now! If you have Docker running, you can [quickstart Qdrant](https://qdrant.tech/documentation/quick-start/) and access the Dashboard locally from [http://localhost:6333/dashboard](http://localhost:6333/dashboard). You should see this simple access point to Qdrant:



![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)



### Temporary directory for Snapshots
.                                                                                                                                                                                                        |
.                                                                                    |
.                                                                                                                                                  |"
What are the three ways to use Qdrant?,"According to the documentation, there are three ways to use Qdrant:

1. Run a Docker image: This method is recommended for users who do not have a Python development environment. By running a Docker image, users can quickly set up a local Qdrant server and storage.

2. Get the Python client: Users familiar with Python can install the Qdrant client by using `pip install qdrant-client`. The Python client also supports an in-memory database.

3. Spin up a Qdrant Cloud cluster: This method is recommended for running Qdrant in a production environment. Users can set up their first instance by following the Quickstart guide provided in the documentation.","[""## First-Time Users:\n\n\n\nThere are three ways to use Qdrant:\n\n\n\n1. [**Run a Docker image**](quick-start/) if you don't have a Python development environment. Setup a local Qdrant server and storage in a few moments. \n\n2. [**Get the Python client**](https://github.com/qdrant/qdrant-client) if you're familiar with Python. Just `pip install qdrant-client`. The client also supports an in-memory database."", '.                                                                                    |', '.                                                                                                                                                  |', '.                                                                                                                                                                                                                                   |', 'It not only supports all necessary operations with vectors but also allows to store additional payload along with vectors and use it to perform filtering of the search result.\n\nQdrant has a client for python and also defines the API schema if you need to use it from other languages.\n\n\n\nThe easiest way to use Qdrant is to run a pre-built image.\n\nSo make sure you have Docker installed on your system.\n\n\n\nTo start Qdrant, use the instructions on its [homepage](https://github.com/qdrant/qdrant).']","## First-Time Users:



There are three ways to use Qdrant:



1. [**Run a Docker image**](quick-start/) if you don't have a Python development environment. Setup a local Qdrant server and storage in a few moments. 

2. [**Get the Python client**](https://github.com/qdrant/qdrant-client) if you're familiar with Python. Just `pip install qdrant-client`. The client also supports an in-memory database.
.                                                                                    |
.                                                                                                                                                  |
.                                                                                                                                                                                                                                   |
It not only supports all necessary operations with vectors but also allows to store additional payload along with vectors and use it to perform filtering of the search result.

Qdrant has a client for python and also defines the API schema if you need to use it from other languages.



The easiest way to use Qdrant is to run a pre-built image.

So make sure you have Docker installed on your system.



To start Qdrant, use the instructions on its [homepage](https://github.com/qdrant/qdrant)."
What are the recommended ways for Qdrant users to provide feedback or contribute to the project?,"Qdrant encourages feedback and contributions from its users, specifically Data Scientists, ML Engineers, and MLOps professionals. The best way for Qdrant users to contribute is by providing feedback on their experience with Qdrant. This can include reporting problems, unexpected behaviors, or suggesting improvements in documentation. Users can share their feedback through various channels such as creating an issue on the Qdrant GitHub repository, starting a discussion on GitHub, or sending a message on Discord. Additionally, users who use Qdrant or Metric Learning in their projects are encouraged to share their stories, articles, and demos with the Qdrant community. For those familiar with Rust, there is a specific contribution guide available on the Qdrant GitHub repository. If users encounter problems with understanding the code or architecture, they can reach out to the Qdrant team at any time for assistance.","['---\n\ntitle: Contribution Guidelines\n\nweight: 35\n\ndraft: true\n\n---\n\n\n\n# How to contribute\n\n\n\nIf you are a Qdrant user - Data Scientist, ML Engineer, or MLOps, the best contribution would be the feedback on your experience with Qdrant.\n\nLet us know whenever you have a problem, face an unexpected behavior, or see a lack of documentation.', ')\n\n```\n\n\n\n#### Positive and negative feedback\n\n\n\nSince the [Recommendation API](https://qdrant.tech/documentation/concepts/search/#recommendation-api) requires at least one positive example, we can use it only when \n\nthe user has liked at least one dish. We could theoretically use the same trick as above and negate the disliked dishes, but it would be a bit weird, as Qdrant has', ""You can do it in any convenient way - create an [issue](https://github.com/qdrant/qdrant/issues), start a [discussion](https://github.com/qdrant/qdrant/discussions), or drop up a [message](https://discord.gg/tdtYvXjC4h).\n\nIf you use Qdrant or Metric Learning in your projects, we'd love to hear your story! Feel free to share articles and demos in our community.\n\n\n\nFor those familiar with Rust - check out our [contribution guide](https://github.com/qdrant/qdrant/blob/master/CONTRIBUTING.md)."", '## What sets Qdrant apart?', 'assistant = RetrieveAssistantAgent(\n\n    name=""assistant"",\n\n    system_message=""You are a helpful assistant."",\n\n    llm_config={\n\n        ""request_timeout"": 600,\n\n        ""seed"": 42,\n\n        ""config_list"": config_list,\n\n    },\n\n)\n\n\n\n# 2. create a QdrantRetrieveUserProxyAgent instance named ""qdrantagent""\n\n# By default, the human_input_mode is ""ALWAYS"", i.e. the agent will ask for human input at every step.\n\n# `docs_path` is the path to the docs directory.']","---

title: Contribution Guidelines

weight: 35

draft: true

---



# How to contribute



If you are a Qdrant user - Data Scientist, ML Engineer, or MLOps, the best contribution would be the feedback on your experience with Qdrant.

Let us know whenever you have a problem, face an unexpected behavior, or see a lack of documentation.
)

```



#### Positive and negative feedback



Since the [Recommendation API](https://qdrant.tech/documentation/concepts/search/#recommendation-api) requires at least one positive example, we can use it only when 

the user has liked at least one dish. We could theoretically use the same trick as above and negate the disliked dishes, but it would be a bit weird, as Qdrant has
You can do it in any convenient way - create an [issue](https://github.com/qdrant/qdrant/issues), start a [discussion](https://github.com/qdrant/qdrant/discussions), or drop up a [message](https://discord.gg/tdtYvXjC4h).

If you use Qdrant or Metric Learning in your projects, we'd love to hear your story! Feel free to share articles and demos in our community.



For those familiar with Rust - check out our [contribution guide](https://github.com/qdrant/qdrant/blob/master/CONTRIBUTING.md).
## What sets Qdrant apart?
assistant = RetrieveAssistantAgent(

    name=""assistant"",

    system_message=""You are a helpful assistant."",

    llm_config={

        ""request_timeout"": 600,

        ""seed"": 42,

        ""config_list"": config_list,

    },

)



# 2. create a QdrantRetrieveUserProxyAgent instance named ""qdrantagent""

# By default, the human_input_mode is ""ALWAYS"", i.e. the agent will ask for human input at every step.

# `docs_path` is the path to the docs directory."
What is Aleph Alpha and what capabilities does their API offer?,"Aleph Alpha is a multimodal and multilingual embeddings provider. Their API allows for the creation of embeddings for both text and images, placing them in the same latent space. They offer an official Python client that can be installed using pip. The API provides both synchronous and asynchronous clients. Users can obtain embeddings for images and store them into Qdrant by utilizing the provided Python client and following the specified steps in the documentation.","[""---\n\ntitle: Aleph Alpha\n\nweight: 900\n\naliases: [ ../integrations/aleph-alpha/ ]\n\n---\n\n\n\nAleph Alpha is a multimodal and multilingual embeddings' provider. Their API allows creating the embeddings for text and images, both \n\nin the same latent space. They maintain an [official Python client](https://github.com/Aleph-Alpha/aleph-alpha-client) that might be \n\ninstalled with pip:\n\n\n\n```bash\n\npip install aleph-alpha-client\n\n```"", '[Docker is the fastest way to do that](https://qdrant.tech/documentation/quick_start/#installation).\n\n2. You need to have a registered [Aleph Alpha account](https://app.aleph-alpha.com/). \n\n3. Upon registration, create an API key (see: [API Tokens](https://app.aleph-alpha.com/profile)).\n\n\n\nNow you can store the Aleph Alpha API key in a variable and choose the model your are going to use.\n\n\n\n```python\n\naa_token = ""<< your_token >>""\n\nmodel = ""luminous-base""\n\n```\n\n\n\n## Vectorize the dataset', 'qdrant_client = qdrant_client.QdrantClient()\n\nqdrant_client.recreate_collection(\n\n    collection_name=""COCO"",\n\n    vectors_config=VectorParams(\n\n        size=len(vectors[0]),\n\n        distance=Distance.COSINE,\n\n    ),\n\n)\n\nqdrant_client.upsert(\n\n    collection_name=""COCO"",\n\n    points=Batch(\n\n        ids=ids,\n\n        vectors=vectors,\n\n        payloads=payloads,\n\n    ),\n\n)\n\n```\n\n\n\n## Query the database', '.tech/documentation/embeddings/aleph-alpha/), [Fastembed](https://github.com/qdrant/fastembed), and [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/).', '---\n\ntitle: Aleph Alpha Search\n\nweight: 16\n\n---\n\n\n\n# Multimodal Semantic Search with Aleph Alpha\n\n\n\n| Time: 30 min | Level: Beginner |  |    |\n\n| --- | ----------- | ----------- |----------- |\n\n\n\nThis tutorial shows you how to run a proper multimodal semantic search system with a few lines of code, without the need to annotate the data or train your networks.']","---

title: Aleph Alpha

weight: 900

aliases: [ ../integrations/aleph-alpha/ ]

---



Aleph Alpha is a multimodal and multilingual embeddings' provider. Their API allows creating the embeddings for text and images, both 

in the same latent space. They maintain an [official Python client](https://github.com/Aleph-Alpha/aleph-alpha-client) that might be 

installed with pip:



```bash

pip install aleph-alpha-client

```
[Docker is the fastest way to do that](https://qdrant.tech/documentation/quick_start/#installation).

2. You need to have a registered [Aleph Alpha account](https://app.aleph-alpha.com/). 

3. Upon registration, create an API key (see: [API Tokens](https://app.aleph-alpha.com/profile)).



Now you can store the Aleph Alpha API key in a variable and choose the model your are going to use.



```python

aa_token = ""<< your_token >>""

model = ""luminous-base""

```



## Vectorize the dataset
qdrant_client = qdrant_client.QdrantClient()

qdrant_client.recreate_collection(

    collection_name=""COCO"",

    vectors_config=VectorParams(

        size=len(vectors[0]),

        distance=Distance.COSINE,

    ),

)

qdrant_client.upsert(

    collection_name=""COCO"",

    points=Batch(

        ids=ids,

        vectors=vectors,

        payloads=payloads,

    ),

)

```



## Query the database
.tech/documentation/embeddings/aleph-alpha/), [Fastembed](https://github.com/qdrant/fastembed), and [AWS Bedrock](https://qdrant.tech/documentation/embeddings/bedrock/).
---

title: Aleph Alpha Search

weight: 16

---



# Multimodal Semantic Search with Aleph Alpha



| Time: 30 min | Level: Beginner |  |    |

| --- | ----------- | ----------- |----------- |



This tutorial shows you how to run a proper multimodal semantic search system with a few lines of code, without the need to annotate the data or train your networks."
What is the purpose of the `task_type` parameter when obtaining Nomic embeddings?,"The `task_type` parameter in the `nomic-embed-text-v1` model is used to define the type of embeddings that are obtained for documents. When obtaining Nomic embeddings for documents, you need to set the `task_type` parameter to `search_document`. This ensures that the embeddings generated are specifically tailored for document search purposes. By specifying the `task_type` as `search_document`, you are instructing the model to encode the text in a way that is optimized for searching and retrieving relevant documents based on the input query. This parameter helps customize the embeddings to suit the specific requirements of document retrieval tasks within the Nomic framework.","['Once installed, you can configure it with the official Python client or through direct HTTP requests.\n\n\n\n<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>\n\n\n\nYou can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings\n\nare obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.\n\nFor documents, set the `task_type` to `search_document`:\n\n\n\n```python', '```python\n\nfrom qdrant_client import QdrantClient, models\n\nfrom nomic import embed\n\n\n\noutput = embed.text(\n\n    texts=[""Qdrant is the best vector database!""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_document"",\n\n)\n\n\n\nqdrant_client = QdrantClient()\n\nqdrant_client.upsert(\n\n    collection_name=""my-collection"",\n\n    points=models.Batch(\n\n        ids=[1],\n\n        vectors=output[""embeddings""],\n\n    ),\n\n)\n\n```\n\n\n\nTo query the collection, set the `task_type` to `search_query`:\n\n\n\n```python', 'parameter to the API call: `input_type`. It determines the type of task you want to use the embeddings for.\n\n\n\n- `input_type=""search_document""` - for documents to store in Qdrant\n\n- `input_type=""search_query""` - for search queries to find the most relevant documents\n\n- `input_type=""classification""` - for classification tasks\n\n- `input_type=""clustering""` - for text clustering\n\n\n\nWhile implementing semantic search applications, such as RAG, you should use `input_type=""search_document""` for the', '6. `task_type_unspecified`: Unset value, which will default to one of the other values.\n\n\n\n\n\nIf you\'re building a semantic search application, such as RAG, you should use `task_type=""retrieval_document""` for the indexed documents and `task_type=""retrieval_query""` for the search queries. \n\n\n\nThe following example shows how to do this with Qdrant:\n\n\n\n## Setup\n\n\n\n```bash\n\npip install google-generativeai\n\n```\n\n\n\nLet\'s see how to use the Embedding Model API to embed a document for retrieval.', '```python\n\noutput = embed.text(\n\n    texts=[""What is the best vector database?""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_query"",\n\n)\n\n\n\nqdrant_client.search(\n\n    collection_name=""my-collection"",\n\n    query=output[""embeddings""][0],\n\n)\n\n```\n\n\n\nFor more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text).']","Once installed, you can configure it with the official Python client or through direct HTTP requests.



<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>



You can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings

are obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.

For documents, set the `task_type` to `search_document`:



```python
```python

from qdrant_client import QdrantClient, models

from nomic import embed



output = embed.text(

    texts=[""Qdrant is the best vector database!""],

    model=""nomic-embed-text-v1"",

    task_type=""search_document"",

)



qdrant_client = QdrantClient()

qdrant_client.upsert(

    collection_name=""my-collection"",

    points=models.Batch(

        ids=[1],

        vectors=output[""embeddings""],

    ),

)

```



To query the collection, set the `task_type` to `search_query`:



```python
parameter to the API call: `input_type`. It determines the type of task you want to use the embeddings for.



- `input_type=""search_document""` - for documents to store in Qdrant

- `input_type=""search_query""` - for search queries to find the most relevant documents

- `input_type=""classification""` - for classification tasks

- `input_type=""clustering""` - for text clustering



While implementing semantic search applications, such as RAG, you should use `input_type=""search_document""` for the
6. `task_type_unspecified`: Unset value, which will default to one of the other values.





If you're building a semantic search application, such as RAG, you should use `task_type=""retrieval_document""` for the indexed documents and `task_type=""retrieval_query""` for the search queries. 



The following example shows how to do this with Qdrant:



## Setup



```bash

pip install google-generativeai

```



Let's see how to use the Embedding Model API to embed a document for retrieval.
```python

output = embed.text(

    texts=[""What is the best vector database?""],

    model=""nomic-embed-text-v1"",

    task_type=""search_query"",

)



qdrant_client.search(

    collection_name=""my-collection"",

    query=output[""embeddings""][0],

)

```



For more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text)."
How can you use the Nomic library to upsert data into a collection and query it using text embeddings?,"To upsert data into a collection and query it using text embeddings with the Nomic library, you first need to use the `embed.text` method with the `task_type` set to `search_document` to generate embeddings for the text data you want to upsert. After obtaining the embeddings, you can use the `QdrantClient` to upsert the data into a specific collection by providing the collection name and the batch of points containing the IDs and corresponding vectors.

To query the collection, you need to set the `task_type` to `search_query` in the `embed.text` method with the query text. Once you have the query embeddings, you can use the `QdrantClient` to search the collection by providing the collection name and the query embedding to retrieve relevant results based on similarity.

For more detailed information and examples on using text , refer to : https://qdrant.tech/documentation/embeddings/nomic/","['```python\n\nfrom qdrant_client import QdrantClient, models\n\nfrom nomic import embed\n\n\n\noutput = embed.text(\n\n    texts=[""Qdrant is the best vector database!""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_document"",\n\n)\n\n\n\nqdrant_client = QdrantClient()\n\nqdrant_client.upsert(\n\n    collection_name=""my-collection"",\n\n    points=models.Batch(\n\n        ids=[1],\n\n        vectors=output[""embeddings""],\n\n    ),\n\n)\n\n```\n\n\n\nTo query the collection, set the `task_type` to `search_query`:\n\n\n\n```python', '```python\n\noutput = embed.text(\n\n    texts=[""What is the best vector database?""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_query"",\n\n)\n\n\n\nqdrant_client.search(\n\n    collection_name=""my-collection"",\n\n    query=output[""embeddings""][0],\n\n)\n\n```\n\n\n\nFor more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text).', 'Once installed, you can configure it with the official Python client or through direct HTTP requests.\n\n\n\n<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>\n\n\n\nYou can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings\n\nare obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.\n\nFor documents, set the `task_type` to `search_document`:\n\n\n\n```python', 'collection_name=""MyCollection"",\n\n    vectors_config=VectorParams(size=EMBEDDING_SIZE, distance=Distance.DOT),\n\n)\n\n\n\n\n\nqdrant_client.upsert(\n\n    collection_name=""MyCollection"",\n\n    points=Batch(\n\n        ids=list(range(len(embeddings))),\n\n        vectors=embeddings,\n\n    ),\n\n)\n\n\n\n```', '# https://platform.openai.com/docs/models/embeddings\n\nembedding_model = ""text-embedding-ada-002""\n\n\n\nopenai_client = openai.Client(\n\n    api_key=""<< your_api_key >>""\n\n)\n\nresponse = openai_client.embeddings.create(\n\n    input=""The best vector database"",\n\n    model=embedding_model,\n\n)\n\n\n\nqdrant_client = qdrant_client.QdrantClient()\n\nqdrant_client.upsert(\n\n    collection_name=""MyCollection"",\n\n    points=Batch(\n\n        ids=[1],\n\n        vectors=[response.data[0].embedding],\n\n    ),\n\n)\n\n```']","```python

from qdrant_client import QdrantClient, models

from nomic import embed



output = embed.text(

    texts=[""Qdrant is the best vector database!""],

    model=""nomic-embed-text-v1"",

    task_type=""search_document"",

)



qdrant_client = QdrantClient()

qdrant_client.upsert(

    collection_name=""my-collection"",

    points=models.Batch(

        ids=[1],

        vectors=output[""embeddings""],

    ),

)

```



To query the collection, set the `task_type` to `search_query`:



```python
```python

output = embed.text(

    texts=[""What is the best vector database?""],

    model=""nomic-embed-text-v1"",

    task_type=""search_query"",

)



qdrant_client.search(

    collection_name=""my-collection"",

    query=output[""embeddings""][0],

)

```



For more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text).
Once installed, you can configure it with the official Python client or through direct HTTP requests.



<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>



You can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings

are obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.

For documents, set the `task_type` to `search_document`:



```python
collection_name=""MyCollection"",

    vectors_config=VectorParams(size=EMBEDDING_SIZE, distance=Distance.DOT),

)





qdrant_client.upsert(

    collection_name=""MyCollection"",

    points=Batch(

        ids=list(range(len(embeddings))),

        vectors=embeddings,

    ),

)



```
# https://platform.openai.com/docs/models/embeddings

embedding_model = ""text-embedding-ada-002""



openai_client = openai.Client(

    api_key=""<< your_api_key >>""

)

response = openai_client.embeddings.create(

    input=""The best vector database"",

    model=embedding_model,

)



qdrant_client = qdrant_client.QdrantClient()

qdrant_client.upsert(

    collection_name=""MyCollection"",

    points=Batch(

        ids=[1],

        vectors=[response.data[0].embedding],

    ),

)

```"
What is the purpose of the `task_type` parameter in the Gemini Embedding Model API?,"The `task_type` parameter in the Gemini Embedding Model API serves to designate the intended purpose for the embeddings utilized. It allows users to specify the type of task they want to perform with the given text. The supported task types include `retrieval_query` for search/retrieval queries, `retrieval_document` for documents from the corpus being searched, `semantic_similarity` for Semantic Text Similarity, and `classification` for text classification. This parameter helps in customizing the functionality of the Gemini Embedding Model API based on the specific task requirements.","['6. `task_type_unspecified`: Unset value, which will default to one of the other values.\n\n\n\n\n\nIf you\'re building a semantic search application, such as RAG, you should use `task_type=""retrieval_document""` for the indexed documents and `task_type=""retrieval_query""` for the search queries. \n\n\n\nThe following example shows how to do this with Qdrant:\n\n\n\n## Setup\n\n\n\n```bash\n\npip install google-generativeai\n\n```\n\n\n\nLet\'s see how to use the Embedding Model API to embed a document for retrieval.', 'The Embedding Model API supports various task types, outlined as follows:\n\n\n\n1. `retrieval_query`: Specifies the given text is a query in a search/retrieval setting.\n\n2. `retrieval_document`: Specifies the given text is a document from the corpus being searched.\n\n3. `semantic_similarity`: Specifies the given text will be used for Semantic Text Similarity.\n\n4. `classification`: Specifies that the given text will be classified.\n\n5. `clustering`: Specifies that the embeddings will be used for clustering.', '```python\n\nqdrant_client.search(\n\n    collection_name=""GeminiCollection"",\n\n    query=genai.embed_content(\n\n        model=""models/embedding-001"",\n\n        content=""What is the best vector database to use with Gemini?"",\n\n        task_type=""retrieval_query"",\n\n    )[""embedding""],\n\n)\n\n```\n\n\n\n## Using Gemini Embedding Models with Binary Quantization', 'The following example shows how to embed a document with the `models/embedding-001` with the `retrieval_document` task type:\n\n\n\n## Embedding a document\n\n\n\n```python\n\nimport pathlib\n\nimport google.generativeai as genai\n\nimport qdrant_client\n\n\n\nGEMINI_API_KEY = ""YOUR GEMINI API KEY""  # add your key here\n\n\n\ngenai.configure(api_key=GEMINI_API_KEY)\n\n\n\nresult = genai.embed_content(\n\n    model=""models/embedding-001"",\n\n    content=""Qdrant is the best vector search engine to use with Gemini"",', '---\n\ntitle: Gemini\n\nweight: 700\n\n---\n\n\n\n# Gemini\n\n\n\nQdrant is compatible with Gemini Embedding Model API and its official Python SDK that can be installed as any other package:\n\n\n\nGemini is a new family of Google PaLM models, released in December 2023. The new embedding models succeed the previous Gecko Embedding Model. \n\n\n\nIn the latest models, an additional parameter, `task_type`, can be passed to the API call. This parameter serves to designate the intended purpose for the embeddings utilized.']","6. `task_type_unspecified`: Unset value, which will default to one of the other values.





If you're building a semantic search application, such as RAG, you should use `task_type=""retrieval_document""` for the indexed documents and `task_type=""retrieval_query""` for the search queries. 



The following example shows how to do this with Qdrant:



## Setup



```bash

pip install google-generativeai

```



Let's see how to use the Embedding Model API to embed a document for retrieval.
The Embedding Model API supports various task types, outlined as follows:



1. `retrieval_query`: Specifies the given text is a query in a search/retrieval setting.

2. `retrieval_document`: Specifies the given text is a document from the corpus being searched.

3. `semantic_similarity`: Specifies the given text will be used for Semantic Text Similarity.

4. `classification`: Specifies that the given text will be classified.

5. `clustering`: Specifies that the embeddings will be used for clustering.
```python

qdrant_client.search(

    collection_name=""GeminiCollection"",

    query=genai.embed_content(

        model=""models/embedding-001"",

        content=""What is the best vector database to use with Gemini?"",

        task_type=""retrieval_query"",

    )[""embedding""],

)

```



## Using Gemini Embedding Models with Binary Quantization
The following example shows how to embed a document with the `models/embedding-001` with the `retrieval_document` task type:



## Embedding a document



```python

import pathlib

import google.generativeai as genai

import qdrant_client



GEMINI_API_KEY = ""YOUR GEMINI API KEY""  # add your key here



genai.configure(api_key=GEMINI_API_KEY)



result = genai.embed_content(

    model=""models/embedding-001"",

    content=""Qdrant is the best vector search engine to use with Gemini"",
---

title: Gemini

weight: 700

---



# Gemini



Qdrant is compatible with Gemini Embedding Model API and its official Python SDK that can be installed as any other package:



Gemini is a new family of Google PaLM models, released in December 2023. The new embedding models succeed the previous Gecko Embedding Model. 



In the latest models, an additional parameter, `task_type`, can be passed to the API call. This parameter serves to designate the intended purpose for the embeddings utilized."
What is the maximum number of tokens that Jina embeddings allow for model input lengths?,"Jina embeddings allow for model input lengths of up to 8192 tokens. This means that the models utilizing Jina embeddings can process sequences with a maximum length of 8192 tokens, providing flexibility and capability for handling large amounts of text data efficiently.","['---\n\ntitle: Jina Embeddings\n\nweight: 800\n\naliases: [ ../integrations/jina-embeddings/ ]\n\n---\n\n\n\n# Jina Embeddings\n\n\n\nQdrant can also easily work with [Jina embeddings](https://jina.ai/embeddings/) which allow for model input lengths of up to 8192 tokens.', ""The default model and several other models have a context window of maximum 512 tokens. This maximum limit comes from the embedding model training and design itself.If you'd like to embed sequences larger than that, we'd recommend using some pooling strategy to get a single vector out of the sequence. For example, you can use the mean of the embeddings of different chunks of a document. This is also what the [SBERT Paper recommends](https://lilianweng.github.io/posts/2021-05-31-contrastive/#sentence-bert)"", '# Provide Jina API key and choose one of the available models.\n\n# You can get a free trial key here: https://jina.ai/embeddings/\n\nJINA_API_KEY = ""jina_xxxxxxxxxxx""\n\nMODEL = ""jina-embeddings-v2-base-en""  # or ""jina-embeddings-v2-base-en""\n\nEMBEDDING_SIZE = 768  # 512 for small variant\n\n\n\n# Get embeddings from the API\n\nurl = ""https://api.jina.ai/v1/embeddings""\n\n\n\nheaders = {\n\n    ""Content-Type"": ""application/json"",\n\n    ""Authorization"": f""Bearer {JINA_API_KEY}"",\n\n}\n\n\n\ndata = {', '""Authorization"": f""Bearer {JINA_API_KEY}"",\n\n}\n\n\n\ndata = {\n\n    ""input"": [""Your text string goes here"", ""You can send multiple texts""],\n\n    ""model"": MODEL,\n\n}\n\n\n\nresponse = requests.post(url, headers=headers, json=data)\n\nembeddings = [d[""embedding""] for d in response.json()[""data""]]\n\n\n\n\n\n# Index the embeddings into Qdrant\n\nqdrant_client = qdrant_client.QdrantClient("":memory:"")\n\nqdrant_client.create_collection(\n\n    collection_name=""MyCollection"",', '. The other caveat is that we pass on the token limits or context windows from the embedding model creators themselves. So in the case of this model, which is BGE base, that is 512 BGE tokens.']","---

title: Jina Embeddings

weight: 800

aliases: [ ../integrations/jina-embeddings/ ]

---



# Jina Embeddings



Qdrant can also easily work with [Jina embeddings](https://jina.ai/embeddings/) which allow for model input lengths of up to 8192 tokens.
The default model and several other models have a context window of maximum 512 tokens. This maximum limit comes from the embedding model training and design itself.If you'd like to embed sequences larger than that, we'd recommend using some pooling strategy to get a single vector out of the sequence. For example, you can use the mean of the embeddings of different chunks of a document. This is also what the [SBERT Paper recommends](https://lilianweng.github.io/posts/2021-05-31-contrastive/#sentence-bert)
# Provide Jina API key and choose one of the available models.

# You can get a free trial key here: https://jina.ai/embeddings/

JINA_API_KEY = ""jina_xxxxxxxxxxx""

MODEL = ""jina-embeddings-v2-base-en""  # or ""jina-embeddings-v2-base-en""

EMBEDDING_SIZE = 768  # 512 for small variant



# Get embeddings from the API

url = ""https://api.jina.ai/v1/embeddings""



headers = {

    ""Content-Type"": ""application/json"",

    ""Authorization"": f""Bearer {JINA_API_KEY}"",

}



data = {
""Authorization"": f""Bearer {JINA_API_KEY}"",

}



data = {

    ""input"": [""Your text string goes here"", ""You can send multiple texts""],

    ""model"": MODEL,

}



response = requests.post(url, headers=headers, json=data)

embeddings = [d[""embedding""] for d in response.json()[""data""]]





# Index the embeddings into Qdrant

qdrant_client = qdrant_client.QdrantClient("":memory:"")

qdrant_client.create_collection(

    collection_name=""MyCollection"",
. The other caveat is that we pass on the token limits or context windows from the embedding model creators themselves. So in the case of this model, which is BGE base, that is 512 BGE tokens."
Why does Qdrant by default not return vectors in search results?,"By default, Qdrant tries to minimize network traffic and doesn't return vectors in search results. This default behavior is in place to optimize performance and reduce unnecessary data transfer. However, if you specifically require the vectors to be included in the search results, you can override this default setting by setting the `with_vector` parameter of the Search/Scroll to `true`. This allows you to retrieve the vectors along with other search results, providing you with the option to access the vector data when needed.","[""Please read more about collections, isolation, and multiple users in our [Multitenancy](../../tutorials/multiple-partitions/) tutorial.\n\n\n\n### My search results contain vectors with null values. Why?\n\n\n\nBy default, Qdrant tries to minimize network traffic and doesn't return vectors in search results.\n\nBut you can force Qdrant to do so by setting the `with_vector` parameter of the Search/Scroll to `true`."", '## Why Qdrant?', 'If you\'re still seeing `""vector"": null` in your results, it might be that the vector you\'re passing is not in the correct format, or there\'s an issue with how you\'re calling the upsert method.\n\n\n\n### How can I search without a vector?\n\n\n\nYou are likely looking for the [scroll](../../concepts/points/#scroll-points) method. It allows you to retrieve the records based on filters or even iterate over all the records in the collection.\n\n\n\n### Does Qdrant support a full-text search or a hybrid search?', '```http\n\nPOST /collections/{collection_name}/points/search\n\n{\n\n    ""vector"": {\n\n        ""name"": ""text"",\n\n        ""vector"": {\n\n            ""indices"": [6, 7],\n\n            ""values"": [1.0, 2.0]\n\n        }    \n\n    },\n\n    ""limit"": 3\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.search(\n\n    collection_name=""{collection_name}"",\n\n    query_vector=models.NamedSparseVector(\n\n        name=""text"",', '### Average vector strategy\n\n\n\nThe default and first strategy added to Qdrant is called `average_vector`. It preprocesses the input examples to create a single vector that is used for the search. Since the preprocessing step happens very fast, the performance of this strategy is on-par with regular search. The intuition behind this kind of recommendation is that each vector component represents an independent feature of the data, so, by averaging the examples, we should get a good recommendation.']","Please read more about collections, isolation, and multiple users in our [Multitenancy](../../tutorials/multiple-partitions/) tutorial.



### My search results contain vectors with null values. Why?



By default, Qdrant tries to minimize network traffic and doesn't return vectors in search results.

But you can force Qdrant to do so by setting the `with_vector` parameter of the Search/Scroll to `true`.
## Why Qdrant?
If you're still seeing `""vector"": null` in your results, it might be that the vector you're passing is not in the correct format, or there's an issue with how you're calling the upsert method.



### How can I search without a vector?



You are likely looking for the [scroll](../../concepts/points/#scroll-points) method. It allows you to retrieve the records based on filters or even iterate over all the records in the collection.



### Does Qdrant support a full-text search or a hybrid search?
```http

POST /collections/{collection_name}/points/search

{

    ""vector"": {

        ""name"": ""text"",

        ""vector"": {

            ""indices"": [6, 7],

            ""values"": [1.0, 2.0]

        }    

    },

    ""limit"": 3

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.search(

    collection_name=""{collection_name}"",

    query_vector=models.NamedSparseVector(

        name=""text"",
### Average vector strategy



The default and first strategy added to Qdrant is called `average_vector`. It preprocesses the input examples to create a single vector that is used for the search. Since the preprocessing step happens very fast, the performance of this strategy is on-par with regular search. The intuition behind this kind of recommendation is that each vector component represents an independent feature of the data, so, by averaging the examples, we should get a good recommendation."
What does Qdrant not plan to support in the future?,"In the future, Qdrant does not plan to support BM25 or other non-vector-based retrieval or ranking functions, built-in ontologies or knowledge graphs, and query analyzers and other NLP tools. Qdrant aims to introduce support for sparse vectors, as used in SPLADE or similar models, but does not intend to incorporate the aforementioned features into its functionality. Users can combine Qdrant with specialized tools, including full-text search engines, to complement its capabilities.","[""What Qdrant plans to introduce in the future:\n\n\n\n- Support for sparse vectors, as used in [SPLADE](https://github.com/naver/splade) or similar models\n\n\n\nWhat Qdrant doesn't plan to support:\n\n\n\n- BM25 or other non-vector-based retrieval or ranking functions\n\n- Built-in ontologies or knowledge graphs\n\n- Query analyzers and other NLP tools\n\n\n\nOf course, you can always combine Qdrant with any specialized tool you need, including full-text search engines."", 'Other than as expressly set out in these terms, Qdrant does not make any commitments about the Solution and Website’s availability or ability to meet your expectations.\n\n\n\n\n\n### 15. Liability\n\n\n\nIn no event shall Qdrant be liable for:\n\n\n\n\n\n* any indirect damages of any kind, including any potential loss of business;\n\n* any damage or loss which is not caused by a breach of its obligations under the T&Cs;\n\n* disruptions or damage inherent in an electronic communications network;', '## What sets Qdrant apart?', '. In the default build configuration, qdrant does not include support for all languages, due to the increasing size of the resulting binary. Chinese, Japanese and Korean languages are not enabled by default, but can be enabled by building qdrant from source with `--features multiling-chinese,multiling-japanese,multiling-korean` flags.', '.                                                                                    |']","What Qdrant plans to introduce in the future:



- Support for sparse vectors, as used in [SPLADE](https://github.com/naver/splade) or similar models



What Qdrant doesn't plan to support:



- BM25 or other non-vector-based retrieval or ranking functions

- Built-in ontologies or knowledge graphs

- Query analyzers and other NLP tools



Of course, you can always combine Qdrant with any specialized tool you need, including full-text search engines.
Other than as expressly set out in these terms, Qdrant does not make any commitments about the Solution and Website’s availability or ability to meet your expectations.





### 15. Liability



In no event shall Qdrant be liable for:





* any indirect damages of any kind, including any potential loss of business;

* any damage or loss which is not caused by a breach of its obligations under the T&Cs;

* disruptions or damage inherent in an electronic communications network;
## What sets Qdrant apart?
. In the default build configuration, qdrant does not include support for all languages, due to the increasing size of the resulting binary. Chinese, Japanese and Korean languages are not enabled by default, but can be enabled by building qdrant from source with `--features multiling-chinese,multiling-japanese,multiling-korean` flags.
.                                                                                    |"
 What is the recommended approach for configuring multitenancy in terms of the number of collections to create?,"In most cases, the recommended approach for configuring multitenancy is to create only a single collection with payload-based partitioning. This approach, known as multitenancy, is efficient for the majority of users. By using a single collection with payload-based partitioning, each user can access their own vectors while ensuring that they cannot see the vectors of other users. However, it is important to note that this approach requires additional configuration to set up properly.","['---\n\ntitle: Multitenancy\n\nweight: 12\n\naliases:\n\n  - ../tutorials/multiple-partitions\n\n---\n\n# Configure Multitenancy\n\n\n\n**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called multitenancy. It is efficient for most of users, but it requires additional configuration. This document will show you how to set it up.', '## Setting up multitenancy\n\n\n\n**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called [multitenancy](https://en.wikipedia.org/wiki/Multitenancy). It is efficient for most of users, but it requires additional configuration. [Learn how to set it up](../../tutorials/multiple-partitions/)', 'In addition to metrics and vector size, each collection uses its own set of parameters that controls collection optimization, index construction, and vacuum.\n\nThese settings can be changed at any time by a corresponding request.\n\n\n\n## Setting up multitenancy', ""Qdrant is built to excel in a single collection with a vast number of tenants. You should only create multiple collections when your data is not homogenous or if users' vectors are created by different embedding models. Creating too many collections may result in resource overhead and cause dependencies. This can increase costs and affect overall performance. \n\n\n\n## Sharding your database"", ""**When should you create multiple collections?** When you have a limited number of users and you need isolation. This approach is flexible, but it may be more costly, since creating numerous collections may result in resource overhead. Also, you need to ensure that they do not affect each other in any way, including performance-wise. \n\n\n\n> Note: If you're running `curl` from the command line, the following commands\n\nassume that you have a running instance of Qdrant on `http://localhost:6333`.""]","---

title: Multitenancy

weight: 12

aliases:

  - ../tutorials/multiple-partitions

---

# Configure Multitenancy



**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called multitenancy. It is efficient for most of users, but it requires additional configuration. This document will show you how to set it up.
## Setting up multitenancy



**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called [multitenancy](https://en.wikipedia.org/wiki/Multitenancy). It is efficient for most of users, but it requires additional configuration. [Learn how to set it up](../../tutorials/multiple-partitions/)
In addition to metrics and vector size, each collection uses its own set of parameters that controls collection optimization, index construction, and vacuum.

These settings can be changed at any time by a corresponding request.



## Setting up multitenancy
Qdrant is built to excel in a single collection with a vast number of tenants. You should only create multiple collections when your data is not homogenous or if users' vectors are created by different embedding models. Creating too many collections may result in resource overhead and cause dependencies. This can increase costs and affect overall performance. 



## Sharding your database
**When should you create multiple collections?** When you have a limited number of users and you need isolation. This approach is flexible, but it may be more costly, since creating numerous collections may result in resource overhead. Also, you need to ensure that they do not affect each other in any way, including performance-wise. 



> Note: If you're running `curl` from the command line, the following commands

assume that you have a running instance of Qdrant on `http://localhost:6333`."
What is the purpose of the locking feature in Qdrant administration tools?,"The locking feature in Qdrant administration tools serves the purpose of restricting the possible operations on a Qdrant process. It allows users to control the behavior of a Qdrant instance at runtime without manually changing its configuration. When a lock is applied, specific operations such as creating new collections or adding new data to the existing storage can be disabled. It is important to note that the locking configuration is not persistent, so it needs to be reapplied after a restart. Additionally, the locking feature applies to a single node only, requiring the lock to be set on all desired nodes in a distributed deployment setup. The locking API in Qdrant enables users to manage and control the access and operations on the Qdrant instance effectively.","['---\n\ntitle: Administration\n\nweight: 10\n\naliases:\n\n  - ../administration\n\n---\n\n\n\n# Administration\n\n\n\nQdrant exposes administration tools which enable to modify at runtime the behavior of a qdrant instance without changing its configuration manually.\n\n\n\n## Locking\n\n\n\nA locking API enables users to restrict the possible operations on a qdrant process.\n\nIt is important to mention that:\n\n- The configuration is not persistent therefore it is necessary to lock again following a restart.', '- Locking applies to a single node only. It is necessary to call lock on all the desired nodes in a distributed deployment setup.\n\n\n\nLock request sample:\n\n\n\n```http\n\nPOST /locks\n\n{\n\n    ""error_message"": ""write is forbidden"",\n\n    ""write"": true\n\n}\n\n```\n\n\n\nWrite flags enables/disables write lock.\n\nIf the write lock is set to true, qdrant doesn\'t allow creating new collections or adding new data to the existing storage.\n\nHowever, deletion operations or updates are not forbidden under the write lock.', 'using Qdrant.Client;\n\n\n\nvar client = new QdrantClient(\n\n  host: ""xyz-example.eu-central.aws.cloud.qdrant.io"",\n\n  https: true,\n\n  apiKey: ""<paste-your-api-key-here>""\n\n);\n\n```', '## Why Qdrant?', '.                                                                                                                                                                                                        |']","---

title: Administration

weight: 10

aliases:

  - ../administration

---



# Administration



Qdrant exposes administration tools which enable to modify at runtime the behavior of a qdrant instance without changing its configuration manually.



## Locking



A locking API enables users to restrict the possible operations on a qdrant process.

It is important to mention that:

- The configuration is not persistent therefore it is necessary to lock again following a restart.
- Locking applies to a single node only. It is necessary to call lock on all the desired nodes in a distributed deployment setup.



Lock request sample:



```http

POST /locks

{

    ""error_message"": ""write is forbidden"",

    ""write"": true

}

```



Write flags enables/disables write lock.

If the write lock is set to true, qdrant doesn't allow creating new collections or adding new data to the existing storage.

However, deletion operations or updates are not forbidden under the write lock.
using Qdrant.Client;



var client = new QdrantClient(

  host: ""xyz-example.eu-central.aws.cloud.qdrant.io"",

  https: true,

  apiKey: ""<paste-your-api-key-here>""

);

```
## Why Qdrant?
.                                                                                                                                                                                                        |"
What is the significance of the `on_disk_payload` setting?,"The `on_disk_payload` setting in the storage configuration determines whether a point's payload will be stored in memory or read from disk every time it is requested. When set to `true`, the point's payload will not be stored in memory, saving RAM but slightly increasing the response time as the data needs to be retrieved from disk. It is important to note that payload values involved in filtering and indexed values will still remain in RAM for efficient access. This setting allows for a balance between RAM usage and response time in handling data storage and retrieval processes.","['* `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.\n\n* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.\n\n* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.', 'To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""hnsw_config"": {\n\n        ""on_disk"": true\n\n    }\n\n}\n\n```\n\n\n\n```python', ""temp_path: null\n\n\n\n  # If true - point's payload will not be stored in memory.\n\n  # It will be read from the disk every time it is requested.\n\n  # This setting saves RAM by (slightly) increasing the response time.\n\n  # Note: those payload values that are involved in filtering and are indexed - remain in RAM.\n\n  on_disk_payload: true\n\n\n\n  # Maximum number of concurrent updates to shard replicas\n\n  # If `null` - maximum concurrency is used.\n\n  update_concurrency: null"", '""on_disk"": true\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n\n    optimizers_config=models.OptimizersConfigDiff(memmap_threshold=20000),\n\n    hnsw_config=models.HnswConfigDiff(on_disk=True),\n\n)\n\n```\n\n\n\n```typescript', '""on_disk_payload"": false\n\n            },\n\n            ""hnsw_config"": {\n\n                ""m"": 16,\n\n                ""ef_construct"": 100,\n\n                ""full_scan_threshold"": 10000,\n\n                ""max_indexing_threads"": 0\n\n            },\n\n            ""optimizer_config"": {\n\n                ""deleted_threshold"": 0.2,\n\n                ""vacuum_min_vector_number"": 1000,\n\n                ""default_segment_number"": 0,\n\n                ""max_segment_size"": null,']","* `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.

* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.

* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.
To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""hnsw_config"": {

        ""on_disk"": true

    }

}

```



```python
temp_path: null



  # If true - point's payload will not be stored in memory.

  # It will be read from the disk every time it is requested.

  # This setting saves RAM by (slightly) increasing the response time.

  # Note: those payload values that are involved in filtering and are indexed - remain in RAM.

  on_disk_payload: true



  # Maximum number of concurrent updates to shard replicas

  # If `null` - maximum concurrency is used.

  update_concurrency: null
""on_disk"": true

    }

}

```



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),

    optimizers_config=models.OptimizersConfigDiff(memmap_threshold=20000),

    hnsw_config=models.HnswConfigDiff(on_disk=True),

)

```



```typescript
""on_disk_payload"": false

            },

            ""hnsw_config"": {

                ""m"": 16,

                ""ef_construct"": 100,

                ""full_scan_threshold"": 10000,

                ""max_indexing_threads"": 0

            },

            ""optimizer_config"": {

                ""deleted_threshold"": 0.2,

                ""vacuum_min_vector_number"": 1000,

                ""default_segment_number"": 0,

                ""max_segment_size"": null,"
What is the significance of the parameter `max_segment_size_kb` in the context of vector indexation?,"The `max_segment_size_kb` parameter in the context of vector indexation determines the maximum size, in kilobytes, that a segment can have. Segments larger than this specified size might lead to disproportionately long indexation times. Therefore, it is essential to limit the size of segments to optimize the indexation process. The choice of this parameter should be based on the priority between indexation speed and search speed. If indexation speed is more critical, the parameter should be set lower. Conversely, if search speed is more important, the parameter should be set higher. It is important to note that 1Kb is equivalent to 1 vector of size 256. If the `max_segment_size_kb` parameter is not explicitly set, it will be automatically selected based on the number of available CPUs.","['# If search speed is more important - make this parameter higher.\n\n    # Note: 1Kb = 1 vector of size 256\n\n    # If not set, will be automatically selected considering the number of available CPUs.\n\n    max_segment_size_kb: null\n\n\n\n    # Maximum size (in KiloBytes) of vectors to store in-memory per segment.\n\n    # Segments larger than this threshold will be stored as read-only memmaped file.\n\n    # To enable memmap storage, lower the threshold\n\n    # Note: 1Kb = 1 vector of size 256', '# Segments larger than this threshold will be stored as read-only memmaped file.\n\n    # Memmap storage is disabled by default, to enable it, set this threshold to a reasonable value.\n\n    # To disable memmap storage, set this to `0`.\n\n    # Note: 1Kb = 1 vector of size 256\n\n    memmap_threshold_kb: 200000\n\n\n\n    # Maximum size (in kilobytes) of vectors allowed for plain index, exceeding this threshold will enable vector indexing', '""vectors_count"": 1068786,\n\n        ""indexed_vectors_count"": 1024232,\n\n        ""points_count"": 1068786,\n\n        ""segments_count"": 31,\n\n        ""config"": {\n\n            ""params"": {\n\n                ""vectors"": {\n\n                    ""size"": 384,\n\n                    ""distance"": ""Cosine""\n\n                },\n\n                ""shard_number"": 1,\n\n                ""replication_factor"": 1,\n\n                ""write_consistency_factor"": 1,\n\n                ""on_disk_payload"": false\n\n            },', '```text\n\nmemory_size = number_of_vectors * vector_dimension * 4 bytes * 1.5\n\n```\n\n\n\nExtra 50% is needed for metadata (indexes, point versions, etc.) as well as for temporary segments constructed during the optimization process.\n\n\n\nIf you need to have payloads along with the vectors, it is recommended to store it on the disc, and only keep [indexed fields](../../concepts/indexing/#payload-index) in RAM.', '""on_disk_payload"": false\n\n            },\n\n            ""hnsw_config"": {\n\n                ""m"": 16,\n\n                ""ef_construct"": 100,\n\n                ""full_scan_threshold"": 10000,\n\n                ""max_indexing_threads"": 0\n\n            },\n\n            ""optimizer_config"": {\n\n                ""deleted_threshold"": 0.2,\n\n                ""vacuum_min_vector_number"": 1000,\n\n                ""default_segment_number"": 0,\n\n                ""max_segment_size"": null,']","# If search speed is more important - make this parameter higher.

    # Note: 1Kb = 1 vector of size 256

    # If not set, will be automatically selected considering the number of available CPUs.

    max_segment_size_kb: null



    # Maximum size (in KiloBytes) of vectors to store in-memory per segment.

    # Segments larger than this threshold will be stored as read-only memmaped file.

    # To enable memmap storage, lower the threshold

    # Note: 1Kb = 1 vector of size 256
# Segments larger than this threshold will be stored as read-only memmaped file.

    # Memmap storage is disabled by default, to enable it, set this threshold to a reasonable value.

    # To disable memmap storage, set this to `0`.

    # Note: 1Kb = 1 vector of size 256

    memmap_threshold_kb: 200000



    # Maximum size (in kilobytes) of vectors allowed for plain index, exceeding this threshold will enable vector indexing
""vectors_count"": 1068786,

        ""indexed_vectors_count"": 1024232,

        ""points_count"": 1068786,

        ""segments_count"": 31,

        ""config"": {

            ""params"": {

                ""vectors"": {

                    ""size"": 384,

                    ""distance"": ""Cosine""

                },

                ""shard_number"": 1,

                ""replication_factor"": 1,

                ""write_consistency_factor"": 1,

                ""on_disk_payload"": false

            },
```text

memory_size = number_of_vectors * vector_dimension * 4 bytes * 1.5

```



Extra 50% is needed for metadata (indexes, point versions, etc.) as well as for temporary segments constructed during the optimization process.



If you need to have payloads along with the vectors, it is recommended to store it on the disc, and only keep [indexed fields](../../concepts/indexing/#payload-index) in RAM.
""on_disk_payload"": false

            },

            ""hnsw_config"": {

                ""m"": 16,

                ""ef_construct"": 100,

                ""full_scan_threshold"": 10000,

                ""max_indexing_threads"": 0

            },

            ""optimizer_config"": {

                ""deleted_threshold"": 0.2,

                ""vacuum_min_vector_number"": 1000,

                ""default_segment_number"": 0,

                ""max_segment_size"": null,"
What is the significance of the `indexing_threshold_kb` parameter?,"The `indexing_threshold_kb` parameter specifies the maximum size, in Kilobytes, allowed for vectors for plain index. The default value for this parameter is set to 20000 KB. It is important to note that 1 KB is equivalent to 1 vector of size 256. This parameter plays a crucial role in determining the maximum size of vectors that can be used for indexing. If the `indexing_threshold_kb` parameter is not explicitly set, the default value will be used. Additionally, setting this parameter to `0` will explicitly disable vector indexing. This parameter directly impacts the efficiency and performance of the indexing process for the given vectors.","[');\n\n```\n\n\n\nThe rule of thumb to set the memmap threshold parameter is simple:\n\n\n\n- if you have a balanced use scenario - set memmap threshold the same as `indexing_threshold` (default is 20000). In this case the optimizer will not make any extra runs and will optimize all thresholds at once.', '""on_disk_payload"": false\n\n            },\n\n            ""hnsw_config"": {\n\n                ""m"": 16,\n\n                ""ef_construct"": 100,\n\n                ""full_scan_threshold"": 10000,\n\n                ""max_indexing_threads"": 0\n\n            },\n\n            ""optimizer_config"": {\n\n                ""deleted_threshold"": 0.2,\n\n                ""vacuum_min_vector_number"": 1000,\n\n                ""default_segment_number"": 0,\n\n                ""max_segment_size"": null,', '- Set up `memmap_threshold_kb` option. This option will set the threshold after which the segment will be converted to memmap storage.\n\n\n\nThere are two ways to do this:\n\n\n\n1. You can set the threshold globally in the [configuration file](../../guides/configuration/). The parameter is called `memmap_threshold_kb`.\n\n2. You can set the threshold for each collection separately during [creation](../collections/#create-collection) or [update](../collections/#update-collection-parameters).\n\n\n\n```http', ""default_segment_number=5,\n\n        indexing_threshold=0,\n\n    ),\n\n    quantization_config=models.BinaryQuantization(\n\n        binary=models.BinaryQuantizationConfig(always_ram=True),\n\n    ),\n\n)\n\n```\n\n\n\n#### What is happening in the OptimizerConfig? \n\n\n\nWe're setting `indexing_threshold` to 0 i.e. disabling the indexing to zero. This allows faster uploads of vectors and payloads. We will turn it back on down below, once all the data is loaded"", '# If search speed is more important - make this parameter higher.\n\n    # Note: 1Kb = 1 vector of size 256\n\n    # If not set, will be automatically selected considering the number of available CPUs.\n\n    max_segment_size_kb: null\n\n\n\n    # Maximum size (in KiloBytes) of vectors to store in-memory per segment.\n\n    # Segments larger than this threshold will be stored as read-only memmaped file.\n\n    # To enable memmap storage, lower the threshold\n\n    # Note: 1Kb = 1 vector of size 256']",");

```



The rule of thumb to set the memmap threshold parameter is simple:



- if you have a balanced use scenario - set memmap threshold the same as `indexing_threshold` (default is 20000). In this case the optimizer will not make any extra runs and will optimize all thresholds at once.
""on_disk_payload"": false

            },

            ""hnsw_config"": {

                ""m"": 16,

                ""ef_construct"": 100,

                ""full_scan_threshold"": 10000,

                ""max_indexing_threads"": 0

            },

            ""optimizer_config"": {

                ""deleted_threshold"": 0.2,

                ""vacuum_min_vector_number"": 1000,

                ""default_segment_number"": 0,

                ""max_segment_size"": null,
- Set up `memmap_threshold_kb` option. This option will set the threshold after which the segment will be converted to memmap storage.



There are two ways to do this:



1. You can set the threshold globally in the [configuration file](../../guides/configuration/). The parameter is called `memmap_threshold_kb`.

2. You can set the threshold for each collection separately during [creation](../collections/#create-collection) or [update](../collections/#update-collection-parameters).



```http
default_segment_number=5,

        indexing_threshold=0,

    ),

    quantization_config=models.BinaryQuantization(

        binary=models.BinaryQuantizationConfig(always_ram=True),

    ),

)

```



#### What is happening in the OptimizerConfig? 



We're setting `indexing_threshold` to 0 i.e. disabling the indexing to zero. This allows faster uploads of vectors and payloads. We will turn it back on down below, once all the data is loaded
# If search speed is more important - make this parameter higher.

    # Note: 1Kb = 1 vector of size 256

    # If not set, will be automatically selected considering the number of available CPUs.

    max_segment_size_kb: null



    # Maximum size (in KiloBytes) of vectors to store in-memory per segment.

    # Segments larger than this threshold will be stored as read-only memmaped file.

    # To enable memmap storage, lower the threshold

    # Note: 1Kb = 1 vector of size 256"
How can you optimize Qdrant for minimizing latency in search requests?,"To optimize Qdrant for minimizing latency in search requests, you can set up the system to use as many cores as possible for a single request. This can be achieved by setting the number of segments in the collection to be equal to the number of cores in the system. By doing this, each segment will be processed in parallel, leading to a faster final result. This approach allows for the efficient utilization of system resources and can significantly reduce the time taken from the moment a request is submitted to the moment a response is received. By optimizing for latency in this manner, you can enhance the overall speed and responsiveness of the search functionality in Qdrant.","['Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.\n\n\n\nTo prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\\.\n\nYou can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{', 'Fortunately, the [new batch search feature](https://blog.qdrant.tech/batch-vector-search-with-qdrant-8c4d598179d5) allows \n\nyou to avoid this issue. With just one API call, Qdrant will handle multiple search requests in the most efficient way \n\npossible. This means that you can perform multiple tasks simultaneously without having to worry about network overhead\n\nor slow performance.\n\n\n\n## Built-in ARM support', '![sequential vs. concurrent flow](/articles_data/search-as-you-type/sayt_concurrency.png)\n\n\n\nWhile this means more load for the Qdrant vector search engine, this is not the limiting factor. The relevant data is already in cache in many cases, so the overhead stays within acceptable bounds, and the maximum latency in case of prefix cache misses is measurably reduced.\n\n\n\nThe code is available on the [Qdrant github](https://github.com/qdrant/page-search)', '5. Configurable Timeout for Searches: allowing users to configure the timeout for searches provides greater flexibility and can help optimize system performance under different operational conditions ([PR#2748](https://github.com/qdrant/qdrant/pull/2748), [PR#2771](https://github.com/qdrant/qdrant/pull/2771)).\n\n\n\n## Release notes', ""## Minor improvements\n\n\n\nBeyond introducing new features, Qdrant 1.7.0 enhances performance and addresses various minor issues. Here's a rundown of the key improvements:\n\n\n\n1. Improvement of HNSW Index Building on High CPU Systems ([PR#2869](https://github.com/qdrant/qdrant/pull/2869)).\n\n\n\n2. Improving [Search Tail Latencies](https://github.com/qdrant/qdrant/pull/2931): improvement for high CPU systems with many parallel searches, directly impacting the user experience by reducing latency.""]","Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.



To prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\.

You can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.



```http

PUT /collections/{collection_name}

{
Fortunately, the [new batch search feature](https://blog.qdrant.tech/batch-vector-search-with-qdrant-8c4d598179d5) allows 

you to avoid this issue. With just one API call, Qdrant will handle multiple search requests in the most efficient way 

possible. This means that you can perform multiple tasks simultaneously without having to worry about network overhead

or slow performance.



## Built-in ARM support
![sequential vs. concurrent flow](/articles_data/search-as-you-type/sayt_concurrency.png)



While this means more load for the Qdrant vector search engine, this is not the limiting factor. The relevant data is already in cache in many cases, so the overhead stays within acceptable bounds, and the maximum latency in case of prefix cache misses is measurably reduced.



The code is available on the [Qdrant github](https://github.com/qdrant/page-search)
5. Configurable Timeout for Searches: allowing users to configure the timeout for searches provides greater flexibility and can help optimize system performance under different operational conditions ([PR#2748](https://github.com/qdrant/qdrant/pull/2748), [PR#2771](https://github.com/qdrant/qdrant/pull/2771)).



## Release notes
## Minor improvements



Beyond introducing new features, Qdrant 1.7.0 enhances performance and addresses various minor issues. Here's a rundown of the key improvements:



1. Improvement of HNSW Index Building on High CPU Systems ([PR#2869](https://github.com/qdrant/qdrant/pull/2869)).



2. Improving [Search Tail Latencies](https://github.com/qdrant/qdrant/pull/2931): improvement for high CPU systems with many parallel searches, directly impacting the user experience by reducing latency."
How can Qdrant be configured to optimize throughput by utilizing multiple cores for parallel processing?,"To optimize throughput in Qdrant and utilize multiple cores for parallel processing, you can configure the system to use minimal number of segments, typically set to 2. By setting the default_segment_number to 2 in the optimizers_config section of the PUT request for creating a collection, you can instruct Qdrant to use a smaller number of segments. This approach benefits from the size of the index and reduces the overall number of vector comparisons needed to find the nearest neighbors. However, it is important to note that larger segments require more time to build the index. By adjusting this configuration parameter, you can strike a balance between maximizing throughput and optimizing the efficiency of vector search operations in Qdrant.","[');\n\n```\n\n\n\nTo prefer throughput, you can set up Qdrant to use as many cores as possible for processing multiple requests in parallel.\n\nTo do that, you can configure qdrant to use minimal number of segments, which is usually 2.\n\nLarge segments benefit from the size of the index and overall smaller number of vector comparisons required to find the nearest neighbors. But at the same time require more time to build index.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,', 'Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.\n\n\n\nTo prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\\.\n\nYou can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{', ""led to some modest overhead in case of disk latency. The kernel may\n\nstop a user thread trying to access a mapped region, which incurs some context\n\nswitching overhead plus the wait time until the disk IO is finished. Ultimately,\n\nthis works very well with the asynchronous nature of Qdrant's core.\n\n\n\nOne of the great optimizations Qdrant offers is quantization (either\n\n[scalar](https://qdrant.tech/articles/scalar-quantization/) or \n\n[product](https://qdrant.tech/articles/product-quantization/)-based)."", 'We do a lot of benchmarking internally, but it is impossible to cover all possible use cases, hardware, and configurations.\n\n\n\nIn order to identify bottlenecks and improve Qdrant, we need to collect information about how it is used.\n\n\n\nAdditionally, Qdrant uses a bunch of internal heuristics to optimize the performance.\n\nTo better set up parameters for these heuristics, we need to collect timings and counters of various pieces of code.\n\nWith this information, we can make Qdrant faster for everyone.', 'At Qdrant, performance is the top-most priority. We always make sure that we use system resources efficiently so you get the **fastest and most accurate results at the cheapest cloud costs**. So all of our decisions from [choosing Rust](/articles/why-rust), [io optimisations](/articles/io_uring), [serverless support](/articles/serverless), [binary quantization](/articles/binary-quantization), to our [fastembed library](/articles/fastembed) are all based on our principle']",");

```



To prefer throughput, you can set up Qdrant to use as many cores as possible for processing multiple requests in parallel.

To do that, you can configure qdrant to use minimal number of segments, which is usually 2.

Large segments benefit from the size of the index and overall smaller number of vector comparisons required to find the nearest neighbors. But at the same time require more time to build index.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,
Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.



To prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\.

You can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.



```http

PUT /collections/{collection_name}

{
led to some modest overhead in case of disk latency. The kernel may

stop a user thread trying to access a mapped region, which incurs some context

switching overhead plus the wait time until the disk IO is finished. Ultimately,

this works very well with the asynchronous nature of Qdrant's core.



One of the great optimizations Qdrant offers is quantization (either

[scalar](https://qdrant.tech/articles/scalar-quantization/) or 

[product](https://qdrant.tech/articles/product-quantization/)-based).
We do a lot of benchmarking internally, but it is impossible to cover all possible use cases, hardware, and configurations.



In order to identify bottlenecks and improve Qdrant, we need to collect information about how it is used.



Additionally, Qdrant uses a bunch of internal heuristics to optimize the performance.

To better set up parameters for these heuristics, we need to collect timings and counters of various pieces of code.

With this information, we can make Qdrant faster for everyone.
At Qdrant, performance is the top-most priority. We always make sure that we use system resources efficiently so you get the **fastest and most accurate results at the cheapest cloud costs**. So all of our decisions from [choosing Rust](/articles/why-rust), [io optimisations](/articles/io_uring), [serverless support](/articles/serverless), [binary quantization](/articles/binary-quantization), to our [fastembed library](/articles/fastembed) are all based on our principle"
How can one enable distributed deployment mode in Qdrant?,"To enable distributed deployment mode in Qdrant, one needs to enable the cluster mode in the configuration or set the ENV variable `QDRANT__CLUSTER__ENABLED=true`. This allows multiple Qdrant services to communicate with each other, distributing data across peers to extend storage capabilities and increase stability. In the configuration file, under the `cluster` section, set `enabled: true` to run Qdrant in distributed deployment mode. Additionally, configure the internal communication port between peers using the `p2p` section with the specified port number. Furthermore, adjust the parameters related to the distributed consensus algorithm as needed for optimal performance.","['To enable distributed deployment - enable the cluster mode in the [configuration](../configuration) or using the ENV variable: `QDRANT__CLUSTER__ENABLED=true`.\n\n\n\n```yaml\n\ncluster:\n\n  # Use `enabled: true` to run Qdrant in distributed deployment mode\n\n  enabled: true\n\n  # Configuration of the inter-cluster communication\n\n  p2p:\n\n    # Port for internal communication between peers\n\n    port: 6335\n\n\n\n  # Configuration related to distributed consensus algorithm\n\n  consensus:', ""Qdrant's distributed deployment mode plays a vital role in empowering large enterprises dealing with massive data volumes. It ensures that increasing data volumes do not hinder performance but rather enrich the model's capabilities, making scalability a seamless process. Moreover, Qdrant is well-suited for Pienso’s enterprise customers as it operates best on bare metal infrastructure, enabling them to maintain complete control over their data sovereignty and autonomous LLM regimes"", '---\n\ntitle: Distributed Deployment\n\nweight: 100\n\naliases:\n\n  - ../distributed_deployment\n\n---\n\n\n\n# Distributed deployment\n\n\n\nSince version v0.8.0 Qdrant supports a distributed deployment mode.\n\nIn this mode, multiple Qdrant services communicate with each other to distribute the data across the peers to extend the storage capabilities and increase stability.', '})\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.CreateCollection;\n\nimport io.qdrant.client.grpc.Collections.Distance;\n\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createCollectionAsync(', 'import { QdrantClient } from ""@qdrant/js-client-rest"";\n\n\n\nconst client = new QdrantClient({ host: ""localhost"", port: 6333 });\n\n\n\nclient.createCollection(""{collection_name}"", {\n\n  vectors: {\n\n    size: 300,\n\n    distance: ""Cosine"",\n\n  },\n\n  shard_number: 6,\n\n  replication_factor: 2,\n\n  write_consistency_factor: 2,\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::{\n\n    client::QdrantClient,\n\n    qdrant::{vectors_config::Config, CreateCollection, Distance, VectorParams, VectorsConfig},\n\n};']","To enable distributed deployment - enable the cluster mode in the [configuration](../configuration) or using the ENV variable: `QDRANT__CLUSTER__ENABLED=true`.



```yaml

cluster:

  # Use `enabled: true` to run Qdrant in distributed deployment mode

  enabled: true

  # Configuration of the inter-cluster communication

  p2p:

    # Port for internal communication between peers

    port: 6335



  # Configuration related to distributed consensus algorithm

  consensus:
Qdrant's distributed deployment mode plays a vital role in empowering large enterprises dealing with massive data volumes. It ensures that increasing data volumes do not hinder performance but rather enrich the model's capabilities, making scalability a seamless process. Moreover, Qdrant is well-suited for Pienso’s enterprise customers as it operates best on bare metal infrastructure, enabling them to maintain complete control over their data sovereignty and autonomous LLM regimes
---

title: Distributed Deployment

weight: 100

aliases:

  - ../distributed_deployment

---



# Distributed deployment



Since version v0.8.0 Qdrant supports a distributed deployment mode.

In this mode, multiple Qdrant services communicate with each other to distribute the data across the peers to extend the storage capabilities and increase stability.
})

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.CreateCollection;

import io.qdrant.client.grpc.Collections.Distance;

import io.qdrant.client.grpc.Collections.VectorParams;

import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createCollectionAsync(
import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({ host: ""localhost"", port: 6333 });



client.createCollection(""{collection_name}"", {

  vectors: {

    size: 300,

    distance: ""Cosine"",

  },

  shard_number: 6,

  replication_factor: 2,

  write_consistency_factor: 2,

});

```



```rust

use qdrant_client::{

    client::QdrantClient,

    qdrant::{vectors_config::Config, CreateCollection, Distance, VectorParams, VectorsConfig},

};"
What is the recommended approach for determining the number of shards when creating a collection using Qdrant?,"When creating a collection using Qdrant, it is recommended to set the number of shards to be a multiple of the number of nodes currently running in your cluster. For example, if you have 3 nodes in your cluster, setting the number of shards to 6 could be a good option. Shards are evenly distributed across all existing nodes when a collection is first created. It is important to note that Qdrant does not automatically rebalance shards if your cluster size or replication factor changes, as this operation can be expensive on large clusters. If scaling operations require moving shards, there are specific procedures outlined for this purpose, available as of version 0.9.0 of Qdrant.","['```csharp\n\nusing Qdrant.Client;\n\nusing Qdrant.Client.Grpc;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreateCollectionAsync(\n\n\tcollectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\n\tshardNumber: 6,\n\n\treplicationFactor: 2\n\n);\n\n```\n\n\n\nThis code sample creates a collection with a total of 6 logical shards backed by a total of 12 physical shards.', '## Parallel upload into multiple shards\n\n\n\nIn Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.\n\nBy creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 2\n\n}\n\n```\n\n\n\n```python', '.get();\n\n```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\nusing Qdrant.Client.Grpc;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreateCollectionAsync(\n\n\tcollectionName: ""{collection_name}"",\n\n\t// ... other collection parameters\n\n\tshardNumber: 1,\n\n\tshardingMethod: ShardingMethod.Custom\n\n);\n\n```', '},\n\n    ""shard_number"": 2\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n\n    shard_number=2,\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";\n\n\n\nconst client = new QdrantClient({ host: ""localhost"", port: 6333 });', 'While the existing behavior is still the default one, you can now define the shards when you create a collection. Then, you can assign each point to a shard by providing a `shard_key` in the `upsert` operation. What\'s more, you can also search over the selected shards only, by providing the `shard_key` parameter in the search operation.\n\n\n\n```http request\n\nPOST /collections/my_collection/points/search\n\n{\n\n    ""vector"": [0.29, 0.81, 0.75, 0.11],\n\n    ""shard_key"": [""cats"", ""dogs""],\n\n    ""limit"": 10,']","```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.CreateCollectionAsync(

	collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

	shardNumber: 6,

	replicationFactor: 2

);

```



This code sample creates a collection with a total of 6 logical shards backed by a total of 12 physical shards.
## Parallel upload into multiple shards



In Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.

By creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""shard_number"": 2

}

```



```python
.get();

```



```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.CreateCollectionAsync(

	collectionName: ""{collection_name}"",

	// ... other collection parameters

	shardNumber: 1,

	shardingMethod: ShardingMethod.Custom

);

```
},

    ""shard_number"": 2

}

```



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),

    shard_number=2,

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({ host: ""localhost"", port: 6333 });
While the existing behavior is still the default one, you can now define the shards when you create a collection. Then, you can assign each point to a shard by providing a `shard_key` in the `upsert` operation. What's more, you can also search over the selected shards only, by providing the `shard_key` parameter in the search operation.



```http request

POST /collections/my_collection/points/search

{

    ""vector"": [0.29, 0.81, 0.75, 0.11],

    ""shard_key"": [""cats"", ""dogs""],

    ""limit"": 10,"
How is the discovery score computed in the context provided?,"In the context provided, the discovery score is computed using the formula: 

Discovery Score = sigmoid(s(v_t)) + Σ rank(v_i^+, v_i^-)

Here, s(v_t) represents the similarity function of the target vector, and v_i^+ and v_i^- represent the positive and negative examples, respectively. The sigmoid function is utilized to normalize the score within the range of 0 to 1. The sum of ranks is used to penalize vectors that are closer to negative examples than to positive ones. This means that the sum of individual ranks determines how many positive zones a point is in, while the closeness hierarchy serves as a secondary factor in the computation of the discovery score.","['$$\n\n\\text{rank}(v^+, v^-) = \\begin{cases}\n\n    1, &\\quad s(v^+) \\geq s(v^-) \\\\\\\\\n\n    -1, &\\quad s(v^+) < s(v^-)\n\n\\end{cases}\n\n$$\n\nwhere $v^+$ represents a positive example, $v^-$ represents a negative example, and $s(v)$ is the similarity score of a vector $v$ to the target vector. The discovery score is then computed as:\n\n$$\n\n \\text{discovery score} = \\text{sigmoid}(s(v_t))+ \\sum \\text{rank}(v_i^+, v_i^-),\n\n$$', '```json\n\n{\n\n  ""result"": [\n\n    [\n\n        { ""id"": 10, ""score"": 0.81 },\n\n        { ""id"": 14, ""score"": 0.75 },\n\n        { ""id"": 11, ""score"": 0.73 }\n\n    ],\n\n    [\n\n        { ""id"": 1, ""score"": 0.92 },\n\n        { ""id"": 3, ""score"": 0.89 },\n\n        { ""id"": 9, ""score"": 0.75 }\n\n    ]\n\n  ],\n\n  ""status"": ""ok"",\n\n  ""time"": 0.001\n\n}\n\n```\n\n\n\n## Discovery API\n\n\n\n*Available as of v1.7*\n\n\n\nREST API Schema definition available [here](https://qdrant.github.io/qdrant/redoc/index.html#tag/points/operation/discover_points)', '},\n\n\tcontext:\n\n\t[\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tPositive = new VectorExample { Id = 100 },\n\n\t\t\tNegative = new VectorExample { Id = 718 }\n\n\t\t},\n\n\t\tnew()\n\n\t\t{\n\n\t\t\tPositive = new VectorExample { Id = 200 },\n\n\t\t\tNegative = new VectorExample { Id = 300 }\n\n\t\t}\n\n\t],\n\n\tlimit: 10\n\n);\n\n```\n\n\n\n<aside role=""status"">\n\nNotes about discovery search:\n\n\n\n* When providing ids as examples, they will be excluded from the results.\n\n* Score is always in descending order (larger is better), regardless of the metric used.', 'The interface for providing context is similar to the recommendation API (ids or raw vectors). Still, in this case, they need to be provided in the form of positive-negative pairs.\n\n\n\nDiscovery API lets you do two new types of search:\n\n- **Discovery search**: Uses the context (the pairs of positive-negative vectors) and a target to return the points more similar to the target, but constrained by the context.', 'The Discovery API can be used in two ways - either with or without the target point. The first case is called a **discovery search**, while the second is called a **context search**.\n\n\n\n#### Discovery search\n\n\n\n*Discovery search* is an operation that uses a target point to find the most relevant points in the collection, while performing the search in the preferred areas only. That is basically a search operation with more control over the search space.']","$$

\text{rank}(v^+, v^-) = \begin{cases}

    1, &\quad s(v^+) \geq s(v^-) \\\\

    -1, &\quad s(v^+) < s(v^-)

\end{cases}

$$

where $v^+$ represents a positive example, $v^-$ represents a negative example, and $s(v)$ is the similarity score of a vector $v$ to the target vector. The discovery score is then computed as:

$$

 \text{discovery score} = \text{sigmoid}(s(v_t))+ \sum \text{rank}(v_i^+, v_i^-),

$$
```json

{

  ""result"": [

    [

        { ""id"": 10, ""score"": 0.81 },

        { ""id"": 14, ""score"": 0.75 },

        { ""id"": 11, ""score"": 0.73 }

    ],

    [

        { ""id"": 1, ""score"": 0.92 },

        { ""id"": 3, ""score"": 0.89 },

        { ""id"": 9, ""score"": 0.75 }

    ]

  ],

  ""status"": ""ok"",

  ""time"": 0.001

}

```



## Discovery API



*Available as of v1.7*



REST API Schema definition available [here](https://qdrant.github.io/qdrant/redoc/index.html#tag/points/operation/discover_points)
},

	context:

	[

		new()

		{

			Positive = new VectorExample { Id = 100 },

			Negative = new VectorExample { Id = 718 }

		},

		new()

		{

			Positive = new VectorExample { Id = 200 },

			Negative = new VectorExample { Id = 300 }

		}

	],

	limit: 10

);

```



<aside role=""status"">

Notes about discovery search:



* When providing ids as examples, they will be excluded from the results.

* Score is always in descending order (larger is better), regardless of the metric used.
The interface for providing context is similar to the recommendation API (ids or raw vectors). Still, in this case, they need to be provided in the form of positive-negative pairs.



Discovery API lets you do two new types of search:

- **Discovery search**: Uses the context (the pairs of positive-negative vectors) and a target to return the points more similar to the target, but constrained by the context.
The Discovery API can be used in two ways - either with or without the target point. The first case is called a **discovery search**, while the second is called a **context search**.



#### Discovery search



*Discovery search* is an operation that uses a target point to find the most relevant points in the collection, while performing the search in the preferred areas only. That is basically a search operation with more control over the search space."
How does Qdrant optimize storage at the segment level?,"Qdrant optimizes storage at the segment level by applying changes in batches rather than individually. When optimization is needed, the segment to be optimized remains readable during the rebuild process. This is achieved by wrapping the segment into a proxy that handles data changes transparently. Changed data is placed in a copy-on-write segment, prioritizing retrieval and subsequent updates. This approach ensures efficiency in storage optimization within Qdrant.","['---\n\ntitle: Optimizer\n\nweight: 70\n\naliases:\n\n  - ../optimizer\n\n---\n\n\n\n# Optimizer\n\n\n\nIt is much more efficient to apply changes in batches than perform each change individually, as many other databases do. Qdrant here is no exception. Since Qdrant operates with data structures that are not always easy to change, it is sometimes necessary to rebuild those structures completely.\n\n\n\nStorage optimization in Qdrant occurs at the segment level (see [storage](../storage)).', '```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(', 'config: Some(Config::Params(VectorParams {\n\n                size: 768,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        optimizers_config: Some(OptimizersConfigDiff {\n\n            memmap_threshold: Some(20000),\n\n            ..Default::default()\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;', 'The service may require the creation of temporary segments.\n\nSuch segments, for example, are created as copy-on-write segments during optimization itself.\n\n\n\nIt is also essential to have at least one small segment that Qdrant will use to store frequently updated data.\n\nOn the other hand, too many small segments lead to suboptimal search performance.\n\n\n\nThere is the Merge Optimizer, which combines the smallest segments into one large segment. It is used if too many segments are created.', ""led to some modest overhead in case of disk latency. The kernel may\n\nstop a user thread trying to access a mapped region, which incurs some context\n\nswitching overhead plus the wait time until the disk IO is finished. Ultimately,\n\nthis works very well with the asynchronous nature of Qdrant's core.\n\n\n\nOne of the great optimizations Qdrant offers is quantization (either\n\n[scalar](https://qdrant.tech/articles/scalar-quantization/) or \n\n[product](https://qdrant.tech/articles/product-quantization/)-based).""]","---

title: Optimizer

weight: 70

aliases:

  - ../optimizer

---



# Optimizer



It is much more efficient to apply changes in batches than perform each change individually, as many other databases do. Qdrant here is no exception. Since Qdrant operates with data structures that are not always easy to change, it is sometimes necessary to rebuild those structures completely.



Storage optimization in Qdrant occurs at the segment level (see [storage](../storage)).
```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": true

        }

    }

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(
config: Some(Config::Params(VectorParams {

                size: 768,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        optimizers_config: Some(OptimizersConfigDiff {

            memmap_threshold: Some(20000),

            ..Default::default()

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
The service may require the creation of temporary segments.

Such segments, for example, are created as copy-on-write segments during optimization itself.



It is also essential to have at least one small segment that Qdrant will use to store frequently updated data.

On the other hand, too many small segments lead to suboptimal search performance.



There is the Merge Optimizer, which combines the smallest segments into one large segment. It is used if too many segments are created.
led to some modest overhead in case of disk latency. The kernel may

stop a user thread trying to access a mapped region, which incurs some context

switching overhead plus the wait time until the disk IO is finished. Ultimately,

this works very well with the asynchronous nature of Qdrant's core.



One of the great optimizations Qdrant offers is quantization (either

[scalar](https://qdrant.tech/articles/scalar-quantization/) or 

[product](https://qdrant.tech/articles/product-quantization/)-based)."
What is the purpose of the Vacuum Optimizer in the Qdrant database system?,"The Vacuum Optimizer in the Qdrant database system is utilized to address the issue of accumulated deleted records within segments. When records are marked as deleted instead of being immediately removed, they can accumulate over time, occupying memory and slowing down the system. The Vacuum Optimizer is triggered when a segment has accumulated a significant number of deleted records, as defined by the criteria set in the configuration file. This optimizer helps in optimizing segments by removing these accumulated deleted records, thereby improving system performance and efficiency. The configuration file specifies parameters such as the minimal fraction of deleted vectors and the minimal number of vectors in a segment required to trigger the Vacuum Optimizer. By running the Vacuum Optimizer, the system can effectively manage and optimize segments to prevent performance degradation due to accumulated deleted records.","['Like many other databases, Qdrant does not delete entries immediately after a query.\n\nInstead, it marks records as deleted and ignores them for future queries.\n\n\n\nThis strategy allows us to minimize disk access - one of the slowest operations.\n\nHowever, a side effect of this strategy is that, over time, deleted records accumulate, occupy memory and slow down the system.\n\n\n\nTo avoid these adverse effects, Vacuum Optimizer is used.\n\nIt is used if the segment has accumulated too many deleted records.', ""We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. \n\n\n\nWhy?"", ""And I think we've been able to.\n\nDo with Qdrant some stuff that really are possible only because of the very good performance of the database.\n\nAs an example, we're not using your clustered setup. We have n number of independent nodes.\n\nAnd as we scale, we kind of.\n\nReshuffle which users go on which nodes.\n\nAs we need, trying to keep our largest users and most paying users on.\n\nVery well identified nodes. We have a kind of a garbage."", 'So instead of this one, we had a real time inference endpoint which basically limited us to some number of requests that we had preset earlier while deploying the model. So this was one of the bottlenecks and then lambda function was always there, I think this one and also I think in place of this Qdrant vector database, as I mentioned, we had Postgres. So yeah, that was also a limitation because it used to use a lot of compute capacity within the EC two instance as compared to Qdrant', '---\n\ntitle: Optimizer\n\nweight: 70\n\naliases:\n\n  - ../optimizer\n\n---\n\n\n\n# Optimizer\n\n\n\nIt is much more efficient to apply changes in batches than perform each change individually, as many other databases do. Qdrant here is no exception. Since Qdrant operates with data structures that are not always easy to change, it is sometimes necessary to rebuild those structures completely.\n\n\n\nStorage optimization in Qdrant occurs at the segment level (see [storage](../storage)).']","Like many other databases, Qdrant does not delete entries immediately after a query.

Instead, it marks records as deleted and ignores them for future queries.



This strategy allows us to minimize disk access - one of the slowest operations.

However, a side effect of this strategy is that, over time, deleted records accumulate, occupy memory and slow down the system.



To avoid these adverse effects, Vacuum Optimizer is used.

It is used if the segment has accumulated too many deleted records.
We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. 



Why?
And I think we've been able to.

Do with Qdrant some stuff that really are possible only because of the very good performance of the database.

As an example, we're not using your clustered setup. We have n number of independent nodes.

And as we scale, we kind of.

Reshuffle which users go on which nodes.

As we need, trying to keep our largest users and most paying users on.

Very well identified nodes. We have a kind of a garbage.
So instead of this one, we had a real time inference endpoint which basically limited us to some number of requests that we had preset earlier while deploying the model. So this was one of the bottlenecks and then lambda function was always there, I think this one and also I think in place of this Qdrant vector database, as I mentioned, we had Postgres. So yeah, that was also a limitation because it used to use a lot of compute capacity within the EC two instance as compared to Qdrant
---

title: Optimizer

weight: 70

aliases:

  - ../optimizer

---



# Optimizer



It is much more efficient to apply changes in batches than perform each change individually, as many other databases do. Qdrant here is no exception. Since Qdrant operates with data structures that are not always easy to change, it is sometimes necessary to rebuild those structures completely.



Storage optimization in Qdrant occurs at the segment level (see [storage](../storage))."
What is the purpose of the `payload` field in the data points?,"The `payload` field in the data points being upserted using the QdrantClient serves as a container for additional metadata or information related to the vector data being stored. It allows users to associate supplementary details with each data point, such as the city name, price, or any other custom attributes that provide context or additional insights into the vector data. This metadata can be used for filtering, searching, or categorizing the vectors during retrieval or query operations, enabling more efficient and targeted data analysis and retrieval processes. In the examples given, the `payload` field includes information like city names, prices, and other relevant details specific to each data point, enhancing the overall utility and relevance of the stored vector data.","['payload={\n\n        ""property1"": ""string"",\n\n        ""property2"": ""string"",\n\n    },\n\n    points=models.Filter(\n\n        must=[\n\n            models.FieldCondition(\n\n                key=""color"",\n\n                match=models.MatchValue(value=""red""),\n\n            ),\n\n        ],\n\n    ),\n\n)\n\n```\n\n\n\n```typescript\n\nclient.setPayload(""{collection_name}"", {\n\n  payload: {\n\n    property1: ""string"",\n\n    property2: ""string"",\n\n  },\n\n  filter: {\n\n    must: [\n\n      {\n\n        key: ""color"",\n\n        match: {', '```http\n\nPOST /collections/{collection_name}/points/payload\n\n{\n\n    ""payload"": {\n\n        ""property1"": ""string"",\n\n        ""property2"": ""string""\n\n    },\n\n    ""filter"": {\n\n        ""must"": [\n\n            {\n\n                ""key"": ""color"",\n\n                ""match"": {\n\n                    ""value"": ""red""\n\n                }\n\n            }\n\n        ]\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.set_payload(\n\n    collection_name=""{collection_name}"",\n\n    payload={\n\n        ""property1"": ""string"",', '```http\n\nPUT /collections/{collection_name}/points\n\n{\n\n    ""points"": [\n\n        {\n\n            ""id"": 1,\n\n            ""vector"": [0.05, 0.61, 0.76, 0.74],\n\n            ""payload"": {""city"": ""Berlin"", ""price"": 1.99}\n\n        },\n\n        {\n\n            ""id"": 2,\n\n            ""vector"": [0.19, 0.81, 0.75, 0.11],\n\n            ""payload"": {""city"": [""Berlin"", ""London""], ""price"": 1.99}\n\n        },\n\n        {\n\n            ""id"": 3,\n\n            ""vector"": [0.36, 0.55, 0.47, 0.94],', 'Payload schema example:\n\n\n\n```json\n\n{\n\n    ""payload_schema"": {\n\n        ""property1"": {\n\n            ""data_type"": ""keyword""\n\n        },\n\n        ""property2"": {\n\n            ""data_type"": ""integer""\n\n        }\n\n    }\n\n}\n\n```', '### Full-text index\n\n\n\n*Available as of v0.10.0*\n\n\n\nQdrant supports full-text search for string payload.\n\nFull-text index allows you to filter points by the presence of a word or a phrase in the payload field.\n\n\n\nFull-text index configuration is a bit more complex than other indexes, as you can specify the tokenization parameters.\n\nTokenization is the process of splitting a string into tokens, which are then indexed in the inverted index.\n\n\n\nTo create a full-text index, you can use the following:']","payload={

        ""property1"": ""string"",

        ""property2"": ""string"",

    },

    points=models.Filter(

        must=[

            models.FieldCondition(

                key=""color"",

                match=models.MatchValue(value=""red""),

            ),

        ],

    ),

)

```



```typescript

client.setPayload(""{collection_name}"", {

  payload: {

    property1: ""string"",

    property2: ""string"",

  },

  filter: {

    must: [

      {

        key: ""color"",

        match: {
```http

POST /collections/{collection_name}/points/payload

{

    ""payload"": {

        ""property1"": ""string"",

        ""property2"": ""string""

    },

    ""filter"": {

        ""must"": [

            {

                ""key"": ""color"",

                ""match"": {

                    ""value"": ""red""

                }

            }

        ]

    }

}

```



```python

client.set_payload(

    collection_name=""{collection_name}"",

    payload={

        ""property1"": ""string"",
```http

PUT /collections/{collection_name}/points

{

    ""points"": [

        {

            ""id"": 1,

            ""vector"": [0.05, 0.61, 0.76, 0.74],

            ""payload"": {""city"": ""Berlin"", ""price"": 1.99}

        },

        {

            ""id"": 2,

            ""vector"": [0.19, 0.81, 0.75, 0.11],

            ""payload"": {""city"": [""Berlin"", ""London""], ""price"": 1.99}

        },

        {

            ""id"": 3,

            ""vector"": [0.36, 0.55, 0.47, 0.94],
Payload schema example:



```json

{

    ""payload_schema"": {

        ""property1"": {

            ""data_type"": ""keyword""

        },

        ""property2"": {

            ""data_type"": ""integer""

        }

    }

}

```
### Full-text index



*Available as of v0.10.0*



Qdrant supports full-text search for string payload.

Full-text index allows you to filter points by the presence of a word or a phrase in the payload field.



Full-text index configuration is a bit more complex than other indexes, as you can specify the tokenization parameters.

Tokenization is the process of splitting a string into tokens, which are then indexed in the inverted index.



To create a full-text index, you can use the following:"
What is the purpose of shard replication in Qdrant?,"Shard replication in Qdrant increases the reliability of the cluster by keeping several copies of a shard spread across the cluster. This ensures the availability of the data in case of node failures, except if all replicas are lost.","['ordering guarantees can be `strong`[^ordered], required for some applications.\n\n\n\nThe `stream_records` method is currently used as default. This may change in the\n\nfuture.\n\n\n\n## Replication\n\n\n\n*Available as of v0.11.0*\n\n\n\nQdrant allows you to replicate shards between nodes in the cluster.\n\n\n\nShard replication increases the reliability of the cluster by keeping several copies of a shard spread across the cluster.', 'Regardless of the method used, Qdrant will extract the shard data from the snapshot and properly register shards in the cluster.\n\nIf there are other active replicas of the recovered shards in the cluster, Qdrant will replicate them to the newly recovered node by default to maintain data consistency.\n\n\n\n### Recover from a URL or local file\n\n\n\n*Available as of v0.11.3*', 'Since a replication factor of ""2"" would require twice as much storage space, it is advised to make sure the hardware can host the additional shard replicas beforehand.\n\n\n\n### Creating new shard replicas\n\n\n\nIt is possible to create or delete replicas manually on an existing collection using the [Update collection cluster setup API](https://qdrant.github.io/qdrant/redoc/index.html?v=v0.11.0#tag/cluster/operation/update_collection_cluster).', 'order to the target shard to bring it into the same state as the source. There\n\nare two important benefits: 1. It transfers index and quantization data, so that\n\nthe shard does not have to be optimized again on the target node, making them\n\nimmediately available. This way, Qdrant ensures that there will be no\n\ndegradation in performance at the end of the transfer. Especially on large\n\nshards, this can give a huge performance improvement. 2. The consistency and', 'Currently, the replication factor of a collection can only be configured at creation time.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""size"": 300,\n\n        ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 6,\n\n    ""replication_factor"": 2,\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",']","ordering guarantees can be `strong`[^ordered], required for some applications.



The `stream_records` method is currently used as default. This may change in the

future.



## Replication



*Available as of v0.11.0*



Qdrant allows you to replicate shards between nodes in the cluster.



Shard replication increases the reliability of the cluster by keeping several copies of a shard spread across the cluster.
Regardless of the method used, Qdrant will extract the shard data from the snapshot and properly register shards in the cluster.

If there are other active replicas of the recovered shards in the cluster, Qdrant will replicate them to the newly recovered node by default to maintain data consistency.



### Recover from a URL or local file



*Available as of v0.11.3*
Since a replication factor of ""2"" would require twice as much storage space, it is advised to make sure the hardware can host the additional shard replicas beforehand.



### Creating new shard replicas



It is possible to create or delete replicas manually on an existing collection using the [Update collection cluster setup API](https://qdrant.github.io/qdrant/redoc/index.html?v=v0.11.0#tag/cluster/operation/update_collection_cluster).
order to the target shard to bring it into the same state as the source. There

are two important benefits: 1. It transfers index and quantization data, so that

the shard does not have to be optimized again on the target node, making them

immediately available. This way, Qdrant ensures that there will be no

degradation in performance at the end of the transfer. Especially on large

shards, this can give a huge performance improvement. 2. The consistency and
Currently, the replication factor of a collection can only be configured at creation time.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 300,

        ""distance"": ""Cosine""

    },

    ""shard_number"": 6,

    ""replication_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"","
What are the steps to set up product quantization in QdrantClient?,"To set up product quantization in QdrantClient, you need to specify the quantization parameters in the quantization_config section of the collection configuration. The compression ratio can be set to x16 and the always_ram parameter can be set to true to store quantized vectors in RAM. The vectors_config section should also be specified with the desired vector size and distance metric. Finally, you can use the create_collection method of the QdrantClient to create the collection with the specified configurations.","[""customizable, so you can find the sweet spot between memory usage and search precision. This article \n\ncovers all the steps required to perform Product Quantization and the way it's implemented in Qdrant.\n\n\n\nLet’s assume we have a few vectors being added to the collection and that our optimizer decided \n\nto start creating a new segment.\n\n\n\n![A list of raw vectors](/articles_data/product-quantization/raw-vectors.png)\n\n\n\n### Cutting the vector into pieces"", 'quantization_config=models.BinaryQuantization(\n\n        binary=models.BinaryQuantizationConfig(\n\n            always_ram=True,\n\n        ),\n\n    ),\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";\n\n\n\nconst client = new QdrantClient({ host: ""localhost"", port: 6333 });\n\n\n\nclient.createCollection(""{collection_name}"", {\n\n  vectors: {\n\n    size: 1536,\n\n    distance: ""Cosine"",\n\n  },\n\n  quantization_config: {\n\n    binary: {\n\n      always_ram: true,\n\n    },\n\n  },\n\n});\n\n```', 'import { QdrantClient } from ""@qdrant/js-client-rest"";\n\n\n\nconst client = new QdrantClient({ host: ""localhost"", port: 6333 });\n\n\n\nclient.createCollection(""{collection_name}"", {\n\n  vectors: {\n\n    size: 768,\n\n    distance: ""Cosine"",\n\n  },\n\n  optimizers_config: {\n\n    memmap_threshold: 20000,\n\n  },\n\n  quantization_config: {\n\n    scalar: {\n\n      type: ""int8"",\n\n      always_ram: true,\n\n    },\n\n  },\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::{\n\n    client::QdrantClient,\n\n    qdrant::{', '}\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),\n\n    quantization_config=models.ProductQuantization(\n\n        product=models.ProductQuantizationConfig(\n\n            compression=models.CompressionRatio.X16,\n\n            always_ram=True,', 'import io.qdrant.client.grpc.Collections.ProductQuantization;\n\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;\n\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createCollectionAsync(\n\n        CreateCollection.newBuilder()\n\n            .setCollectionName(""{collection_name}"")\n\n            .setVectorsConfig(']","customizable, so you can find the sweet spot between memory usage and search precision. This article 

covers all the steps required to perform Product Quantization and the way it's implemented in Qdrant.



Let’s assume we have a few vectors being added to the collection and that our optimizer decided 

to start creating a new segment.



![A list of raw vectors](/articles_data/product-quantization/raw-vectors.png)



### Cutting the vector into pieces
quantization_config=models.BinaryQuantization(

        binary=models.BinaryQuantizationConfig(

            always_ram=True,

        ),

    ),

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({ host: ""localhost"", port: 6333 });



client.createCollection(""{collection_name}"", {

  vectors: {

    size: 1536,

    distance: ""Cosine"",

  },

  quantization_config: {

    binary: {

      always_ram: true,

    },

  },

});

```
import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({ host: ""localhost"", port: 6333 });



client.createCollection(""{collection_name}"", {

  vectors: {

    size: 768,

    distance: ""Cosine"",

  },

  optimizers_config: {

    memmap_threshold: 20000,

  },

  quantization_config: {

    scalar: {

      type: ""int8"",

      always_ram: true,

    },

  },

});

```



```rust

use qdrant_client::{

    client::QdrantClient,

    qdrant::{
}

    }

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),

    quantization_config=models.ProductQuantization(

        product=models.ProductQuantizationConfig(

            compression=models.CompressionRatio.X16,

            always_ram=True,
import io.qdrant.client.grpc.Collections.ProductQuantization;

import io.qdrant.client.grpc.Collections.QuantizationConfig;

import io.qdrant.client.grpc.Collections.VectorParams;

import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createCollectionAsync(

        CreateCollection.newBuilder()

            .setCollectionName(""{collection_name}"")

            .setVectorsConfig("
What are the different write ordering options available in Qdrant?,"Qdrant provides three different write ordering options: weak, medium, and strong. Weak ordering does not provide any additional guarantees and allows write operations to be freely reordered. Medium ordering serializes write operations through a dynamically elected leader, which may cause minor inconsistencies in case of leader change. Strong ordering serializes write operations through the permanent leader, providing strong consistency but may result in write operations being unavailable if the leader is down.","['- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents', '.                                                                                    |', 'location=""http://localhost:6333"",\n\n            collection_name=""test"",\n\n        ),\n\n        write_config=QdrantWriteConfig(batch_size=80),\n\n    )\n\n\n\nif __name__ == ""__main__"":\n\n    writer = get_writer()\n\n    runner = LocalRunner(\n\n        processor_config=ProcessorConfig(\n\n            verbose=True,\n\n            output_dir=""local-output-to-qdrant"",\n\n            num_processes=2,\n\n        ),\n\n        connector_config=SimpleLocalConfig(', '## Parallel upload into multiple shards\n\n\n\nIn Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.\n\nBy creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 2\n\n}\n\n```\n\n\n\n```python', '.                                                                                                                                                                                                                                   |']","- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents
.                                                                                    |
location=""http://localhost:6333"",

            collection_name=""test"",

        ),

        write_config=QdrantWriteConfig(batch_size=80),

    )



if __name__ == ""__main__"":

    writer = get_writer()

    runner = LocalRunner(

        processor_config=ProcessorConfig(

            verbose=True,

            output_dir=""local-output-to-qdrant"",

            num_processes=2,

        ),

        connector_config=SimpleLocalConfig(
## Parallel upload into multiple shards



In Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.

By creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""shard_number"": 2

}

```



```python
.                                                                                                                                                                                                                                   |"
How can Qdrant be optimized for low memory footprint and high speed search?,"To optimize Qdrant for low memory footprint and high speed search, you can use vector quantization. This involves converting vectors into a more compact representation that can be stored in memory and used for search. By using smaller vectors, you can cache more in RAM and reduce the number of disk reads. To configure in-memory quantization with on-disk original vectors, you need to create a collection with the specified configuration.","[""---\n\ntitle: Optimize Resources\n\nweight: 11\n\naliases:\n\n  - ../tutorials/optimize\n\n---\n\n\n\n# Optimize Qdrant\n\n\n\nDifferent use cases have different requirements for balancing between memory, speed, and precision.\n\nQdrant is designed to be flexible and customizable so you can tune it to your needs.\n\n\n\n![Trafeoff](/docs/tradeoff.png)\n\n\n\nLet's look deeper into each of those possible optimization scenarios.\n\n\n\n## Prefer low memory footprint with high speed search"", '## Why Qdrant?', 'With a local SSD, we were able to increase the search speed by 10x!\n\n\n\nWith the production-grade disk, the search speed could be even higher. \n\nSome configurations of the SSDs can reach 1M IOPS and more.\n\n\n\nWhich might be an interesting option to serve large datasets with low search latency in Qdrant.\n\n\n\n\n\n## Conclusion\n\n\n\nIn this article, we showed that Qdrant have flexibility in terms of RAM usage and can be used to serve large datasets.', 'It seems that ARM64 might be an interesting alternative if you are on a budget. It is 10% slower on average, and 20% slower on the median, but the performance is more consistent. It seems like it won’t be randomly 2 times slower than the average, unlike x86. That makes ARM64 a cost-effective way of setting up vector search with Qdrant, keeping in mind it’s 20% cheaper on AWS. You do get less for less, but surprisingly more than expected.', 'Quantization is primarily used to reduce the memory footprint and accelerate the search process in high-dimensional vector spaces.\n\nIn the context of the Qdrant, quantization allows you to optimize the search engine for specific use cases, striking a balance between accuracy, storage efficiency, and search speed.\n\n\n\nThere are tradeoffs associated with quantization.\n\nOn the one hand, quantization allows for significant reductions in storage requirements and faster search times.']","---

title: Optimize Resources

weight: 11

aliases:

  - ../tutorials/optimize

---



# Optimize Qdrant



Different use cases have different requirements for balancing between memory, speed, and precision.

Qdrant is designed to be flexible and customizable so you can tune it to your needs.



![Trafeoff](/docs/tradeoff.png)



Let's look deeper into each of those possible optimization scenarios.



## Prefer low memory footprint with high speed search
## Why Qdrant?
With a local SSD, we were able to increase the search speed by 10x!



With the production-grade disk, the search speed could be even higher. 

Some configurations of the SSDs can reach 1M IOPS and more.



Which might be an interesting option to serve large datasets with low search latency in Qdrant.





## Conclusion



In this article, we showed that Qdrant have flexibility in terms of RAM usage and can be used to serve large datasets.
It seems that ARM64 might be an interesting alternative if you are on a budget. It is 10% slower on average, and 20% slower on the median, but the performance is more consistent. It seems like it won’t be randomly 2 times slower than the average, unlike x86. That makes ARM64 a cost-effective way of setting up vector search with Qdrant, keeping in mind it’s 20% cheaper on AWS. You do get less for less, but surprisingly more than expected.
Quantization is primarily used to reduce the memory footprint and accelerate the search process in high-dimensional vector spaces.

In the context of the Qdrant, quantization allows you to optimize the search engine for specific use cases, striking a balance between accuracy, storage efficiency, and search speed.



There are tradeoffs associated with quantization.

On the one hand, quantization allows for significant reductions in storage requirements and faster search times."
How does Qdrant optimize memory and search speed for sparse vectors?,"Qdrant optimizes memory and search speed for sparse vectors by utilizing an inverted index structure to store vectors for each non-zero dimension. This approach allows Qdrant to efficiently represent sparse vectors, which are characterized by a high proportion of zeroes. By only storing information about non-zero dimensions, Qdrant reduces the memory footprint required to store sparse vectors and also speeds up search operations by focusing only on relevant dimensions during indexing and querying processes. This optimization ensures that Qdrant can handle sparse vectors effectively while maintaining efficient memory usage and search performance.","['Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.\n\n\n\nIn addition to reducing the memory footprint, scalar quantization also speeds up the search process.\n\nQdrant uses a special SIMD CPU instruction to perform fast vector comparison.\n\nThis instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.', 'performance.\n\n\n\n## Sparse Vector Index\n\n\n\n*Available as of v1.7.0*\n\n\n\n### Key Features of Sparse Vector Index\n\n- **Support for Sparse Vectors:** Qdrant supports sparse vectors, characterized by a high proportion of zeroes.\n\n- **Efficient Indexing:** Utilizes an inverted index structure to store vectors for each non-zero dimension, optimizing memory and search speed.\n\n\n\n### Search Mechanism\n\n- **Index Usage:** The index identifies vectors with non-zero values in query dimensions during a search.', '## Why Qdrant?', ""## Conclusion\n\n\n\nAlright, folks, let's wrap it up. Better search isn't a 'nice-to-have,' it's a game-changer, and Qdrant can get you there.\n\n\n\nGot questions? Our [Discord community](https://qdrant.to/discord?utm_source=qdrant&utm_medium=website&utm_campaign=sparse-vectors&utm_content=article&utm_term=sparse-vectors) is teeming with answers."", 'Our plan for the current [open-source roadmap](https://github.com/qdrant/qdrant/blob/master/docs/roadmap/README.md) is to make billion-scale vector search affordable. Our recent release of the [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/) improves both memory usage (x4) as well as speed (x2). Upcoming [Product Quantization](https://www.irisa.fr/texmex/people/jegou/papers/jegou_searching_with_quantization.pdf) will introduce even another option with more memory saving. Stay tuned']","Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
performance.



## Sparse Vector Index



*Available as of v1.7.0*



### Key Features of Sparse Vector Index

- **Support for Sparse Vectors:** Qdrant supports sparse vectors, characterized by a high proportion of zeroes.

- **Efficient Indexing:** Utilizes an inverted index structure to store vectors for each non-zero dimension, optimizing memory and search speed.



### Search Mechanism

- **Index Usage:** The index identifies vectors with non-zero values in query dimensions during a search.
## Why Qdrant?
## Conclusion



Alright, folks, let's wrap it up. Better search isn't a 'nice-to-have,' it's a game-changer, and Qdrant can get you there.



Got questions? Our [Discord community](https://qdrant.to/discord?utm_source=qdrant&utm_medium=website&utm_campaign=sparse-vectors&utm_content=article&utm_term=sparse-vectors) is teeming with answers.
Our plan for the current [open-source roadmap](https://github.com/qdrant/qdrant/blob/master/docs/roadmap/README.md) is to make billion-scale vector search affordable. Our recent release of the [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/) improves both memory usage (x4) as well as speed (x2). Upcoming [Product Quantization](https://www.irisa.fr/texmex/people/jegou/papers/jegou_searching_with_quantization.pdf) will introduce even another option with more memory saving. Stay tuned"
How does Qdrant address the limitations faced by the HNSW index when dealing with cases in the middle of weak and stringent filters?,"Qdrant addresses the limitations faced by the HNSW index when dealing with cases in the middle of weak and stringent filters by extending the HNSW graph with additional edges based on the stored payload values. This extension allows for more efficient searching of nearby vectors using the HNSW index while applying filters during the search in the graph. By adding extra edges, Qdrant minimizes the overhead on condition checks since the conditions only need to be calculated for a small fraction of the points involved in the search. This approach improves the performance of the HNSW index in cases where the traditional methods of weak filters or complete rescore are not optimal, providing a more balanced solution for scenarios that fall in between.","['On the one hand, we cannot apply a full scan on too many vectors. On the other hand, the HNSW graph starts to fall apart when using too strict filters.\n\n\n\n![HNSW fail](/docs/precision_by_m.png)\n\n\n\n![hnsw graph](/docs/graph.gif)\n\n\n\nYou can find more information on why this happens in our [blog post](https://blog.vasnetsov.com/posts/categorical-hnsw/).\n\nQdrant solves this problem by extending the HNSW graph with additional edges based on the stored payload values.', 'Read more about the Qdrant approach in our [Filtrable HNSW](/articles/filtrable-hnsw/) article.', 'HNSW is chosen for several reasons.\n\nFirst, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search.\n\nSecond, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).\n\n\n\n*Available as of v1.1.1*\n\n\n\nThe HNSW parameters can also be configured on a collection and named vector\n\nlevel by setting [`hnsw_config`](../indexing/#vector-index) to fine-tune search\n\nperformance.', '.tech/articles/filtrable-hnsw/) and unique [filtering](https://qdrant.tech/documentation/concepts/filtering/) capabilities consistently lead to [highest RPS](https://qdrant.tech/benchmarks/), minimal latency, and high control with accuracy when running large-scale, high-dimensional operations.', '- Others use **pre-filtering**, which requires a binary mask of the whole dataset to be passed into the ANN algorithm. It is also not scalable, as the mask size grows linearly with the dataset size.\n\n\n\nOn top of it, there is also a problem with search accuracy.\n\nIt appears if too many vectors are filtered out, so the HNSW graph becomes disconnected.\n\n\n\nQdrant uses a different approach, not requiring pre- or post-filtering while addressing the accuracy problem.']","On the one hand, we cannot apply a full scan on too many vectors. On the other hand, the HNSW graph starts to fall apart when using too strict filters.



![HNSW fail](/docs/precision_by_m.png)



![hnsw graph](/docs/graph.gif)



You can find more information on why this happens in our [blog post](https://blog.vasnetsov.com/posts/categorical-hnsw/).

Qdrant solves this problem by extending the HNSW graph with additional edges based on the stored payload values.
Read more about the Qdrant approach in our [Filtrable HNSW](/articles/filtrable-hnsw/) article.
HNSW is chosen for several reasons.

First, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search.

Second, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).



*Available as of v1.1.1*



The HNSW parameters can also be configured on a collection and named vector

level by setting [`hnsw_config`](../indexing/#vector-index) to fine-tune search

performance.
.tech/articles/filtrable-hnsw/) and unique [filtering](https://qdrant.tech/documentation/concepts/filtering/) capabilities consistently lead to [highest RPS](https://qdrant.tech/benchmarks/), minimal latency, and high control with accuracy when running large-scale, high-dimensional operations.
- Others use **pre-filtering**, which requires a binary mask of the whole dataset to be passed into the ANN algorithm. It is also not scalable, as the mask size grows linearly with the dataset size.



On top of it, there is also a problem with search accuracy.

It appears if too many vectors are filtered out, so the HNSW graph becomes disconnected.



Qdrant uses a different approach, not requiring pre- or post-filtering while addressing the accuracy problem."
How is metric learning utilized in addressing the challenge of detecting anomalies in coffee beans?,"Metric learning is utilized in addressing the challenge of detecting anomalies in coffee beans by encoding images in an n-dimensional vector space and using learned similarities to label images during the inference process. This approach involves representing the images in a vector space where similar images are closer together in the space. By doing so, the model can effectively classify and detect anomalies in coffee beans based on the similarities learned during training. The KNN (K-Nearest Neighbors) classification method is commonly used in this approach as it simplifies the process of determining the class label of an image based on the labels of its nearest neighbors in the vector space. This method allows for the adaptation to new types of defects and changing shooting conditions, making the model more robust and accurate in detecting anomalies in coffee beans.","['---\n\ntitle: Metric Learning for Anomaly Detection\n\nshort_description: ""How to use metric learning to detect anomalies: quality assessment of coffee beans with just 200 labelled samples""\n\ndescription: Practical use of metric learning for anomaly detection. A way to match the results of a classification-based approach with only ~0.6% of the labeled data.\n\nsocial_preview_image: /articles_data/detecting-coffee-anomalies/preview/social_preview.jpg\n\npreview_dir: /articles_data/detecting-coffee-anomalies/preview', '{{< figure src=/articles_data/detecting-coffee-anomalies/detection.gif caption=""Anomalies in coffee"" width=""400px"" >}}\n\n\n\nWe should note that anomalies are very diverse, so the enumeration of all possible anomalies is a challenging task on it\'s own.\n\nIn the course of work, new types of defects appear, and shooting conditions change. Thus, a one-time labeled dataset becomes insufficient.\n\n\n\nLet\'s find out how metric learning might help to address this challenge.\n\n\n\n## Metric Learning Approach', 'We are actively looking into these, and we will continue to publish our findings in this challenge and other use cases of metric learning.', 'We will describe our approach in the further articles.\n\n\n\nThis time it converged smoothly, and our evaluation metrics also improved considerably to match the supervised classification approach.\n\n\n\n{{< figure src=/articles_data/detecting-coffee-anomalies/ae_report_knn.png caption=""Metrics for the autoencoder model with KNN classifier"" >}}\n\n\n\n{{< figure src=/articles_data/detecting-coffee-anomalies/ft_report_knn.png caption=""Metrics for the finetuned model with KNN classifier"" >}}', 'This approach is time-saving and resource-efficient, and that may be improved further. Possible next steps might be:\n\n\n\n- Collect more unlabeled data and pretrain a larger autoencoder.\n\n- Obtain high-quality labels for a small number of images instead of tens of thousands for finetuning.\n\n- Use hyperparameter optimization and possibly gradual unfreezing in the finetuning step.\n\n- Use [vector search engine](https://github.com/qdrant/qdrant) to serve Metric Learning in production.']","---

title: Metric Learning for Anomaly Detection

short_description: ""How to use metric learning to detect anomalies: quality assessment of coffee beans with just 200 labelled samples""

description: Practical use of metric learning for anomaly detection. A way to match the results of a classification-based approach with only ~0.6% of the labeled data.

social_preview_image: /articles_data/detecting-coffee-anomalies/preview/social_preview.jpg

preview_dir: /articles_data/detecting-coffee-anomalies/preview
{{< figure src=/articles_data/detecting-coffee-anomalies/detection.gif caption=""Anomalies in coffee"" width=""400px"" >}}



We should note that anomalies are very diverse, so the enumeration of all possible anomalies is a challenging task on it's own.

In the course of work, new types of defects appear, and shooting conditions change. Thus, a one-time labeled dataset becomes insufficient.



Let's find out how metric learning might help to address this challenge.



## Metric Learning Approach
We are actively looking into these, and we will continue to publish our findings in this challenge and other use cases of metric learning.
We will describe our approach in the further articles.



This time it converged smoothly, and our evaluation metrics also improved considerably to match the supervised classification approach.



{{< figure src=/articles_data/detecting-coffee-anomalies/ae_report_knn.png caption=""Metrics for the autoencoder model with KNN classifier"" >}}



{{< figure src=/articles_data/detecting-coffee-anomalies/ft_report_knn.png caption=""Metrics for the finetuned model with KNN classifier"" >}}
This approach is time-saving and resource-efficient, and that may be improved further. Possible next steps might be:



- Collect more unlabeled data and pretrain a larger autoencoder.

- Obtain high-quality labels for a small number of images instead of tens of thousands for finetuning.

- Use hyperparameter optimization and possibly gradual unfreezing in the finetuning step.

- Use [vector search engine](https://github.com/qdrant/qdrant) to serve Metric Learning in production."
How can one reproduce the benchmark for Open Source vector databases?,"To reproduce the benchmark for Open Source vector databases, one can access the source code available on Github at https://github.com/qdrant/vector-db-benchmark. The repository contains a `README.md` file that provides detailed instructions on how to run the benchmark for a specific engine. By following the guidelines outlined in the README file, individuals can easily replicate the benchmarks conducted on the Open Source vector databases. Additionally, the document emphasizes the importance of transparency in the benchmarking process and invites contributions from individuals who may be able to provide insights, identify misconfigurations, or suggest improvements. Interested parties can contribute to the benchmarking efforts by accessing the benchmark repository at https://github.com/qdrant/vector-db-benchmark.","['That makes the comparison unfair. That’s why we purely focused on testing the Open Source vector databases, so everybody may reproduce the benchmarks easily.\n\n\n\nThis is not the final list, and we’ll continue benchmarking as many different engines as possible.\n\n\n\n## How to reproduce the benchmark?\n\n\n\nThe source code is available on [Github](https://github.com/qdrant/vector-db-benchmark) and has a `README.md` file describing the process of running the benchmark for a specific engine.', ""We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. \n\n\n\nWhy?"", '---\n\ndraft: false\n\nid: 2\n\ntitle: How vector search should be benchmarked?\n\nweight: 1\n\n---\n\n\n\n# Benchmarking Vector Databases', 'Here are the principles we followed while designing these benchmarks:\n\n\n\n- We do comparative benchmarks, which means we focus on **relative numbers** rather than absolute numbers.\n\n- We use affordable hardware, so that you can reproduce the results easily.\n\n- We run benchmarks on the same exact machines to avoid any possible hardware bias.\n\n- All the benchmarks are [open-sourced](https://github.com/qdrant/vector-db-benchmark), so you can contribute and improve them.\n\n\n\n<details>', '. And what are some things to keep in mind if others out there want to benchmark? And I guess you were just benchmarking it against Pgvector, right?']","That makes the comparison unfair. That’s why we purely focused on testing the Open Source vector databases, so everybody may reproduce the benchmarks easily.



This is not the final list, and we’ll continue benchmarking as many different engines as possible.



## How to reproduce the benchmark?



The source code is available on [Github](https://github.com/qdrant/vector-db-benchmark) and has a `README.md` file describing the process of running the benchmark for a specific engine.
We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. 



Why?
---

draft: false

id: 2

title: How vector search should be benchmarked?

weight: 1

---



# Benchmarking Vector Databases
Here are the principles we followed while designing these benchmarks:



- We do comparative benchmarks, which means we focus on **relative numbers** rather than absolute numbers.

- We use affordable hardware, so that you can reproduce the results easily.

- We run benchmarks on the same exact machines to avoid any possible hardware bias.

- All the benchmarks are [open-sourced](https://github.com/qdrant/vector-db-benchmark), so you can contribute and improve them.



<details>
. And what are some things to keep in mind if others out there want to benchmark? And I guess you were just benchmarking it against Pgvector, right?"
What is the purpose of the `ordering` parameter in Qdrant and when should it be used?,"The `ordering` parameter in Qdrant is used with update and delete operations to ensure that the operations are executed in the same order on all replicas. When this option is enabled, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This is beneficial in preventing data inconsistency that may arise from concurrent updates of the same documents. The `ordering` parameter is particularly recommended when read operations are more frequent than updates and when search performance is critical. By enforcing a specific order of operations across replicas, the `ordering` parameter helps maintain data consistency and integrity in distributed environments.","['ordering guarantees can be `strong`[^ordered], required for some applications.\n\n\n\nThe `stream_records` method is currently used as default. This may change in the\n\nfuture.\n\n\n\n## Replication\n\n\n\n*Available as of v0.11.0*\n\n\n\nQdrant allows you to replicate shards between nodes in the cluster.\n\n\n\nShard replication increases the reliability of the cluster by keeping several copies of a shard spread across the cluster.', 'vector: vec![0.2, 0.1, 0.9, 0.7],\n\n        params: Some(SearchParams {\n\n            quantization: Some(QuantizationSearchParams {\n\n                rescore: Some(false),\n\n                ..Default::default()\n\n            }),\n\n            ..Default::default()\n\n        }),\n\n        limit: 3,\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;', '- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents', '..Default::default()\n\n        }),\n\n        vector: vec![0.2, 0.1, 0.9, 0.7],\n\n        limit: 3,\n\n        read_consistency: Some(ReadConsistency {\n\n            value: Some(Value::Type(ReadConsistencyType::Majority.into())),\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;', ""Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk.""]","ordering guarantees can be `strong`[^ordered], required for some applications.



The `stream_records` method is currently used as default. This may change in the

future.



## Replication



*Available as of v0.11.0*



Qdrant allows you to replicate shards between nodes in the cluster.



Shard replication increases the reliability of the cluster by keeping several copies of a shard spread across the cluster.
vector: vec![0.2, 0.1, 0.9, 0.7],

        params: Some(SearchParams {

            quantization: Some(QuantizationSearchParams {

                rescore: Some(false),

                ..Default::default()

            }),

            ..Default::default()

        }),

        limit: 3,

        ..Default::default()

    })

    .await?;

```



```java

import java.util.List;



import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents
..Default::default()

        }),

        vector: vec![0.2, 0.1, 0.9, 0.7],

        limit: 3,

        read_consistency: Some(ReadConsistency {

            value: Some(Value::Type(ReadConsistencyType::Majority.into())),

        }),

        ..Default::default()

    })

    .await?;

```



```java

import java.util.List;



import static io.qdrant.client.ConditionFactory.matchKeyword;



import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk."
How can you enable API key based authentication in Qdrant instances for security purposes?,"To enable API key based authentication in Qdrant instances for security purposes, you must specify a key in the configuration. This can be done by adding the following code snippet to your configuration file:

```yaml
service:
  # Set an api-key.
  # If set, all requests must include a header with the api-key.
  # example header: `api-key: <API-KEY>`
  #
  # If you enable this you should also enable TLS.
  # (Either above or via an external service like nginx.)
  # Sending an api-key over an unencrypted channel is insecure.
  api_key: your_secret_api_key_here
```

By adding this configuration, all requests to your Qdrant instance must include a header with the specified API key. This simple form of client authentication helps secure your instance and is available starting from version 1.2.0","['This can be used to secure your instance.\n\n\n\nTo enable API key based authentication in your own Qdrant instance you must\n\nspecify a key in the configuration:\n\n\n\n```yaml\n\nservice:\n\n  # Set an api-key.\n\n  # If set, all requests must include a header with the api-key.\n\n  # example header: `api-key: <API-KEY>`\n\n  #\n\n  # If you enable this you should also enable TLS.\n\n  # (Either above or via an external service like nginx.)\n\n  # Sending an api-key over an unencrypted channel is insecure.', 'section.\n\n\n\nThe API key then needs to be present in all REST or gRPC requests to your instance.\n\nAll official Qdrant clients for Python, Go, Rust, .NET and Java support the API key parameter.\n\n\n\n<!---\n\nExamples with clients\n\n-->\n\n\n\n```bash\n\ncurl \\\n\n  -X GET https://localhost:6333 \\\n\n  --header \'api-key: your_secret_api_key_here\'\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\n\n\nclient = QdrantClient(\n\n    url=""https://localhost"",\n\n    port=6333,\n\n    api_key=""your_secret_api_key_here"",\n\n)\n\n```', 'curl \\\n\n  -X GET https://xyz-example.eu-central.aws.cloud.qdrant.io:6333 \\\n\n  --header \'Authorization: Bearer <provide-your-own-key>\'\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\n\n\nqdrant_client = QdrantClient(\n\n    ""xyz-example.eu-central.aws.cloud.qdrant.io"",\n\n    api_key=""<paste-your-api-key-here>"",\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";\n\n\n\nconst client = new QdrantClient({\n\n  host: ""xyz-example.eu-central.aws.cloud.qdrant.io"",', '---\n\ntitle: Security\n\nweight: 165\n\naliases:\n\n  - ../security\n\n---\n\n\n\n# Security\n\n\n\n\n\n\n\nPlease read this page carefully. Although there are various ways to secure your Qdrant instances, **they are unsecured by default**. \n\nYou need to enable security measures before production use. Otherwise, they are completely open to anyone\n\n\n\n## Authentication\n\n\n\n*Available as of v1.2.0*\n\n\n\nQdrant supports a simple form of client authentication using a static API key.\n\nThis can be used to secure your instance.', 'api_key: your_secret_api_key_here\n\n```\n\n\n\nOr alternatively, you can use the environment variable:\n\n\n\n```bash\n\nexport QDRANT__SERVICE__API_KEY=your_secret_api_key_here\n\n```\n\n\n\n<aside role=""alert""><a href=""#tls"">TLS</a> must be used to prevent leaking the API key over an unencrypted connection.</aside>\n\n\n\nFor using API key based authentication in Qdrant cloud see the cloud\n\n[Authentication](https://qdrant.tech/documentation/cloud/authentication)\n\nsection.']","This can be used to secure your instance.



To enable API key based authentication in your own Qdrant instance you must

specify a key in the configuration:



```yaml

service:

  # Set an api-key.

  # If set, all requests must include a header with the api-key.

  # example header: `api-key: <API-KEY>`

  #

  # If you enable this you should also enable TLS.

  # (Either above or via an external service like nginx.)

  # Sending an api-key over an unencrypted channel is insecure.
section.



The API key then needs to be present in all REST or gRPC requests to your instance.

All official Qdrant clients for Python, Go, Rust, .NET and Java support the API key parameter.



<!---

Examples with clients

-->



```bash

curl \

  -X GET https://localhost:6333 \

  --header 'api-key: your_secret_api_key_here'

```



```python

from qdrant_client import QdrantClient



client = QdrantClient(

    url=""https://localhost"",

    port=6333,

    api_key=""your_secret_api_key_here"",

)

```
curl \

  -X GET https://xyz-example.eu-central.aws.cloud.qdrant.io:6333 \

  --header 'Authorization: Bearer <provide-your-own-key>'

```



```python

from qdrant_client import QdrantClient



qdrant_client = QdrantClient(

    ""xyz-example.eu-central.aws.cloud.qdrant.io"",

    api_key=""<paste-your-api-key-here>"",

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({

  host: ""xyz-example.eu-central.aws.cloud.qdrant.io"",
---

title: Security

weight: 165

aliases:

  - ../security

---



# Security







Please read this page carefully. Although there are various ways to secure your Qdrant instances, **they are unsecured by default**. 

You need to enable security measures before production use. Otherwise, they are completely open to anyone



## Authentication



*Available as of v1.2.0*



Qdrant supports a simple form of client authentication using a static API key.

This can be used to secure your instance.
api_key: your_secret_api_key_here

```



Or alternatively, you can use the environment variable:



```bash

export QDRANT__SERVICE__API_KEY=your_secret_api_key_here

```



<aside role=""alert""><a href=""#tls"">TLS</a> must be used to prevent leaking the API key over an unencrypted connection.</aside>



For using API key based authentication in Qdrant cloud see the cloud

[Authentication](https://qdrant.tech/documentation/cloud/authentication)

section."
