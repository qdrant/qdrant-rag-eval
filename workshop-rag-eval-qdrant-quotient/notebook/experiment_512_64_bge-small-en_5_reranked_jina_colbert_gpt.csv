success,failure_reason,Completion Time (ms),content.id,content.input_text,content.answer,content.completion,content.context,content.documents,content.formatted_content,content.raw_content.input_text,content.raw_content.answer,content.raw_content.documents,content.raw_content.context,rouge1_precision,rouge1_recall,rouge1_fmeasure,rouge2_precision,rouge2_recall,rouge2_fmeasure,rougeL_precision,rougeL_recall,ROUGE-L,rougeLsum_precision,rougeLsum_recall,rougeLsum_fmeasure,BERT Sentence Similarity,bert_score_precision,bert_score_recall,BERTScore,Faithfulness,Context Relevance,Completion Verbosity,Verbosity Ratio,Chunk Relevance
True,,1227.8690000000001,22e4fdc4,What is vaccum optimizer ?,"The Vacuum Optimizer is a feature in the Qdrant database designed to manage and improve system performance by removing obsolete data. In Qdrant, when records are deleted, they are not immediately removed from the database. Instead, they are marked as deleted and subsequently ignored in future queries. This approach helps minimize disk access but results in accumulated deleted records that can occupy valuable memory and degrade performance over time.
The Vacuum Optimizer addresses this issue by systematically clearing out these marked-as-deleted records once they reach a certain threshold. This threshold is configurable and includes conditions such as the minimum fraction of deleted vectors in a segment and the minimum number of vectors present in a segment. ","A vacuum optimizer is a component or process that helps optimize the storage space and performance of a database or indexing system by removing unnecessary or outdated data, compacting data structures, and reclaiming unused space. In the context of the code snippets provided, the vacuum optimizer is part of the configuration for optimizing collections in Qdrant, a vector similarity search engine.","optimizers_config=models.OptimizersConfigDiff(memmap_threshold=20000),

    hnsw_config=models.HnswConfigDiff(on_disk=True),

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({ host: ""localhost"", port: 6333 });



client.createCollection(""{collection_name}"", {

  vectors: {

    size: 768,

    distance: ""Cosine"",

  },

  optimizers_config: {

    memmap_threshold: 20000,

  },

  hnsw_config: {

    on_disk: true,

  },

});

```
The criteria for starting the optimizer are defined in the configuration file.



Here is an example of parameter values:



```yaml

storage:

  optimizers:

    # The minimal fraction of deleted vectors in a segment, required to perform segment optimization

    deleted_threshold: 0.2

    # The minimal number of vectors in a segment, required to perform segment optimization

    vacuum_min_vector_number: 1000

```



## Merge Optimizer



The service may require the creation of temporary segments.
""{collection_name}"",

        &OptimizersConfigDiff {

            indexing_threshold: Some(10000),

            ..Default::default()

        },

        None,

        None,

        None,

        None,

        None,

    )

    .await?;

```



```java

import io.qdrant.client.grpc.Collections.OptimizersConfigDiff;

import io.qdrant.client.grpc.Collections.UpdateCollection;



client.updateCollectionAsync(

    UpdateCollection.newBuilder()

        .setCollectionName(""{collection_name}"")
config: Some(Config::Params(VectorParams {

                size: 768,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        optimizers_config: Some(OptimizersConfigDiff {

            memmap_threshold: Some(20000),

            ..Default::default()

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
config: Some(Config::Params(VectorParams {

                size: 768,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        optimizers_config: Some(OptimizersConfigDiff {

            memmap_threshold: Some(20000),

            ..Default::default()

        }),

        hnsw_config: Some(HnswConfigDiff {

            on_disk: Some(true),

            ..Default::default()

        }),

        ..Default::default()","['optimizers_config=models.OptimizersConfigDiff(memmap_threshold=20000),\n\n    hnsw_config=models.HnswConfigDiff(on_disk=True),\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";\n\n\n\nconst client = new QdrantClient({ host: ""localhost"", port: 6333 });\n\n\n\nclient.createCollection(""{collection_name}"", {\n\n  vectors: {\n\n    size: 768,\n\n    distance: ""Cosine"",\n\n  },\n\n  optimizers_config: {\n\n    memmap_threshold: 20000,\n\n  },\n\n  hnsw_config: {\n\n    on_disk: true,\n\n  },\n\n});\n\n```', 'The criteria for starting the optimizer are defined in the configuration file.\n\n\n\nHere is an example of parameter values:\n\n\n\n```yaml\n\nstorage:\n\n  optimizers:\n\n    # The minimal fraction of deleted vectors in a segment, required to perform segment optimization\n\n    deleted_threshold: 0.2\n\n    # The minimal number of vectors in a segment, required to perform segment optimization\n\n    vacuum_min_vector_number: 1000\n\n```\n\n\n\n## Merge Optimizer\n\n\n\nThe service may require the creation of temporary segments.', '""{collection_name}"",\n\n        &OptimizersConfigDiff {\n\n            indexing_threshold: Some(10000),\n\n            ..Default::default()\n\n        },\n\n        None,\n\n        None,\n\n        None,\n\n        None,\n\n        None,\n\n    )\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\n\nimport io.qdrant.client.grpc.Collections.UpdateCollection;\n\n\n\nclient.updateCollectionAsync(\n\n    UpdateCollection.newBuilder()\n\n        .setCollectionName(""{collection_name}"")', 'config: Some(Config::Params(VectorParams {\n\n                size: 768,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        optimizers_config: Some(OptimizersConfigDiff {\n\n            memmap_threshold: Some(20000),\n\n            ..Default::default()\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;', 'config: Some(Config::Params(VectorParams {\n\n                size: 768,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        optimizers_config: Some(OptimizersConfigDiff {\n\n            memmap_threshold: Some(20000),\n\n            ..Default::default()\n\n        }),\n\n        hnsw_config: Some(HnswConfigDiff {\n\n            on_disk: Some(true),\n\n            ..Default::default()\n\n        }),\n\n        ..Default::default()']","Question: What is vaccum optimizer ?\n\nContext: optimizers_config=models.OptimizersConfigDiff(memmap_threshold=20000),

hnsw_config=models.HnswConfigDiff(on_disk=True),

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({ host: ""localhost"", port: 6333 });



client.createCollection(""{collection_name}"", {

vectors: {

size: 768,

distance: ""Cosine"",

},

optimizers_config: {

memmap_threshold: 20000,

},

hnsw_config: {

on_disk: true,

},

});

```
The criteria for starting the optimizer are defined in the configuration file.



Here is an example of parameter values:



```yaml

storage:

optimizers:

# The minimal fraction of deleted vectors in a segment, required to perform segment optimization

deleted_threshold: 0.2

# The minimal number of vectors in a segment, required to perform segment optimization

vacuum_min_vector_number: 1000

```



## Merge Optimizer



The service may require the creation of temporary segments.
""{collection_name}"",

&OptimizersConfigDiff {

indexing_threshold: Some(10000),

..Default::default()

},

None,

None,

None,

None,

None,

)

.await?;

```



```java

import io.qdrant.client.grpc.Collections.OptimizersConfigDiff;

import io.qdrant.client.grpc.Collections.UpdateCollection;



client.updateCollectionAsync(

UpdateCollection.newBuilder()

.setCollectionName(""{collection_name}"")
config: Some(Config::Params(VectorParams {

size: 768,

distance: Distance::Cosine.into(),

..Default::default()

})),

}),

optimizers_config: Some(OptimizersConfigDiff {

memmap_threshold: Some(20000),

..Default::default()

}),

..Default::default()

})

.await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
config: Some(Config::Params(VectorParams {

size: 768,

distance: Distance::Cosine.into(),

..Default::default()

})),

}),

optimizers_config: Some(OptimizersConfigDiff {

memmap_threshold: Some(20000),

..Default::default()

}),

hnsw_config: Some(HnswConfigDiff {

on_disk: Some(true),

..Default::default()

}),

..Default::default()\n\nAnswer:",What is vaccum optimizer ?,"The Vacuum Optimizer is a feature in the Qdrant database designed to manage and improve system performance by removing obsolete data. In Qdrant, when records are deleted, they are not immediately removed from the database. Instead, they are marked as deleted and subsequently ignored in future queries. This approach helps minimize disk access but results in accumulated deleted records that can occupy valuable memory and degrade performance over time.
The Vacuum Optimizer addresses this issue by systematically clearing out these marked-as-deleted records once they reach a certain threshold. This threshold is configurable and includes conditions such as the minimum fraction of deleted vectors in a segment and the minimum number of vectors present in a segment. ","['optimizers_config=models.OptimizersConfigDiff(memmap_threshold=20000),\n\n    hnsw_config=models.HnswConfigDiff(on_disk=True),\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";\n\n\n\nconst client = new QdrantClient({ host: ""localhost"", port: 6333 });\n\n\n\nclient.createCollection(""{collection_name}"", {\n\n  vectors: {\n\n    size: 768,\n\n    distance: ""Cosine"",\n\n  },\n\n  optimizers_config: {\n\n    memmap_threshold: 20000,\n\n  },\n\n  hnsw_config: {\n\n    on_disk: true,\n\n  },\n\n});\n\n```', 'The criteria for starting the optimizer are defined in the configuration file.\n\n\n\nHere is an example of parameter values:\n\n\n\n```yaml\n\nstorage:\n\n  optimizers:\n\n    # The minimal fraction of deleted vectors in a segment, required to perform segment optimization\n\n    deleted_threshold: 0.2\n\n    # The minimal number of vectors in a segment, required to perform segment optimization\n\n    vacuum_min_vector_number: 1000\n\n```\n\n\n\n## Merge Optimizer\n\n\n\nThe service may require the creation of temporary segments.', '""{collection_name}"",\n\n        &OptimizersConfigDiff {\n\n            indexing_threshold: Some(10000),\n\n            ..Default::default()\n\n        },\n\n        None,\n\n        None,\n\n        None,\n\n        None,\n\n        None,\n\n    )\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.grpc.Collections.OptimizersConfigDiff;\n\nimport io.qdrant.client.grpc.Collections.UpdateCollection;\n\n\n\nclient.updateCollectionAsync(\n\n    UpdateCollection.newBuilder()\n\n        .setCollectionName(""{collection_name}"")', 'config: Some(Config::Params(VectorParams {\n\n                size: 768,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        optimizers_config: Some(OptimizersConfigDiff {\n\n            memmap_threshold: Some(20000),\n\n            ..Default::default()\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;', 'config: Some(Config::Params(VectorParams {\n\n                size: 768,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        optimizers_config: Some(OptimizersConfigDiff {\n\n            memmap_threshold: Some(20000),\n\n            ..Default::default()\n\n        }),\n\n        hnsw_config: Some(HnswConfigDiff {\n\n            on_disk: Some(true),\n\n            ..Default::default()\n\n        }),\n\n        ..Default::default()']","optimizers_config=models.OptimizersConfigDiff(memmap_threshold=20000),

    hnsw_config=models.HnswConfigDiff(on_disk=True),

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({ host: ""localhost"", port: 6333 });



client.createCollection(""{collection_name}"", {

  vectors: {

    size: 768,

    distance: ""Cosine"",

  },

  optimizers_config: {

    memmap_threshold: 20000,

  },

  hnsw_config: {

    on_disk: true,

  },

});

```
The criteria for starting the optimizer are defined in the configuration file.



Here is an example of parameter values:



```yaml

storage:

  optimizers:

    # The minimal fraction of deleted vectors in a segment, required to perform segment optimization

    deleted_threshold: 0.2

    # The minimal number of vectors in a segment, required to perform segment optimization

    vacuum_min_vector_number: 1000

```



## Merge Optimizer



The service may require the creation of temporary segments.
""{collection_name}"",

        &OptimizersConfigDiff {

            indexing_threshold: Some(10000),

            ..Default::default()

        },

        None,

        None,

        None,

        None,

        None,

    )

    .await?;

```



```java

import io.qdrant.client.grpc.Collections.OptimizersConfigDiff;

import io.qdrant.client.grpc.Collections.UpdateCollection;



client.updateCollectionAsync(

    UpdateCollection.newBuilder()

        .setCollectionName(""{collection_name}"")
config: Some(Config::Params(VectorParams {

                size: 768,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        optimizers_config: Some(OptimizersConfigDiff {

            memmap_threshold: Some(20000),

            ..Default::default()

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
config: Some(Config::Params(VectorParams {

                size: 768,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        optimizers_config: Some(OptimizersConfigDiff {

            memmap_threshold: Some(20000),

            ..Default::default()

        }),

        hnsw_config: Some(HnswConfigDiff {

            on_disk: Some(true),

            ..Default::default()

        }),

        ..Default::default()",0.4423076923076923,0.21296296296296297,0.2875,0.09803921568627451,0.04672897196261682,0.06329113924050633,0.3076923076923077,0.14814814814814814,0.2,0.40384615384615385,0.19444444444444445,0.2625,0.749961256980896,0.6642918586730957,0.596530556678772,0.6285903453826904,0.8211104944348335,0.6570931585350384,61,0.5258620689655172,0.6938341981959084
True,,1740.462,f6b570da,Tell me about ‘always_ram’ parameter?,"In the context of vector quantization in Qdrant, the 'always_ram' parameter determines whether quantized vectors should be kept always cached in RAM or not. By default, quantized vectors are loaded in the same manner as the original vectors. Setting 'always_ram' to true ensures that the quantized vectors are consistently cached in RAM, providing faster access times.","The `always_ram` parameter in the quantization config determines whether the quantization data should always be kept in RAM (Random Access Memory) or not. When `always_ram` is set to `false`, it means that the quantization data can be stored in disk or memory-mapped files, which can be more memory-efficient for large datasets. Conversely, setting `always_ram` to `true` ensures that the quantization data is always kept in RAM, which may be preferable for faster access to the data but can consume more memory resources.","This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": false

        }

    }

}

```



```python

from qdrant_client import QdrantClient, models
""size"": 1536,

      ""distance"": ""Cosine""

    },

    ""quantization_config"": {

        ""binary"": {

            ""always_ram"": true

        }

    }

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),
always_ram: true,

    },

  },

});

```



```rust

use qdrant_client::{

    client::QdrantClient,

    qdrant::{

        quantization_config::Quantization, vectors_config::Config, BinaryQuantization,

        CreateCollection, Distance, QuantizationConfig, VectorParams, VectorsConfig,

    },

};



let client = QdrantClient::from_url(""http://localhost:6334"").build()?;



client

    .create_collection(&CreateCollection {

        collection_name: ""{collection_name}"".to_string(),
type: ""int8"",

      always_ram: false,

    },

  },

});

```



```rust

use qdrant_client::{

    client::QdrantClient,

    qdrant::{

        quantization_config::Quantization, vectors_config::Config, CreateCollection, Distance,

        OptimizersConfigDiff, QuantizationConfig, QuantizationType, ScalarQuantization,

        VectorParams, VectorsConfig,

    },

};



let client = QdrantClient::from_url(""http://localhost:6334"").build()?;



client

    .create_collection(&CreateCollection {
always_ram: Some(true),

            })),

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.BinaryQuantization;

import io.qdrant.client.grpc.Collections.CreateCollection;

import io.qdrant.client.grpc.Collections.Distance;

import io.qdrant.client.grpc.Collections.QuantizationConfig;","['This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": false\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models', '""size"": 1536,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""quantization_config"": {\n\n        ""binary"": {\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),', 'always_ram: true,\n\n    },\n\n  },\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::{\n\n    client::QdrantClient,\n\n    qdrant::{\n\n        quantization_config::Quantization, vectors_config::Config, BinaryQuantization,\n\n        CreateCollection, Distance, QuantizationConfig, VectorParams, VectorsConfig,\n\n    },\n\n};\n\n\n\nlet client = QdrantClient::from_url(""http://localhost:6334"").build()?;\n\n\n\nclient\n\n    .create_collection(&CreateCollection {\n\n        collection_name: ""{collection_name}"".to_string(),', 'type: ""int8"",\n\n      always_ram: false,\n\n    },\n\n  },\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::{\n\n    client::QdrantClient,\n\n    qdrant::{\n\n        quantization_config::Quantization, vectors_config::Config, CreateCollection, Distance,\n\n        OptimizersConfigDiff, QuantizationConfig, QuantizationType, ScalarQuantization,\n\n        VectorParams, VectorsConfig,\n\n    },\n\n};\n\n\n\nlet client = QdrantClient::from_url(""http://localhost:6334"").build()?;\n\n\n\nclient\n\n    .create_collection(&CreateCollection {', 'always_ram: Some(true),\n\n            })),\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.BinaryQuantization;\n\nimport io.qdrant.client.grpc.Collections.CreateCollection;\n\nimport io.qdrant.client.grpc.Collections.Distance;\n\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;']","Question: Tell me about ‘always_ram’ parameter?\n\nContext: This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,

""distance"": ""Cosine""

},

""optimizers_config"": {

""memmap_threshold"": 20000

},

""quantization_config"": {

""scalar"": {

""type"": ""int8"",

""always_ram"": false

}

}

}

```



```python

from qdrant_client import QdrantClient, models
""size"": 1536,

""distance"": ""Cosine""

},

""quantization_config"": {

""binary"": {

""always_ram"": true

}

}

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

collection_name=""{collection_name}"",

vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),
always_ram: true,

},

},

});

```



```rust

use qdrant_client::{

client::QdrantClient,

qdrant::{

quantization_config::Quantization, vectors_config::Config, BinaryQuantization,

CreateCollection, Distance, QuantizationConfig, VectorParams, VectorsConfig,

},

};



let client = QdrantClient::from_url(""http://localhost:6334"").build()?;



client

.create_collection(&CreateCollection {

collection_name: ""{collection_name}"".to_string(),
type: ""int8"",

always_ram: false,

},

},

});

```



```rust

use qdrant_client::{

client::QdrantClient,

qdrant::{

quantization_config::Quantization, vectors_config::Config, CreateCollection, Distance,

OptimizersConfigDiff, QuantizationConfig, QuantizationType, ScalarQuantization,

VectorParams, VectorsConfig,

},

};



let client = QdrantClient::from_url(""http://localhost:6334"").build()?;



client

.create_collection(&CreateCollection {
always_ram: Some(true),

})),

}),

..Default::default()

})

.await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.BinaryQuantization;

import io.qdrant.client.grpc.Collections.CreateCollection;

import io.qdrant.client.grpc.Collections.Distance;

import io.qdrant.client.grpc.Collections.QuantizationConfig;\n\nAnswer:",Tell me about ‘always_ram’ parameter?,"In the context of vector quantization in Qdrant, the 'always_ram' parameter determines whether quantized vectors should be kept always cached in RAM or not. By default, quantized vectors are loaded in the same manner as the original vectors. Setting 'always_ram' to true ensures that the quantized vectors are consistently cached in RAM, providing faster access times.","['This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": false\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models', '""size"": 1536,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""quantization_config"": {\n\n        ""binary"": {\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),', 'always_ram: true,\n\n    },\n\n  },\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::{\n\n    client::QdrantClient,\n\n    qdrant::{\n\n        quantization_config::Quantization, vectors_config::Config, BinaryQuantization,\n\n        CreateCollection, Distance, QuantizationConfig, VectorParams, VectorsConfig,\n\n    },\n\n};\n\n\n\nlet client = QdrantClient::from_url(""http://localhost:6334"").build()?;\n\n\n\nclient\n\n    .create_collection(&CreateCollection {\n\n        collection_name: ""{collection_name}"".to_string(),', 'type: ""int8"",\n\n      always_ram: false,\n\n    },\n\n  },\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::{\n\n    client::QdrantClient,\n\n    qdrant::{\n\n        quantization_config::Quantization, vectors_config::Config, CreateCollection, Distance,\n\n        OptimizersConfigDiff, QuantizationConfig, QuantizationType, ScalarQuantization,\n\n        VectorParams, VectorsConfig,\n\n    },\n\n};\n\n\n\nlet client = QdrantClient::from_url(""http://localhost:6334"").build()?;\n\n\n\nclient\n\n    .create_collection(&CreateCollection {', 'always_ram: Some(true),\n\n            })),\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.BinaryQuantization;\n\nimport io.qdrant.client.grpc.Collections.CreateCollection;\n\nimport io.qdrant.client.grpc.Collections.Distance;\n\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;']","This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": false

        }

    }

}

```



```python

from qdrant_client import QdrantClient, models
""size"": 1536,

      ""distance"": ""Cosine""

    },

    ""quantization_config"": {

        ""binary"": {

            ""always_ram"": true

        }

    }

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),
always_ram: true,

    },

  },

});

```



```rust

use qdrant_client::{

    client::QdrantClient,

    qdrant::{

        quantization_config::Quantization, vectors_config::Config, BinaryQuantization,

        CreateCollection, Distance, QuantizationConfig, VectorParams, VectorsConfig,

    },

};



let client = QdrantClient::from_url(""http://localhost:6334"").build()?;



client

    .create_collection(&CreateCollection {

        collection_name: ""{collection_name}"".to_string(),
type: ""int8"",

      always_ram: false,

    },

  },

});

```



```rust

use qdrant_client::{

    client::QdrantClient,

    qdrant::{

        quantization_config::Quantization, vectors_config::Config, CreateCollection, Distance,

        OptimizersConfigDiff, QuantizationConfig, QuantizationType, ScalarQuantization,

        VectorParams, VectorsConfig,

    },

};



let client = QdrantClient::from_url(""http://localhost:6334"").build()?;



client

    .create_collection(&CreateCollection {
always_ram: Some(true),

            })),

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.BinaryQuantization;

import io.qdrant.client.grpc.Collections.CreateCollection;

import io.qdrant.client.grpc.Collections.Distance;

import io.qdrant.client.grpc.Collections.QuantizationConfig;",0.37037037037037035,0.5660377358490566,0.44776119402985076,0.2,0.3076923076923077,0.24242424242424246,0.3333333333333333,0.5094339622641509,0.4029850746268656,0.3333333333333333,0.5094339622641509,0.4029850746268656,0.8002421855926514,0.6550909876823425,0.7147163152694702,0.6836060285568237,0.6899746507406235,0.43505406379699707,82,1.4642857142857142,0.6965130725803854
True,,3291.286,e46f9fd3,What is difference between scalar and product quantization?,"While both methods aim to reduce the memory footprint and potentially speed up operations, scalar quantization offers faster processing with SIMD-friendly operations and minimal accuracy loss, making it suitable for scenarios where speed is critical. Product quantization achieves higher compression rates and is better suited for handling very high-dimensional vectors where memory space is more of a concern than computation speed.","Scalar quantization and product quantization are both methods used to compress vectors to minimize memory usage, but they have some key differences:

1. **Scalar Quantization:** In scalar quantization, the entire vector is quantized as a single entity. This means that the entire vector is compressed into a single representation. It is simpler and more straightforward compared to product quantization. Scalar quantization is generally faster but may not be as memory-efficient as product quantization.

2. **Product Quantization:** In product quantization, the vector is divided into chunks or segments, and each segment is quantized individually. This allows for more efficient compression of high-dimensional vectors. Product quantization is recommended for high-dimensional vectors as it can achieve higher compression ratios than scalar quantization. However, product quantization may result in a loss of accuracy due to the approximation error introduced during quantization.

In summary, scalar quantization compresses the entire vector as a whole, while product quantization divides the vector into segments for more efficient compression, especially in high-dimensional spaces.","But there are some tradeoffs. Product quantization distance calculations are not SIMD-friendly, so it is slower than scalar quantization.

Also, product quantization has a loss of accuracy, so it is recommended to use it only for high-dimensional vectors.



Please refer to the [Quantization Tips](#quantization-tips) section for more information on how to optimize the quantization parameters for your use case.



## How to choose the right quantization method
. For example, on one of the previous releases we have scalar quantization and product quantization, which can compress up to 64 times the size of the vector. And we only keep in fast storage these compressed vectors.
- Deployment in a low-RAM environment where the limiting factor is the number of disk reads rather than the vector comparison itself

- Situations where the dimensionality of the original vectors is sufficiently high

- Cases where indexing speed is not a critical factor



In circumstances that do not align with the above, Scalar Quantization should be the preferred choice.



Qdrant documentation on [Product Quantization](/documentation/guides/quantization/#setting-up-product-quantization)
| 0        | 0        | 0                |



</details>



As you can see, both functions are equal up to a constant factor, which makes similarity search equivalent.

Binary quantization makes it efficient to compare vectors using this representation.





## Product Quantization



*Available as of v1.2.0*



Product quantization is a method of compressing vectors to minimize their memory usage by dividing them into 

chunks and quantizing each segment individually.
This can be particularly beneficial in large-scale applications where minimizing the use of resources is a top priority.

On the other hand, quantization introduces an approximation error, which can lead to a slight decrease in search quality.

The level of this tradeoff depends on the quantization method and its parameters, as well as the characteristics of the data.





## Scalar Quantization



*Available as of v1.1.0*","['But there are some tradeoffs. Product quantization distance calculations are not SIMD-friendly, so it is slower than scalar quantization.\n\nAlso, product quantization has a loss of accuracy, so it is recommended to use it only for high-dimensional vectors.\n\n\n\nPlease refer to the [Quantization Tips](#quantization-tips) section for more information on how to optimize the quantization parameters for your use case.\n\n\n\n## How to choose the right quantization method', '. For example, on one of the previous releases we have scalar quantization and product quantization, which can compress up to 64 times the size of the vector. And we only keep in fast storage these compressed vectors.', '- Deployment in a low-RAM environment where the limiting factor is the number of disk reads rather than the vector comparison itself\n\n- Situations where the dimensionality of the original vectors is sufficiently high\n\n- Cases where indexing speed is not a critical factor\n\n\n\nIn circumstances that do not align with the above, Scalar Quantization should be the preferred choice.\n\n\n\nQdrant documentation on [Product Quantization](/documentation/guides/quantization/#setting-up-product-quantization)', '| 0        | 0        | 0                |\n\n\n\n</details>\n\n\n\nAs you can see, both functions are equal up to a constant factor, which makes similarity search equivalent.\n\nBinary quantization makes it efficient to compare vectors using this representation.\n\n\n\n\n\n## Product Quantization\n\n\n\n*Available as of v1.2.0*\n\n\n\nProduct quantization is a method of compressing vectors to minimize their memory usage by dividing them into \n\nchunks and quantizing each segment individually.', 'This can be particularly beneficial in large-scale applications where minimizing the use of resources is a top priority.\n\nOn the other hand, quantization introduces an approximation error, which can lead to a slight decrease in search quality.\n\nThe level of this tradeoff depends on the quantization method and its parameters, as well as the characteristics of the data.\n\n\n\n\n\n## Scalar Quantization\n\n\n\n*Available as of v1.1.0*']","Question: What is difference between scalar and product quantization?\n\nContext: But there are some tradeoffs. Product quantization distance calculations are not SIMD-friendly, so it is slower than scalar quantization.

Also, product quantization has a loss of accuracy, so it is recommended to use it only for high-dimensional vectors.



Please refer to the [Quantization Tips](#quantization-tips) section for more information on how to optimize the quantization parameters for your use case.



## How to choose the right quantization method
. For example, on one of the previous releases we have scalar quantization and product quantization, which can compress up to 64 times the size of the vector. And we only keep in fast storage these compressed vectors.
- Deployment in a low-RAM environment where the limiting factor is the number of disk reads rather than the vector comparison itself

- Situations where the dimensionality of the original vectors is sufficiently high

- Cases where indexing speed is not a critical factor



In circumstances that do not align with the above, Scalar Quantization should be the preferred choice.



Qdrant documentation on [Product Quantization](/documentation/guides/quantization/#setting-up-product-quantization)
| 0        | 0        | 0                |



</details>



As you can see, both functions are equal up to a constant factor, which makes similarity search equivalent.

Binary quantization makes it efficient to compare vectors using this representation.





## Product Quantization



*Available as of v1.2.0*



Product quantization is a method of compressing vectors to minimize their memory usage by dividing them into 

chunks and quantizing each segment individually.
This can be particularly beneficial in large-scale applications where minimizing the use of resources is a top priority.

On the other hand, quantization introduces an approximation error, which can lead to a slight decrease in search quality.

The level of this tradeoff depends on the quantization method and its parameters, as well as the characteristics of the data.





## Scalar Quantization



*Available as of v1.1.0*\n\nAnswer:",What is difference between scalar and product quantization?,"While both methods aim to reduce the memory footprint and potentially speed up operations, scalar quantization offers faster processing with SIMD-friendly operations and minimal accuracy loss, making it suitable for scenarios where speed is critical. Product quantization achieves higher compression rates and is better suited for handling very high-dimensional vectors where memory space is more of a concern than computation speed.","['But there are some tradeoffs. Product quantization distance calculations are not SIMD-friendly, so it is slower than scalar quantization.\n\nAlso, product quantization has a loss of accuracy, so it is recommended to use it only for high-dimensional vectors.\n\n\n\nPlease refer to the [Quantization Tips](#quantization-tips) section for more information on how to optimize the quantization parameters for your use case.\n\n\n\n## How to choose the right quantization method', '. For example, on one of the previous releases we have scalar quantization and product quantization, which can compress up to 64 times the size of the vector. And we only keep in fast storage these compressed vectors.', '- Deployment in a low-RAM environment where the limiting factor is the number of disk reads rather than the vector comparison itself\n\n- Situations where the dimensionality of the original vectors is sufficiently high\n\n- Cases where indexing speed is not a critical factor\n\n\n\nIn circumstances that do not align with the above, Scalar Quantization should be the preferred choice.\n\n\n\nQdrant documentation on [Product Quantization](/documentation/guides/quantization/#setting-up-product-quantization)', '| 0        | 0        | 0                |\n\n\n\n</details>\n\n\n\nAs you can see, both functions are equal up to a constant factor, which makes similarity search equivalent.\n\nBinary quantization makes it efficient to compare vectors using this representation.\n\n\n\n\n\n## Product Quantization\n\n\n\n*Available as of v1.2.0*\n\n\n\nProduct quantization is a method of compressing vectors to minimize their memory usage by dividing them into \n\nchunks and quantizing each segment individually.', 'This can be particularly beneficial in large-scale applications where minimizing the use of resources is a top priority.\n\nOn the other hand, quantization introduces an approximation error, which can lead to a slight decrease in search quality.\n\nThe level of this tradeoff depends on the quantization method and its parameters, as well as the characteristics of the data.\n\n\n\n\n\n## Scalar Quantization\n\n\n\n*Available as of v1.1.0*']","But there are some tradeoffs. Product quantization distance calculations are not SIMD-friendly, so it is slower than scalar quantization.

Also, product quantization has a loss of accuracy, so it is recommended to use it only for high-dimensional vectors.



Please refer to the [Quantization Tips](#quantization-tips) section for more information on how to optimize the quantization parameters for your use case.



## How to choose the right quantization method
. For example, on one of the previous releases we have scalar quantization and product quantization, which can compress up to 64 times the size of the vector. And we only keep in fast storage these compressed vectors.
- Deployment in a low-RAM environment where the limiting factor is the number of disk reads rather than the vector comparison itself

- Situations where the dimensionality of the original vectors is sufficiently high

- Cases where indexing speed is not a critical factor



In circumstances that do not align with the above, Scalar Quantization should be the preferred choice.



Qdrant documentation on [Product Quantization](/documentation/guides/quantization/#setting-up-product-quantization)
| 0        | 0        | 0                |



</details>



As you can see, both functions are equal up to a constant factor, which makes similarity search equivalent.

Binary quantization makes it efficient to compare vectors using this representation.





## Product Quantization



*Available as of v1.2.0*



Product quantization is a method of compressing vectors to minimize their memory usage by dividing them into 

chunks and quantizing each segment individually.
This can be particularly beneficial in large-scale applications where minimizing the use of resources is a top priority.

On the other hand, quantization introduces an approximation error, which can lead to a slight decrease in search quality.

The level of this tradeoff depends on the quantization method and its parameters, as well as the characteristics of the data.





## Scalar Quantization



*Available as of v1.1.0*",0.2088607594936709,0.5409836065573771,0.3013698630136986,0.044585987261146494,0.11666666666666667,0.06451612903225806,0.12025316455696203,0.3114754098360656,0.17351598173515984,0.15822784810126583,0.4098360655737705,0.22831050228310507,0.8621220588684082,0.5283212065696716,0.6033067107200623,0.5633295774459839,0.6560483008903578,0.9800999257713556,164,2.6885245901639343,0.3989723167240361
True,,4150.371,50ce7c66,What is ‘best_score’ strategy?,"The `best_score` strategy is based on the idea of finding similar vectors by identifying those that are closer to a positive example while avoiding those that are closer to a negative one. This strategy measures each candidate against every example and selects the best positive and best negative scores. The final score is determined using a specific formula: if the best positive score is greater than the best negative score, the final score is set as the best positive score. Otherwise, the final score is calculated as the negative of the square of the best negative score. It is important to note that the performance of the `best_score` strategy is linearly impacted by the number of examples provided.","The 'best_score' strategy is a recommendation strategy introduced in version 1.6.0. This strategy aims to find similar vectors by considering the ones that are closer to a positive example while avoiding those closer to a negative example. In this strategy, multiple positive and negative examples can be provided to make the variety of results richer compared to the older strategy where only a single vector was considered.

To use the 'best_score' strategy in a recommendation request, you can set `""strategy"": ""best_score""` in the request parameters. The algorithm behind the 'best_score' strategy calculates a final score for each candidate by comparing their scores against every example provided (both positive and negative) and selecting the best positive and negative scores. The final score is determined based on these comparisons.

It's important to note that the performance of the 'best_score' strategy may be linearly impacted by the number of examples provided. Therefore, it's recommended to experiment with different strategies available (such as 'average_vector') to choose the one that best suits your specific use case.

In summary, the 'best_score' strategy in recommendation systems is designed to prioritize vectors that are closer to positive examples and further from negative examples when generating recommendations, offering a more nuanced approach to similarity calculation in comparison to traditional strategies.","This is the default strategy that's going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.



### Best score strategy



*Available as of v1.6.0*



A new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.
##### One positive and one negative example



<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>



The more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there 

is just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making 

the variety richer.
},

  ""strategy"": ""average_vector"",

  ""limit"": 3

}

```



There are two key changes in the request. First of all, we can adjust the strategy of search and set it to `average_vector` (the 

default) or `best_score`. Moreover, we can pass both IDs (`718`) and embeddings (`[0.2, 0.3, 0.4, 0.5]`) as both positive and 

negative examples. 



## HNSW ANN example and strategy
The way it works is that each candidate is measured against every example, then we select the best positive and best negative scores. The final score is chosen with this step formula:



```rust

let score = if best_positive_score > best_negative_score {

    best_positive_score;

} else {

    -(best_negative_score * best_negative_score);

};

```



<aside role=""alert"">

The performance of <code>best_score</code> strategy will be linearly impacted by the amount of examples.

</aside>
```



Example result of this API would be



```json

{

  ""result"": [

    { ""id"": 10, ""score"": 0.81 },

    { ""id"": 14, ""score"": 0.75 },

    { ""id"": 11, ""score"": 0.73 }

  ],

  ""status"": ""ok"",

  ""time"": 0.001

}

```



The algorithm used to get the recommendations is selected from the available `strategy` options. Each of them has its own strengths and weaknesses, so experiment and choose the one that works best for your case.



### Average vector strategy","['This is the default strategy that\'s going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.\n\n\n\n### Best score strategy\n\n\n\n*Available as of v1.6.0*\n\n\n\nA new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.', '##### One positive and one negative example\n\n\n\n<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>\n\n\n\nThe more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there \n\nis just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making \n\nthe variety richer.', '},\n\n  ""strategy"": ""average_vector"",\n\n  ""limit"": 3\n\n}\n\n```\n\n\n\nThere are two key changes in the request. First of all, we can adjust the strategy of search and set it to `average_vector` (the \n\ndefault) or `best_score`. Moreover, we can pass both IDs (`718`) and embeddings (`[0.2, 0.3, 0.4, 0.5]`) as both positive and \n\nnegative examples. \n\n\n\n## HNSW ANN example and strategy', 'The way it works is that each candidate is measured against every example, then we select the best positive and best negative scores. The final score is chosen with this step formula:\n\n\n\n```rust\n\nlet score = if best_positive_score > best_negative_score {\n\n    best_positive_score;\n\n} else {\n\n    -(best_negative_score * best_negative_score);\n\n};\n\n```\n\n\n\n<aside role=""alert"">\n\nThe performance of <code>best_score</code> strategy will be linearly impacted by the amount of examples.\n\n</aside>', '```\n\n\n\nExample result of this API would be\n\n\n\n```json\n\n{\n\n  ""result"": [\n\n    { ""id"": 10, ""score"": 0.81 },\n\n    { ""id"": 14, ""score"": 0.75 },\n\n    { ""id"": 11, ""score"": 0.73 }\n\n  ],\n\n  ""status"": ""ok"",\n\n  ""time"": 0.001\n\n}\n\n```\n\n\n\nThe algorithm used to get the recommendations is selected from the available `strategy` options. Each of them has its own strengths and weaknesses, so experiment and choose the one that works best for your case.\n\n\n\n### Average vector strategy']","Question: What is ‘best_score’ strategy?\n\nContext: This is the default strategy that's going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.



### Best score strategy



*Available as of v1.6.0*



A new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.
##### One positive and one negative example



<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>



The more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there 

is just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making 

the variety richer.
},

""strategy"": ""average_vector"",

""limit"": 3

}

```



There are two key changes in the request. First of all, we can adjust the strategy of search and set it to `average_vector` (the 

default) or `best_score`. Moreover, we can pass both IDs (`718`) and embeddings (`[0.2, 0.3, 0.4, 0.5]`) as both positive and 

negative examples. 



## HNSW ANN example and strategy
The way it works is that each candidate is measured against every example, then we select the best positive and best negative scores. The final score is chosen with this step formula:



```rust

let score = if best_positive_score > best_negative_score {

best_positive_score;

} else {

-(best_negative_score * best_negative_score);

};

```



<aside role=""alert"">

The performance of <code>best_score</code> strategy will be linearly impacted by the amount of examples.

</aside>
```



Example result of this API would be



```json

{

""result"": [

{ ""id"": 10, ""score"": 0.81 },

{ ""id"": 14, ""score"": 0.75 },

{ ""id"": 11, ""score"": 0.73 }

],

""status"": ""ok"",

""time"": 0.001

}

```



The algorithm used to get the recommendations is selected from the available `strategy` options. Each of them has its own strengths and weaknesses, so experiment and choose the one that works best for your case.



### Average vector strategy\n\nAnswer:",What is ‘best_score’ strategy?,"The `best_score` strategy is based on the idea of finding similar vectors by identifying those that are closer to a positive example while avoiding those that are closer to a negative one. This strategy measures each candidate against every example and selects the best positive and best negative scores. The final score is determined using a specific formula: if the best positive score is greater than the best negative score, the final score is set as the best positive score. Otherwise, the final score is calculated as the negative of the square of the best negative score. It is important to note that the performance of the `best_score` strategy is linearly impacted by the number of examples provided.","['This is the default strategy that\'s going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.\n\n\n\n### Best score strategy\n\n\n\n*Available as of v1.6.0*\n\n\n\nA new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.', '##### One positive and one negative example\n\n\n\n<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>\n\n\n\nThe more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there \n\nis just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making \n\nthe variety richer.', '},\n\n  ""strategy"": ""average_vector"",\n\n  ""limit"": 3\n\n}\n\n```\n\n\n\nThere are two key changes in the request. First of all, we can adjust the strategy of search and set it to `average_vector` (the \n\ndefault) or `best_score`. Moreover, we can pass both IDs (`718`) and embeddings (`[0.2, 0.3, 0.4, 0.5]`) as both positive and \n\nnegative examples. \n\n\n\n## HNSW ANN example and strategy', 'The way it works is that each candidate is measured against every example, then we select the best positive and best negative scores. The final score is chosen with this step formula:\n\n\n\n```rust\n\nlet score = if best_positive_score > best_negative_score {\n\n    best_positive_score;\n\n} else {\n\n    -(best_negative_score * best_negative_score);\n\n};\n\n```\n\n\n\n<aside role=""alert"">\n\nThe performance of <code>best_score</code> strategy will be linearly impacted by the amount of examples.\n\n</aside>', '```\n\n\n\nExample result of this API would be\n\n\n\n```json\n\n{\n\n  ""result"": [\n\n    { ""id"": 10, ""score"": 0.81 },\n\n    { ""id"": 14, ""score"": 0.75 },\n\n    { ""id"": 11, ""score"": 0.73 }\n\n  ],\n\n  ""status"": ""ok"",\n\n  ""time"": 0.001\n\n}\n\n```\n\n\n\nThe algorithm used to get the recommendations is selected from the available `strategy` options. Each of them has its own strengths and weaknesses, so experiment and choose the one that works best for your case.\n\n\n\n### Average vector strategy']","This is the default strategy that's going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.



### Best score strategy



*Available as of v1.6.0*



A new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.
##### One positive and one negative example



<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>



The more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there 

is just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making 

the variety richer.
},

  ""strategy"": ""average_vector"",

  ""limit"": 3

}

```



There are two key changes in the request. First of all, we can adjust the strategy of search and set it to `average_vector` (the 

default) or `best_score`. Moreover, we can pass both IDs (`718`) and embeddings (`[0.2, 0.3, 0.4, 0.5]`) as both positive and 

negative examples. 



## HNSW ANN example and strategy
The way it works is that each candidate is measured against every example, then we select the best positive and best negative scores. The final score is chosen with this step formula:



```rust

let score = if best_positive_score > best_negative_score {

    best_positive_score;

} else {

    -(best_negative_score * best_negative_score);

};

```



<aside role=""alert"">

The performance of <code>best_score</code> strategy will be linearly impacted by the amount of examples.

</aside>
```



Example result of this API would be



```json

{

  ""result"": [

    { ""id"": 10, ""score"": 0.81 },

    { ""id"": 14, ""score"": 0.75 },

    { ""id"": 11, ""score"": 0.73 }

  ],

  ""status"": ""ok"",

  ""time"": 0.001

}

```



The algorithm used to get the recommendations is selected from the available `strategy` options. Each of them has its own strengths and weaknesses, so experiment and choose the one that works best for your case.



### Average vector strategy",0.42,0.8235294117647058,0.5562913907284768,0.24120603015075376,0.4752475247524752,0.32,0.275,0.5392156862745098,0.3642384105960265,0.39,0.7647058823529411,0.5165562913907285,0.8174179792404175,0.6367075443267822,0.7200839519500732,0.6758339405059814,0.9682922417705413,0.9867676596157253,213,1.805084745762712,0.42261550919143137
True,,2304.167,cc8036f1,How does oversampling helps?,"Defines how many extra vectors should be pre-selected using quantized index, and then re-scored using original vectors. For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring. Oversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time.","Oversampling helps in equalizing the representation of classes in the training dataset, which in turn enables more fair and accurate modeling of real-world scenarios. By oversampling, you can improve the accuracy of search results at the cost of some performance. Oversampling works by pre-selecting a larger number of vectors using a quantized index, then re-scoring them with the original vectors, and finally selecting the top results up to a specified limit. This process allows for a more precise scoring of vectors and helps in controlling the precision of the search in real-time during query time. By adjusting the oversampling factor, you can find a balance between search speed and search quality, ultimately enhancing the accuracy of search results.","oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.
For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring.

Oversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time.



## Quantization tips



#### Accuracy tuning



In this section, we will discuss how to tune the search precision.
IO-induced delays.



Oversampling is a new feature to improve accuracy at the cost of some

performance. It allows setting a factor, which is multiplied with the `limit`

while doing the search. The results are then re-scored using the original vector

and only then the top results up to the limit are selected.



## Discussion



Looking back, disk IO used to be very serialized; re-positioning read-write

heads on moving platter was a slow and messy business. So the system overhead
3. Oversampling: Use an oversampling factor of 3 for the best balance between accuracy and efficiency. This factor is suitable for a wide range of applications.

4. Rescoring: Enable rescoring to improve the accuracy of search results.
Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user","['oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.', 'For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring.\n\nOversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time.\n\n\n\n## Quantization tips\n\n\n\n#### Accuracy tuning\n\n\n\nIn this section, we will discuss how to tune the search precision.', 'IO-induced delays.\n\n\n\nOversampling is a new feature to improve accuracy at the cost of some\n\nperformance. It allows setting a factor, which is multiplied with the `limit`\n\nwhile doing the search. The results are then re-scored using the original vector\n\nand only then the top results up to the limit are selected.\n\n\n\n## Discussion\n\n\n\nLooking back, disk IO used to be very serialized; re-positioning read-write\n\nheads on moving platter was a slow and messy business. So the system overhead', '3. Oversampling: Use an oversampling factor of 3 for the best balance between accuracy and efficiency. This factor is suitable for a wide range of applications.\n\n4. Rescoring: Enable rescoring to improve the accuracy of search results.', 'Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user']","Question: How does oversampling helps?\n\nContext: oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.
For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring.

Oversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time.



## Quantization tips



#### Accuracy tuning



In this section, we will discuss how to tune the search precision.
IO-induced delays.



Oversampling is a new feature to improve accuracy at the cost of some

performance. It allows setting a factor, which is multiplied with the `limit`

while doing the search. The results are then re-scored using the original vector

and only then the top results up to the limit are selected.



## Discussion



Looking back, disk IO used to be very serialized; re-positioning read-write

heads on moving platter was a slow and messy business. So the system overhead
3. Oversampling: Use an oversampling factor of 3 for the best balance between accuracy and efficiency. This factor is suitable for a wide range of applications.

4. Rescoring: Enable rescoring to improve the accuracy of search results.
Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user\n\nAnswer:",How does oversampling helps?,"Defines how many extra vectors should be pre-selected using quantized index, and then re-scored using original vectors. For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring. Oversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time.","['oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.', 'For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring.\n\nOversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time.\n\n\n\n## Quantization tips\n\n\n\n#### Accuracy tuning\n\n\n\nIn this section, we will discuss how to tune the search precision.', 'IO-induced delays.\n\n\n\nOversampling is a new feature to improve accuracy at the cost of some\n\nperformance. It allows setting a factor, which is multiplied with the `limit`\n\nwhile doing the search. The results are then re-scored using the original vector\n\nand only then the top results up to the limit are selected.\n\n\n\n## Discussion\n\n\n\nLooking back, disk IO used to be very serialized; re-positioning read-write\n\nheads on moving platter was a slow and messy business. So the system overhead', '3. Oversampling: Use an oversampling factor of 3 for the best balance between accuracy and efficiency. This factor is suitable for a wide range of applications.\n\n4. Rescoring: Enable rescoring to improve the accuracy of search results.', 'Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user']","oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.
For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring.

Oversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time.



## Quantization tips



#### Accuracy tuning



In this section, we will discuss how to tune the search precision.
IO-induced delays.



Oversampling is a new feature to improve accuracy at the cost of some

performance. It allows setting a factor, which is multiplied with the `limit`

while doing the search. The results are then re-scored using the original vector

and only then the top results up to the limit are selected.



## Discussion



Looking back, disk IO used to be very serialized; re-positioning read-write

heads on moving platter was a slow and messy business. So the system overhead
3. Oversampling: Use an oversampling factor of 3 for the best balance between accuracy and efficiency. This factor is suitable for a wide range of applications.

4. Rescoring: Enable rescoring to improve the accuracy of search results.
Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user",0.308411214953271,0.4852941176470588,0.37714285714285717,0.11320754716981132,0.1791044776119403,0.13872832369942198,0.205607476635514,0.3235294117647059,0.25142857142857145,0.2897196261682243,0.45588235294117646,0.35428571428571426,0.6981770992279053,0.6097796559333801,0.6544345617294312,0.6313183903694153,0.9995191600406542,0.9898496689274907,118,1.84375,0.6099458414458646
True,,2095.316,5c064b05,What is the purpose of ‘CreatePayloadIndexAsync’?,CreatePayloadIndexAsync is a method in the Qdrant library that enables the creation of a payload index in Qdrant. A payload index is a data structure designed to store supplemental information about the data stored in Qdrant. This method requires a Qdrant instance and a payload index name as input parameters.,"The purpose of the `CreatePayloadIndexAsync` method is to create an index for a specific field in a collection within the Qdrant database. The method allows you to specify the collection name, the field name to index, the schema type of the payload (e.g., Keyword or Text), and any additional parameters related to the indexing process, such as text indexing parameters in the case of text schema type. The method is asynchronous, meaning it can be called without blocking the main thread and can return a result once the index creation is complete.","client

    .createPayloadIndexAsync(

        ""{collection_name}"",

        ""name_of_the_field_to_index"",

        PayloadSchemaType.Keyword,

        null,

        null,

        null,

        null)

    .get();

```



```csharp

using Qdrant.Client;



var client = new QdrantClient(""localhost"", 6334);



await client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""name_of_the_field_to_index"");

```



Available field types are:
QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createPayloadIndexAsync(

        ""{collection_name}"",

        ""name_of_the_field_to_index"",

        PayloadSchemaType.Text,

        PayloadIndexParams.newBuilder()

            .setTextIndexParams(

                TextIndexParams.newBuilder()

                    .setTokenizer(TokenizerType.Word)

                    .setMinTokenLen(2)

                    .setMaxTokenLen(10)
.setMaxTokenLen(10)

                    .setLowercase(true)

                    .build())

            .build(),

        null,

        null,

        null)

    .get();

```



```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.CreatePayloadIndexAsync(

	collectionName: ""{collection_name}"",

	fieldName: ""name_of_the_field_to_index"",

	schemaType: PayloadSchemaType.Text,
client

    .create_field_index(

        ""{collection_name}"",

        ""name_of_the_field_to_index"",

        FieldType::Keyword,

        None,

        None,

    )

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.PayloadSchemaType;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createPayloadIndexAsync(
FieldType::Keyword,

        None,

        None,

    )

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.PayloadSchemaType;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createPayloadIndexAsync(

        ""{collection_name}"", ""group_id"", PayloadSchsemaType.Keyword, null, null, null, null)

    .get();

```","['client\n\n    .createPayloadIndexAsync(\n\n        ""{collection_name}"",\n\n        ""name_of_the_field_to_index"",\n\n        PayloadSchemaType.Keyword,\n\n        null,\n\n        null,\n\n        null,\n\n        null)\n\n    .get();\n\n```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""name_of_the_field_to_index"");\n\n```\n\n\n\nAvailable field types are:', 'QdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createPayloadIndexAsync(\n\n        ""{collection_name}"",\n\n        ""name_of_the_field_to_index"",\n\n        PayloadSchemaType.Text,\n\n        PayloadIndexParams.newBuilder()\n\n            .setTextIndexParams(\n\n                TextIndexParams.newBuilder()\n\n                    .setTokenizer(TokenizerType.Word)\n\n                    .setMinTokenLen(2)\n\n                    .setMaxTokenLen(10)', '.setMaxTokenLen(10)\n\n                    .setLowercase(true)\n\n                    .build())\n\n            .build(),\n\n        null,\n\n        null,\n\n        null)\n\n    .get();\n\n```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\nusing Qdrant.Client.Grpc;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreatePayloadIndexAsync(\n\n\tcollectionName: ""{collection_name}"",\n\n\tfieldName: ""name_of_the_field_to_index"",\n\n\tschemaType: PayloadSchemaType.Text,', 'client\n\n    .create_field_index(\n\n        ""{collection_name}"",\n\n        ""name_of_the_field_to_index"",\n\n        FieldType::Keyword,\n\n        None,\n\n        None,\n\n    )\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createPayloadIndexAsync(', 'FieldType::Keyword,\n\n        None,\n\n        None,\n\n    )\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createPayloadIndexAsync(\n\n        ""{collection_name}"", ""group_id"", PayloadSchsemaType.Keyword, null, null, null, null)\n\n    .get();\n\n```']","Question: What is the purpose of ‘CreatePayloadIndexAsync’?\n\nContext: client

.createPayloadIndexAsync(

""{collection_name}"",

""name_of_the_field_to_index"",

PayloadSchemaType.Keyword,

null,

null,

null,

null)

.get();

```



```csharp

using Qdrant.Client;



var client = new QdrantClient(""localhost"", 6334);



await client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""name_of_the_field_to_index"");

```



Available field types are:
QdrantClient client =

new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

.createPayloadIndexAsync(

""{collection_name}"",

""name_of_the_field_to_index"",

PayloadSchemaType.Text,

PayloadIndexParams.newBuilder()

.setTextIndexParams(

TextIndexParams.newBuilder()

.setTokenizer(TokenizerType.Word)

.setMinTokenLen(2)

.setMaxTokenLen(10)
.setMaxTokenLen(10)

.setLowercase(true)

.build())

.build(),

null,

null,

null)

.get();

```



```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.CreatePayloadIndexAsync(

collectionName: ""{collection_name}"",

fieldName: ""name_of_the_field_to_index"",

schemaType: PayloadSchemaType.Text,
client

.create_field_index(

""{collection_name}"",

""name_of_the_field_to_index"",

FieldType::Keyword,

None,

None,

)

.await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.PayloadSchemaType;



QdrantClient client =

new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

.createPayloadIndexAsync(
FieldType::Keyword,

None,

None,

)

.await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.PayloadSchemaType;



QdrantClient client =

new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

.createPayloadIndexAsync(

""{collection_name}"", ""group_id"", PayloadSchsemaType.Keyword, null, null, null, null)

.get();

```\n\nAnswer:",What is the purpose of ‘CreatePayloadIndexAsync’?,CreatePayloadIndexAsync is a method in the Qdrant library that enables the creation of a payload index in Qdrant. A payload index is a data structure designed to store supplemental information about the data stored in Qdrant. This method requires a Qdrant instance and a payload index name as input parameters.,"['client\n\n    .createPayloadIndexAsync(\n\n        ""{collection_name}"",\n\n        ""name_of_the_field_to_index"",\n\n        PayloadSchemaType.Keyword,\n\n        null,\n\n        null,\n\n        null,\n\n        null)\n\n    .get();\n\n```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""name_of_the_field_to_index"");\n\n```\n\n\n\nAvailable field types are:', 'QdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createPayloadIndexAsync(\n\n        ""{collection_name}"",\n\n        ""name_of_the_field_to_index"",\n\n        PayloadSchemaType.Text,\n\n        PayloadIndexParams.newBuilder()\n\n            .setTextIndexParams(\n\n                TextIndexParams.newBuilder()\n\n                    .setTokenizer(TokenizerType.Word)\n\n                    .setMinTokenLen(2)\n\n                    .setMaxTokenLen(10)', '.setMaxTokenLen(10)\n\n                    .setLowercase(true)\n\n                    .build())\n\n            .build(),\n\n        null,\n\n        null,\n\n        null)\n\n    .get();\n\n```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\nusing Qdrant.Client.Grpc;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreatePayloadIndexAsync(\n\n\tcollectionName: ""{collection_name}"",\n\n\tfieldName: ""name_of_the_field_to_index"",\n\n\tschemaType: PayloadSchemaType.Text,', 'client\n\n    .create_field_index(\n\n        ""{collection_name}"",\n\n        ""name_of_the_field_to_index"",\n\n        FieldType::Keyword,\n\n        None,\n\n        None,\n\n    )\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createPayloadIndexAsync(', 'FieldType::Keyword,\n\n        None,\n\n        None,\n\n    )\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createPayloadIndexAsync(\n\n        ""{collection_name}"", ""group_id"", PayloadSchsemaType.Keyword, null, null, null, null)\n\n    .get();\n\n```']","client

    .createPayloadIndexAsync(

        ""{collection_name}"",

        ""name_of_the_field_to_index"",

        PayloadSchemaType.Keyword,

        null,

        null,

        null,

        null)

    .get();

```



```csharp

using Qdrant.Client;



var client = new QdrantClient(""localhost"", 6334);



await client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""name_of_the_field_to_index"");

```



Available field types are:
QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createPayloadIndexAsync(

        ""{collection_name}"",

        ""name_of_the_field_to_index"",

        PayloadSchemaType.Text,

        PayloadIndexParams.newBuilder()

            .setTextIndexParams(

                TextIndexParams.newBuilder()

                    .setTokenizer(TokenizerType.Word)

                    .setMinTokenLen(2)

                    .setMaxTokenLen(10)
.setMaxTokenLen(10)

                    .setLowercase(true)

                    .build())

            .build(),

        null,

        null,

        null)

    .get();

```



```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.CreatePayloadIndexAsync(

	collectionName: ""{collection_name}"",

	fieldName: ""name_of_the_field_to_index"",

	schemaType: PayloadSchemaType.Text,
client

    .create_field_index(

        ""{collection_name}"",

        ""name_of_the_field_to_index"",

        FieldType::Keyword,

        None,

        None,

    )

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.PayloadSchemaType;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createPayloadIndexAsync(
FieldType::Keyword,

        None,

        None,

    )

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.PayloadSchemaType;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createPayloadIndexAsync(

        ""{collection_name}"", ""group_id"", PayloadSchsemaType.Keyword, null, null, null, null)

    .get();

```",0.25,0.4634146341463415,0.3247863247863248,0.013333333333333334,0.025,0.017391304347826087,0.15789473684210525,0.2926829268292683,0.20512820512820512,0.23684210526315788,0.43902439024390244,0.3076923076923077,0.813582181930542,0.6027269959449768,0.6518106460571289,0.6263086795806885,0.9655757080763578,0.9484348384042581,92,1.84,0.5731939368168172
True,,2559.667,baf29c87,What is the purpose of ef_construct in HNSW ?,"In HNSW algorithm the ef_construct parameter is the number of neighbours to consider during the index building. The larger the value, the higher the precision, but the longer the indexing time. The default values of this parameters 100","The purpose of the `ef_construct` parameter in HNSW (Hierarchical Navigable Small World) is to control the search performance of the algorithm. Specifically, `ef_construct` sets the size of the dynamic list of candidates during the construction of the graph in the HNSW algorithm. This parameter affects the trade-off between search accuracy and search speed. A higher value of `ef_construct` can lead to a more accurate search at the cost of increased computational complexity during the construction phase. On the other hand, a lower value can speed up the construction phase but might sacrifice some search accuracy. Adjusting the `ef_construct` parameter allows users to customize the behavior of the HNSW algorithm based on their specific requirements for search performance.","""m"": 32,

                ""ef_construct"": 123

            },

            ""quantization_config"": {

                ""product"": {

                    ""compression"": ""x32"",

                    ""always_ram"": true

                }

            },

            ""on_disk"": true

        }

    },

    ""hnsw_config"": {

        ""ef_construct"": 123

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""quantile"": 0.8,
""hnsw_config"": {

        ""ef_construct"": 123

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""quantile"": 0.8,

            ""always_ram"": false

        }

    }

}

```



```bash

curl -X PATCH http://localhost:6333/collections/test_collection1 \

  -H 'Content-Type: application/json' \

  --data-raw '{

    ""vectors"": {

        ""my_vector"": {

            ""hnsw_config"": {

                ""m"": 32,

                ""ef_construct"": 123
```http

PATCH /collections/{collection_name}

{

    ""vectors"": {

        ""my_vector"": {

            ""hnsw_config"": {

                ""m"": 32,

                ""ef_construct"": 123

            },

            ""quantization_config"": {

                ""product"": {

                    ""compression"": ""x32"",

                    ""always_ram"": true

                }

            },

            ""on_disk"": true

        }

    },

    ""hnsw_config"": {

        ""ef_construct"": 123

    },
(""my_vector"".into()),

                        VectorParamsDiff {

                            hnsw_config: Some(HnswConfigDiff {

                                m: Some(32),

                                ef_construct: Some(123),

                                ..Default::default()

                            }),

                            ..Default::default()

                        },

                    )]),

                },

            )),

        }),
ef_construct: 123,

  },

  quantization_config: {

    scalar: {

      type: ""int8"",

      quantile: 0.8,

      always_ram: true,

    },

  },

});

```



```rust

use qdrant_client::client::QdrantClient;

use qdrant_client::qdrant::{

    quantization_config_diff::Quantization, vectors_config_diff::Config, HnswConfigDiff,

    QuantizationConfigDiff, QuantizationType, ScalarQuantization, VectorParamsDiff,

    VectorsConfigDiff,

};



client

    .update_collection(","['""m"": 32,\n\n                ""ef_construct"": 123\n\n            },\n\n            ""quantization_config"": {\n\n                ""product"": {\n\n                    ""compression"": ""x32"",\n\n                    ""always_ram"": true\n\n                }\n\n            },\n\n            ""on_disk"": true\n\n        }\n\n    },\n\n    ""hnsw_config"": {\n\n        ""ef_construct"": 123\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""quantile"": 0.8,', '""hnsw_config"": {\n\n        ""ef_construct"": 123\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""quantile"": 0.8,\n\n            ""always_ram"": false\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```bash\n\ncurl -X PATCH http://localhost:6333/collections/test_collection1 \\\n\n  -H \'Content-Type: application/json\' \\\n\n  --data-raw \'{\n\n    ""vectors"": {\n\n        ""my_vector"": {\n\n            ""hnsw_config"": {\n\n                ""m"": 32,\n\n                ""ef_construct"": 123', '```http\n\nPATCH /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""my_vector"": {\n\n            ""hnsw_config"": {\n\n                ""m"": 32,\n\n                ""ef_construct"": 123\n\n            },\n\n            ""quantization_config"": {\n\n                ""product"": {\n\n                    ""compression"": ""x32"",\n\n                    ""always_ram"": true\n\n                }\n\n            },\n\n            ""on_disk"": true\n\n        }\n\n    },\n\n    ""hnsw_config"": {\n\n        ""ef_construct"": 123\n\n    },', '(""my_vector"".into()),\n\n                        VectorParamsDiff {\n\n                            hnsw_config: Some(HnswConfigDiff {\n\n                                m: Some(32),\n\n                                ef_construct: Some(123),\n\n                                ..Default::default()\n\n                            }),\n\n                            ..Default::default()\n\n                        },\n\n                    )]),\n\n                },\n\n            )),\n\n        }),', 'ef_construct: 123,\n\n  },\n\n  quantization_config: {\n\n    scalar: {\n\n      type: ""int8"",\n\n      quantile: 0.8,\n\n      always_ram: true,\n\n    },\n\n  },\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::client::QdrantClient;\n\nuse qdrant_client::qdrant::{\n\n    quantization_config_diff::Quantization, vectors_config_diff::Config, HnswConfigDiff,\n\n    QuantizationConfigDiff, QuantizationType, ScalarQuantization, VectorParamsDiff,\n\n    VectorsConfigDiff,\n\n};\n\n\n\nclient\n\n    .update_collection(']","Question: What is the purpose of ef_construct in HNSW ?\n\nContext: ""m"": 32,

""ef_construct"": 123

},

""quantization_config"": {

""product"": {

""compression"": ""x32"",

""always_ram"": true

}

},

""on_disk"": true

}

},

""hnsw_config"": {

""ef_construct"": 123

},

""quantization_config"": {

""scalar"": {

""type"": ""int8"",

""quantile"": 0.8,
""hnsw_config"": {

""ef_construct"": 123

},

""quantization_config"": {

""scalar"": {

""type"": ""int8"",

""quantile"": 0.8,

""always_ram"": false

}

}

}

```



```bash

curl -X PATCH http://localhost:6333/collections/test_collection1 \

-H 'Content-Type: application/json' \

--data-raw '{

""vectors"": {

""my_vector"": {

""hnsw_config"": {

""m"": 32,

""ef_construct"": 123
```http

PATCH /collections/{collection_name}

{

""vectors"": {

""my_vector"": {

""hnsw_config"": {

""m"": 32,

""ef_construct"": 123

},

""quantization_config"": {

""product"": {

""compression"": ""x32"",

""always_ram"": true

}

},

""on_disk"": true

}

},

""hnsw_config"": {

""ef_construct"": 123

},
(""my_vector"".into()),

VectorParamsDiff {

hnsw_config: Some(HnswConfigDiff {

m: Some(32),

ef_construct: Some(123),

..Default::default()

}),

..Default::default()

},

)]),

},

)),

}),
ef_construct: 123,

},

quantization_config: {

scalar: {

type: ""int8"",

quantile: 0.8,

always_ram: true,

},

},

});

```



```rust

use qdrant_client::client::QdrantClient;

use qdrant_client::qdrant::{

quantization_config_diff::Quantization, vectors_config_diff::Config, HnswConfigDiff,

QuantizationConfigDiff, QuantizationType, ScalarQuantization, VectorParamsDiff,

VectorsConfigDiff,

};



client

.update_collection(\n\nAnswer:",What is the purpose of ef_construct in HNSW ?,"In HNSW algorithm the ef_construct parameter is the number of neighbours to consider during the index building. The larger the value, the higher the precision, but the longer the indexing time. The default values of this parameters 100","['""m"": 32,\n\n                ""ef_construct"": 123\n\n            },\n\n            ""quantization_config"": {\n\n                ""product"": {\n\n                    ""compression"": ""x32"",\n\n                    ""always_ram"": true\n\n                }\n\n            },\n\n            ""on_disk"": true\n\n        }\n\n    },\n\n    ""hnsw_config"": {\n\n        ""ef_construct"": 123\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""quantile"": 0.8,', '""hnsw_config"": {\n\n        ""ef_construct"": 123\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""quantile"": 0.8,\n\n            ""always_ram"": false\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```bash\n\ncurl -X PATCH http://localhost:6333/collections/test_collection1 \\\n\n  -H \'Content-Type: application/json\' \\\n\n  --data-raw \'{\n\n    ""vectors"": {\n\n        ""my_vector"": {\n\n            ""hnsw_config"": {\n\n                ""m"": 32,\n\n                ""ef_construct"": 123', '```http\n\nPATCH /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""my_vector"": {\n\n            ""hnsw_config"": {\n\n                ""m"": 32,\n\n                ""ef_construct"": 123\n\n            },\n\n            ""quantization_config"": {\n\n                ""product"": {\n\n                    ""compression"": ""x32"",\n\n                    ""always_ram"": true\n\n                }\n\n            },\n\n            ""on_disk"": true\n\n        }\n\n    },\n\n    ""hnsw_config"": {\n\n        ""ef_construct"": 123\n\n    },', '(""my_vector"".into()),\n\n                        VectorParamsDiff {\n\n                            hnsw_config: Some(HnswConfigDiff {\n\n                                m: Some(32),\n\n                                ef_construct: Some(123),\n\n                                ..Default::default()\n\n                            }),\n\n                            ..Default::default()\n\n                        },\n\n                    )]),\n\n                },\n\n            )),\n\n        }),', 'ef_construct: 123,\n\n  },\n\n  quantization_config: {\n\n    scalar: {\n\n      type: ""int8"",\n\n      quantile: 0.8,\n\n      always_ram: true,\n\n    },\n\n  },\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::client::QdrantClient;\n\nuse qdrant_client::qdrant::{\n\n    quantization_config_diff::Quantization, vectors_config_diff::Config, HnswConfigDiff,\n\n    QuantizationConfigDiff, QuantizationType, ScalarQuantization, VectorParamsDiff,\n\n    VectorsConfigDiff,\n\n};\n\n\n\nclient\n\n    .update_collection(']","""m"": 32,

                ""ef_construct"": 123

            },

            ""quantization_config"": {

                ""product"": {

                    ""compression"": ""x32"",

                    ""always_ram"": true

                }

            },

            ""on_disk"": true

        }

    },

    ""hnsw_config"": {

        ""ef_construct"": 123

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""quantile"": 0.8,
""hnsw_config"": {

        ""ef_construct"": 123

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""quantile"": 0.8,

            ""always_ram"": false

        }

    }

}

```



```bash

curl -X PATCH http://localhost:6333/collections/test_collection1 \

  -H 'Content-Type: application/json' \

  --data-raw '{

    ""vectors"": {

        ""my_vector"": {

            ""hnsw_config"": {

                ""m"": 32,

                ""ef_construct"": 123
```http

PATCH /collections/{collection_name}

{

    ""vectors"": {

        ""my_vector"": {

            ""hnsw_config"": {

                ""m"": 32,

                ""ef_construct"": 123

            },

            ""quantization_config"": {

                ""product"": {

                    ""compression"": ""x32"",

                    ""always_ram"": true

                }

            },

            ""on_disk"": true

        }

    },

    ""hnsw_config"": {

        ""ef_construct"": 123

    },
(""my_vector"".into()),

                        VectorParamsDiff {

                            hnsw_config: Some(HnswConfigDiff {

                                m: Some(32),

                                ef_construct: Some(123),

                                ..Default::default()

                            }),

                            ..Default::default()

                        },

                    )]),

                },

            )),

        }),
ef_construct: 123,

  },

  quantization_config: {

    scalar: {

      type: ""int8"",

      quantile: 0.8,

      always_ram: true,

    },

  },

});

```



```rust

use qdrant_client::client::QdrantClient;

use qdrant_client::qdrant::{

    quantization_config_diff::Quantization, vectors_config_diff::Config, HnswConfigDiff,

    QuantizationConfigDiff, QuantizationType, ScalarQuantization, VectorParamsDiff,

    VectorsConfigDiff,

};



client

    .update_collection(",0.16666666666666666,0.5862068965517241,0.2595419847328244,0.0594059405940594,0.21428571428571427,0.0930232558139535,0.11764705882352941,0.41379310344827586,0.183206106870229,0.11764705882352941,0.41379310344827586,0.183206106870229,0.7966057062149048,0.5398856401443481,0.6224913001060486,0.5782532691955566,0.2127093573411306,0.05668282508850098,117,3.0789473684210527,0.3351156387750175
True,,5144.2480000000005,5ee66789,How do you use ‘ordering’ parameter?,"Write ordering can be specified for any write request to serialize it through a single “leader” node, which ensures that all write operations (issued with the same ordering) are performed and observed sequentially. It is of 3 types weak , medium and strong and is used in python with additional param ordering=models.WriteOrdering.STRONG to upsert request.","To use the `ordering` parameter with update and delete operations in Qdrant, you need to specify it in the operation request. Here is an example of how you can use the `ordering` parameter:

```typescript
client.updateAsync(

UpdateRequest.newBuilder()
.setCollectionName(""{collection_name}"")
.setPointId(id(123))
.setData(ByteString.copyFromUtf8(""{updated_data}""))
.setOrdering(Ordering.newBuilder().setOrder(1)) // Specify the order here
.build()
)
```

In the above code snippet, the `setOrdering` method is used to specify the order in which the update operation should be executed. By setting the `order` value to a specific number (e.g., 1), you ensure that the update operation is executed in that order on all replicas.

Similarly, you can use the `ordering` parameter with delete operations as well:

```typescript
client.deleteAsync(

DeleteRequest.newBuilder()
.setCollectionName(""{collection_name}"")
.setPointId(id(456))
.setOrdering(Ordering.newBuilder().setOrder(2)) // Specify the order here
.build()
)
```

By specifying the `ordering` parameter in your update and delete requests, you can ensure that the operations are executed in the same order on all replicas, thereby avoiding data inconsistency in case of concurrent updates of the same documents.","- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents
WITH ENGINE = ""qdrant"",

PARAMETERS = {

    ""location"": "":memory:"",

    ""collection_config"": {

        ""size"": 386,

        ""distance"": ""Cosine""

    }

}

```



The available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).



## Creating a new table
using: Some(""image"".to_string()),

        limit: 10,

        ..Default::default()

    })

    .await?;

```



```java

import java.util.List;



import static io.qdrant.client.PointIdFactory.id;



import io.qdrant.client.grpc.Points.RecommendPoints;



client

    .recommendAsync(

        RecommendPoints.newBuilder()

            .setCollectionName(""{collection_name}"")

            .addAllPositive(List.of(id(100), id(231)))

            .addAllNegative(List.of(id(718)))
key=""city"",

            match=models.MatchValue(

                value=""London"",

            ),

        )

    ]

)



recommend_queries = [

    models.RecommendRequest(

        positive=[100, 231], negative=[718], filter=filter, limit=3

    ),

    models.RecommendRequest(positive=[200, 67], negative=[300], filter=filter, limit=3),

]



client.recommend_batch(collection_name=""{collection_name}"", requests=recommend_queries)

```



```typescript
must=[

                            models.FieldCondition(

                                key=""food"", match=models.MatchValue(value=""meat"")

                            ),

                            models.FieldCondition(

                                key=""likes"", match=models.MatchValue(value=True)

                            ),

                        ]

                    ),

                )

            )

        ],

    ),

)

```



```typescript","['- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents', 'WITH ENGINE = ""qdrant"",\n\nPARAMETERS = {\n\n    ""location"": "":memory:"",\n\n    ""collection_config"": {\n\n        ""size"": 386,\n\n        ""distance"": ""Cosine""\n\n    }\n\n}\n\n```\n\n\n\nThe available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).\n\n\n\n## Creating a new table', 'using: Some(""image"".to_string()),\n\n        limit: 10,\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport static io.qdrant.client.PointIdFactory.id;\n\n\n\nimport io.qdrant.client.grpc.Points.RecommendPoints;\n\n\n\nclient\n\n    .recommendAsync(\n\n        RecommendPoints.newBuilder()\n\n            .setCollectionName(""{collection_name}"")\n\n            .addAllPositive(List.of(id(100), id(231)))\n\n            .addAllNegative(List.of(id(718)))', 'key=""city"",\n\n            match=models.MatchValue(\n\n                value=""London"",\n\n            ),\n\n        )\n\n    ]\n\n)\n\n\n\nrecommend_queries = [\n\n    models.RecommendRequest(\n\n        positive=[100, 231], negative=[718], filter=filter, limit=3\n\n    ),\n\n    models.RecommendRequest(positive=[200, 67], negative=[300], filter=filter, limit=3),\n\n]\n\n\n\nclient.recommend_batch(collection_name=""{collection_name}"", requests=recommend_queries)\n\n```\n\n\n\n```typescript', 'must=[\n\n                            models.FieldCondition(\n\n                                key=""food"", match=models.MatchValue(value=""meat"")\n\n                            ),\n\n                            models.FieldCondition(\n\n                                key=""likes"", match=models.MatchValue(value=True)\n\n                            ),\n\n                        ]\n\n                    ),\n\n                )\n\n            )\n\n        ],\n\n    ),\n\n)\n\n```\n\n\n\n```typescript']","Question: How do you use ‘ordering’ parameter?\n\nContext: - Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents
WITH ENGINE = ""qdrant"",

PARAMETERS = {

""location"": "":memory:"",

""collection_config"": {

""size"": 386,

""distance"": ""Cosine""

}

}

```



The available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).



## Creating a new table
using: Some(""image"".to_string()),

limit: 10,

..Default::default()

})

.await?;

```



```java

import java.util.List;



import static io.qdrant.client.PointIdFactory.id;



import io.qdrant.client.grpc.Points.RecommendPoints;



client

.recommendAsync(

RecommendPoints.newBuilder()

.setCollectionName(""{collection_name}"")

.addAllPositive(List.of(id(100), id(231)))

.addAllNegative(List.of(id(718)))
key=""city"",

match=models.MatchValue(

value=""London"",

),

)

]

)



recommend_queries = [

models.RecommendRequest(

positive=[100, 231], negative=[718], filter=filter, limit=3

),

models.RecommendRequest(positive=[200, 67], negative=[300], filter=filter, limit=3),

]



client.recommend_batch(collection_name=""{collection_name}"", requests=recommend_queries)

```



```typescript
must=[

models.FieldCondition(

key=""food"", match=models.MatchValue(value=""meat"")

),

models.FieldCondition(

key=""likes"", match=models.MatchValue(value=True)

),

]

),

)

)

],

),

)

```



```typescript\n\nAnswer:",How do you use ‘ordering’ parameter?,"Write ordering can be specified for any write request to serialize it through a single “leader” node, which ensures that all write operations (issued with the same ordering) are performed and observed sequentially. It is of 3 types weak , medium and strong and is used in python with additional param ordering=models.WriteOrdering.STRONG to upsert request.","['- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents', 'WITH ENGINE = ""qdrant"",\n\nPARAMETERS = {\n\n    ""location"": "":memory:"",\n\n    ""collection_config"": {\n\n        ""size"": 386,\n\n        ""distance"": ""Cosine""\n\n    }\n\n}\n\n```\n\n\n\nThe available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).\n\n\n\n## Creating a new table', 'using: Some(""image"".to_string()),\n\n        limit: 10,\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport static io.qdrant.client.PointIdFactory.id;\n\n\n\nimport io.qdrant.client.grpc.Points.RecommendPoints;\n\n\n\nclient\n\n    .recommendAsync(\n\n        RecommendPoints.newBuilder()\n\n            .setCollectionName(""{collection_name}"")\n\n            .addAllPositive(List.of(id(100), id(231)))\n\n            .addAllNegative(List.of(id(718)))', 'key=""city"",\n\n            match=models.MatchValue(\n\n                value=""London"",\n\n            ),\n\n        )\n\n    ]\n\n)\n\n\n\nrecommend_queries = [\n\n    models.RecommendRequest(\n\n        positive=[100, 231], negative=[718], filter=filter, limit=3\n\n    ),\n\n    models.RecommendRequest(positive=[200, 67], negative=[300], filter=filter, limit=3),\n\n]\n\n\n\nclient.recommend_batch(collection_name=""{collection_name}"", requests=recommend_queries)\n\n```\n\n\n\n```typescript', 'must=[\n\n                            models.FieldCondition(\n\n                                key=""food"", match=models.MatchValue(value=""meat"")\n\n                            ),\n\n                            models.FieldCondition(\n\n                                key=""likes"", match=models.MatchValue(value=True)\n\n                            ),\n\n                        ]\n\n                    ),\n\n                )\n\n            )\n\n        ],\n\n    ),\n\n)\n\n```\n\n\n\n```typescript']","- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents
WITH ENGINE = ""qdrant"",

PARAMETERS = {

    ""location"": "":memory:"",

    ""collection_config"": {

        ""size"": 386,

        ""distance"": ""Cosine""

    }

}

```



The available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).



## Creating a new table
using: Some(""image"".to_string()),

        limit: 10,

        ..Default::default()

    })

    .await?;

```



```java

import java.util.List;



import static io.qdrant.client.PointIdFactory.id;



import io.qdrant.client.grpc.Points.RecommendPoints;



client

    .recommendAsync(

        RecommendPoints.newBuilder()

            .setCollectionName(""{collection_name}"")

            .addAllPositive(List.of(id(100), id(231)))

            .addAllNegative(List.of(id(718)))
key=""city"",

            match=models.MatchValue(

                value=""London"",

            ),

        )

    ]

)



recommend_queries = [

    models.RecommendRequest(

        positive=[100, 231], negative=[718], filter=filter, limit=3

    ),

    models.RecommendRequest(positive=[200, 67], negative=[300], filter=filter, limit=3),

]



client.recommend_batch(collection_name=""{collection_name}"", requests=recommend_queries)

```



```typescript
must=[

                            models.FieldCondition(

                                key=""food"", match=models.MatchValue(value=""meat"")

                            ),

                            models.FieldCondition(

                                key=""likes"", match=models.MatchValue(value=True)

                            ),

                        ]

                    ),

                )

            )

        ],

    ),

)

```



```typescript",0.16770186335403728,0.4909090909090909,0.25,0.01875,0.05555555555555555,0.028037383177570093,0.08074534161490683,0.23636363636363636,0.12037037037037035,0.13043478260869565,0.38181818181818183,0.19444444444444445,0.34137922525405884,0.507283627986908,0.5708910822868347,0.5372111201286316,0.7453323882073164,0.29869525134563446,168,3.0,0.244243015878817
True,,1592.6,79ea1dc8,What is significance of ‘on_disk_payload’ setting?,"The `on_disk_payload` setting in the storage configuration determines whether a point's payload will be stored in memory or read from disk every time it is requested. When set to `true`, the point's payload will not be stored in memory, saving RAM but slightly increasing the response time as the data needs to be retrieved from disk. It is important to note that payload values involved in filtering and indexed values will still remain in RAM for efficient access. This setting allows for a balance between RAM usage and response time in handling data storage and retrieval processes.","The `on_disk_payload` setting in the context provided determines where the payload data is stored. If set to `true`, the payload data will be stored on disk only. This setting can be useful for limiting RAM usage, especially in cases where the payload data is large. By storing the payload data on disk, it helps to manage memory resources efficiently, as only the necessary data is kept in memory while the rest is stored on disk.","* `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.

* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.

* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.
""on_disk_payload"": false

            },

            ""hnsw_config"": {

                ""m"": 16,

                ""ef_construct"": 100,

                ""full_scan_threshold"": 10000,

                ""max_indexing_threads"": 0

            },

            ""optimizer_config"": {

                ""deleted_threshold"": 0.2,

                ""vacuum_min_vector_number"": 1000,

                ""default_segment_number"": 0,

                ""max_segment_size"": null,
```http

POST /collections/{collection_name}/points/payload

{

    ""payload"": {

        ""property1"": ""string"",

        ""property2"": ""string""

    },

    ""filter"": {

        ""must"": [

            {

                ""key"": ""color"",

                ""match"": {

                    ""value"": ""red""

                }

            }

        ]

    }

}

```



```python

client.set_payload(

    collection_name=""{collection_name}"",

    payload={

        ""property1"": ""string"",
To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""hnsw_config"": {

        ""on_disk"": true

    }

}

```



```python
""shard_key"": [""cats"", ""dogs""],

    ""limit"": 10,

    ""with_payload"": true,

}

```



If you want to know more about the user-defined sharding, please refer to the [sharding documentation](/documentation/guides/distributed_deployment/#sharding).



### Snapshot-based shard transfer","['* `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.\n\n* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.\n\n* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.', '""on_disk_payload"": false\n\n            },\n\n            ""hnsw_config"": {\n\n                ""m"": 16,\n\n                ""ef_construct"": 100,\n\n                ""full_scan_threshold"": 10000,\n\n                ""max_indexing_threads"": 0\n\n            },\n\n            ""optimizer_config"": {\n\n                ""deleted_threshold"": 0.2,\n\n                ""vacuum_min_vector_number"": 1000,\n\n                ""default_segment_number"": 0,\n\n                ""max_segment_size"": null,', '```http\n\nPOST /collections/{collection_name}/points/payload\n\n{\n\n    ""payload"": {\n\n        ""property1"": ""string"",\n\n        ""property2"": ""string""\n\n    },\n\n    ""filter"": {\n\n        ""must"": [\n\n            {\n\n                ""key"": ""color"",\n\n                ""match"": {\n\n                    ""value"": ""red""\n\n                }\n\n            }\n\n        ]\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.set_payload(\n\n    collection_name=""{collection_name}"",\n\n    payload={\n\n        ""property1"": ""string"",', 'To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""hnsw_config"": {\n\n        ""on_disk"": true\n\n    }\n\n}\n\n```\n\n\n\n```python', '""shard_key"": [""cats"", ""dogs""],\n\n    ""limit"": 10,\n\n    ""with_payload"": true,\n\n}\n\n```\n\n\n\nIf you want to know more about the user-defined sharding, please refer to the [sharding documentation](/documentation/guides/distributed_deployment/#sharding).\n\n\n\n### Snapshot-based shard transfer']","Question: What is significance of ‘on_disk_payload’ setting?\n\nContext: * `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.

* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.

* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.
""on_disk_payload"": false

},

""hnsw_config"": {

""m"": 16,

""ef_construct"": 100,

""full_scan_threshold"": 10000,

""max_indexing_threads"": 0

},

""optimizer_config"": {

""deleted_threshold"": 0.2,

""vacuum_min_vector_number"": 1000,

""default_segment_number"": 0,

""max_segment_size"": null,
```http

POST /collections/{collection_name}/points/payload

{

""payload"": {

""property1"": ""string"",

""property2"": ""string""

},

""filter"": {

""must"": [

{

""key"": ""color"",

""match"": {

""value"": ""red""

}

}

]

}

}

```



```python

client.set_payload(

collection_name=""{collection_name}"",

payload={

""property1"": ""string"",
To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,

""distance"": ""Cosine""

},

""optimizers_config"": {

""memmap_threshold"": 20000

},

""hnsw_config"": {

""on_disk"": true

}

}

```



```python
""shard_key"": [""cats"", ""dogs""],

""limit"": 10,

""with_payload"": true,

}

```



If you want to know more about the user-defined sharding, please refer to the [sharding documentation](/documentation/guides/distributed_deployment/#sharding).



### Snapshot-based shard transfer\n\nAnswer:",What is significance of ‘on_disk_payload’ setting?,"The `on_disk_payload` setting in the storage configuration determines whether a point's payload will be stored in memory or read from disk every time it is requested. When set to `true`, the point's payload will not be stored in memory, saving RAM but slightly increasing the response time as the data needs to be retrieved from disk. It is important to note that payload values involved in filtering and indexed values will still remain in RAM for efficient access. This setting allows for a balance between RAM usage and response time in handling data storage and retrieval processes.","['* `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.\n\n* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.\n\n* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.', '""on_disk_payload"": false\n\n            },\n\n            ""hnsw_config"": {\n\n                ""m"": 16,\n\n                ""ef_construct"": 100,\n\n                ""full_scan_threshold"": 10000,\n\n                ""max_indexing_threads"": 0\n\n            },\n\n            ""optimizer_config"": {\n\n                ""deleted_threshold"": 0.2,\n\n                ""vacuum_min_vector_number"": 1000,\n\n                ""default_segment_number"": 0,\n\n                ""max_segment_size"": null,', '```http\n\nPOST /collections/{collection_name}/points/payload\n\n{\n\n    ""payload"": {\n\n        ""property1"": ""string"",\n\n        ""property2"": ""string""\n\n    },\n\n    ""filter"": {\n\n        ""must"": [\n\n            {\n\n                ""key"": ""color"",\n\n                ""match"": {\n\n                    ""value"": ""red""\n\n                }\n\n            }\n\n        ]\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.set_payload(\n\n    collection_name=""{collection_name}"",\n\n    payload={\n\n        ""property1"": ""string"",', 'To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""hnsw_config"": {\n\n        ""on_disk"": true\n\n    }\n\n}\n\n```\n\n\n\n```python', '""shard_key"": [""cats"", ""dogs""],\n\n    ""limit"": 10,\n\n    ""with_payload"": true,\n\n}\n\n```\n\n\n\nIf you want to know more about the user-defined sharding, please refer to the [sharding documentation](/documentation/guides/distributed_deployment/#sharding).\n\n\n\n### Snapshot-based shard transfer']","* `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.

* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.

* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.
""on_disk_payload"": false

            },

            ""hnsw_config"": {

                ""m"": 16,

                ""ef_construct"": 100,

                ""full_scan_threshold"": 10000,

                ""max_indexing_threads"": 0

            },

            ""optimizer_config"": {

                ""deleted_threshold"": 0.2,

                ""vacuum_min_vector_number"": 1000,

                ""default_segment_number"": 0,

                ""max_segment_size"": null,
```http

POST /collections/{collection_name}/points/payload

{

    ""payload"": {

        ""property1"": ""string"",

        ""property2"": ""string""

    },

    ""filter"": {

        ""must"": [

            {

                ""key"": ""color"",

                ""match"": {

                    ""value"": ""red""

                }

            }

        ]

    }

}

```



```python

client.set_payload(

    collection_name=""{collection_name}"",

    payload={

        ""property1"": ""string"",
To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""hnsw_config"": {

        ""on_disk"": true

    }

}

```



```python
""shard_key"": [""cats"", ""dogs""],

    ""limit"": 10,

    ""with_payload"": true,

}

```



If you want to know more about the user-defined sharding, please refer to the [sharding documentation](/documentation/guides/distributed_deployment/#sharding).



### Snapshot-based shard transfer",0.5217391304347826,0.3829787234042553,0.44171779141104295,0.17647058823529413,0.12903225806451613,0.14906832298136644,0.3333333333333333,0.24468085106382978,0.2822085889570552,0.4927536231884058,0.3617021276595745,0.4171779141104295,0.845975399017334,0.6876594424247742,0.6490050554275513,0.6677733659744263,0.8911983417347074,0.3471936024725437,75,0.7575757575757576,0.46580304385682597
True,,2029.2259999999999,2a7e5472,What is the impact of ‘write_consistency_factor’ ?,"The `write_consistency_factor` parameter in a distributed deployment using Qdrant defines the number of replicas that must acknowledge a write operation before responding to the client. By increasing this value, the write operations become more tolerant to network partitions within the cluster. However, this also means that a higher number of replicas need to be active in order to perform write operations successfully.","The `write_consistency_factor` parameter has a significant impact on the write operations in a distributed system. It determines the number of replicas that must acknowledge a write operation before responding to the client. By increasing the value of `write_consistency_factor`, write operations become more tolerant to network partitions in the cluster. However, it also means that a higher number of replicas need to be active in order to successfully perform write operations.

If the number of active replicas is less than the specified `write_consistency_factor`, write operations will fail. This parameter plays a crucial role in ensuring the consistency and reliability of write operations in a distributed system.","### Write consistency factor



The `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to one by default.

It can be configured at the collection's creation time.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 300,

        ""distance"": ""Cosine""

    },

    ""shard_number"": 6,

    ""replication_factor"": 2,

    ""write_consistency_factor"": 2,

}

```



```python
- `write_consistency_factor` - defines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations tolerant to network partitions in the cluster, but will require a higher number of replicas to be active to perform write operations.
""write_consistency_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),

    shard_number=6,

    replication_factor=2,

    write_consistency_factor=2,

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";
replication_factor: Some(2),

        write_consistency_factor: Some(2),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.CreateCollection;

import io.qdrant.client.grpc.Collections.Distance;

import io.qdrant.client.grpc.Collections.VectorParams;

import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =
collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

	shardNumber: 6,

	replicationFactor: 2,

	writeConsistencyFactor: 2

);

```



Write operations will fail if the number of active replicas is less than the `write_consistency_factor`.



### Read consistency



Read `consistency` can be specified for most read requests and will ensure that the returned result

is consistent across cluster nodes.","['### Write consistency factor\n\n\n\nThe `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to one by default.\n\nIt can be configured at the collection\'s creation time.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""size"": 300,\n\n        ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 6,\n\n    ""replication_factor"": 2,\n\n    ""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python', '- `write_consistency_factor` - defines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations tolerant to network partitions in the cluster, but will require a higher number of replicas to be active to perform write operations.', '""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n\n    shard_number=6,\n\n    replication_factor=2,\n\n    write_consistency_factor=2,\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";', 'replication_factor: Some(2),\n\n        write_consistency_factor: Some(2),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.CreateCollection;\n\nimport io.qdrant.client.grpc.Collections.Distance;\n\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\n\n\nQdrantClient client =', 'collectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\n\tshardNumber: 6,\n\n\treplicationFactor: 2,\n\n\twriteConsistencyFactor: 2\n\n);\n\n```\n\n\n\nWrite operations will fail if the number of active replicas is less than the `write_consistency_factor`.\n\n\n\n### Read consistency\n\n\n\nRead `consistency` can be specified for most read requests and will ensure that the returned result\n\nis consistent across cluster nodes.']","Question: What is the impact of ‘write_consistency_factor’ ?\n\nContext: ### Write consistency factor



The `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to one by default.

It can be configured at the collection's creation time.



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 300,

""distance"": ""Cosine""

},

""shard_number"": 6,

""replication_factor"": 2,

""write_consistency_factor"": 2,

}

```



```python
- `write_consistency_factor` - defines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations tolerant to network partitions in the cluster, but will require a higher number of replicas to be active to perform write operations.
""write_consistency_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

collection_name=""{collection_name}"",

vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),

shard_number=6,

replication_factor=2,

write_consistency_factor=2,

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";
replication_factor: Some(2),

write_consistency_factor: Some(2),

..Default::default()

})

.await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.CreateCollection;

import io.qdrant.client.grpc.Collections.Distance;

import io.qdrant.client.grpc.Collections.VectorParams;

import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =
collectionName: ""{collection_name}"",

vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

shardNumber: 6,

replicationFactor: 2,

writeConsistencyFactor: 2

);

```



Write operations will fail if the number of active replicas is less than the `write_consistency_factor`.



### Read consistency



Read `consistency` can be specified for most read requests and will ensure that the returned result

is consistent across cluster nodes.\n\nAnswer:",What is the impact of ‘write_consistency_factor’ ?,"The `write_consistency_factor` parameter in a distributed deployment using Qdrant defines the number of replicas that must acknowledge a write operation before responding to the client. By increasing this value, the write operations become more tolerant to network partitions within the cluster. However, this also means that a higher number of replicas need to be active in order to perform write operations successfully.","['### Write consistency factor\n\n\n\nThe `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to one by default.\n\nIt can be configured at the collection\'s creation time.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""size"": 300,\n\n        ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 6,\n\n    ""replication_factor"": 2,\n\n    ""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python', '- `write_consistency_factor` - defines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations tolerant to network partitions in the cluster, but will require a higher number of replicas to be active to perform write operations.', '""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n\n    shard_number=6,\n\n    replication_factor=2,\n\n    write_consistency_factor=2,\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";', 'replication_factor: Some(2),\n\n        write_consistency_factor: Some(2),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.CreateCollection;\n\nimport io.qdrant.client.grpc.Collections.Distance;\n\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\n\n\nQdrantClient client =', 'collectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\n\tshardNumber: 6,\n\n\treplicationFactor: 2,\n\n\twriteConsistencyFactor: 2\n\n);\n\n```\n\n\n\nWrite operations will fail if the number of active replicas is less than the `write_consistency_factor`.\n\n\n\n### Read consistency\n\n\n\nRead `consistency` can be specified for most read requests and will ensure that the returned result\n\nis consistent across cluster nodes.']","### Write consistency factor



The `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to one by default.

It can be configured at the collection's creation time.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 300,

        ""distance"": ""Cosine""

    },

    ""shard_number"": 6,

    ""replication_factor"": 2,

    ""write_consistency_factor"": 2,

}

```



```python
- `write_consistency_factor` - defines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations tolerant to network partitions in the cluster, but will require a higher number of replicas to be active to perform write operations.
""write_consistency_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),

    shard_number=6,

    replication_factor=2,

    write_consistency_factor=2,

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";
replication_factor: Some(2),

        write_consistency_factor: Some(2),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.CreateCollection;

import io.qdrant.client.grpc.Collections.Distance;

import io.qdrant.client.grpc.Collections.VectorParams;

import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =
collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

	shardNumber: 6,

	replicationFactor: 2,

	writeConsistencyFactor: 2

);

```



Write operations will fail if the number of active replicas is less than the `write_consistency_factor`.



### Read consistency



Read `consistency` can be specified for most read requests and will ensure that the returned result

is consistent across cluster nodes.",0.5208333333333334,0.8928571428571429,0.6578947368421053,0.42105263157894735,0.7272727272727273,0.5333333333333333,0.5,0.8571428571428571,0.631578947368421,0.5104166666666666,0.875,0.6447368421052632,0.8961592316627502,0.7259494662284851,0.8246657848358154,0.7721653580665588,0.9073039388361698,0.891612954942199,105,1.6935483870967742,0.7434092079894886
True,,2085.2439999999997,63a00751,What is the purpose of oversampling in Qdrant search process?,Oversampling in Qdrant search process defines how many extra vectors should be pre-selected using quantized index and then re-scored using original vectors to improve search quality.,"The purpose of oversampling in the Qdrant search process is to control the precision of the search in real-time during query time. By internally retrieving a bit more vectors from the quantized storage than actually needed, oversampling allows for a more precise scoring of the search results when rescoring with original vectors. This technique helps in tuning the tradeoff between search speed and search quality in the query time.

For example, if oversampling is set to 2.4 and the limit is 100, then 240 vectors will be pre-selected using the quantized index, and the top 100 will be returned after re-scoring. This approach ensures that only the vectors that are considered good for the user based on the rescoring process are picked for the final results.","### Oversampling and Rescoring



A distinctive feature of the Qdrant architecture is the ability to combine the search for quantized and original vectors in a single query.

This enables the best combination of speed, accuracy, and RAM usage.



Qdrant stores the original vectors, so it is possible to rescore the top-k results with

the original vectors after doing the neighbours search in quantized space. That obviously
{

		Quantization = new QuantizationSearchParams

		{

			Ignore = false,

			Rescore = true,

			Oversampling = 2.0

		}

	},

	limit: 10

);

```



`ignore` - Toggle whether to ignore quantized vectors during the search process. By default, Qdrant will use quantized vectors if they are available.



`rescore` - Having the original vectors available, Qdrant can re-evaluate top-k search results using the original vectors.
Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user
For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring.

Oversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time.



## Quantization tips



#### Accuracy tuning



In this section, we will discuss how to tune the search precision.
.setOversampling(2.0)

                            .build())

                    .build())

            .setLimit(10)

            .build())

    .get();

```



```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.SearchAsync(

	collectionName: ""{collection_name}"",

	vector: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },

	searchParams: new SearchParams

	{

		Quantization = new QuantizationSearchParams

		{","['### Oversampling and Rescoring\n\n\n\nA distinctive feature of the Qdrant architecture is the ability to combine the search for quantized and original vectors in a single query.\n\nThis enables the best combination of speed, accuracy, and RAM usage.\n\n\n\nQdrant stores the original vectors, so it is possible to rescore the top-k results with\n\nthe original vectors after doing the neighbours search in quantized space. That obviously', '{\n\n\t\tQuantization = new QuantizationSearchParams\n\n\t\t{\n\n\t\t\tIgnore = false,\n\n\t\t\tRescore = true,\n\n\t\t\tOversampling = 2.0\n\n\t\t}\n\n\t},\n\n\tlimit: 10\n\n);\n\n```\n\n\n\n`ignore` - Toggle whether to ignore quantized vectors during the search process. By default, Qdrant will use quantized vectors if they are available.\n\n\n\n`rescore` - Having the original vectors available, Qdrant can re-evaluate top-k search results using the original vectors.', 'Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user', 'For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring.\n\nOversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time.\n\n\n\n## Quantization tips\n\n\n\n#### Accuracy tuning\n\n\n\nIn this section, we will discuss how to tune the search precision.', '.setOversampling(2.0)\n\n                            .build())\n\n                    .build())\n\n            .setLimit(10)\n\n            .build())\n\n    .get();\n\n```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\nusing Qdrant.Client.Grpc;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.SearchAsync(\n\n\tcollectionName: ""{collection_name}"",\n\n\tvector: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\n\tsearchParams: new SearchParams\n\n\t{\n\n\t\tQuantization = new QuantizationSearchParams\n\n\t\t{']","Question: What is the purpose of oversampling in Qdrant search process?\n\nContext: ### Oversampling and Rescoring



A distinctive feature of the Qdrant architecture is the ability to combine the search for quantized and original vectors in a single query.

This enables the best combination of speed, accuracy, and RAM usage.



Qdrant stores the original vectors, so it is possible to rescore the top-k results with

the original vectors after doing the neighbours search in quantized space. That obviously
{

Quantization = new QuantizationSearchParams

{

Ignore = false,

Rescore = true,

Oversampling = 2.0

}

},

limit: 10

);

```



`ignore` - Toggle whether to ignore quantized vectors during the search process. By default, Qdrant will use quantized vectors if they are available.



`rescore` - Having the original vectors available, Qdrant can re-evaluate top-k search results using the original vectors.
Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user
For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring.

Oversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time.



## Quantization tips



#### Accuracy tuning



In this section, we will discuss how to tune the search precision.
.setOversampling(2.0)

.build())

.build())

.setLimit(10)

.build())

.get();

```



```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.SearchAsync(

collectionName: ""{collection_name}"",

vector: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },

searchParams: new SearchParams

{

Quantization = new QuantizationSearchParams

{\n\nAnswer:",What is the purpose of oversampling in Qdrant search process?,Oversampling in Qdrant search process defines how many extra vectors should be pre-selected using quantized index and then re-scored using original vectors to improve search quality.,"['### Oversampling and Rescoring\n\n\n\nA distinctive feature of the Qdrant architecture is the ability to combine the search for quantized and original vectors in a single query.\n\nThis enables the best combination of speed, accuracy, and RAM usage.\n\n\n\nQdrant stores the original vectors, so it is possible to rescore the top-k results with\n\nthe original vectors after doing the neighbours search in quantized space. That obviously', '{\n\n\t\tQuantization = new QuantizationSearchParams\n\n\t\t{\n\n\t\t\tIgnore = false,\n\n\t\t\tRescore = true,\n\n\t\t\tOversampling = 2.0\n\n\t\t}\n\n\t},\n\n\tlimit: 10\n\n);\n\n```\n\n\n\n`ignore` - Toggle whether to ignore quantized vectors during the search process. By default, Qdrant will use quantized vectors if they are available.\n\n\n\n`rescore` - Having the original vectors available, Qdrant can re-evaluate top-k search results using the original vectors.', 'Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user', 'For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring.\n\nOversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time.\n\n\n\n## Quantization tips\n\n\n\n#### Accuracy tuning\n\n\n\nIn this section, we will discuss how to tune the search precision.', '.setOversampling(2.0)\n\n                            .build())\n\n                    .build())\n\n            .setLimit(10)\n\n            .build())\n\n    .get();\n\n```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\nusing Qdrant.Client.Grpc;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.SearchAsync(\n\n\tcollectionName: ""{collection_name}"",\n\n\tvector: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },\n\n\tsearchParams: new SearchParams\n\n\t{\n\n\t\tQuantization = new QuantizationSearchParams\n\n\t\t{']","### Oversampling and Rescoring



A distinctive feature of the Qdrant architecture is the ability to combine the search for quantized and original vectors in a single query.

This enables the best combination of speed, accuracy, and RAM usage.



Qdrant stores the original vectors, so it is possible to rescore the top-k results with

the original vectors after doing the neighbours search in quantized space. That obviously
{

		Quantization = new QuantizationSearchParams

		{

			Ignore = false,

			Rescore = true,

			Oversampling = 2.0

		}

	},

	limit: 10

);

```



`ignore` - Toggle whether to ignore quantized vectors during the search process. By default, Qdrant will use quantized vectors if they are available.



`rescore` - Having the original vectors available, Qdrant can re-evaluate top-k search results using the original vectors.
Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user
For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring.

Oversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time.



## Quantization tips



#### Accuracy tuning



In this section, we will discuss how to tune the search precision.
.setOversampling(2.0)

                            .build())

                    .build())

            .setLimit(10)

            .build())

    .get();

```



```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.SearchAsync(

	collectionName: ""{collection_name}"",

	vector: new float[] { 0.2f, 0.1f, 0.9f, 0.7f },

	searchParams: new SearchParams

	{

		Quantization = new QuantizationSearchParams

		{",0.18584070796460178,0.75,0.2978723404255319,0.11607142857142858,0.48148148148148145,0.18705035971223025,0.1415929203539823,0.5714285714285714,0.22695035460992907,0.17699115044247787,0.7142857142857143,0.28368794326241137,0.9289170503616333,0.5977767705917358,0.7366400957107544,0.6599831581115723,0.9980542396369856,0.9804209694266319,126,4.846153846153846,0.4216660939396358
True,,3609.346,b95a235b,How does Qdrant address the search accuracy problem in comparison to other search engines using HNSW?,"Qdrant uses a different approach that does not require pre- or post-filtering, effectively addressing the accuracy problem while maintaining search efficiency.","Qdrant addresses the search accuracy problem by utilizing a modified version of the HNSW algorithm for Approximate Nearest Neighbor Search (ANN). This modification allows for querying the results with high speed and applying filters without compromising on accuracy. The HNSW algorithm is known for being one of the most accurate and fastest algorithms, making it a suitable choice for improving search accuracy in Qdrant.

The unique custom modification of the HNSW algorithm in Qdrant enables vector search to start at the top layer of the HNSW index, quickly identifying the region of the graph likely to contain vectors closest to the query vector. By comparing the query vector to others using metrics like distance or similarity, the algorithm can accurately retrieve relevant results efficiently.

Furthermore, Qdrant provides the flexibility to fine-tune the HNSW parameters at both the collection and vector level, allowing for optimized search performance based on specific requirements. This customization capability enhances the accuracy of search results and ensures that users can efficiently retrieve relevant information.

Overall, the combination of the modified HNSW algorithm, filter support, and configurable parameters in Qdrant contributes to improving search accuracy compared to other search engines, making it a powerful solution for high-speed matching and accurate retrieval of information.","HNSW is chosen for several reasons.

First, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search.

Second, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).



*Available as of v1.1.1*



The HNSW parameters can also be configured on a collection and named vector

level by setting [`hnsw_config`](../indexing/#vector-index) to fine-tune search

performance.
2. Learn how Qdrant, an open-source vector database, outperformed other solutions and provided an efficient solution for high-speed matching.

3. Explore the unique modification of the HNSW algorithm in Qdrant and how it optimized the performance of the solution.

4. Dive into the crucial role of geofiltering and how it ensures accurate matching based on hotel locations.

5. Gain insights into the considerations surrounding GDPR compliance and the secure handling of hotel data.
In this episode, Rishabh dives into the nitty-gritty of creating a high-performance hotel matching solution with Qdrant, covering everything from data inconsistency challenges to the speed and accuracy enhancements achieved through the HNSW algorithm.



5 Keys to Learning from the Episode:



1. Discover the importance of data consistency and the challenges it poses when dealing with multiple sources and languages.
Our unique custom modification of the [HNSW algorithm](https://qdrant.tech/articles/filtrable-hnsw/) for Approximate Nearest Neighbor Search (ANN) allows querying the result with a state-of-the-art speed and applying filters without compromising on results. Cloud-native support for distributed deployment and replications makes the engine suitable for high-throughput applications with real-time latency requirements
The way it works is, when the user queries the database, this query is also converted into a vector (the query vector). The [vector search](https://qdrant.tech/documentation/overview/vector-search/) starts at the top layer of the HNSW index, where the algorithm quickly identifies the area of the graph likely to contain vectors closest to the query vector. The algorithm compares your query vector to all the others, using metrics like ""distance"" or ""similarity"" to gauge how close they are.","['HNSW is chosen for several reasons.\n\nFirst, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search.\n\nSecond, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).\n\n\n\n*Available as of v1.1.1*\n\n\n\nThe HNSW parameters can also be configured on a collection and named vector\n\nlevel by setting [`hnsw_config`](../indexing/#vector-index) to fine-tune search\n\nperformance.', '2. Learn how Qdrant, an open-source vector database, outperformed other solutions and provided an efficient solution for high-speed matching.\n\n3. Explore the unique modification of the HNSW algorithm in Qdrant and how it optimized the performance of the solution.\n\n4. Dive into the crucial role of geofiltering and how it ensures accurate matching based on hotel locations.\n\n5. Gain insights into the considerations surrounding GDPR compliance and the secure handling of hotel data.', 'In this episode, Rishabh dives into the nitty-gritty of creating a high-performance hotel matching solution with Qdrant, covering everything from data inconsistency challenges to the speed and accuracy enhancements achieved through the HNSW algorithm.\n\n\n\n5 Keys to Learning from the Episode:\n\n\n\n1. Discover the importance of data consistency and the challenges it poses when dealing with multiple sources and languages.', 'Our unique custom modification of the [HNSW algorithm](https://qdrant.tech/articles/filtrable-hnsw/) for Approximate Nearest Neighbor Search (ANN) allows querying the result with a state-of-the-art speed and applying filters without compromising on results. Cloud-native support for distributed deployment and replications makes the engine suitable for high-throughput applications with real-time latency requirements', 'The way it works is, when the user queries the database, this query is also converted into a vector (the query vector). The [vector search](https://qdrant.tech/documentation/overview/vector-search/) starts at the top layer of the HNSW index, where the algorithm quickly identifies the area of the graph likely to contain vectors closest to the query vector. The algorithm compares your query vector to all the others, using metrics like ""distance"" or ""similarity"" to gauge how close they are.']","Question: How does Qdrant address the search accuracy problem in comparison to other search engines using HNSW?\n\nContext: HNSW is chosen for several reasons.

First, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search.

Second, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).



*Available as of v1.1.1*



The HNSW parameters can also be configured on a collection and named vector

level by setting [`hnsw_config`](../indexing/#vector-index) to fine-tune search

performance.
2. Learn how Qdrant, an open-source vector database, outperformed other solutions and provided an efficient solution for high-speed matching.

3. Explore the unique modification of the HNSW algorithm in Qdrant and how it optimized the performance of the solution.

4. Dive into the crucial role of geofiltering and how it ensures accurate matching based on hotel locations.

5. Gain insights into the considerations surrounding GDPR compliance and the secure handling of hotel data.
In this episode, Rishabh dives into the nitty-gritty of creating a high-performance hotel matching solution with Qdrant, covering everything from data inconsistency challenges to the speed and accuracy enhancements achieved through the HNSW algorithm.



5 Keys to Learning from the Episode:



1. Discover the importance of data consistency and the challenges it poses when dealing with multiple sources and languages.
Our unique custom modification of the [HNSW algorithm](https://qdrant.tech/articles/filtrable-hnsw/) for Approximate Nearest Neighbor Search (ANN) allows querying the result with a state-of-the-art speed and applying filters without compromising on results. Cloud-native support for distributed deployment and replications makes the engine suitable for high-throughput applications with real-time latency requirements
The way it works is, when the user queries the database, this query is also converted into a vector (the query vector). The [vector search](https://qdrant.tech/documentation/overview/vector-search/) starts at the top layer of the HNSW index, where the algorithm quickly identifies the area of the graph likely to contain vectors closest to the query vector. The algorithm compares your query vector to all the others, using metrics like ""distance"" or ""similarity"" to gauge how close they are.\n\nAnswer:",How does Qdrant address the search accuracy problem in comparison to other search engines using HNSW?,"Qdrant uses a different approach that does not require pre- or post-filtering, effectively addressing the accuracy problem while maintaining search efficiency.","['HNSW is chosen for several reasons.\n\nFirst, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search.\n\nSecond, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).\n\n\n\n*Available as of v1.1.1*\n\n\n\nThe HNSW parameters can also be configured on a collection and named vector\n\nlevel by setting [`hnsw_config`](../indexing/#vector-index) to fine-tune search\n\nperformance.', '2. Learn how Qdrant, an open-source vector database, outperformed other solutions and provided an efficient solution for high-speed matching.\n\n3. Explore the unique modification of the HNSW algorithm in Qdrant and how it optimized the performance of the solution.\n\n4. Dive into the crucial role of geofiltering and how it ensures accurate matching based on hotel locations.\n\n5. Gain insights into the considerations surrounding GDPR compliance and the secure handling of hotel data.', 'In this episode, Rishabh dives into the nitty-gritty of creating a high-performance hotel matching solution with Qdrant, covering everything from data inconsistency challenges to the speed and accuracy enhancements achieved through the HNSW algorithm.\n\n\n\n5 Keys to Learning from the Episode:\n\n\n\n1. Discover the importance of data consistency and the challenges it poses when dealing with multiple sources and languages.', 'Our unique custom modification of the [HNSW algorithm](https://qdrant.tech/articles/filtrable-hnsw/) for Approximate Nearest Neighbor Search (ANN) allows querying the result with a state-of-the-art speed and applying filters without compromising on results. Cloud-native support for distributed deployment and replications makes the engine suitable for high-throughput applications with real-time latency requirements', 'The way it works is, when the user queries the database, this query is also converted into a vector (the query vector). The [vector search](https://qdrant.tech/documentation/overview/vector-search/) starts at the top layer of the HNSW index, where the algorithm quickly identifies the area of the graph likely to contain vectors closest to the query vector. The algorithm compares your query vector to all the others, using metrics like ""distance"" or ""similarity"" to gauge how close they are.']","HNSW is chosen for several reasons.

First, HNSW is well-compatible with the modification that allows Qdrant to use filters during a search.

Second, it is one of the most accurate and fastest algorithms, according to [public benchmarks](https://github.com/erikbern/ann-benchmarks).



*Available as of v1.1.1*



The HNSW parameters can also be configured on a collection and named vector

level by setting [`hnsw_config`](../indexing/#vector-index) to fine-tune search

performance.
2. Learn how Qdrant, an open-source vector database, outperformed other solutions and provided an efficient solution for high-speed matching.

3. Explore the unique modification of the HNSW algorithm in Qdrant and how it optimized the performance of the solution.

4. Dive into the crucial role of geofiltering and how it ensures accurate matching based on hotel locations.

5. Gain insights into the considerations surrounding GDPR compliance and the secure handling of hotel data.
In this episode, Rishabh dives into the nitty-gritty of creating a high-performance hotel matching solution with Qdrant, covering everything from data inconsistency challenges to the speed and accuracy enhancements achieved through the HNSW algorithm.



5 Keys to Learning from the Episode:



1. Discover the importance of data consistency and the challenges it poses when dealing with multiple sources and languages.
Our unique custom modification of the [HNSW algorithm](https://qdrant.tech/articles/filtrable-hnsw/) for Approximate Nearest Neighbor Search (ANN) allows querying the result with a state-of-the-art speed and applying filters without compromising on results. Cloud-native support for distributed deployment and replications makes the engine suitable for high-throughput applications with real-time latency requirements
The way it works is, when the user queries the database, this query is also converted into a vector (the query vector). The [vector search](https://qdrant.tech/documentation/overview/vector-search/) starts at the top layer of the HNSW index, where the algorithm quickly identifies the area of the graph likely to contain vectors closest to the query vector. The algorithm compares your query vector to all the others, using metrics like ""distance"" or ""similarity"" to gauge how close they are.",0.05945945945945946,0.55,0.1073170731707317,0.005434782608695652,0.05263157894736842,0.009852216748768475,0.032432432432432434,0.3,0.058536585365853655,0.05405405405405406,0.5,0.0975609756097561,0.6670290231704712,0.4749267101287842,0.5949877500534058,0.5282208919525146,0.9952557964716107,0.058728814125061035,206,9.80952380952381,0.35782658550183705
True,,2526.48,1de7101f,What is the difference between regular and neural search?,"Regular full-text search involves searching for keywords within a document, while neural search considers the real meaning of the query and documents, allowing for more accurate results.","Regular full-text search engines like Google search for keywords within documents, but they may not fully grasp the actual meaning of the query or the content of the documents. This can lead to relevant documents being missed due to differences in wording.

On the other hand, neural search utilizes neural networks to understand the context and meaning of both the query and the documents being searched. This allows for more accurate and relevant search results by considering the semantics and relationships between words and phrases.

Neural search is particularly useful in tasks where understanding the context and relationships between words is important, such as natural language processing, sentiment analysis, and information retrieval.

In summary, the key difference between regular and neural search lies in the ability of neural search to understand the meaning behind words and phrases, leading to more precise and relevant search results.","**What is neural search?**



A regular full-text search, such as Google’s, consists of searching for keywords inside a document. For this reason, the algorithm can not take into account the real meaning of the query and documents. Many documents that might be of interest to the user are not found because they use different wording.
In this tutorial we are going to find answers to these questions:



* What is the difference between regular and neural search?

* What neural networks could be used for search?

* In what tasks is neural network search useful?

* How to build and deploy own neural search service step-by-step?



**What is neural search?**
* In what tasks is neural network search useful?

* How to build and deploy own neural search service step-by-step?



## What is neural search?



A regular full-text search, such as Google's, consists of searching for keywords inside a document.

For this reason, the algorithm can not take into account the real meaning of the query and documents.

Many documents that might be of interest to the user are not found because they use different wording.
These days, search technology is the heart of a variety of applications.

From web-pages search to product recommendations.

For many years, this technology didn't get much change until neural networks came into play.



In this tutorial we are going to find answers to these questions:



* What is the difference between regular and neural search?

* What neural networks could be used for search?

* In what tasks is neural network search useful?
You can try it to get an intuition for cases when the neural search is useful. The demo contains a switch that selects between neural and full-text searches. You can turn neural search on and off to compare the result with regular full-text search. Try to use startup description to find similar ones.



**Conclusion**","['**What is neural search?**\n\n\n\nA regular full-text search, such as Google’s, consists of searching for keywords inside a document. For this reason, the algorithm can not take into account the real meaning of the query and documents. Many documents that might be of interest to the user are not found because they use different wording.', 'In this tutorial we are going to find answers to these questions:\n\n\n\n* What is the difference between regular and neural search?\n\n* What neural networks could be used for search?\n\n* In what tasks is neural network search useful?\n\n* How to build and deploy own neural search service step-by-step?\n\n\n\n**What is neural search?**', ""* In what tasks is neural network search useful?\n\n* How to build and deploy own neural search service step-by-step?\n\n\n\n## What is neural search?\n\n\n\nA regular full-text search, such as Google's, consists of searching for keywords inside a document.\n\nFor this reason, the algorithm can not take into account the real meaning of the query and documents.\n\nMany documents that might be of interest to the user are not found because they use different wording."", ""These days, search technology is the heart of a variety of applications.\n\nFrom web-pages search to product recommendations.\n\nFor many years, this technology didn't get much change until neural networks came into play.\n\n\n\nIn this tutorial we are going to find answers to these questions:\n\n\n\n* What is the difference between regular and neural search?\n\n* What neural networks could be used for search?\n\n* In what tasks is neural network search useful?"", 'You can try it to get an intuition for cases when the neural search is useful. The demo contains a switch that selects between neural and full-text searches. You can turn neural search on and off to compare the result with regular full-text search. Try to use startup description to find similar ones.\n\n\n\n**Conclusion**']","Question: What is the difference between regular and neural search?\n\nContext: **What is neural search?**



A regular full-text search, such as Google’s, consists of searching for keywords inside a document. For this reason, the algorithm can not take into account the real meaning of the query and documents. Many documents that might be of interest to the user are not found because they use different wording.
In this tutorial we are going to find answers to these questions:



* What is the difference between regular and neural search?

* What neural networks could be used for search?

* In what tasks is neural network search useful?

* How to build and deploy own neural search service step-by-step?



**What is neural search?**
* In what tasks is neural network search useful?

* How to build and deploy own neural search service step-by-step?



## What is neural search?



A regular full-text search, such as Google's, consists of searching for keywords inside a document.

For this reason, the algorithm can not take into account the real meaning of the query and documents.

Many documents that might be of interest to the user are not found because they use different wording.
These days, search technology is the heart of a variety of applications.

From web-pages search to product recommendations.

For many years, this technology didn't get much change until neural networks came into play.



In this tutorial we are going to find answers to these questions:



* What is the difference between regular and neural search?

* What neural networks could be used for search?

* In what tasks is neural network search useful?
You can try it to get an intuition for cases when the neural search is useful. The demo contains a switch that selects between neural and full-text searches. You can turn neural search on and off to compare the result with regular full-text search. Try to use startup description to find similar ones.



**Conclusion**\n\nAnswer:",What is the difference between regular and neural search?,"Regular full-text search involves searching for keywords within a document, while neural search considers the real meaning of the query and documents, allowing for more accurate results.","['**What is neural search?**\n\n\n\nA regular full-text search, such as Google’s, consists of searching for keywords inside a document. For this reason, the algorithm can not take into account the real meaning of the query and documents. Many documents that might be of interest to the user are not found because they use different wording.', 'In this tutorial we are going to find answers to these questions:\n\n\n\n* What is the difference between regular and neural search?\n\n* What neural networks could be used for search?\n\n* In what tasks is neural network search useful?\n\n* How to build and deploy own neural search service step-by-step?\n\n\n\n**What is neural search?**', ""* In what tasks is neural network search useful?\n\n* How to build and deploy own neural search service step-by-step?\n\n\n\n## What is neural search?\n\n\n\nA regular full-text search, such as Google's, consists of searching for keywords inside a document.\n\nFor this reason, the algorithm can not take into account the real meaning of the query and documents.\n\nMany documents that might be of interest to the user are not found because they use different wording."", ""These days, search technology is the heart of a variety of applications.\n\nFrom web-pages search to product recommendations.\n\nFor many years, this technology didn't get much change until neural networks came into play.\n\n\n\nIn this tutorial we are going to find answers to these questions:\n\n\n\n* What is the difference between regular and neural search?\n\n* What neural networks could be used for search?\n\n* In what tasks is neural network search useful?"", 'You can try it to get an intuition for cases when the neural search is useful. The demo contains a switch that selects between neural and full-text searches. You can turn neural search on and off to compare the result with regular full-text search. Try to use startup description to find similar ones.\n\n\n\n**Conclusion**']","**What is neural search?**



A regular full-text search, such as Google’s, consists of searching for keywords inside a document. For this reason, the algorithm can not take into account the real meaning of the query and documents. Many documents that might be of interest to the user are not found because they use different wording.
In this tutorial we are going to find answers to these questions:



* What is the difference between regular and neural search?

* What neural networks could be used for search?

* In what tasks is neural network search useful?

* How to build and deploy own neural search service step-by-step?



**What is neural search?**
* In what tasks is neural network search useful?

* How to build and deploy own neural search service step-by-step?



## What is neural search?



A regular full-text search, such as Google's, consists of searching for keywords inside a document.

For this reason, the algorithm can not take into account the real meaning of the query and documents.

Many documents that might be of interest to the user are not found because they use different wording.
These days, search technology is the heart of a variety of applications.

From web-pages search to product recommendations.

For many years, this technology didn't get much change until neural networks came into play.



In this tutorial we are going to find answers to these questions:



* What is the difference between regular and neural search?

* What neural networks could be used for search?

* In what tasks is neural network search useful?
You can try it to get an intuition for cases when the neural search is useful. The demo contains a switch that selects between neural and full-text searches. You can turn neural search on and off to compare the result with regular full-text search. Try to use startup description to find similar ones.



**Conclusion**",0.16541353383458646,0.88,0.27848101265822783,0.11363636363636363,0.625,0.1923076923076923,0.15789473684210525,0.84,0.26582278481012656,0.15789473684210525,0.84,0.26582278481012656,0.8251376152038574,0.5655845403671265,0.7117218971252441,0.6302933692932129,0.6548055597910813,0.8988230526447296,145,5.37037037037037,0.24557905035678532
True,,3173.447,a07cdb66,How can I use Qdrant as a vector store in Langchain Go?,"You can use Qdrant as a vector store in Langchain Go by installing the `langchain-go` project dependency and customizing the values for your configuration, such as the Qdrant REST URL and collection name.","To use Qdrant as a vector store in Langchain Go, you can follow these steps:

1. Install the necessary dependencies:

```bash
go get -u github.com/tmc/langchaingo
```

2. Use Qdrant as a vector store in your Langchain Go application by creating a vector store for your collection and passing an instance of `QdrantClient`.

```go
import (
    ""github.com/tmc/langchaingo""
    ""github.com/tmc/langchaingo/vectorstores""
    ""github.com/tmc/langchaingo/embeddings""
)

func main() {
    // Initialize the Qdrant client
    client := QdrantClient(""http://localhost:6333"")

    // Create a vector store for your collection
    vectorStore := vectorstores.NewQdrantVectorStore(""my_collection"", client)
}
```

3. Customize the configuration values for your specific use case and make sure to set the collection name and client accordingly.

By following these steps, you can use Qdrant as a vector store in your Langchain Go application.","---

title: Langchain Go

weight: 120

---



# Langchain Go



[Langchain Go](https://tmc.github.io/langchaingo/docs/) is a framework for developing data-aware applications powered by language models in Go.



You can use Qdrant as a vector store in Langchain Go.



## Setup



Install the `langchain-go` project dependency



```bash

go get -u github.com/tmc/langchaingo

```



## Usage



Before you use the following code sample, customize the following values for your configuration:
```bash

pip install langchain

```



Qdrant acts as a vector index that may store the embeddings with the documents used to generate them. There are various ways 

how to use it, but calling `Qdrant.from_texts` is probably the most straightforward way how to get started:



```python

from langchain.vectorstores import Qdrant

from langchain.embeddings import HuggingFaceEmbeddings



embeddings = HuggingFaceEmbeddings(

    model_name=""sentence-transformers/all-mpnet-base-v2""

)
Qdrant is the only vector database with full coverage of async API in Langchain. Their documentation [describes how to use 

it](https://python.langchain.com/docs/modules/data_connection/vectorstores/#asynchronous-operations).
index = VectorStoreIndex.from_vector_store(vector_store=vector_store)



```



The library [comes with a notebook](https://github.com/jerryjliu/llama_index/blob/main/docs/examples/vector_stores/QdrantIndexDemo.ipynb) 

that shows an end-to-end example of how to use Qdrant within LlamaIndex.
Let's create a vector store for our collection. It requires setting a collection name and passing an instance 

of `QdrantClient`.



```python

from qdrant_client import QdrantClient

from llama_index.vector_stores import QdrantVectorStore



client = QdrantClient(""http://localhost:6333"")



vector_store = QdrantVectorStore(

    collection_name=""my_collection"",

    client=client,

)

```



### Defining chunking strategy and embedding model","['---\n\ntitle: Langchain Go\n\nweight: 120\n\n---\n\n\n\n# Langchain Go\n\n\n\n[Langchain Go](https://tmc.github.io/langchaingo/docs/) is a framework for developing data-aware applications powered by language models in Go.\n\n\n\nYou can use Qdrant as a vector store in Langchain Go.\n\n\n\n## Setup\n\n\n\nInstall the `langchain-go` project dependency\n\n\n\n```bash\n\ngo get -u github.com/tmc/langchaingo\n\n```\n\n\n\n## Usage\n\n\n\nBefore you use the following code sample, customize the following values for your configuration:', '```bash\n\npip install langchain\n\n```\n\n\n\nQdrant acts as a vector index that may store the embeddings with the documents used to generate them. There are various ways \n\nhow to use it, but calling `Qdrant.from_texts` is probably the most straightforward way how to get started:\n\n\n\n```python\n\nfrom langchain.vectorstores import Qdrant\n\nfrom langchain.embeddings import HuggingFaceEmbeddings\n\n\n\nembeddings = HuggingFaceEmbeddings(\n\n    model_name=""sentence-transformers/all-mpnet-base-v2""\n\n)', 'Qdrant is the only vector database with full coverage of async API in Langchain. Their documentation [describes how to use \n\nit](https://python.langchain.com/docs/modules/data_connection/vectorstores/#asynchronous-operations).', 'index = VectorStoreIndex.from_vector_store(vector_store=vector_store)\n\n\n\n```\n\n\n\nThe library [comes with a notebook](https://github.com/jerryjliu/llama_index/blob/main/docs/examples/vector_stores/QdrantIndexDemo.ipynb) \n\nthat shows an end-to-end example of how to use Qdrant within LlamaIndex.', 'Let\'s create a vector store for our collection. It requires setting a collection name and passing an instance \n\nof `QdrantClient`.\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom llama_index.vector_stores import QdrantVectorStore\n\n\n\nclient = QdrantClient(""http://localhost:6333"")\n\n\n\nvector_store = QdrantVectorStore(\n\n    collection_name=""my_collection"",\n\n    client=client,\n\n)\n\n```\n\n\n\n### Defining chunking strategy and embedding model']","Question: How can I use Qdrant as a vector store in Langchain Go?\n\nContext: ---

title: Langchain Go

weight: 120

---



# Langchain Go



[Langchain Go](https://tmc.github.io/langchaingo/docs/) is a framework for developing data-aware applications powered by language models in Go.



You can use Qdrant as a vector store in Langchain Go.



## Setup



Install the `langchain-go` project dependency



```bash

go get -u github.com/tmc/langchaingo

```



## Usage



Before you use the following code sample, customize the following values for your configuration:
```bash

pip install langchain

```



Qdrant acts as a vector index that may store the embeddings with the documents used to generate them. There are various ways 

how to use it, but calling `Qdrant.from_texts` is probably the most straightforward way how to get started:



```python

from langchain.vectorstores import Qdrant

from langchain.embeddings import HuggingFaceEmbeddings



embeddings = HuggingFaceEmbeddings(

model_name=""sentence-transformers/all-mpnet-base-v2""

)
Qdrant is the only vector database with full coverage of async API in Langchain. Their documentation [describes how to use 

it](https://python.langchain.com/docs/modules/data_connection/vectorstores/#asynchronous-operations).
index = VectorStoreIndex.from_vector_store(vector_store=vector_store)



```



The library [comes with a notebook](https://github.com/jerryjliu/llama_index/blob/main/docs/examples/vector_stores/QdrantIndexDemo.ipynb) 

that shows an end-to-end example of how to use Qdrant within LlamaIndex.
Let's create a vector store for our collection. It requires setting a collection name and passing an instance 

of `QdrantClient`.



```python

from qdrant_client import QdrantClient

from llama_index.vector_stores import QdrantVectorStore



client = QdrantClient(""http://localhost:6333"")



vector_store = QdrantVectorStore(

collection_name=""my_collection"",

client=client,

)

```



### Defining chunking strategy and embedding model\n\nAnswer:",How can I use Qdrant as a vector store in Langchain Go?,"You can use Qdrant as a vector store in Langchain Go by installing the `langchain-go` project dependency and customizing the values for your configuration, such as the Qdrant REST URL and collection name.","['---\n\ntitle: Langchain Go\n\nweight: 120\n\n---\n\n\n\n# Langchain Go\n\n\n\n[Langchain Go](https://tmc.github.io/langchaingo/docs/) is a framework for developing data-aware applications powered by language models in Go.\n\n\n\nYou can use Qdrant as a vector store in Langchain Go.\n\n\n\n## Setup\n\n\n\nInstall the `langchain-go` project dependency\n\n\n\n```bash\n\ngo get -u github.com/tmc/langchaingo\n\n```\n\n\n\n## Usage\n\n\n\nBefore you use the following code sample, customize the following values for your configuration:', '```bash\n\npip install langchain\n\n```\n\n\n\nQdrant acts as a vector index that may store the embeddings with the documents used to generate them. There are various ways \n\nhow to use it, but calling `Qdrant.from_texts` is probably the most straightforward way how to get started:\n\n\n\n```python\n\nfrom langchain.vectorstores import Qdrant\n\nfrom langchain.embeddings import HuggingFaceEmbeddings\n\n\n\nembeddings = HuggingFaceEmbeddings(\n\n    model_name=""sentence-transformers/all-mpnet-base-v2""\n\n)', 'Qdrant is the only vector database with full coverage of async API in Langchain. Their documentation [describes how to use \n\nit](https://python.langchain.com/docs/modules/data_connection/vectorstores/#asynchronous-operations).', 'index = VectorStoreIndex.from_vector_store(vector_store=vector_store)\n\n\n\n```\n\n\n\nThe library [comes with a notebook](https://github.com/jerryjliu/llama_index/blob/main/docs/examples/vector_stores/QdrantIndexDemo.ipynb) \n\nthat shows an end-to-end example of how to use Qdrant within LlamaIndex.', 'Let\'s create a vector store for our collection. It requires setting a collection name and passing an instance \n\nof `QdrantClient`.\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom llama_index.vector_stores import QdrantVectorStore\n\n\n\nclient = QdrantClient(""http://localhost:6333"")\n\n\n\nvector_store = QdrantVectorStore(\n\n    collection_name=""my_collection"",\n\n    client=client,\n\n)\n\n```\n\n\n\n### Defining chunking strategy and embedding model']","---

title: Langchain Go

weight: 120

---



# Langchain Go



[Langchain Go](https://tmc.github.io/langchaingo/docs/) is a framework for developing data-aware applications powered by language models in Go.



You can use Qdrant as a vector store in Langchain Go.



## Setup



Install the `langchain-go` project dependency



```bash

go get -u github.com/tmc/langchaingo

```



## Usage



Before you use the following code sample, customize the following values for your configuration:
```bash

pip install langchain

```



Qdrant acts as a vector index that may store the embeddings with the documents used to generate them. There are various ways 

how to use it, but calling `Qdrant.from_texts` is probably the most straightforward way how to get started:



```python

from langchain.vectorstores import Qdrant

from langchain.embeddings import HuggingFaceEmbeddings



embeddings = HuggingFaceEmbeddings(

    model_name=""sentence-transformers/all-mpnet-base-v2""

)
Qdrant is the only vector database with full coverage of async API in Langchain. Their documentation [describes how to use 

it](https://python.langchain.com/docs/modules/data_connection/vectorstores/#asynchronous-operations).
index = VectorStoreIndex.from_vector_store(vector_store=vector_store)



```



The library [comes with a notebook](https://github.com/jerryjliu/llama_index/blob/main/docs/examples/vector_stores/QdrantIndexDemo.ipynb) 

that shows an end-to-end example of how to use Qdrant within LlamaIndex.
Let's create a vector store for our collection. It requires setting a collection name and passing an instance 

of `QdrantClient`.



```python

from qdrant_client import QdrantClient

from llama_index.vector_stores import QdrantVectorStore



client = QdrantClient(""http://localhost:6333"")



vector_store = QdrantVectorStore(

    collection_name=""my_collection"",

    client=client,

)

```



### Defining chunking strategy and embedding model",0.21311475409836064,0.8666666666666667,0.3421052631578947,0.10743801652892562,0.4482758620689655,0.17333333333333334,0.1557377049180328,0.6333333333333333,0.25,0.14754098360655737,0.6,0.23684210526315788,0.927210807800293,0.5233651995658875,0.6360883712768555,0.5742472410202026,0.9620892855261142,0.9784223288297653,115,3.484848484848485,0.5226294046471305
True,,2561.027,cafc61c8,How did Dust leverage compression features in Qdrant to manage the balance between storing vectors on disk and keeping quantized vectors in RAM effectively?,Dust leveraged the control of the MMAP payload threshold and Scalar Quantization in Qdrant to manage the balance between storing vectors on disk and keeping quantized vectors in RAM effectively.,"Dust leveraged compression features in Qdrant, specifically the control of the MMAP payload threshold and Scalar Quantization, to effectively manage the balance between storing vectors on disk and keeping quantized vectors in RAM. By using Scalar Quantization, Dust was able to reduce the memory footprint of vectors in memory by a factor of 4. This reduction in memory usage not only led to significant cost savings but also allowed Dust to scale smoothly and push their instances further without the need for running lots of nodes in parallel.

Additionally, Scalar Quantization not only reduced memory consumption but also sped up the search process in Qdrant. The use of SIMD CPU instructions for fast vector comparison with 8-bit integers, made possible by the conversion to `uint8`, further optimized the performance of the search process.

Overall, the combination of features in Qdrant, including Scalar Quantization, MMAP control, and other compression options, provided Dust with the flexibility to optimize memory consumption, reduce costs, and enhance performance in their deployment.","compression features](https://qdrant.tech/documentation/guides/quantization/). In particular, Dust leveraged the control of the [MMAP

payload threshold](https://qdrant.tech/documentation/concepts/storage/#configuring-memmap-storage) as well as [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/), which enabled Dust to manage

the balance between storing vectors on disk and keeping quantized vectors in RAM,

more effectively. “This allowed us to scale smoothly from there,” Polu says.
![“We were able to reduce the footprint of vectors in memory, which led to a significant cost reduction as

we don’t have to run lots of nodes in parallel. While being memory-bound, we were

able to push the same instances further with the help of quantization. While you

get pressure on MMAP in this case you maintain very good performance even if the

RAM is fully used. With this we were able to reduce our cost by 2x.” - Stanislas Polu, Co-Founder of Dust](/case-studies/dust/Dust-Quote.jpg)
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
```



While Qdrant offers various options to store some parts of the data on disk, starting 

from version 1.1.0, you can also optimize your memory by compressing the embeddings. 

We've implemented the mechanism of **Scalar Quantization**! It turns out to have not 

only a positive impact on memory but also on the performance. 



## Scalar Quantization



Scalar quantization is a data compression technique that converts floating point values
Beyond performance, we provide our users with the most flexibility in cost savings and deployment options. A combination of cutting-edge efficiency features, like [built-in compression options](https://qdrant.tech/documentation/guides/quantization/), [multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) and the ability to [offload data to disk](https://qdrant.tech/documentation/concepts/storage/), dramatically reduce memory consumption","['compression features](https://qdrant.tech/documentation/guides/quantization/). In particular, Dust leveraged the control of the [MMAP\n\npayload threshold](https://qdrant.tech/documentation/concepts/storage/#configuring-memmap-storage) as well as [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/), which enabled Dust to manage\n\nthe balance between storing vectors on disk and keeping quantized vectors in RAM,\n\nmore effectively. “This allowed us to scale smoothly from there,” Polu says.', '![“We were able to reduce the footprint of vectors in memory, which led to a significant cost reduction as\n\nwe don’t have to run lots of nodes in parallel. While being memory-bound, we were\n\nable to push the same instances further with the help of quantization. While you\n\nget pressure on MMAP in this case you maintain very good performance even if the\n\nRAM is fully used. With this we were able to reduce our cost by 2x.” - Stanislas Polu, Co-Founder of Dust](/case-studies/dust/Dust-Quote.jpg)', 'Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.\n\n\n\nIn addition to reducing the memory footprint, scalar quantization also speeds up the search process.\n\nQdrant uses a special SIMD CPU instruction to perform fast vector comparison.\n\nThis instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.', ""```\n\n\n\nWhile Qdrant offers various options to store some parts of the data on disk, starting \n\nfrom version 1.1.0, you can also optimize your memory by compressing the embeddings. \n\nWe've implemented the mechanism of **Scalar Quantization**! It turns out to have not \n\nonly a positive impact on memory but also on the performance. \n\n\n\n## Scalar Quantization\n\n\n\nScalar quantization is a data compression technique that converts floating point values"", 'Beyond performance, we provide our users with the most flexibility in cost savings and deployment options. A combination of cutting-edge efficiency features, like [built-in compression options](https://qdrant.tech/documentation/guides/quantization/), [multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) and the ability to [offload data to disk](https://qdrant.tech/documentation/concepts/storage/), dramatically reduce memory consumption']","Question: How did Dust leverage compression features in Qdrant to manage the balance between storing vectors on disk and keeping quantized vectors in RAM effectively?\n\nContext: compression features](https://qdrant.tech/documentation/guides/quantization/). In particular, Dust leveraged the control of the [MMAP

payload threshold](https://qdrant.tech/documentation/concepts/storage/#configuring-memmap-storage) as well as [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/), which enabled Dust to manage

the balance between storing vectors on disk and keeping quantized vectors in RAM,

more effectively. “This allowed us to scale smoothly from there,” Polu says.
![“We were able to reduce the footprint of vectors in memory, which led to a significant cost reduction as

we don’t have to run lots of nodes in parallel. While being memory-bound, we were

able to push the same instances further with the help of quantization. While you

get pressure on MMAP in this case you maintain very good performance even if the

RAM is fully used. With this we were able to reduce our cost by 2x.” - Stanislas Polu, Co-Founder of Dust](/case-studies/dust/Dust-Quote.jpg)
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
```



While Qdrant offers various options to store some parts of the data on disk, starting 

from version 1.1.0, you can also optimize your memory by compressing the embeddings. 

We've implemented the mechanism of **Scalar Quantization**! It turns out to have not 

only a positive impact on memory but also on the performance. 



## Scalar Quantization



Scalar quantization is a data compression technique that converts floating point values
Beyond performance, we provide our users with the most flexibility in cost savings and deployment options. A combination of cutting-edge efficiency features, like [built-in compression options](https://qdrant.tech/documentation/guides/quantization/), [multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) and the ability to [offload data to disk](https://qdrant.tech/documentation/concepts/storage/), dramatically reduce memory consumption\n\nAnswer:",How did Dust leverage compression features in Qdrant to manage the balance between storing vectors on disk and keeping quantized vectors in RAM effectively?,Dust leveraged the control of the MMAP payload threshold and Scalar Quantization in Qdrant to manage the balance between storing vectors on disk and keeping quantized vectors in RAM effectively.,"['compression features](https://qdrant.tech/documentation/guides/quantization/). In particular, Dust leveraged the control of the [MMAP\n\npayload threshold](https://qdrant.tech/documentation/concepts/storage/#configuring-memmap-storage) as well as [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/), which enabled Dust to manage\n\nthe balance between storing vectors on disk and keeping quantized vectors in RAM,\n\nmore effectively. “This allowed us to scale smoothly from there,” Polu says.', '![“We were able to reduce the footprint of vectors in memory, which led to a significant cost reduction as\n\nwe don’t have to run lots of nodes in parallel. While being memory-bound, we were\n\nable to push the same instances further with the help of quantization. While you\n\nget pressure on MMAP in this case you maintain very good performance even if the\n\nRAM is fully used. With this we were able to reduce our cost by 2x.” - Stanislas Polu, Co-Founder of Dust](/case-studies/dust/Dust-Quote.jpg)', 'Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.\n\n\n\nIn addition to reducing the memory footprint, scalar quantization also speeds up the search process.\n\nQdrant uses a special SIMD CPU instruction to perform fast vector comparison.\n\nThis instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.', ""```\n\n\n\nWhile Qdrant offers various options to store some parts of the data on disk, starting \n\nfrom version 1.1.0, you can also optimize your memory by compressing the embeddings. \n\nWe've implemented the mechanism of **Scalar Quantization**! It turns out to have not \n\nonly a positive impact on memory but also on the performance. \n\n\n\n## Scalar Quantization\n\n\n\nScalar quantization is a data compression technique that converts floating point values"", 'Beyond performance, we provide our users with the most flexibility in cost savings and deployment options. A combination of cutting-edge efficiency features, like [built-in compression options](https://qdrant.tech/documentation/guides/quantization/), [multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) and the ability to [offload data to disk](https://qdrant.tech/documentation/concepts/storage/), dramatically reduce memory consumption']","compression features](https://qdrant.tech/documentation/guides/quantization/). In particular, Dust leveraged the control of the [MMAP

payload threshold](https://qdrant.tech/documentation/concepts/storage/#configuring-memmap-storage) as well as [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/), which enabled Dust to manage

the balance between storing vectors on disk and keeping quantized vectors in RAM,

more effectively. “This allowed us to scale smoothly from there,” Polu says.
![“We were able to reduce the footprint of vectors in memory, which led to a significant cost reduction as

we don’t have to run lots of nodes in parallel. While being memory-bound, we were

able to push the same instances further with the help of quantization. While you

get pressure on MMAP in this case you maintain very good performance even if the

RAM is fully used. With this we were able to reduce our cost by 2x.” - Stanislas Polu, Co-Founder of Dust](/case-studies/dust/Dust-Quote.jpg)
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
```



While Qdrant offers various options to store some parts of the data on disk, starting 

from version 1.1.0, you can also optimize your memory by compressing the embeddings. 

We've implemented the mechanism of **Scalar Quantization**! It turns out to have not 

only a positive impact on memory but also on the performance. 



## Scalar Quantization



Scalar quantization is a data compression technique that converts floating point values
Beyond performance, we provide our users with the most flexibility in cost savings and deployment options. A combination of cutting-edge efficiency features, like [built-in compression options](https://qdrant.tech/documentation/guides/quantization/), [multitenancy](https://qdrant.tech/documentation/guides/multiple-partitions/) and the ability to [offload data to disk](https://qdrant.tech/documentation/concepts/storage/), dramatically reduce memory consumption",0.17532467532467533,1.0,0.2983425414364641,0.13725490196078433,0.8076923076923077,0.23463687150837992,0.15584415584415584,0.8888888888888888,0.26519337016574585,0.16883116883116883,0.9629629629629629,0.287292817679558,0.918700635433197,0.532771110534668,0.7566197514533997,0.6252644658088684,0.9775983669562265,0.9210579469799995,166,5.533333333333333,0.5860282422234275
True,,5346.8679999999995,5cb24177,Why do we still need keyword search?,"Keyword search is still useful in cases of out-of-domain search, where words are just words regardless of their meaning.","Keyword search is still needed for several reasons:

1. **Historical Use:** Keyword-based search has been the traditional and widely used method for search engines. Many users are familiar and comfortable with this approach, making it an essential feature for information retrieval.

2. **Specificity:** Keyword search allows users to input specific terms or phrases to find relevant information quickly. This can be especially useful when users have a clear idea of what they are looking for and want to retrieve precise results.

3. **Simplicity:** Keyword search is simple and straightforward for users to understand and use. It provides a direct way to search for information without the need for complex queries or advanced knowledge of search techniques.

4. **Complement to Advanced Search:** While advanced search techniques like semantic search and vector search offer more sophisticated capabilities, keyword search still plays a vital role in complementing these methods. It serves as a fallback option and caters to users who prefer a more conventional search approach.

5. **Compatibility:** Many existing systems and platforms are built around keyword-based search functionality. Maintaining support for keyword search ensures compatibility with these systems and prevents disruptions for users accustomed to this search method.

In conclusion, keyword search continues to be relevant and necessary due to its historical significance, user familiarity, simplicity, and compatibility with existing systems. While advanced search techniques offer enhanced capabilities, keyword search remains an essential component of search functionality.","2. Vector search with keyword-based search. This one is covered in this article.

3. A mix of dense and sparse vectors. That strategy will be covered in the upcoming article.



## Why do we still need keyword search?



A keyword-based search was the obvious choice for search engines in the past. It struggled with some

common issues, but since we didn't have any alternatives, we had to overcome them with additional
It shows you a set of results and then from that you can actually converse more to it and say, hey, can you remove five or six or reduce this by a certain degree? That is the power of what we have at hand with complex search. And complex search is becoming quickly a great segue to why we need to implement conversational search. We would need to implement large language models in our ecosystem so that we can understand the context of what users have been asking
needed to find what we’re looking for. Semantic search enables us to find things without knowing the exact 

terminology. For example, if an engineer wanted to understand “*What library is used for payment processing?*” 

a semantic code search engine would be able to retrieve results containing “*Stripe*” or “*PayPal*”. A traditional 

lexical search engine would not.



One peculiarity of this problem is that the **usefulness of the solution increases with the size of the code
. We also started converting words into their root forms to cover more cases, removing stopwords, etc. Effectively we were becoming more and more user-friendly. Still, the idea behind the whole process is derived from the most straightforward keyword-based search known since the Middle Ages, with some tweaks.
simply don't want to for reasons we don't need to know.



### Grouping requests



Embeddings are great for capturing the semantics of the documents, but we rarely encode larger pieces 

of data into a single vector. Having a summary of a book may sound attractive, but in reality, we 

divide it into paragraphs or some different parts to have higher granularity. That pays off when we 

perform the semantic search, as we can return the relevant pieces only. That's also how modern tools","[""2. Vector search with keyword-based search. This one is covered in this article.\n\n3. A mix of dense and sparse vectors. That strategy will be covered in the upcoming article.\n\n\n\n## Why do we still need keyword search?\n\n\n\nA keyword-based search was the obvious choice for search engines in the past. It struggled with some\n\ncommon issues, but since we didn't have any alternatives, we had to overcome them with additional"", 'It shows you a set of results and then from that you can actually converse more to it and say, hey, can you remove five or six or reduce this by a certain degree? That is the power of what we have at hand with complex search. And complex search is becoming quickly a great segue to why we need to implement conversational search. We would need to implement large language models in our ecosystem so that we can understand the context of what users have been asking', 'needed to find what we’re looking for. Semantic search enables us to find things without knowing the exact \n\nterminology. For example, if an engineer wanted to understand “*What library is used for payment processing?*” \n\na semantic code search engine would be able to retrieve results containing “*Stripe*” or “*PayPal*”. A traditional \n\nlexical search engine would not.\n\n\n\nOne peculiarity of this problem is that the **usefulness of the solution increases with the size of the code', '. We also started converting words into their root forms to cover more cases, removing stopwords, etc. Effectively we were becoming more and more user-friendly. Still, the idea behind the whole process is derived from the most straightforward keyword-based search known since the Middle Ages, with some tweaks.', ""simply don't want to for reasons we don't need to know.\n\n\n\n### Grouping requests\n\n\n\nEmbeddings are great for capturing the semantics of the documents, but we rarely encode larger pieces \n\nof data into a single vector. Having a summary of a book may sound attractive, but in reality, we \n\ndivide it into paragraphs or some different parts to have higher granularity. That pays off when we \n\nperform the semantic search, as we can return the relevant pieces only. That's also how modern tools""]","Question: Why do we still need keyword search?\n\nContext: 2. Vector search with keyword-based search. This one is covered in this article.

3. A mix of dense and sparse vectors. That strategy will be covered in the upcoming article.



## Why do we still need keyword search?



A keyword-based search was the obvious choice for search engines in the past. It struggled with some

common issues, but since we didn't have any alternatives, we had to overcome them with additional
It shows you a set of results and then from that you can actually converse more to it and say, hey, can you remove five or six or reduce this by a certain degree? That is the power of what we have at hand with complex search. And complex search is becoming quickly a great segue to why we need to implement conversational search. We would need to implement large language models in our ecosystem so that we can understand the context of what users have been asking
needed to find what we’re looking for. Semantic search enables us to find things without knowing the exact 

terminology. For example, if an engineer wanted to understand “*What library is used for payment processing?*” 

a semantic code search engine would be able to retrieve results containing “*Stripe*” or “*PayPal*”. A traditional 

lexical search engine would not.



One peculiarity of this problem is that the **usefulness of the solution increases with the size of the code
. We also started converting words into their root forms to cover more cases, removing stopwords, etc. Effectively we were becoming more and more user-friendly. Still, the idea behind the whole process is derived from the most straightforward keyword-based search known since the Middle Ages, with some tweaks.
simply don't want to for reasons we don't need to know.



### Grouping requests



Embeddings are great for capturing the semantics of the documents, but we rarely encode larger pieces 

of data into a single vector. Having a summary of a book may sound attractive, but in reality, we 

divide it into paragraphs or some different parts to have higher granularity. That pays off when we 

perform the semantic search, as we can return the relevant pieces only. That's also how modern tools\n\nAnswer:",Why do we still need keyword search?,"Keyword search is still useful in cases of out-of-domain search, where words are just words regardless of their meaning.","[""2. Vector search with keyword-based search. This one is covered in this article.\n\n3. A mix of dense and sparse vectors. That strategy will be covered in the upcoming article.\n\n\n\n## Why do we still need keyword search?\n\n\n\nA keyword-based search was the obvious choice for search engines in the past. It struggled with some\n\ncommon issues, but since we didn't have any alternatives, we had to overcome them with additional"", 'It shows you a set of results and then from that you can actually converse more to it and say, hey, can you remove five or six or reduce this by a certain degree? That is the power of what we have at hand with complex search. And complex search is becoming quickly a great segue to why we need to implement conversational search. We would need to implement large language models in our ecosystem so that we can understand the context of what users have been asking', 'needed to find what we’re looking for. Semantic search enables us to find things without knowing the exact \n\nterminology. For example, if an engineer wanted to understand “*What library is used for payment processing?*” \n\na semantic code search engine would be able to retrieve results containing “*Stripe*” or “*PayPal*”. A traditional \n\nlexical search engine would not.\n\n\n\nOne peculiarity of this problem is that the **usefulness of the solution increases with the size of the code', '. We also started converting words into their root forms to cover more cases, removing stopwords, etc. Effectively we were becoming more and more user-friendly. Still, the idea behind the whole process is derived from the most straightforward keyword-based search known since the Middle Ages, with some tweaks.', ""simply don't want to for reasons we don't need to know.\n\n\n\n### Grouping requests\n\n\n\nEmbeddings are great for capturing the semantics of the documents, but we rarely encode larger pieces \n\nof data into a single vector. Having a summary of a book may sound attractive, but in reality, we \n\ndivide it into paragraphs or some different parts to have higher granularity. That pays off when we \n\nperform the semantic search, as we can return the relevant pieces only. That's also how modern tools""]","2. Vector search with keyword-based search. This one is covered in this article.

3. A mix of dense and sparse vectors. That strategy will be covered in the upcoming article.



## Why do we still need keyword search?



A keyword-based search was the obvious choice for search engines in the past. It struggled with some

common issues, but since we didn't have any alternatives, we had to overcome them with additional
It shows you a set of results and then from that you can actually converse more to it and say, hey, can you remove five or six or reduce this by a certain degree? That is the power of what we have at hand with complex search. And complex search is becoming quickly a great segue to why we need to implement conversational search. We would need to implement large language models in our ecosystem so that we can understand the context of what users have been asking
needed to find what we’re looking for. Semantic search enables us to find things without knowing the exact 

terminology. For example, if an engineer wanted to understand “*What library is used for payment processing?*” 

a semantic code search engine would be able to retrieve results containing “*Stripe*” or “*PayPal*”. A traditional 

lexical search engine would not.



One peculiarity of this problem is that the **usefulness of the solution increases with the size of the code
. We also started converting words into their root forms to cover more cases, removing stopwords, etc. Effectively we were becoming more and more user-friendly. Still, the idea behind the whole process is derived from the most straightforward keyword-based search known since the Middle Ages, with some tweaks.
simply don't want to for reasons we don't need to know.



### Grouping requests



Embeddings are great for capturing the semantics of the documents, but we rarely encode larger pieces 

of data into a single vector. Having a summary of a book may sound attractive, but in reality, we 

divide it into paragraphs or some different parts to have higher granularity. That pays off when we 

perform the semantic search, as we can return the relevant pieces only. That's also how modern tools",0.04824561403508772,0.5238095238095238,0.08835341365461846,0.013215859030837005,0.15,0.024291497975708506,0.043859649122807015,0.47619047619047616,0.08032128514056225,0.043859649122807015,0.47619047619047616,0.08032128514056225,0.7301305532455444,0.45647475123405457,0.6013550162315369,0.5189934968948364,0.508913902209743,0.0017829537391662598,235,12.368421052631579,0.33572218996609765
True,,2906.489,1202762c,What principles did Qdrant follow while designing benchmarks for vector search engines?,"Qdrant followed the principles of doing comparative benchmarks focusing on relative numbers rather than absolute numbers, and using affordable hardware for easy result reproduction.","While designing benchmarks for vector search engines, Qdrant followed several principles to ensure effectiveness and accuracy:

1. **Use of Reference Datasets:** Qdrant used reference datasets to benchmark the search quality, providing a standardized basis for comparison across different vector search engines.

2. **Focus on Search Quality:** The benchmarks were designed to prioritize search quality, aiming to assess the precision and accuracy of search results.

3. **Avoiding Linear Combination:** Qdrant did not opt for a linear combination approach that combines full-text and vector search scores. This decision indicates a focus on more sophisticated methods to achieve optimal search precision.

By adhering to these principles, Qdrant aimed to establish a comprehensive and reliable benchmarking framework for vector search engines, enabling users to evaluate performance and make informed decisions when selecting a vector search solution.","All of those engines might be easily used in combination with the vector search offered by Qdrant. But the 

exact way how to combine the results of both algorithms to achieve the best search precision might be still 

unclear. So we need to understand how to do it effectively. We will be using reference datasets to benchmark 

the search quality.



## Why not linear combination?



It's often proposed to use full-text and vector search scores to form a linear combination formula to rerank
---

title: Vector Database Benchmarks

description: The first comparative benchmark and benchmarking framework for vector search engines and vector databases.

keywords:

  - vector databases comparative benchmark

  - ANN Benchmark

  - Qdrant vs Milvus

  - Qdrant vs Weaviate

  - Qdrant vs Redis

  - Qdrant vs ElasticSearch

  - benchmark

  - performance

  - latency

  - RPS

  - comparison

  - vector search

  - embedding

preview_image: /benchmarks/benchmark-1.png
---

draft: false

id: 3

title: Benchmarks F.A.Q.

weight: 10

---



# Benchmarks F.A.Q.



## Are we biased?



Probably, yes. Even if we try to be objective, we are not experts in using all the existing vector databases.

We build Qdrant and know the most about it.

Due to that, we could have missed some important tweaks in different vector search engines.
weight: -80

author: Kacper Łukawski

author_link: https://medium.com/@lukawskikacper

date: 2023-10-25T09:46:00.000Z

---



The most popular use case for vector search engines, such as Qdrant, is Semantic search with a single query vector. Given the 

query, we can vectorize (embed) it and find the closest points in the index. But [Vector Similarity beyond Search](/articles/vector-similarity-beyond-search/)
## Project Overview



Qdrant is a powerful vector search engine widely used for similarity search and clustering. However, it lacked a user-friendly web-based UI for data visualization and exploration. My project aimed to bridge this gap by developing a web-based user interface that allows users to easily interact with and explore their vector data.



## Milestones and Achievements","[""All of those engines might be easily used in combination with the vector search offered by Qdrant. But the \n\nexact way how to combine the results of both algorithms to achieve the best search precision might be still \n\nunclear. So we need to understand how to do it effectively. We will be using reference datasets to benchmark \n\nthe search quality.\n\n\n\n## Why not linear combination?\n\n\n\nIt's often proposed to use full-text and vector search scores to form a linear combination formula to rerank"", '---\n\ntitle: Vector Database Benchmarks\n\ndescription: The first comparative benchmark and benchmarking framework for vector search engines and vector databases.\n\nkeywords:\n\n  - vector databases comparative benchmark\n\n  - ANN Benchmark\n\n  - Qdrant vs Milvus\n\n  - Qdrant vs Weaviate\n\n  - Qdrant vs Redis\n\n  - Qdrant vs ElasticSearch\n\n  - benchmark\n\n  - performance\n\n  - latency\n\n  - RPS\n\n  - comparison\n\n  - vector search\n\n  - embedding\n\npreview_image: /benchmarks/benchmark-1.png', '---\n\ndraft: false\n\nid: 3\n\ntitle: Benchmarks F.A.Q.\n\nweight: 10\n\n---\n\n\n\n# Benchmarks F.A.Q.\n\n\n\n## Are we biased?\n\n\n\nProbably, yes. Even if we try to be objective, we are not experts in using all the existing vector databases.\n\nWe build Qdrant and know the most about it.\n\nDue to that, we could have missed some important tweaks in different vector search engines.', 'weight: -80\n\nauthor: Kacper Łukawski\n\nauthor_link: https://medium.com/@lukawskikacper\n\ndate: 2023-10-25T09:46:00.000Z\n\n---\n\n\n\nThe most popular use case for vector search engines, such as Qdrant, is Semantic search with a single query vector. Given the \n\nquery, we can vectorize (embed) it and find the closest points in the index. But [Vector Similarity beyond Search](/articles/vector-similarity-beyond-search/)', '## Project Overview\n\n\n\nQdrant is a powerful vector search engine widely used for similarity search and clustering. However, it lacked a user-friendly web-based UI for data visualization and exploration. My project aimed to bridge this gap by developing a web-based user interface that allows users to easily interact with and explore their vector data.\n\n\n\n## Milestones and Achievements']","Question: What principles did Qdrant follow while designing benchmarks for vector search engines?\n\nContext: All of those engines might be easily used in combination with the vector search offered by Qdrant. But the 

exact way how to combine the results of both algorithms to achieve the best search precision might be still 

unclear. So we need to understand how to do it effectively. We will be using reference datasets to benchmark 

the search quality.



## Why not linear combination?



It's often proposed to use full-text and vector search scores to form a linear combination formula to rerank
---

title: Vector Database Benchmarks

description: The first comparative benchmark and benchmarking framework for vector search engines and vector databases.

keywords:

- vector databases comparative benchmark

- ANN Benchmark

- Qdrant vs Milvus

- Qdrant vs Weaviate

- Qdrant vs Redis

- Qdrant vs ElasticSearch

- benchmark

- performance

- latency

- RPS

- comparison

- vector search

- embedding

preview_image: /benchmarks/benchmark-1.png
---

draft: false

id: 3

title: Benchmarks F.A.Q.

weight: 10

---



# Benchmarks F.A.Q.



## Are we biased?



Probably, yes. Even if we try to be objective, we are not experts in using all the existing vector databases.

We build Qdrant and know the most about it.

Due to that, we could have missed some important tweaks in different vector search engines.
weight: -80

author: Kacper Łukawski

author_link: https://medium.com/@lukawskikacper

date: 2023-10-25T09:46:00.000Z

---



The most popular use case for vector search engines, such as Qdrant, is Semantic search with a single query vector. Given the 

query, we can vectorize (embed) it and find the closest points in the index. But [Vector Similarity beyond Search](/articles/vector-similarity-beyond-search/)
## Project Overview



Qdrant is a powerful vector search engine widely used for similarity search and clustering. However, it lacked a user-friendly web-based UI for data visualization and exploration. My project aimed to bridge this gap by developing a web-based user interface that allows users to easily interact with and explore their vector data.



## Milestones and Achievements\n\nAnswer:",What principles did Qdrant follow while designing benchmarks for vector search engines?,"Qdrant followed the principles of doing comparative benchmarks focusing on relative numbers rather than absolute numbers, and using affordable hardware for easy result reproduction.","[""All of those engines might be easily used in combination with the vector search offered by Qdrant. But the \n\nexact way how to combine the results of both algorithms to achieve the best search precision might be still \n\nunclear. So we need to understand how to do it effectively. We will be using reference datasets to benchmark \n\nthe search quality.\n\n\n\n## Why not linear combination?\n\n\n\nIt's often proposed to use full-text and vector search scores to form a linear combination formula to rerank"", '---\n\ntitle: Vector Database Benchmarks\n\ndescription: The first comparative benchmark and benchmarking framework for vector search engines and vector databases.\n\nkeywords:\n\n  - vector databases comparative benchmark\n\n  - ANN Benchmark\n\n  - Qdrant vs Milvus\n\n  - Qdrant vs Weaviate\n\n  - Qdrant vs Redis\n\n  - Qdrant vs ElasticSearch\n\n  - benchmark\n\n  - performance\n\n  - latency\n\n  - RPS\n\n  - comparison\n\n  - vector search\n\n  - embedding\n\npreview_image: /benchmarks/benchmark-1.png', '---\n\ndraft: false\n\nid: 3\n\ntitle: Benchmarks F.A.Q.\n\nweight: 10\n\n---\n\n\n\n# Benchmarks F.A.Q.\n\n\n\n## Are we biased?\n\n\n\nProbably, yes. Even if we try to be objective, we are not experts in using all the existing vector databases.\n\nWe build Qdrant and know the most about it.\n\nDue to that, we could have missed some important tweaks in different vector search engines.', 'weight: -80\n\nauthor: Kacper Łukawski\n\nauthor_link: https://medium.com/@lukawskikacper\n\ndate: 2023-10-25T09:46:00.000Z\n\n---\n\n\n\nThe most popular use case for vector search engines, such as Qdrant, is Semantic search with a single query vector. Given the \n\nquery, we can vectorize (embed) it and find the closest points in the index. But [Vector Similarity beyond Search](/articles/vector-similarity-beyond-search/)', '## Project Overview\n\n\n\nQdrant is a powerful vector search engine widely used for similarity search and clustering. However, it lacked a user-friendly web-based UI for data visualization and exploration. My project aimed to bridge this gap by developing a web-based user interface that allows users to easily interact with and explore their vector data.\n\n\n\n## Milestones and Achievements']","All of those engines might be easily used in combination with the vector search offered by Qdrant. But the 

exact way how to combine the results of both algorithms to achieve the best search precision might be still 

unclear. So we need to understand how to do it effectively. We will be using reference datasets to benchmark 

the search quality.



## Why not linear combination?



It's often proposed to use full-text and vector search scores to form a linear combination formula to rerank
---

title: Vector Database Benchmarks

description: The first comparative benchmark and benchmarking framework for vector search engines and vector databases.

keywords:

  - vector databases comparative benchmark

  - ANN Benchmark

  - Qdrant vs Milvus

  - Qdrant vs Weaviate

  - Qdrant vs Redis

  - Qdrant vs ElasticSearch

  - benchmark

  - performance

  - latency

  - RPS

  - comparison

  - vector search

  - embedding

preview_image: /benchmarks/benchmark-1.png
---

draft: false

id: 3

title: Benchmarks F.A.Q.

weight: 10

---



# Benchmarks F.A.Q.



## Are we biased?



Probably, yes. Even if we try to be objective, we are not experts in using all the existing vector databases.

We build Qdrant and know the most about it.

Due to that, we could have missed some important tweaks in different vector search engines.
weight: -80

author: Kacper Łukawski

author_link: https://medium.com/@lukawskikacper

date: 2023-10-25T09:46:00.000Z

---



The most popular use case for vector search engines, such as Qdrant, is Semantic search with a single query vector. Given the 

query, we can vectorize (embed) it and find the closest points in the index. But [Vector Similarity beyond Search](/articles/vector-similarity-beyond-search/)
## Project Overview



Qdrant is a powerful vector search engine widely used for similarity search and clustering. However, it lacked a user-friendly web-based UI for data visualization and exploration. My project aimed to bridge this gap by developing a web-based user interface that allows users to easily interact with and explore their vector data.



## Milestones and Achievements",0.08,0.43478260869565216,0.13513513513513514,0.008064516129032258,0.045454545454545456,0.0136986301369863,0.064,0.34782608695652173,0.10810810810810811,0.064,0.34782608695652173,0.10810810810810811,0.6218161582946777,0.49630188941955566,0.5854055881500244,0.5371838212013245,0.6820991835556924,0.05765986442565918,132,5.5,0.34589834798100416
True,,1607.53,5df09d40,What models does Qdrant support for embedding generation?,"Qdrant supports a reasonable range of models, including a few multilingual ones.","Qdrant supports various embedding models for generating embeddings, including:

1. Cohere
2. Gemini
3. Jina Embeddings
4. OpenAI
5. Aleph Alpha

These models can be seamlessly integrated with Qdrant to generate high-quality embeddings for different applications. It is essential to select the right embedding model based on your use case to ensure optimal application performance.","Through this detailed setup, our experiment sought to shed light on the nuanced interplay between Binary Quantization and the high-quality embeddings produced by OpenAI's models. By meticulously adjusting and observing the outcomes under different conditions, we aimed to uncover actionable insights that could empower users to harness the full potential of Qdrant in combination with OpenAI's embeddings, regardless of their specific application needs.
Selecting the right embedding model for your use case is crucial to your application performance. Qdrant makes it easier by offering seamless integration with the best selection of embedding APIs, including [Cohere](https://qdrant.tech/documentation/embeddings/cohere/), [Gemini](https://qdrant.tech/documentation/embeddings/gemini/), [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/), [OpenAI](https://qdrant.tech/documentation/embeddings/openai/), [Aleph Alpha](https://qdrant
. So this is taken care of. So whatever is your best practices for the Embedding model, make sure you use it when you're using it with Qdrant or just in isolation as well.
```python

qdrant_client.search(

    collection_name=""GeminiCollection"",

    query=genai.embed_content(

        model=""models/embedding-001"",

        content=""What is the best vector database to use with Gemini?"",

        task_type=""retrieval_query"",

    )[""embedding""],

)

```



## Using Gemini Embedding Models with Binary Quantization
query_request = SemanticEmbeddingRequest(**query_params)

    query_response = await client.semantic_embed(

        request=query_request, model=model

    )

    

    qdrant_client.upsert(

        collection_name=""MyCollection"",

        points=Batch(

            ids=[1],

            vectors=[query_response.embedding],

        )

    )

```



If we wanted to create text embeddings with the same model, we wouldn't use `ImagePrompt.from_file`, but simply provide the input","[""Through this detailed setup, our experiment sought to shed light on the nuanced interplay between Binary Quantization and the high-quality embeddings produced by OpenAI's models. By meticulously adjusting and observing the outcomes under different conditions, we aimed to uncover actionable insights that could empower users to harness the full potential of Qdrant in combination with OpenAI's embeddings, regardless of their specific application needs."", 'Selecting the right embedding model for your use case is crucial to your application performance. Qdrant makes it easier by offering seamless integration with the best selection of embedding APIs, including [Cohere](https://qdrant.tech/documentation/embeddings/cohere/), [Gemini](https://qdrant.tech/documentation/embeddings/gemini/), [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/), [OpenAI](https://qdrant.tech/documentation/embeddings/openai/), [Aleph Alpha](https://qdrant', "". So this is taken care of. So whatever is your best practices for the Embedding model, make sure you use it when you're using it with Qdrant or just in isolation as well."", '```python\n\nqdrant_client.search(\n\n    collection_name=""GeminiCollection"",\n\n    query=genai.embed_content(\n\n        model=""models/embedding-001"",\n\n        content=""What is the best vector database to use with Gemini?"",\n\n        task_type=""retrieval_query"",\n\n    )[""embedding""],\n\n)\n\n```\n\n\n\n## Using Gemini Embedding Models with Binary Quantization', 'query_request = SemanticEmbeddingRequest(**query_params)\n\n    query_response = await client.semantic_embed(\n\n        request=query_request, model=model\n\n    )\n\n    \n\n    qdrant_client.upsert(\n\n        collection_name=""MyCollection"",\n\n        points=Batch(\n\n            ids=[1],\n\n            vectors=[query_response.embedding],\n\n        )\n\n    )\n\n```\n\n\n\nIf we wanted to create text embeddings with the same model, we wouldn\'t use `ImagePrompt.from_file`, but simply provide the input']","Question: What models does Qdrant support for embedding generation?\n\nContext: Through this detailed setup, our experiment sought to shed light on the nuanced interplay between Binary Quantization and the high-quality embeddings produced by OpenAI's models. By meticulously adjusting and observing the outcomes under different conditions, we aimed to uncover actionable insights that could empower users to harness the full potential of Qdrant in combination with OpenAI's embeddings, regardless of their specific application needs.
Selecting the right embedding model for your use case is crucial to your application performance. Qdrant makes it easier by offering seamless integration with the best selection of embedding APIs, including [Cohere](https://qdrant.tech/documentation/embeddings/cohere/), [Gemini](https://qdrant.tech/documentation/embeddings/gemini/), [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/), [OpenAI](https://qdrant.tech/documentation/embeddings/openai/), [Aleph Alpha](https://qdrant
. So this is taken care of. So whatever is your best practices for the Embedding model, make sure you use it when you're using it with Qdrant or just in isolation as well.
```python

qdrant_client.search(

collection_name=""GeminiCollection"",

query=genai.embed_content(

model=""models/embedding-001"",

content=""What is the best vector database to use with Gemini?"",

task_type=""retrieval_query"",

)[""embedding""],

)

```



## Using Gemini Embedding Models with Binary Quantization
query_request = SemanticEmbeddingRequest(**query_params)

query_response = await client.semantic_embed(

request=query_request, model=model

)



qdrant_client.upsert(

collection_name=""MyCollection"",

points=Batch(

ids=[1],

vectors=[query_response.embedding],

)

)

```



If we wanted to create text embeddings with the same model, we wouldn't use `ImagePrompt.from_file`, but simply provide the input\n\nAnswer:",What models does Qdrant support for embedding generation?,"Qdrant supports a reasonable range of models, including a few multilingual ones.","[""Through this detailed setup, our experiment sought to shed light on the nuanced interplay between Binary Quantization and the high-quality embeddings produced by OpenAI's models. By meticulously adjusting and observing the outcomes under different conditions, we aimed to uncover actionable insights that could empower users to harness the full potential of Qdrant in combination with OpenAI's embeddings, regardless of their specific application needs."", 'Selecting the right embedding model for your use case is crucial to your application performance. Qdrant makes it easier by offering seamless integration with the best selection of embedding APIs, including [Cohere](https://qdrant.tech/documentation/embeddings/cohere/), [Gemini](https://qdrant.tech/documentation/embeddings/gemini/), [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/), [OpenAI](https://qdrant.tech/documentation/embeddings/openai/), [Aleph Alpha](https://qdrant', "". So this is taken care of. So whatever is your best practices for the Embedding model, make sure you use it when you're using it with Qdrant or just in isolation as well."", '```python\n\nqdrant_client.search(\n\n    collection_name=""GeminiCollection"",\n\n    query=genai.embed_content(\n\n        model=""models/embedding-001"",\n\n        content=""What is the best vector database to use with Gemini?"",\n\n        task_type=""retrieval_query"",\n\n    )[""embedding""],\n\n)\n\n```\n\n\n\n## Using Gemini Embedding Models with Binary Quantization', 'query_request = SemanticEmbeddingRequest(**query_params)\n\n    query_response = await client.semantic_embed(\n\n        request=query_request, model=model\n\n    )\n\n    \n\n    qdrant_client.upsert(\n\n        collection_name=""MyCollection"",\n\n        points=Batch(\n\n            ids=[1],\n\n            vectors=[query_response.embedding],\n\n        )\n\n    )\n\n```\n\n\n\nIf we wanted to create text embeddings with the same model, we wouldn\'t use `ImagePrompt.from_file`, but simply provide the input']","Through this detailed setup, our experiment sought to shed light on the nuanced interplay between Binary Quantization and the high-quality embeddings produced by OpenAI's models. By meticulously adjusting and observing the outcomes under different conditions, we aimed to uncover actionable insights that could empower users to harness the full potential of Qdrant in combination with OpenAI's embeddings, regardless of their specific application needs.
Selecting the right embedding model for your use case is crucial to your application performance. Qdrant makes it easier by offering seamless integration with the best selection of embedding APIs, including [Cohere](https://qdrant.tech/documentation/embeddings/cohere/), [Gemini](https://qdrant.tech/documentation/embeddings/gemini/), [Jina Embeddings](https://qdrant.tech/documentation/embeddings/jina-embeddings/), [OpenAI](https://qdrant.tech/documentation/embeddings/openai/), [Aleph Alpha](https://qdrant
. So this is taken care of. So whatever is your best practices for the Embedding model, make sure you use it when you're using it with Qdrant or just in isolation as well.
```python

qdrant_client.search(

    collection_name=""GeminiCollection"",

    query=genai.embed_content(

        model=""models/embedding-001"",

        content=""What is the best vector database to use with Gemini?"",

        task_type=""retrieval_query"",

    )[""embedding""],

)

```



## Using Gemini Embedding Models with Binary Quantization
query_request = SemanticEmbeddingRequest(**query_params)

    query_response = await client.semantic_embed(

        request=query_request, model=model

    )

    

    qdrant_client.upsert(

        collection_name=""MyCollection"",

        points=Batch(

            ids=[1],

            vectors=[query_response.embedding],

        )

    )

```



If we wanted to create text embeddings with the same model, we wouldn't use `ImagePrompt.from_file`, but simply provide the input",0.07272727272727272,0.4,0.12307692307692307,0.018518518518518517,0.1111111111111111,0.031746031746031744,0.07272727272727272,0.4,0.12307692307692307,0.07272727272727272,0.4,0.12307692307692307,0.6735336184501648,0.5059000253677368,0.6260397434234619,0.5595942735671997,0.9875189418307855,0.6905315518379211,55,4.583333333333333,0.53481949546253
True,,5649.712,cd058fba,How can you parallelize the upload of a large dataset using shards in Qdrant?,"By creating multiple shards in Qdrant, you can parallelize the upload of a large dataset. It is recommended to have 2 to 4 shards per machine for efficient processing. When creating a collection in Qdrant, you can specify the number of shards to use for that collection. ","To parallelize the upload of a large dataset using shards in Qdrant, you can follow these steps:

1. Create multiple shards for the collection: When creating a collection in Qdrant, specify the number of shards you want to use for that collection. For example, in the HTTP request snippet provided:

```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,

""distance"": ""Cosine""

},

""shard_number"": 2

}

```

By setting the ""shard_number"" to 2, you are creating a collection with 2 shards, allowing for parallel processing of data upload.

2. Use Rust client library for faster processing: Qdrant recommends using their Rust client library for optimal performance during parallel uploads. The Rust client library is designed to efficiently handle large datasets and parallel operations.

3. Disable indexing during upload: If you are uploading a large dataset for the first time, consider disabling indexing during the upload process. This will prevent unnecessary indexing of vectors that will be overwritten by subsequent batches, improving upload efficiency.

4. Configure Qdrant for parallel processing: To maximize throughput, configure Qdrant to utilize multiple CPU cores for parallel processing. You can set the number of segments in the collection to a minimal value (e.g., 2) to benefit from the size of the index and reduce the number of vector comparisons required.

5. Optimize for latency: If minimizing latency is a priority, configure Qdrant to use as many CPU cores as possible for a single request. Set the number of segments in the collection to match the number of CPU cores in the system to process each segment in parallel, resulting in faster query responses.

By following these steps and utilizing shards in Qdrant, you can effectively parallelize the upload of a large dataset for efficient processing and performance.","## Parallel upload into multiple shards



In Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.

By creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""shard_number"": 2

}

```



```python
We recommend using our [Rust client library](https://github.com/qdrant/rust-client) for this purpose, as it is the fastest client library available for Qdrant.



If you are not using Rust, you might want to consider parallelizing your upload process.



## Disable indexing during upload



In case you are doing an initial upload of a large dataset, you might want to disable indexing during upload.

It will enable to avoid unnecessary indexing of vectors, which will be overwritten by the next batch.
collection_name=""startups"",

    documents=documents,

    metadata=metadata,

    parallel=0,  # Use all available CPU cores to encode data

)

```



The `add` method will encode all documents and upload them to Qdrant.

This is one of two fastembed-specific methods, that combines encoding and uploading into a single step.



The `parallel` parameter controls the number of CPU cores used to encode data.
);

```



To prefer throughput, you can set up Qdrant to use as many cores as possible for processing multiple requests in parallel.

To do that, you can configure qdrant to use minimal number of segments, which is usually 2.

Large segments benefit from the size of the index and overall smaller number of vector comparisons required to find the nearest neighbors. But at the same time require more time to build index.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,
Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.



To prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\.

You can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.



```http

PUT /collections/{collection_name}

{","['## Parallel upload into multiple shards\n\n\n\nIn Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.\n\nBy creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 2\n\n}\n\n```\n\n\n\n```python', 'We recommend using our [Rust client library](https://github.com/qdrant/rust-client) for this purpose, as it is the fastest client library available for Qdrant.\n\n\n\nIf you are not using Rust, you might want to consider parallelizing your upload process.\n\n\n\n## Disable indexing during upload\n\n\n\nIn case you are doing an initial upload of a large dataset, you might want to disable indexing during upload.\n\nIt will enable to avoid unnecessary indexing of vectors, which will be overwritten by the next batch.', 'collection_name=""startups"",\n\n    documents=documents,\n\n    metadata=metadata,\n\n    parallel=0,  # Use all available CPU cores to encode data\n\n)\n\n```\n\n\n\nThe `add` method will encode all documents and upload them to Qdrant.\n\nThis is one of two fastembed-specific methods, that combines encoding and uploading into a single step.\n\n\n\nThe `parallel` parameter controls the number of CPU cores used to encode data.', ');\n\n```\n\n\n\nTo prefer throughput, you can set up Qdrant to use as many cores as possible for processing multiple requests in parallel.\n\nTo do that, you can configure qdrant to use minimal number of segments, which is usually 2.\n\nLarge segments benefit from the size of the index and overall smaller number of vector comparisons required to find the nearest neighbors. But at the same time require more time to build index.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,', 'Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.\n\n\n\nTo prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\\.\n\nYou can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{']","Question: How can you parallelize the upload of a large dataset using shards in Qdrant?\n\nContext: ## Parallel upload into multiple shards



In Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.

By creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,

""distance"": ""Cosine""

},

""shard_number"": 2

}

```



```python
We recommend using our [Rust client library](https://github.com/qdrant/rust-client) for this purpose, as it is the fastest client library available for Qdrant.



If you are not using Rust, you might want to consider parallelizing your upload process.



## Disable indexing during upload



In case you are doing an initial upload of a large dataset, you might want to disable indexing during upload.

It will enable to avoid unnecessary indexing of vectors, which will be overwritten by the next batch.
collection_name=""startups"",

documents=documents,

metadata=metadata,

parallel=0,  # Use all available CPU cores to encode data

)

```



The `add` method will encode all documents and upload them to Qdrant.

This is one of two fastembed-specific methods, that combines encoding and uploading into a single step.



The `parallel` parameter controls the number of CPU cores used to encode data.
);

```



To prefer throughput, you can set up Qdrant to use as many cores as possible for processing multiple requests in parallel.

To do that, you can configure qdrant to use minimal number of segments, which is usually 2.

Large segments benefit from the size of the index and overall smaller number of vector comparisons required to find the nearest neighbors. But at the same time require more time to build index.



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,
Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.



To prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\.

You can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.



```http

PUT /collections/{collection_name}

{\n\nAnswer:",How can you parallelize the upload of a large dataset using shards in Qdrant?,"By creating multiple shards in Qdrant, you can parallelize the upload of a large dataset. It is recommended to have 2 to 4 shards per machine for efficient processing. When creating a collection in Qdrant, you can specify the number of shards to use for that collection. ","['## Parallel upload into multiple shards\n\n\n\nIn Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.\n\nBy creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 2\n\n}\n\n```\n\n\n\n```python', 'We recommend using our [Rust client library](https://github.com/qdrant/rust-client) for this purpose, as it is the fastest client library available for Qdrant.\n\n\n\nIf you are not using Rust, you might want to consider parallelizing your upload process.\n\n\n\n## Disable indexing during upload\n\n\n\nIn case you are doing an initial upload of a large dataset, you might want to disable indexing during upload.\n\nIt will enable to avoid unnecessary indexing of vectors, which will be overwritten by the next batch.', 'collection_name=""startups"",\n\n    documents=documents,\n\n    metadata=metadata,\n\n    parallel=0,  # Use all available CPU cores to encode data\n\n)\n\n```\n\n\n\nThe `add` method will encode all documents and upload them to Qdrant.\n\nThis is one of two fastembed-specific methods, that combines encoding and uploading into a single step.\n\n\n\nThe `parallel` parameter controls the number of CPU cores used to encode data.', ');\n\n```\n\n\n\nTo prefer throughput, you can set up Qdrant to use as many cores as possible for processing multiple requests in parallel.\n\nTo do that, you can configure qdrant to use minimal number of segments, which is usually 2.\n\nLarge segments benefit from the size of the index and overall smaller number of vector comparisons required to find the nearest neighbors. But at the same time require more time to build index.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,', 'Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.\n\n\n\nTo prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\\.\n\nYou can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{']","## Parallel upload into multiple shards



In Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.

By creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""shard_number"": 2

}

```



```python
We recommend using our [Rust client library](https://github.com/qdrant/rust-client) for this purpose, as it is the fastest client library available for Qdrant.



If you are not using Rust, you might want to consider parallelizing your upload process.



## Disable indexing during upload



In case you are doing an initial upload of a large dataset, you might want to disable indexing during upload.

It will enable to avoid unnecessary indexing of vectors, which will be overwritten by the next batch.
collection_name=""startups"",

    documents=documents,

    metadata=metadata,

    parallel=0,  # Use all available CPU cores to encode data

)

```



The `add` method will encode all documents and upload them to Qdrant.

This is one of two fastembed-specific methods, that combines encoding and uploading into a single step.



The `parallel` parameter controls the number of CPU cores used to encode data.
);

```



To prefer throughput, you can set up Qdrant to use as many cores as possible for processing multiple requests in parallel.

To do that, you can configure qdrant to use minimal number of segments, which is usually 2.

Large segments benefit from the size of the index and overall smaller number of vector comparisons required to find the nearest neighbors. But at the same time require more time to build index.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,
Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.



To prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\.

You can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.



```http

PUT /collections/{collection_name}

{",0.1482889733840304,0.9069767441860465,0.25490196078431376,0.09923664122137404,0.6190476190476191,0.17105263157894735,0.08365019011406843,0.5116279069767442,0.1437908496732026,0.14068441064638784,0.8604651162790697,0.24183006535947713,0.9367759227752686,0.5631133913993835,0.6953395009040833,0.622279942035675,0.8221083570970222,0.9754295927705243,285,6.0638297872340425,0.44214561501559235
True,,3840.855,9bd1a06b,What is the significance of maximizing the distance between all points in the response when utilizing vector similarity for diversity search?,"Maximizing the distance between all points in the response when utilizing vector similarity for diversity search is crucial as it allows for the algorithm to sequentially output dissimilar results. By doing so, a diverse selection of the collection can be made possible without the need for any labeling efforts. This approach ensures that the algorithm can effectively identify and retrieve a wide range of diverse items or data points.","When utilizing vector similarity for diversity search, maximizing the distance between all points in the response is significant because it allows for the generation of a diverse selection of items without the need for manual labeling efforts. By maximizing the distance between points, the algorithm can sequentially output dissimilar results, leading to a more varied and comprehensive selection.

In the context of diversity search using vector similarity, the process involves calculating a distance matrix, choosing an anchor point, and then selecting points that are most dissimilar to the anchor. This approach enables the identification of items that are different from each other, providing a broader range of options for analysis or exploration.

Overall, maximizing the distance between all points in the response when using vector similarity for diversity search helps in achieving a more diverse and representative selection of items from a dataset, leading to enhanced search results and insights.","{{< figure width=80% src=/articles_data/vector-similarity-beyond-search/diversity-force.png caption=""Example of similarity-based sampling"" >}}





The power of vector similarity, in the context of being able to compare any two points, allows making a diverse selection of the collection possible without any labeling efforts.

By maximizing the distance between all points in the response, we can have an algorithm that will sequentially output dissimilar results.
Let's imagine how to get 3 points with similarity search and then with diversity search.



Similarity:

1. Calculate distance matrix

2. Choose your anchor

3. Get a vector corresponding to the distances from the selected anchor from the distance matrix

4. Sort fetched vector

5. Get top-3 embeddings

 

Diversity:

1. Calculate distance matrix

2. Initialize starting point (randomly or according to the certain conditions)
Unlike full-text match, Vector similarity can compare any pair of documents (or points) and assign a similarity score. 

It doesn’t rely on keywords or other metadata. 

With vector similarity, we can easily achieve a dissimilarity search by inverting the search objective from maximizing similarity to minimizing it.



The dissimilarity search can find items in areas where previously no other search could be used.

Let’s look at a few examples.



### Case: Mislabeling Detection
Then we can search for the most dissimilar points to this reference set and use them as candidates for further analysis.





## Diversity Search



Even with no input provided vector, (dis-)similarity can improve an overall selection of items from the dataset.



The naive approach is to do random sampling. 

However, unless our dataset has a uniform distribution, the results of such sampling might be biased toward more frequent types of items.
{{< figure src=/articles_data/vector-similarity-beyond-search/diversity.png caption=""Diversity Search"" >}}





Some forms of diversity sampling are already used in the industry and are known as [Maximum Margin Relevance](https://python.langchain.com/docs/integrations/vectorstores/qdrant#maximum-marginal-relevance-search-mmr) (MMR). Techniques like this were developed to enhance similarity on a universal search API.

However, there is still room for new ideas, particularly regarding diversity retrieval.","['{{< figure width=80% src=/articles_data/vector-similarity-beyond-search/diversity-force.png caption=""Example of similarity-based sampling"" >}}\n\n\n\n\n\nThe power of vector similarity, in the context of being able to compare any two points, allows making a diverse selection of the collection possible without any labeling efforts.\n\nBy maximizing the distance between all points in the response, we can have an algorithm that will sequentially output dissimilar results.', ""Let's imagine how to get 3 points with similarity search and then with diversity search.\n\n\n\nSimilarity:\n\n1. Calculate distance matrix\n\n2. Choose your anchor\n\n3. Get a vector corresponding to the distances from the selected anchor from the distance matrix\n\n4. Sort fetched vector\n\n5. Get top-3 embeddings\n\n \n\nDiversity:\n\n1. Calculate distance matrix\n\n2. Initialize starting point (randomly or according to the certain conditions)"", 'Unlike full-text match, Vector similarity can compare any pair of documents (or points) and assign a similarity score. \n\nIt doesn’t rely on keywords or other metadata. \n\nWith vector similarity, we can easily achieve a dissimilarity search by inverting the search objective from maximizing similarity to minimizing it.\n\n\n\nThe dissimilarity search can find items in areas where previously no other search could be used.\n\nLet’s look at a few examples.\n\n\n\n### Case: Mislabeling Detection', 'Then we can search for the most dissimilar points to this reference set and use them as candidates for further analysis.\n\n\n\n\n\n## Diversity Search\n\n\n\nEven with no input provided vector, (dis-)similarity can improve an overall selection of items from the dataset.\n\n\n\nThe naive approach is to do random sampling. \n\nHowever, unless our dataset has a uniform distribution, the results of such sampling might be biased toward more frequent types of items.', '{{< figure src=/articles_data/vector-similarity-beyond-search/diversity.png caption=""Diversity Search"" >}}\n\n\n\n\n\nSome forms of diversity sampling are already used in the industry and are known as [Maximum Margin Relevance](https://python.langchain.com/docs/integrations/vectorstores/qdrant#maximum-marginal-relevance-search-mmr) (MMR). Techniques like this were developed to enhance similarity on a universal search API.\n\nHowever, there is still room for new ideas, particularly regarding diversity retrieval.']","Question: What is the significance of maximizing the distance between all points in the response when utilizing vector similarity for diversity search?\n\nContext: {{< figure width=80% src=/articles_data/vector-similarity-beyond-search/diversity-force.png caption=""Example of similarity-based sampling"" >}}





The power of vector similarity, in the context of being able to compare any two points, allows making a diverse selection of the collection possible without any labeling efforts.

By maximizing the distance between all points in the response, we can have an algorithm that will sequentially output dissimilar results.
Let's imagine how to get 3 points with similarity search and then with diversity search.



Similarity:

1. Calculate distance matrix

2. Choose your anchor

3. Get a vector corresponding to the distances from the selected anchor from the distance matrix

4. Sort fetched vector

5. Get top-3 embeddings



Diversity:

1. Calculate distance matrix

2. Initialize starting point (randomly or according to the certain conditions)
Unlike full-text match, Vector similarity can compare any pair of documents (or points) and assign a similarity score. 

It doesn’t rely on keywords or other metadata. 

With vector similarity, we can easily achieve a dissimilarity search by inverting the search objective from maximizing similarity to minimizing it.



The dissimilarity search can find items in areas where previously no other search could be used.

Let’s look at a few examples.



### Case: Mislabeling Detection
Then we can search for the most dissimilar points to this reference set and use them as candidates for further analysis.





## Diversity Search



Even with no input provided vector, (dis-)similarity can improve an overall selection of items from the dataset.



The naive approach is to do random sampling. 

However, unless our dataset has a uniform distribution, the results of such sampling might be biased toward more frequent types of items.
{{< figure src=/articles_data/vector-similarity-beyond-search/diversity.png caption=""Diversity Search"" >}}





Some forms of diversity sampling are already used in the industry and are known as [Maximum Margin Relevance](https://python.langchain.com/docs/integrations/vectorstores/qdrant#maximum-marginal-relevance-search-mmr) (MMR). Techniques like this were developed to enhance similarity on a universal search API.

However, there is still room for new ideas, particularly regarding diversity retrieval.\n\nAnswer:",What is the significance of maximizing the distance between all points in the response when utilizing vector similarity for diversity search?,"Maximizing the distance between all points in the response when utilizing vector similarity for diversity search is crucial as it allows for the algorithm to sequentially output dissimilar results. By doing so, a diverse selection of the collection can be made possible without the need for any labeling efforts. This approach ensures that the algorithm can effectively identify and retrieve a wide range of diverse items or data points.","['{{< figure width=80% src=/articles_data/vector-similarity-beyond-search/diversity-force.png caption=""Example of similarity-based sampling"" >}}\n\n\n\n\n\nThe power of vector similarity, in the context of being able to compare any two points, allows making a diverse selection of the collection possible without any labeling efforts.\n\nBy maximizing the distance between all points in the response, we can have an algorithm that will sequentially output dissimilar results.', ""Let's imagine how to get 3 points with similarity search and then with diversity search.\n\n\n\nSimilarity:\n\n1. Calculate distance matrix\n\n2. Choose your anchor\n\n3. Get a vector corresponding to the distances from the selected anchor from the distance matrix\n\n4. Sort fetched vector\n\n5. Get top-3 embeddings\n\n \n\nDiversity:\n\n1. Calculate distance matrix\n\n2. Initialize starting point (randomly or according to the certain conditions)"", 'Unlike full-text match, Vector similarity can compare any pair of documents (or points) and assign a similarity score. \n\nIt doesn’t rely on keywords or other metadata. \n\nWith vector similarity, we can easily achieve a dissimilarity search by inverting the search objective from maximizing similarity to minimizing it.\n\n\n\nThe dissimilarity search can find items in areas where previously no other search could be used.\n\nLet’s look at a few examples.\n\n\n\n### Case: Mislabeling Detection', 'Then we can search for the most dissimilar points to this reference set and use them as candidates for further analysis.\n\n\n\n\n\n## Diversity Search\n\n\n\nEven with no input provided vector, (dis-)similarity can improve an overall selection of items from the dataset.\n\n\n\nThe naive approach is to do random sampling. \n\nHowever, unless our dataset has a uniform distribution, the results of such sampling might be biased toward more frequent types of items.', '{{< figure src=/articles_data/vector-similarity-beyond-search/diversity.png caption=""Diversity Search"" >}}\n\n\n\n\n\nSome forms of diversity sampling are already used in the industry and are known as [Maximum Margin Relevance](https://python.langchain.com/docs/integrations/vectorstores/qdrant#maximum-marginal-relevance-search-mmr) (MMR). Techniques like this were developed to enhance similarity on a universal search API.\n\nHowever, there is still room for new ideas, particularly regarding diversity retrieval.']","{{< figure width=80% src=/articles_data/vector-similarity-beyond-search/diversity-force.png caption=""Example of similarity-based sampling"" >}}





The power of vector similarity, in the context of being able to compare any two points, allows making a diverse selection of the collection possible without any labeling efforts.

By maximizing the distance between all points in the response, we can have an algorithm that will sequentially output dissimilar results.
Let's imagine how to get 3 points with similarity search and then with diversity search.



Similarity:

1. Calculate distance matrix

2. Choose your anchor

3. Get a vector corresponding to the distances from the selected anchor from the distance matrix

4. Sort fetched vector

5. Get top-3 embeddings

 

Diversity:

1. Calculate distance matrix

2. Initialize starting point (randomly or according to the certain conditions)
Unlike full-text match, Vector similarity can compare any pair of documents (or points) and assign a similarity score. 

It doesn’t rely on keywords or other metadata. 

With vector similarity, we can easily achieve a dissimilarity search by inverting the search objective from maximizing similarity to minimizing it.



The dissimilarity search can find items in areas where previously no other search could be used.

Let’s look at a few examples.



### Case: Mislabeling Detection
Then we can search for the most dissimilar points to this reference set and use them as candidates for further analysis.





## Diversity Search



Even with no input provided vector, (dis-)similarity can improve an overall selection of items from the dataset.



The naive approach is to do random sampling. 

However, unless our dataset has a uniform distribution, the results of such sampling might be biased toward more frequent types of items.
{{< figure src=/articles_data/vector-similarity-beyond-search/diversity.png caption=""Diversity Search"" >}}





Some forms of diversity sampling are already used in the industry and are known as [Maximum Margin Relevance](https://python.langchain.com/docs/integrations/vectorstores/qdrant#maximum-marginal-relevance-search-mmr) (MMR). Techniques like this were developed to enhance similarity on a universal search API.

However, there is still room for new ideas, particularly regarding diversity retrieval.",0.33587786259541985,0.7213114754098361,0.4583333333333333,0.2076923076923077,0.45,0.2842105263157895,0.20610687022900764,0.4426229508196721,0.28124999999999994,0.3282442748091603,0.7049180327868853,0.44791666666666674,0.9278774857521057,0.6293364763259888,0.6863024234771729,0.6565861701965332,0.9951380028855056,0.9965310621385773,150,2.1739130434782608,0.48074257952766875
True,,4477.192999999999,c5c69366,How can you ensure that collection shards are replicated in Qdrant after adding a new node to the cluster?,"To ensure that collection shards are replicated in Qdrant after adding a new node to the cluster, you can use the Replicate Shard Operation. This operation allows you to create another copy of the shard on the newly connected node. It's important to note that Qdrant does not automatically balance shards as it is considered an expensive operation.","After adding a new node to the Qdrant cluster, you can ensure that collection shards are replicated by following these steps:

1. Use the Replicate Shard Operation: Use the [Replicate Shard Operation](https://qdrant.github.io/qdrant/redoc/index.html#tag/cluster/operation/update_collection_cluster) to create another copy of the shard on the newly connected node. This ensures that the data is replicated on the new node.

2. Check the State of the Consensus: Use the cluster [REST API](https://qdrant.github.io/qdrant/redoc/index.html?v=master#tag/cluster) to check the state of the consensus in the cluster. This will help you ensure that the new node has synchronized with the existing nodes properly.

3. Moving Shards: You may need to move shards in case the cluster is in a transition state, such as electing a new leader after a failure or during startup. Be aware that collection update operations may be denied during this transition period.

4. Understand Sharding: Each Collection in Qdrant consists of one or more shards. When you create a collection, Qdrant automatically splits it into multiple shards. You can specify the number of shards during collection creation, and Qdrant will distribute them across nodes in the cluster.

By following these steps and understanding the sharding mechanism in Qdrant, you can ensure that collection shards are replicated and distributed appropriately after adding a new node to the cluster.","Once the new node is ready and synchronized with the cluster, you might want to ensure that the collection shards are replicated enough. Remember that Qdrant will not automatically balance shards since this is an expensive operation.

Use the [Replicate Shard Operation](https://qdrant.github.io/qdrant/redoc/index.html#tag/cluster/operation/update_collection_cluster) to create another copy of the shard on the newly connected node.
Shards are evenly distributed across all existing nodes when a collection is first created, but Qdrant does not automatically rebalance shards if your cluster size or replication factor changes (since this is an expensive operation on large clusters). See the next section for how to move shards after scaling operations.



### Moving shards



*Available as of v0.9.0*
Practically, it means that if the cluster is in a transition state - either electing a new leader after a failure or starting up, the collection update operations will be denied.



You may use the cluster [REST API](https://qdrant.github.io/qdrant/redoc/index.html?v=master#tag/cluster) to check the state of the consensus.



## Sharding



A Collection in Qdrant is made of one or more shards.

A shard is an independent store of points which is able to perform all operations provided by collections.
Each node knows where all parts of the collection are stored through the [consensus protocol](./#raft), so when you send a search request to one Qdrant node, it automatically queries all other nodes to obtain the full search result.



When you create a collection, Qdrant splits the collection into `shard_number` shards. If left unset, `shard_number` is set to the number of nodes in your cluster:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 300,
```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.CreateCollectionAsync(

	collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

	shardNumber: 6,

	replicationFactor: 2

);

```



This code sample creates a collection with a total of 6 logical shards backed by a total of 12 physical shards.","['Once the new node is ready and synchronized with the cluster, you might want to ensure that the collection shards are replicated enough. Remember that Qdrant will not automatically balance shards since this is an expensive operation.\n\nUse the [Replicate Shard Operation](https://qdrant.github.io/qdrant/redoc/index.html#tag/cluster/operation/update_collection_cluster) to create another copy of the shard on the newly connected node.', 'Shards are evenly distributed across all existing nodes when a collection is first created, but Qdrant does not automatically rebalance shards if your cluster size or replication factor changes (since this is an expensive operation on large clusters). See the next section for how to move shards after scaling operations.\n\n\n\n### Moving shards\n\n\n\n*Available as of v0.9.0*', 'Practically, it means that if the cluster is in a transition state - either electing a new leader after a failure or starting up, the collection update operations will be denied.\n\n\n\nYou may use the cluster [REST API](https://qdrant.github.io/qdrant/redoc/index.html?v=master#tag/cluster) to check the state of the consensus.\n\n\n\n## Sharding\n\n\n\nA Collection in Qdrant is made of one or more shards.\n\nA shard is an independent store of points which is able to perform all operations provided by collections.', 'Each node knows where all parts of the collection are stored through the [consensus protocol](./#raft), so when you send a search request to one Qdrant node, it automatically queries all other nodes to obtain the full search result.\n\n\n\nWhen you create a collection, Qdrant splits the collection into `shard_number` shards. If left unset, `shard_number` is set to the number of nodes in your cluster:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 300,', '```csharp\n\nusing Qdrant.Client;\n\nusing Qdrant.Client.Grpc;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreateCollectionAsync(\n\n\tcollectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\n\tshardNumber: 6,\n\n\treplicationFactor: 2\n\n);\n\n```\n\n\n\nThis code sample creates a collection with a total of 6 logical shards backed by a total of 12 physical shards.']","Question: How can you ensure that collection shards are replicated in Qdrant after adding a new node to the cluster?\n\nContext: Once the new node is ready and synchronized with the cluster, you might want to ensure that the collection shards are replicated enough. Remember that Qdrant will not automatically balance shards since this is an expensive operation.

Use the [Replicate Shard Operation](https://qdrant.github.io/qdrant/redoc/index.html#tag/cluster/operation/update_collection_cluster) to create another copy of the shard on the newly connected node.
Shards are evenly distributed across all existing nodes when a collection is first created, but Qdrant does not automatically rebalance shards if your cluster size or replication factor changes (since this is an expensive operation on large clusters). See the next section for how to move shards after scaling operations.



### Moving shards



*Available as of v0.9.0*
Practically, it means that if the cluster is in a transition state - either electing a new leader after a failure or starting up, the collection update operations will be denied.



You may use the cluster [REST API](https://qdrant.github.io/qdrant/redoc/index.html?v=master#tag/cluster) to check the state of the consensus.



## Sharding



A Collection in Qdrant is made of one or more shards.

A shard is an independent store of points which is able to perform all operations provided by collections.
Each node knows where all parts of the collection are stored through the [consensus protocol](./#raft), so when you send a search request to one Qdrant node, it automatically queries all other nodes to obtain the full search result.



When you create a collection, Qdrant splits the collection into `shard_number` shards. If left unset, `shard_number` is set to the number of nodes in your cluster:



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 300,
```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.CreateCollectionAsync(

collectionName: ""{collection_name}"",

vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

shardNumber: 6,

replicationFactor: 2

);

```



This code sample creates a collection with a total of 6 logical shards backed by a total of 12 physical shards.\n\nAnswer:",How can you ensure that collection shards are replicated in Qdrant after adding a new node to the cluster?,"To ensure that collection shards are replicated in Qdrant after adding a new node to the cluster, you can use the Replicate Shard Operation. This operation allows you to create another copy of the shard on the newly connected node. It's important to note that Qdrant does not automatically balance shards as it is considered an expensive operation.","['Once the new node is ready and synchronized with the cluster, you might want to ensure that the collection shards are replicated enough. Remember that Qdrant will not automatically balance shards since this is an expensive operation.\n\nUse the [Replicate Shard Operation](https://qdrant.github.io/qdrant/redoc/index.html#tag/cluster/operation/update_collection_cluster) to create another copy of the shard on the newly connected node.', 'Shards are evenly distributed across all existing nodes when a collection is first created, but Qdrant does not automatically rebalance shards if your cluster size or replication factor changes (since this is an expensive operation on large clusters). See the next section for how to move shards after scaling operations.\n\n\n\n### Moving shards\n\n\n\n*Available as of v0.9.0*', 'Practically, it means that if the cluster is in a transition state - either electing a new leader after a failure or starting up, the collection update operations will be denied.\n\n\n\nYou may use the cluster [REST API](https://qdrant.github.io/qdrant/redoc/index.html?v=master#tag/cluster) to check the state of the consensus.\n\n\n\n## Sharding\n\n\n\nA Collection in Qdrant is made of one or more shards.\n\nA shard is an independent store of points which is able to perform all operations provided by collections.', 'Each node knows where all parts of the collection are stored through the [consensus protocol](./#raft), so when you send a search request to one Qdrant node, it automatically queries all other nodes to obtain the full search result.\n\n\n\nWhen you create a collection, Qdrant splits the collection into `shard_number` shards. If left unset, `shard_number` is set to the number of nodes in your cluster:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 300,', '```csharp\n\nusing Qdrant.Client;\n\nusing Qdrant.Client.Grpc;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreateCollectionAsync(\n\n\tcollectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\n\tshardNumber: 6,\n\n\treplicationFactor: 2\n\n);\n\n```\n\n\n\nThis code sample creates a collection with a total of 6 logical shards backed by a total of 12 physical shards.']","Once the new node is ready and synchronized with the cluster, you might want to ensure that the collection shards are replicated enough. Remember that Qdrant will not automatically balance shards since this is an expensive operation.

Use the [Replicate Shard Operation](https://qdrant.github.io/qdrant/redoc/index.html#tag/cluster/operation/update_collection_cluster) to create another copy of the shard on the newly connected node.
Shards are evenly distributed across all existing nodes when a collection is first created, but Qdrant does not automatically rebalance shards if your cluster size or replication factor changes (since this is an expensive operation on large clusters). See the next section for how to move shards after scaling operations.



### Moving shards



*Available as of v0.9.0*
Practically, it means that if the cluster is in a transition state - either electing a new leader after a failure or starting up, the collection update operations will be denied.



You may use the cluster [REST API](https://qdrant.github.io/qdrant/redoc/index.html?v=master#tag/cluster) to check the state of the consensus.



## Sharding



A Collection in Qdrant is made of one or more shards.

A shard is an independent store of points which is able to perform all operations provided by collections.
Each node knows where all parts of the collection are stored through the [consensus protocol](./#raft), so when you send a search request to one Qdrant node, it automatically queries all other nodes to obtain the full search result.



When you create a collection, Qdrant splits the collection into `shard_number` shards. If left unset, `shard_number` is set to the number of nodes in your cluster:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 300,
```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.CreateCollectionAsync(

	collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

	shardNumber: 6,

	replicationFactor: 2

);

```



This code sample creates a collection with a total of 6 logical shards backed by a total of 12 physical shards.",0.2037914691943128,0.8113207547169812,0.32575757575757575,0.11904761904761904,0.4807692307692308,0.19083969465648856,0.13270142180094788,0.5283018867924528,0.21212121212121213,0.1990521327014218,0.7924528301886793,0.3181818181818182,0.9343920350074768,0.5664466619491577,0.6834348440170288,0.6194657683372498,0.8912021666066721,0.9920160399245409,218,3.694915254237288,0.5346853228732715
True,,6731.8550000000005,49f73666,Why would someone use a vector database?,"A vector database is used for various reasons, primarily for its efficiency in handling complex data structures and enabling advanced search capabilities. In the context of search and discovery, a vector database allows for state-of-the-art vector-search functionalities, making it ideal for applications requiring similarity search, recommendation systems, and content-based search. By leveraging vectors to represent data points, a vector database can efficiently compute similarities between vectors, enabling quick and accurate retrieval of relevant information","Starting your first Vector Database project involves several key steps to ensure successful implementation and utilization of this specialized database system. Here are some steps to consider:

1. **Define Your Use Case**: Clearly identify the specific application or use case for which you will be using the Vector Database. Understanding your data requirements and the types of queries you need to perform will help in configuring the database appropriately.

2. **Choose the Right Vector Database**: There are several Vector Database options available, each with its own set of features and capabilities. Research and select the database that best aligns with your use case requirements.

3. **Data Preparation**: Prepare your data by converting it into high-dimensional vectors. This involves using techniques like vector embeddings to represent your data in a format suitable for storage and retrieval in a Vector Database.

4. **Database Configuration**: Set up and configure your Vector Database according to the requirements of your use case. This may involve defining indexing strategies, storage configurations, and query optimization parameters.

5. **Data Ingestion**: Ingest your prepared data into the Vector Database. Ensure that the data is stored efficiently and indexed properly to enable fast and accurate retrieval.

6. **Query Testing**: Test the performance of your Vector Database by running sample queries and analyzing the results. Optimize query performance by fine-tuning indexing parameters and data structures.

7. **Scale and Monitor**: As your dataset grows or your query requirements change, scale your Vector Database infrastructure accordingly. Monitor the database performance regularly to identify any bottlenecks or issues.

8. **Continuous Improvement**: Continuously optimize and refine your Vector Database implementation based on feedback, new use cases, or changing data patterns. Stay updated on the latest developments in Vector Database technology to leverage new features and improvements.

By following these steps and investing in a dedicated Vector Database for your project, you can harness the power of efficient indexing, querying, and retrieval of high-dimensional vector data to drive advanced data analysis and similarity search operations.","aliases: [ /blog/what-is-a-vector-database/ ]

---



> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.





## Why use a Vector Database?



The data flood is real.
And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query
advantage of their efficient indexing and searching techniques, vector databases enable faster 

and more accurate retrieval of unstructured data already represented as vectors, which can 

help put in front of users the most relevant results to their queries.



In addition, other benefits of using vector databases include:

1. Efficient storage and indexing of high-dimensional data.

3. Ability to handle large-scale datasets with billions of data points.

4. Support for real-time analytics and queries.
There is no one-size-fits-all approach that would not compromise on performance or flexibility.

So if your use case utilizes vector search in any significant way, it is worth investing in a dedicated vector search engine, aka vector database.
Those are just a few examples. The ability of vector databases to “match” data with queries makes them essential for multiple types of applications. Here are some more [use cases examples](https://qdrant.tech/use-cases/) you can take a look at.





### Starting Your First Vector Database Project","['aliases: [ /blog/what-is-a-vector-database/ ]\n\n---\n\n\n\n> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.\n\n\n\n\n\n## Why use a Vector Database?\n\n\n\nThe data flood is real.', ""And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query"", 'advantage of their efficient indexing and searching techniques, vector databases enable faster \n\nand more accurate retrieval of unstructured data already represented as vectors, which can \n\nhelp put in front of users the most relevant results to their queries.\n\n\n\nIn addition, other benefits of using vector databases include:\n\n1. Efficient storage and indexing of high-dimensional data.\n\n3. Ability to handle large-scale datasets with billions of data points.\n\n4. Support for real-time analytics and queries.', 'There is no one-size-fits-all approach that would not compromise on performance or flexibility.\n\nSo if your use case utilizes vector search in any significant way, it is worth investing in a dedicated vector search engine, aka vector database.', 'Those are just a few examples. The ability of vector databases to “match” data with queries makes them essential for multiple types of applications. Here are some more [use cases examples](https://qdrant.tech/use-cases/) you can take a look at.\n\n\n\n\n\n### Starting Your First Vector Database Project']","Question: Why would someone use a vector database?\n\nContext: aliases: [ /blog/what-is-a-vector-database/ ]

---



> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.





## Why use a Vector Database?



The data flood is real.
And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query
advantage of their efficient indexing and searching techniques, vector databases enable faster 

and more accurate retrieval of unstructured data already represented as vectors, which can 

help put in front of users the most relevant results to their queries.



In addition, other benefits of using vector databases include:

1. Efficient storage and indexing of high-dimensional data.

3. Ability to handle large-scale datasets with billions of data points.

4. Support for real-time analytics and queries.
There is no one-size-fits-all approach that would not compromise on performance or flexibility.

So if your use case utilizes vector search in any significant way, it is worth investing in a dedicated vector search engine, aka vector database.
Those are just a few examples. The ability of vector databases to “match” data with queries makes them essential for multiple types of applications. Here are some more [use cases examples](https://qdrant.tech/use-cases/) you can take a look at.





### Starting Your First Vector Database Project\n\nAnswer:",Why would someone use a vector database?,"A vector database is used for various reasons, primarily for its efficiency in handling complex data structures and enabling advanced search capabilities. In the context of search and discovery, a vector database allows for state-of-the-art vector-search functionalities, making it ideal for applications requiring similarity search, recommendation systems, and content-based search. By leveraging vectors to represent data points, a vector database can efficiently compute similarities between vectors, enabling quick and accurate retrieval of relevant information","['aliases: [ /blog/what-is-a-vector-database/ ]\n\n---\n\n\n\n> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.\n\n\n\n\n\n## Why use a Vector Database?\n\n\n\nThe data flood is real.', ""And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query"", 'advantage of their efficient indexing and searching techniques, vector databases enable faster \n\nand more accurate retrieval of unstructured data already represented as vectors, which can \n\nhelp put in front of users the most relevant results to their queries.\n\n\n\nIn addition, other benefits of using vector databases include:\n\n1. Efficient storage and indexing of high-dimensional data.\n\n3. Ability to handle large-scale datasets with billions of data points.\n\n4. Support for real-time analytics and queries.', 'There is no one-size-fits-all approach that would not compromise on performance or flexibility.\n\nSo if your use case utilizes vector search in any significant way, it is worth investing in a dedicated vector search engine, aka vector database.', 'Those are just a few examples. The ability of vector databases to “match” data with queries makes them essential for multiple types of applications. Here are some more [use cases examples](https://qdrant.tech/use-cases/) you can take a look at.\n\n\n\n\n\n### Starting Your First Vector Database Project']","aliases: [ /blog/what-is-a-vector-database/ ]

---



> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.





## Why use a Vector Database?



The data flood is real.
And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query
advantage of their efficient indexing and searching techniques, vector databases enable faster 

and more accurate retrieval of unstructured data already represented as vectors, which can 

help put in front of users the most relevant results to their queries.



In addition, other benefits of using vector databases include:

1. Efficient storage and indexing of high-dimensional data.

3. Ability to handle large-scale datasets with billions of data points.

4. Support for real-time analytics and queries.
There is no one-size-fits-all approach that would not compromise on performance or flexibility.

So if your use case utilizes vector search in any significant way, it is worth investing in a dedicated vector search engine, aka vector database.
Those are just a few examples. The ability of vector databases to “match” data with queries makes them essential for multiple types of applications. Here are some more [use cases examples](https://qdrant.tech/use-cases/) you can take a look at.





### Starting Your First Vector Database Project",0.14603174603174604,0.6216216216216216,0.2365038560411311,0.028662420382165606,0.1232876712328767,0.04651162790697675,0.08253968253968254,0.35135135135135137,0.13367609254498716,0.13015873015873017,0.5540540540540541,0.21079691516709512,0.558076024055481,0.5527685284614563,0.6416242122650146,0.5938912034034729,0.6703633126005746,0.9937103735088991,329,4.445945945945946,0.4895165683973922
True,,3706.3920000000003,f5cfb516,What benefits does Qdrant Cloud on Microsoft Azure offer for rapid application development?,"Qdrant Cloud on Microsoft Azure offers the benefit of rapid application development by allowing users to deploy their own cluster through the Qdrant Cloud Console within seconds. This means that users can set up their environment on Azure quickly, reducing deployment time and enabling them to scale their resources as needed. This rapid deployment capability enables users to hit the ground running with their development projects, facilitating faster development cycles and improved scalability.","Qdrant Cloud on Microsoft Azure offers several benefits for rapid application development, including:

1. **Deployment Speed**: You can deploy your own cluster through the Qdrant Cloud Console within seconds, allowing you to start developing applications quickly.

2. **Scalability**: With Qdrant Cloud on Azure, you can scale your resources as needed. This flexibility allows you to adjust your infrastructure based on the requirements of your applications.

3. **Billion Vector Scale**: Qdrant Cloud on Microsoft Azure can seamlessly handle large-scale datasets with billions of vectors. This capability is essential for applications that deal with massive amounts of data and require efficient management and processing.

4. **Horizontal Scaling**: Leveraging Qdrant features like horizontal scaling on Microsoft Azure's scalable infrastructure enables you to expand your resources horizontally to meet growing demands.

5. **Binary Quantization**: Qdrant Cloud on Azure supports binary quantization, which can help optimize storage and processing of vectors, leading to improved performance and efficiency in handling large datasets.

Overall, the combination of Qdrant Cloud with Microsoft Azure provides a robust environment for rapid application development, efficient scaling, and effective management of large-scale datasets.","What this means for you:



- **Rapid application development**: Deploy your own cluster through the Qdrant Cloud Console within seconds and scale your resources as needed.

- **Billion vector scale**: Seamlessly grow and handle large-scale datasets with billions of vectors. Leverage Qdrant features like horizontal scaling and binary quantization with Microsoft Azure's scalable infrastructure.
---

draft: false

title: Introducing Qdrant Cloud on Microsoft Azure

slug: qdrant-cloud-on-microsoft-azure

short_description: Qdrant Cloud is now available on Microsoft Azure

description: ""Learn the benefits of Qdrant Cloud on Azure.""

preview_image: /blog/from_cms/qdrant-azure-2-1.png

date: 2024-01-17T08:40:42Z

author: Manuel Meyer

featured: false

tags:

  - Data Science

  - Vector Database

  - Machine Learning

  - Information Retrieval

  - Cloud

  - Azure

---
- Information Retrieval

  - Cloud

  - Azure

---

Great news! We've expanded Qdrant's managed vector database offering — [Qdrant Cloud](https://cloud.qdrant.io/) — to be available on Microsoft Azure. 

You can now effortlessly set up your environment on Azure, which reduces deployment time, so you can hit the ground running.



[Get started](https://cloud.qdrant.io/)



What this means for you:
- Upgradeable to later versions of Qdrant as they are released.

- Equipped with monitoring and logging to observe the health of each cluster. 

- Accessible through the Qdrant Cloud Console.

- Vertically scalable.

- Offered on AWS and GCP, with Azure currently in development. 



### Getting started with Qdrant Cloud



To use Qdrant Cloud, you will need to create at least one cluster. There are two ways to start:
---

title: AWS Marketplace

weight: 60

---



# Qdrant Cloud on AWS Marketplace



## Overview



Our [AWS Marketplace](https://aws.amazon.com/marketplace/pp/prodview-rtphb42tydtzg) listing streamlines access to Qdrant for users who rely on Amazon Web Services for hosting and application development. Please note that, while Qdrant's clusters run on AWS, you will still use the Qdrant Cloud infrastructure. 



## Billing","[""What this means for you:\n\n\n\n- **Rapid application development**: Deploy your own cluster through the Qdrant Cloud Console within seconds and scale your resources as needed.\n\n- **Billion vector scale**: Seamlessly grow and handle large-scale datasets with billions of vectors. Leverage Qdrant features like horizontal scaling and binary quantization with Microsoft Azure's scalable infrastructure."", '---\n\ndraft: false\n\ntitle: Introducing Qdrant Cloud on Microsoft Azure\n\nslug: qdrant-cloud-on-microsoft-azure\n\nshort_description: Qdrant Cloud is now available on Microsoft Azure\n\ndescription: ""Learn the benefits of Qdrant Cloud on Azure.""\n\npreview_image: /blog/from_cms/qdrant-azure-2-1.png\n\ndate: 2024-01-17T08:40:42Z\n\nauthor: Manuel Meyer\n\nfeatured: false\n\ntags:\n\n  - Data Science\n\n  - Vector Database\n\n  - Machine Learning\n\n  - Information Retrieval\n\n  - Cloud\n\n  - Azure\n\n---', ""- Information Retrieval\n\n  - Cloud\n\n  - Azure\n\n---\n\nGreat news! We've expanded Qdrant's managed vector database offering — [Qdrant Cloud](https://cloud.qdrant.io/) — to be available on Microsoft Azure. \n\nYou can now effortlessly set up your environment on Azure, which reduces deployment time, so you can hit the ground running.\n\n\n\n[Get started](https://cloud.qdrant.io/)\n\n\n\nWhat this means for you:"", '- Upgradeable to later versions of Qdrant as they are released.\n\n- Equipped with monitoring and logging to observe the health of each cluster. \n\n- Accessible through the Qdrant Cloud Console.\n\n- Vertically scalable.\n\n- Offered on AWS and GCP, with Azure currently in development. \n\n\n\n### Getting started with Qdrant Cloud\n\n\n\nTo use Qdrant Cloud, you will need to create at least one cluster. There are two ways to start:', ""---\n\ntitle: AWS Marketplace\n\nweight: 60\n\n---\n\n\n\n# Qdrant Cloud on AWS Marketplace\n\n\n\n## Overview\n\n\n\nOur [AWS Marketplace](https://aws.amazon.com/marketplace/pp/prodview-rtphb42tydtzg) listing streamlines access to Qdrant for users who rely on Amazon Web Services for hosting and application development. Please note that, while Qdrant's clusters run on AWS, you will still use the Qdrant Cloud infrastructure. \n\n\n\n## Billing""]","Question: What benefits does Qdrant Cloud on Microsoft Azure offer for rapid application development?\n\nContext: What this means for you:



- **Rapid application development**: Deploy your own cluster through the Qdrant Cloud Console within seconds and scale your resources as needed.

- **Billion vector scale**: Seamlessly grow and handle large-scale datasets with billions of vectors. Leverage Qdrant features like horizontal scaling and binary quantization with Microsoft Azure's scalable infrastructure.
---

draft: false

title: Introducing Qdrant Cloud on Microsoft Azure

slug: qdrant-cloud-on-microsoft-azure

short_description: Qdrant Cloud is now available on Microsoft Azure

description: ""Learn the benefits of Qdrant Cloud on Azure.""

preview_image: /blog/from_cms/qdrant-azure-2-1.png

date: 2024-01-17T08:40:42Z

author: Manuel Meyer

featured: false

tags:

- Data Science

- Vector Database

- Machine Learning

- Information Retrieval

- Cloud

- Azure

---
- Information Retrieval

- Cloud

- Azure

---

Great news! We've expanded Qdrant's managed vector database offering — [Qdrant Cloud](https://cloud.qdrant.io/) — to be available on Microsoft Azure. 

You can now effortlessly set up your environment on Azure, which reduces deployment time, so you can hit the ground running.



[Get started](https://cloud.qdrant.io/)



What this means for you:
- Upgradeable to later versions of Qdrant as they are released.

- Equipped with monitoring and logging to observe the health of each cluster. 

- Accessible through the Qdrant Cloud Console.

- Vertically scalable.

- Offered on AWS and GCP, with Azure currently in development. 



### Getting started with Qdrant Cloud



To use Qdrant Cloud, you will need to create at least one cluster. There are two ways to start:
---

title: AWS Marketplace

weight: 60

---



# Qdrant Cloud on AWS Marketplace



## Overview



Our [AWS Marketplace](https://aws.amazon.com/marketplace/pp/prodview-rtphb42tydtzg) listing streamlines access to Qdrant for users who rely on Amazon Web Services for hosting and application development. Please note that, while Qdrant's clusters run on AWS, you will still use the Qdrant Cloud infrastructure. 



## Billing\n\nAnswer:",What benefits does Qdrant Cloud on Microsoft Azure offer for rapid application development?,"Qdrant Cloud on Microsoft Azure offers the benefit of rapid application development by allowing users to deploy their own cluster through the Qdrant Cloud Console within seconds. This means that users can set up their environment on Azure quickly, reducing deployment time and enabling them to scale their resources as needed. This rapid deployment capability enables users to hit the ground running with their development projects, facilitating faster development cycles and improved scalability.","[""What this means for you:\n\n\n\n- **Rapid application development**: Deploy your own cluster through the Qdrant Cloud Console within seconds and scale your resources as needed.\n\n- **Billion vector scale**: Seamlessly grow and handle large-scale datasets with billions of vectors. Leverage Qdrant features like horizontal scaling and binary quantization with Microsoft Azure's scalable infrastructure."", '---\n\ndraft: false\n\ntitle: Introducing Qdrant Cloud on Microsoft Azure\n\nslug: qdrant-cloud-on-microsoft-azure\n\nshort_description: Qdrant Cloud is now available on Microsoft Azure\n\ndescription: ""Learn the benefits of Qdrant Cloud on Azure.""\n\npreview_image: /blog/from_cms/qdrant-azure-2-1.png\n\ndate: 2024-01-17T08:40:42Z\n\nauthor: Manuel Meyer\n\nfeatured: false\n\ntags:\n\n  - Data Science\n\n  - Vector Database\n\n  - Machine Learning\n\n  - Information Retrieval\n\n  - Cloud\n\n  - Azure\n\n---', ""- Information Retrieval\n\n  - Cloud\n\n  - Azure\n\n---\n\nGreat news! We've expanded Qdrant's managed vector database offering — [Qdrant Cloud](https://cloud.qdrant.io/) — to be available on Microsoft Azure. \n\nYou can now effortlessly set up your environment on Azure, which reduces deployment time, so you can hit the ground running.\n\n\n\n[Get started](https://cloud.qdrant.io/)\n\n\n\nWhat this means for you:"", '- Upgradeable to later versions of Qdrant as they are released.\n\n- Equipped with monitoring and logging to observe the health of each cluster. \n\n- Accessible through the Qdrant Cloud Console.\n\n- Vertically scalable.\n\n- Offered on AWS and GCP, with Azure currently in development. \n\n\n\n### Getting started with Qdrant Cloud\n\n\n\nTo use Qdrant Cloud, you will need to create at least one cluster. There are two ways to start:', ""---\n\ntitle: AWS Marketplace\n\nweight: 60\n\n---\n\n\n\n# Qdrant Cloud on AWS Marketplace\n\n\n\n## Overview\n\n\n\nOur [AWS Marketplace](https://aws.amazon.com/marketplace/pp/prodview-rtphb42tydtzg) listing streamlines access to Qdrant for users who rely on Amazon Web Services for hosting and application development. Please note that, while Qdrant's clusters run on AWS, you will still use the Qdrant Cloud infrastructure. \n\n\n\n## Billing""]","What this means for you:



- **Rapid application development**: Deploy your own cluster through the Qdrant Cloud Console within seconds and scale your resources as needed.

- **Billion vector scale**: Seamlessly grow and handle large-scale datasets with billions of vectors. Leverage Qdrant features like horizontal scaling and binary quantization with Microsoft Azure's scalable infrastructure.
---

draft: false

title: Introducing Qdrant Cloud on Microsoft Azure

slug: qdrant-cloud-on-microsoft-azure

short_description: Qdrant Cloud is now available on Microsoft Azure

description: ""Learn the benefits of Qdrant Cloud on Azure.""

preview_image: /blog/from_cms/qdrant-azure-2-1.png

date: 2024-01-17T08:40:42Z

author: Manuel Meyer

featured: false

tags:

  - Data Science

  - Vector Database

  - Machine Learning

  - Information Retrieval

  - Cloud

  - Azure

---
- Information Retrieval

  - Cloud

  - Azure

---

Great news! We've expanded Qdrant's managed vector database offering — [Qdrant Cloud](https://cloud.qdrant.io/) — to be available on Microsoft Azure. 

You can now effortlessly set up your environment on Azure, which reduces deployment time, so you can hit the ground running.



[Get started](https://cloud.qdrant.io/)



What this means for you:
- Upgradeable to later versions of Qdrant as they are released.

- Equipped with monitoring and logging to observe the health of each cluster. 

- Accessible through the Qdrant Cloud Console.

- Vertically scalable.

- Offered on AWS and GCP, with Azure currently in development. 



### Getting started with Qdrant Cloud



To use Qdrant Cloud, you will need to create at least one cluster. There are two ways to start:
---

title: AWS Marketplace

weight: 60

---



# Qdrant Cloud on AWS Marketplace



## Overview



Our [AWS Marketplace](https://aws.amazon.com/marketplace/pp/prodview-rtphb42tydtzg) listing streamlines access to Qdrant for users who rely on Amazon Web Services for hosting and application development. Please note that, while Qdrant's clusters run on AWS, you will still use the Qdrant Cloud infrastructure. 



## Billing",0.2611111111111111,0.6714285714285714,0.376,0.1005586592178771,0.2608695652173913,0.14516129032258066,0.17777777777777778,0.45714285714285713,0.256,0.23333333333333334,0.6,0.336,0.9327653646469116,0.6237516403198242,0.7278141379356384,0.6717767715454102,0.6165417041808654,0.9962183764825264,182,2.493150684931507,0.5206668994172993
True,,1280.834,ba225e82,What is the purpose of the `groupBy` parameter?,"The `groupBy` parameter is used to specify how the results should be grouped based on a specific field, like ""document_id"". By setting the `groupBy` parameter to ""document_id"", the results are organized into groups where each group contains all the hits associated with a particular document_id.","The purpose of the `groupBy` parameter in the grouping API request is to specify the field by which the results should be grouped. This parameter determines how the search results will be organized into groups based on the values of the specified field. In the given context, the results are grouped by the `document_id` field.","#### Adding the parameter to grouping API request:



When using the grouping API, add the `with_lookup` parameter to bring the information from those points into each group:



```http

POST /collections/chunks/points/search/groups

{

    // Same as in the regular search API

    ""vector"": [1.1],

    ...,



    // Grouping parameters

    ""group_by"": ""document_id"",  

    ""limit"": 2,                 

    ""group_size"": 2,            



    // Lookup parameters

    ""with_lookup"": {
limit=2,  # Max amount of groups

    group_size=2,  # Max amount of points per group

    # Lookup parameters

    with_lookup=models.WithLookup(

        # Name of the collection to look up points in

        collection=""documents"",

        # Options for specifying what to bring from the payload

        # of the looked up point, True by default

        with_payload=[""title"", ""text""],

        # Options for specifying what to bring from the vector(s)
{

    // Same as in the regular search API

    ""vector"": [1.1],



    // Grouping parameters

    ""group_by"": ""document_id"",

    ""limit"": 2,

    ""group_size"": 2,



    // Lookup parameters

    ""with_lookup"": {

        // Name of the collection to look up points in

        ""collection"": ""documents"",



        // Options for specifying what to bring from the payload 

        // of the looked up point, true by default

        ""with_payload"": [""title"", ""text""],
vector: new float[] { 1.1f },

	groupBy: ""document_id"",

	limit: 4,

	groupSize: 2

);

```



The output of a ***groups*** call looks like this:



```json

{

    ""result"": {

        ""groups"": [

            {

                ""id"": ""a"",

                ""hits"": [

                    { ""id"": 0, ""score"": 0.91 },

                    { ""id"": 1, ""score"": 0.85 }

                ]

            },

            {

                ""id"": ""b"",

                ""hits"": [
""with_payload"": [""title"", ""text""],



        // Options for specifying what to bring from the vector(s) 

        // of the looked up point, true by default

        ""with_vectors: false

    }

}

```



```python

client.search_groups(

    collection_name=""chunks"",

    # Same as in the regular search() API

    query_vector=[1.1],

    # Grouping parameters

    group_by=""document_id"",  # Path of the field to group by

    limit=2,  # Max amount of groups","['#### Adding the parameter to grouping API request:\n\n\n\nWhen using the grouping API, add the `with_lookup` parameter to bring the information from those points into each group:\n\n\n\n```http\n\nPOST /collections/chunks/points/search/groups\n\n{\n\n    // Same as in the regular search API\n\n    ""vector"": [1.1],\n\n    ...,\n\n\n\n    // Grouping parameters\n\n    ""group_by"": ""document_id"",  \n\n    ""limit"": 2,                 \n\n    ""group_size"": 2,            \n\n\n\n    // Lookup parameters\n\n    ""with_lookup"": {', 'limit=2,  # Max amount of groups\n\n    group_size=2,  # Max amount of points per group\n\n    # Lookup parameters\n\n    with_lookup=models.WithLookup(\n\n        # Name of the collection to look up points in\n\n        collection=""documents"",\n\n        # Options for specifying what to bring from the payload\n\n        # of the looked up point, True by default\n\n        with_payload=[""title"", ""text""],\n\n        # Options for specifying what to bring from the vector(s)', '{\n\n    // Same as in the regular search API\n\n    ""vector"": [1.1],\n\n\n\n    // Grouping parameters\n\n    ""group_by"": ""document_id"",\n\n    ""limit"": 2,\n\n    ""group_size"": 2,\n\n\n\n    // Lookup parameters\n\n    ""with_lookup"": {\n\n        // Name of the collection to look up points in\n\n        ""collection"": ""documents"",\n\n\n\n        // Options for specifying what to bring from the payload \n\n        // of the looked up point, true by default\n\n        ""with_payload"": [""title"", ""text""],', 'vector: new float[] { 1.1f },\n\n\tgroupBy: ""document_id"",\n\n\tlimit: 4,\n\n\tgroupSize: 2\n\n);\n\n```\n\n\n\nThe output of a ***groups*** call looks like this:\n\n\n\n```json\n\n{\n\n    ""result"": {\n\n        ""groups"": [\n\n            {\n\n                ""id"": ""a"",\n\n                ""hits"": [\n\n                    { ""id"": 0, ""score"": 0.91 },\n\n                    { ""id"": 1, ""score"": 0.85 }\n\n                ]\n\n            },\n\n            {\n\n                ""id"": ""b"",\n\n                ""hits"": [', '""with_payload"": [""title"", ""text""],\n\n\n\n        // Options for specifying what to bring from the vector(s) \n\n        // of the looked up point, true by default\n\n        ""with_vectors: false\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.search_groups(\n\n    collection_name=""chunks"",\n\n    # Same as in the regular search() API\n\n    query_vector=[1.1],\n\n    # Grouping parameters\n\n    group_by=""document_id"",  # Path of the field to group by\n\n    limit=2,  # Max amount of groups']","Question: What is the purpose of the `groupBy` parameter?\n\nContext: #### Adding the parameter to grouping API request:



When using the grouping API, add the `with_lookup` parameter to bring the information from those points into each group:



```http

POST /collections/chunks/points/search/groups

{

// Same as in the regular search API

""vector"": [1.1],

...,



// Grouping parameters

""group_by"": ""document_id"",  

""limit"": 2,                 

""group_size"": 2,            



// Lookup parameters

""with_lookup"": {
limit=2,  # Max amount of groups

group_size=2,  # Max amount of points per group

# Lookup parameters

with_lookup=models.WithLookup(

# Name of the collection to look up points in

collection=""documents"",

# Options for specifying what to bring from the payload

# of the looked up point, True by default

with_payload=[""title"", ""text""],

# Options for specifying what to bring from the vector(s)
{

// Same as in the regular search API

""vector"": [1.1],



// Grouping parameters

""group_by"": ""document_id"",

""limit"": 2,

""group_size"": 2,



// Lookup parameters

""with_lookup"": {

// Name of the collection to look up points in

""collection"": ""documents"",



// Options for specifying what to bring from the payload 

// of the looked up point, true by default

""with_payload"": [""title"", ""text""],
vector: new float[] { 1.1f },

groupBy: ""document_id"",

limit: 4,

groupSize: 2

);

```



The output of a ***groups*** call looks like this:



```json

{

""result"": {

""groups"": [

{

""id"": ""a"",

""hits"": [

{ ""id"": 0, ""score"": 0.91 },

{ ""id"": 1, ""score"": 0.85 }

]

},

{

""id"": ""b"",

""hits"": [
""with_payload"": [""title"", ""text""],



// Options for specifying what to bring from the vector(s) 

// of the looked up point, true by default

""with_vectors: false

}

}

```



```python

client.search_groups(

collection_name=""chunks"",

# Same as in the regular search() API

query_vector=[1.1],

# Grouping parameters

group_by=""document_id"",  # Path of the field to group by

limit=2,  # Max amount of groups\n\nAnswer:",What is the purpose of the `groupBy` parameter?,"The `groupBy` parameter is used to specify how the results should be grouped based on a specific field, like ""document_id"". By setting the `groupBy` parameter to ""document_id"", the results are organized into groups where each group contains all the hits associated with a particular document_id.","['#### Adding the parameter to grouping API request:\n\n\n\nWhen using the grouping API, add the `with_lookup` parameter to bring the information from those points into each group:\n\n\n\n```http\n\nPOST /collections/chunks/points/search/groups\n\n{\n\n    // Same as in the regular search API\n\n    ""vector"": [1.1],\n\n    ...,\n\n\n\n    // Grouping parameters\n\n    ""group_by"": ""document_id"",  \n\n    ""limit"": 2,                 \n\n    ""group_size"": 2,            \n\n\n\n    // Lookup parameters\n\n    ""with_lookup"": {', 'limit=2,  # Max amount of groups\n\n    group_size=2,  # Max amount of points per group\n\n    # Lookup parameters\n\n    with_lookup=models.WithLookup(\n\n        # Name of the collection to look up points in\n\n        collection=""documents"",\n\n        # Options for specifying what to bring from the payload\n\n        # of the looked up point, True by default\n\n        with_payload=[""title"", ""text""],\n\n        # Options for specifying what to bring from the vector(s)', '{\n\n    // Same as in the regular search API\n\n    ""vector"": [1.1],\n\n\n\n    // Grouping parameters\n\n    ""group_by"": ""document_id"",\n\n    ""limit"": 2,\n\n    ""group_size"": 2,\n\n\n\n    // Lookup parameters\n\n    ""with_lookup"": {\n\n        // Name of the collection to look up points in\n\n        ""collection"": ""documents"",\n\n\n\n        // Options for specifying what to bring from the payload \n\n        // of the looked up point, true by default\n\n        ""with_payload"": [""title"", ""text""],', 'vector: new float[] { 1.1f },\n\n\tgroupBy: ""document_id"",\n\n\tlimit: 4,\n\n\tgroupSize: 2\n\n);\n\n```\n\n\n\nThe output of a ***groups*** call looks like this:\n\n\n\n```json\n\n{\n\n    ""result"": {\n\n        ""groups"": [\n\n            {\n\n                ""id"": ""a"",\n\n                ""hits"": [\n\n                    { ""id"": 0, ""score"": 0.91 },\n\n                    { ""id"": 1, ""score"": 0.85 }\n\n                ]\n\n            },\n\n            {\n\n                ""id"": ""b"",\n\n                ""hits"": [', '""with_payload"": [""title"", ""text""],\n\n\n\n        // Options for specifying what to bring from the vector(s) \n\n        // of the looked up point, true by default\n\n        ""with_vectors: false\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.search_groups(\n\n    collection_name=""chunks"",\n\n    # Same as in the regular search() API\n\n    query_vector=[1.1],\n\n    # Grouping parameters\n\n    group_by=""document_id"",  # Path of the field to group by\n\n    limit=2,  # Max amount of groups']","#### Adding the parameter to grouping API request:



When using the grouping API, add the `with_lookup` parameter to bring the information from those points into each group:



```http

POST /collections/chunks/points/search/groups

{

    // Same as in the regular search API

    ""vector"": [1.1],

    ...,



    // Grouping parameters

    ""group_by"": ""document_id"",  

    ""limit"": 2,                 

    ""group_size"": 2,            



    // Lookup parameters

    ""with_lookup"": {
limit=2,  # Max amount of groups

    group_size=2,  # Max amount of points per group

    # Lookup parameters

    with_lookup=models.WithLookup(

        # Name of the collection to look up points in

        collection=""documents"",

        # Options for specifying what to bring from the payload

        # of the looked up point, True by default

        with_payload=[""title"", ""text""],

        # Options for specifying what to bring from the vector(s)
{

    // Same as in the regular search API

    ""vector"": [1.1],



    // Grouping parameters

    ""group_by"": ""document_id"",

    ""limit"": 2,

    ""group_size"": 2,



    // Lookup parameters

    ""with_lookup"": {

        // Name of the collection to look up points in

        ""collection"": ""documents"",



        // Options for specifying what to bring from the payload 

        // of the looked up point, true by default

        ""with_payload"": [""title"", ""text""],
vector: new float[] { 1.1f },

	groupBy: ""document_id"",

	limit: 4,

	groupSize: 2

);

```



The output of a ***groups*** call looks like this:



```json

{

    ""result"": {

        ""groups"": [

            {

                ""id"": ""a"",

                ""hits"": [

                    { ""id"": 0, ""score"": 0.91 },

                    { ""id"": 1, ""score"": 0.85 }

                ]

            },

            {

                ""id"": ""b"",

                ""hits"": [
""with_payload"": [""title"", ""text""],



        // Options for specifying what to bring from the vector(s) 

        // of the looked up point, true by default

        ""with_vectors: false

    }

}

```



```python

client.search_groups(

    collection_name=""chunks"",

    # Same as in the regular search() API

    query_vector=[1.1],

    # Grouping parameters

    group_by=""document_id"",  # Path of the field to group by

    limit=2,  # Max amount of groups",0.5111111111111111,0.5609756097560976,0.5348837209302325,0.25,0.275,0.2619047619047619,0.37777777777777777,0.4146341463414634,0.39534883720930236,0.4888888888888889,0.5365853658536586,0.5116279069767442,0.8519183397293091,0.6843637228012085,0.6668325066566467,0.6754843592643738,0.862572635213534,0.9370010402053595,55,1.2222222222222223,0.6499776360526622
True,,4191.646000000001,79653b4d,How can one change or correct Qdrant's behavior and default collection settings using configuration files?,"To change or correct Qdrant's behavior and default collection settings, one can utilize configuration files. The default configuration file for Qdrant is located at [config/config.yaml](https://github.com/qdrant/qdrant/blob/master/config/config.yaml). If you wish to modify the default configuration, you can add a new configuration file and specify the path using `--config-path path/to/custom_config.yaml","To change or correct Qdrant's behavior and default collection settings using configuration files, you can follow these steps:

1. Locate the default configuration file at [config/config.yaml](https://github.com/qdrant/qdrant/blob/master/config/config.yaml).

2. Add a new configuration file and specify the settings you want to change or correct.

3. To change the default configuration, you can modify the `config.yaml` file directly.

4. If you are using the `QdrantDocumentStore`, you can customize the default configuration of the collection by providing settings when you create an instance of the `QdrantDocumentStore`.

5. For example, if you want to enable Scalar Quantization, you can do so by specifying it in the configuration settings when creating the `QdrantDocumentStore` instance.

6. To change the temporary storage directory location, access `config.yaml` and set the `storage.temp_path` property to the desired directory location.

7. It's important to note that the latest releases of Qdrant may introduce changes to make the system more reliable and efficient. Make sure to keep an eye on the release notes for any important changes that may affect your configuration.

By following these steps, you can effectively change or correct Qdrant's behavior and default collection settings using configuration files.","---

title: Configuration

weight: 160

aliases:

  - ../configuration

---



# Configuration



To change or correct Qdrant's behavior, default collection settings, and network interface parameters, you can use configuration files.



The default configuration file is located at [config/config.yaml](https://github.com/qdrant/qdrant/blob/master/config/config.yaml).



To change the default configuration, add a new configuration file and specify
```bash

pip install qdrant-haystack

```



`QdrantDocumentStore` supports [all the configuration properties](/documentation/collections/#create-collection) available in 

the Qdrant Python client. If you want to customize the default configuration of the collection used under the hood, you can

provide that settings when you create an instance of the `QdrantDocumentStore`. For example, if you'd like to enable the

Scalar Quantization, you'd make that in the following way:



```python
To change it, access `config.yaml` and set `storage.temp_path` to another directory location.



## Important changes



The latest release focuses not only on the new features but also introduces some changes making 

Qdrant even more reliable.



### Optimizing group requests
import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createCollectionAsync(

        CreateCollection.newBuilder()

            .setCollectionName(""{collection_name}"")

            .setVectorsConfig(

                VectorsConfig.newBuilder()

                    .setParams(

                        VectorParams.newBuilder()

                            .setSize(768)
import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createCollectionAsync(

        CreateCollection.newBuilder()

            .setCollectionName(""{collection_name}"")

            .setVectorsConfig(

                VectorsConfig.newBuilder()

                    .setParams(

                        VectorParams.newBuilder()

                            .setSize(768)","[""---\n\ntitle: Configuration\n\nweight: 160\n\naliases:\n\n  - ../configuration\n\n---\n\n\n\n# Configuration\n\n\n\nTo change or correct Qdrant's behavior, default collection settings, and network interface parameters, you can use configuration files.\n\n\n\nThe default configuration file is located at [config/config.yaml](https://github.com/qdrant/qdrant/blob/master/config/config.yaml).\n\n\n\nTo change the default configuration, add a new configuration file and specify"", ""```bash\n\npip install qdrant-haystack\n\n```\n\n\n\n`QdrantDocumentStore` supports [all the configuration properties](/documentation/collections/#create-collection) available in \n\nthe Qdrant Python client. If you want to customize the default configuration of the collection used under the hood, you can\n\nprovide that settings when you create an instance of the `QdrantDocumentStore`. For example, if you'd like to enable the\n\nScalar Quantization, you'd make that in the following way:\n\n\n\n```python"", 'To change it, access `config.yaml` and set `storage.temp_path` to another directory location.\n\n\n\n## Important changes\n\n\n\nThe latest release focuses not only on the new features but also introduces some changes making \n\nQdrant even more reliable.\n\n\n\n### Optimizing group requests', 'import io.qdrant.client.grpc.Collections.VectorsConfig;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createCollectionAsync(\n\n        CreateCollection.newBuilder()\n\n            .setCollectionName(""{collection_name}"")\n\n            .setVectorsConfig(\n\n                VectorsConfig.newBuilder()\n\n                    .setParams(\n\n                        VectorParams.newBuilder()\n\n                            .setSize(768)', 'import io.qdrant.client.grpc.Collections.VectorsConfig;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createCollectionAsync(\n\n        CreateCollection.newBuilder()\n\n            .setCollectionName(""{collection_name}"")\n\n            .setVectorsConfig(\n\n                VectorsConfig.newBuilder()\n\n                    .setParams(\n\n                        VectorParams.newBuilder()\n\n                            .setSize(768)']","Question: How can one change or correct Qdrant's behavior and default collection settings using configuration files?\n\nContext: ---

title: Configuration

weight: 160

aliases:

- ../configuration

---



# Configuration



To change or correct Qdrant's behavior, default collection settings, and network interface parameters, you can use configuration files.



The default configuration file is located at [config/config.yaml](https://github.com/qdrant/qdrant/blob/master/config/config.yaml).



To change the default configuration, add a new configuration file and specify
```bash

pip install qdrant-haystack

```



`QdrantDocumentStore` supports [all the configuration properties](/documentation/collections/#create-collection) available in 

the Qdrant Python client. If you want to customize the default configuration of the collection used under the hood, you can

provide that settings when you create an instance of the `QdrantDocumentStore`. For example, if you'd like to enable the

Scalar Quantization, you'd make that in the following way:



```python
To change it, access `config.yaml` and set `storage.temp_path` to another directory location.



## Important changes



The latest release focuses not only on the new features but also introduces some changes making 

Qdrant even more reliable.



### Optimizing group requests
import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

.createCollectionAsync(

CreateCollection.newBuilder()

.setCollectionName(""{collection_name}"")

.setVectorsConfig(

VectorsConfig.newBuilder()

.setParams(

VectorParams.newBuilder()

.setSize(768)
import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

.createCollectionAsync(

CreateCollection.newBuilder()

.setCollectionName(""{collection_name}"")

.setVectorsConfig(

VectorsConfig.newBuilder()

.setParams(

VectorParams.newBuilder()

.setSize(768)\n\nAnswer:",How can one change or correct Qdrant's behavior and default collection settings using configuration files?,"To change or correct Qdrant's behavior and default collection settings, one can utilize configuration files. The default configuration file for Qdrant is located at [config/config.yaml](https://github.com/qdrant/qdrant/blob/master/config/config.yaml). If you wish to modify the default configuration, you can add a new configuration file and specify the path using `--config-path path/to/custom_config.yaml","[""---\n\ntitle: Configuration\n\nweight: 160\n\naliases:\n\n  - ../configuration\n\n---\n\n\n\n# Configuration\n\n\n\nTo change or correct Qdrant's behavior, default collection settings, and network interface parameters, you can use configuration files.\n\n\n\nThe default configuration file is located at [config/config.yaml](https://github.com/qdrant/qdrant/blob/master/config/config.yaml).\n\n\n\nTo change the default configuration, add a new configuration file and specify"", ""```bash\n\npip install qdrant-haystack\n\n```\n\n\n\n`QdrantDocumentStore` supports [all the configuration properties](/documentation/collections/#create-collection) available in \n\nthe Qdrant Python client. If you want to customize the default configuration of the collection used under the hood, you can\n\nprovide that settings when you create an instance of the `QdrantDocumentStore`. For example, if you'd like to enable the\n\nScalar Quantization, you'd make that in the following way:\n\n\n\n```python"", 'To change it, access `config.yaml` and set `storage.temp_path` to another directory location.\n\n\n\n## Important changes\n\n\n\nThe latest release focuses not only on the new features but also introduces some changes making \n\nQdrant even more reliable.\n\n\n\n### Optimizing group requests', 'import io.qdrant.client.grpc.Collections.VectorsConfig;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createCollectionAsync(\n\n        CreateCollection.newBuilder()\n\n            .setCollectionName(""{collection_name}"")\n\n            .setVectorsConfig(\n\n                VectorsConfig.newBuilder()\n\n                    .setParams(\n\n                        VectorParams.newBuilder()\n\n                            .setSize(768)', 'import io.qdrant.client.grpc.Collections.VectorsConfig;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createCollectionAsync(\n\n        CreateCollection.newBuilder()\n\n            .setCollectionName(""{collection_name}"")\n\n            .setVectorsConfig(\n\n                VectorsConfig.newBuilder()\n\n                    .setParams(\n\n                        VectorParams.newBuilder()\n\n                            .setSize(768)']","---

title: Configuration

weight: 160

aliases:

  - ../configuration

---



# Configuration



To change or correct Qdrant's behavior, default collection settings, and network interface parameters, you can use configuration files.



The default configuration file is located at [config/config.yaml](https://github.com/qdrant/qdrant/blob/master/config/config.yaml).



To change the default configuration, add a new configuration file and specify
```bash

pip install qdrant-haystack

```



`QdrantDocumentStore` supports [all the configuration properties](/documentation/collections/#create-collection) available in 

the Qdrant Python client. If you want to customize the default configuration of the collection used under the hood, you can

provide that settings when you create an instance of the `QdrantDocumentStore`. For example, if you'd like to enable the

Scalar Quantization, you'd make that in the following way:



```python
To change it, access `config.yaml` and set `storage.temp_path` to another directory location.



## Important changes



The latest release focuses not only on the new features but also introduces some changes making 

Qdrant even more reliable.



### Optimizing group requests
import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createCollectionAsync(

        CreateCollection.newBuilder()

            .setCollectionName(""{collection_name}"")

            .setVectorsConfig(

                VectorsConfig.newBuilder()

                    .setParams(

                        VectorParams.newBuilder()

                            .setSize(768)
import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createCollectionAsync(

        CreateCollection.newBuilder()

            .setCollectionName(""{collection_name}"")

            .setVectorsConfig(

                VectorsConfig.newBuilder()

                    .setParams(

                        VectorParams.newBuilder()

                            .setSize(768)",0.2925531914893617,0.9016393442622951,0.44176706827309237,0.1925133689839572,0.6,0.291497975708502,0.21808510638297873,0.6721311475409836,0.3293172690763052,0.2712765957446808,0.8360655737704918,0.40963855421686746,0.9725803136825562,0.6318903565406799,0.7504971623420715,0.6861056089401245,0.8746031775760154,0.9901619399800742,193,3.86,0.7211102442130934
True,,1477.339,85ebff14,What are the two ways of creating batches supported by the Qdrant API and how do they differ internally?,"The Qdrant API supports two ways of creating batches - record-oriented and column-oriented. Internally, these options do not differ and are made only for the convenience of interaction. This means that both record-oriented and column-oriented batch creation methods achieve the same result in terms of processing and storing data within the Qdrant system.","The two ways of creating batches supported by the Qdrant API are record-oriented and column-oriented. Internally, these options do not differ and are provided for the convenience of interaction. Record-oriented batching involves grouping points together for bulk loading, while column-oriented batching involves loading points in a column-wise manner. Both methods optimize performance by reducing network overhead and enabling multiple points to be loaded in a single API call.","}

	}

);



```



are both possible.



## Upload points



To optimize performance, Qdrant supports batch loading of points. I.e., you can load several points into the service in one API call.

Batching allows you to minimize the overhead of creating a network connection.



The Qdrant API supports two ways of creating batches - record-oriented and column-oriented.

Internally, these options do not differ and are made only for the convenience of interaction.



Create points with batch:



```http
Now, thanks to the new batch search, you don’t need to worry about that. Qdrant will handle multiple search requests in just one API call and will perform those requests in the most optimal way.



## An example of using the batch search



We’ve used the official Python client to show how the batch search might be integrated with your application. Since there have been some changes in the interfaces of Qdrant 0.10.0, we’ll go step by step.



## Creating the collection
## Summary



Batch search allows packing different queries into a single API call and retrieving the results in a single response. If you ever struggled with sending several consecutive queries into Qdrant, then you can easily switch to the new batch search method and simplify your application code. As shown in the benchmarks, that may almost effortlessly speed up your interactions with Qdrant even by over 30%, even not considering the spare network overhead and possible reuse of filters!
to create in a second:



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""http://localhost:6333"")



client.create_collection(

    collection_name=""arxiv-titles-instructorxl-embeddings"",

    vectors_config=models.VectorParams(

        size=768,

        distance=models.Distance.COSINE,

    ),

)

```



It is always a good idea to use batching, while loading a large dataset, so let's do that.

We are going to need a helper function to split the dataset into batches:
from qdrant_client.http.models import Batch



cohere_client = cohere.Client(""<< your_api_key >>"")

qdrant_client = qdrant_client.QdrantClient()

qdrant_client.upsert(

    collection_name=""MyCollection"",

    points=Batch(

        ids=[1],

        vectors=cohere_client.embed(

            model=""large"",

            texts=[""The best vector database""],

        ).embeddings,

    ),

)

```","['}\n\n\t}\n\n);\n\n\n\n```\n\n\n\nare both possible.\n\n\n\n## Upload points\n\n\n\nTo optimize performance, Qdrant supports batch loading of points. I.e., you can load several points into the service in one API call.\n\nBatching allows you to minimize the overhead of creating a network connection.\n\n\n\nThe Qdrant API supports two ways of creating batches - record-oriented and column-oriented.\n\nInternally, these options do not differ and are made only for the convenience of interaction.\n\n\n\nCreate points with batch:\n\n\n\n```http', 'Now, thanks to the new batch search, you don’t need to worry about that. Qdrant will handle multiple search requests in just one API call and will perform those requests in the most optimal way.\n\n\n\n## An example of using the batch search\n\n\n\nWe’ve used the official Python client to show how the batch search might be integrated with your application. Since there have been some changes in the interfaces of Qdrant 0.10.0, we’ll go step by step.\n\n\n\n## Creating the collection', '## Summary\n\n\n\nBatch search allows packing different queries into a single API call and retrieving the results in a single response. If you ever struggled with sending several consecutive queries into Qdrant, then you can easily switch to the new batch search method and simplify your application code. As shown in the benchmarks, that may almost effortlessly speed up your interactions with Qdrant even by over 30%, even not considering the spare network overhead and possible reuse of filters!', 'to create in a second:\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\n\n\nclient = QdrantClient(""http://localhost:6333"")\n\n\n\nclient.create_collection(\n\n    collection_name=""arxiv-titles-instructorxl-embeddings"",\n\n    vectors_config=models.VectorParams(\n\n        size=768,\n\n        distance=models.Distance.COSINE,\n\n    ),\n\n)\n\n```\n\n\n\nIt is always a good idea to use batching, while loading a large dataset, so let\'s do that.\n\nWe are going to need a helper function to split the dataset into batches:', 'from qdrant_client.http.models import Batch\n\n\n\ncohere_client = cohere.Client(""<< your_api_key >>"")\n\nqdrant_client = qdrant_client.QdrantClient()\n\nqdrant_client.upsert(\n\n    collection_name=""MyCollection"",\n\n    points=Batch(\n\n        ids=[1],\n\n        vectors=cohere_client.embed(\n\n            model=""large"",\n\n            texts=[""The best vector database""],\n\n        ).embeddings,\n\n    ),\n\n)\n\n```']","Question: What are the two ways of creating batches supported by the Qdrant API and how do they differ internally?\n\nContext: }

}

);



```



are both possible.



## Upload points



To optimize performance, Qdrant supports batch loading of points. I.e., you can load several points into the service in one API call.

Batching allows you to minimize the overhead of creating a network connection.



The Qdrant API supports two ways of creating batches - record-oriented and column-oriented.

Internally, these options do not differ and are made only for the convenience of interaction.



Create points with batch:



```http
Now, thanks to the new batch search, you don’t need to worry about that. Qdrant will handle multiple search requests in just one API call and will perform those requests in the most optimal way.



## An example of using the batch search



We’ve used the official Python client to show how the batch search might be integrated with your application. Since there have been some changes in the interfaces of Qdrant 0.10.0, we’ll go step by step.



## Creating the collection
## Summary



Batch search allows packing different queries into a single API call and retrieving the results in a single response. If you ever struggled with sending several consecutive queries into Qdrant, then you can easily switch to the new batch search method and simplify your application code. As shown in the benchmarks, that may almost effortlessly speed up your interactions with Qdrant even by over 30%, even not considering the spare network overhead and possible reuse of filters!
to create in a second:



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""http://localhost:6333"")



client.create_collection(

collection_name=""arxiv-titles-instructorxl-embeddings"",

vectors_config=models.VectorParams(

size=768,

distance=models.Distance.COSINE,

),

)

```



It is always a good idea to use batching, while loading a large dataset, so let's do that.

We are going to need a helper function to split the dataset into batches:
from qdrant_client.http.models import Batch



cohere_client = cohere.Client(""<< your_api_key >>"")

qdrant_client = qdrant_client.QdrantClient()

qdrant_client.upsert(

collection_name=""MyCollection"",

points=Batch(

ids=[1],

vectors=cohere_client.embed(

model=""large"",

texts=[""The best vector database""],

).embeddings,

),

)

```\n\nAnswer:",What are the two ways of creating batches supported by the Qdrant API and how do they differ internally?,"The Qdrant API supports two ways of creating batches - record-oriented and column-oriented. Internally, these options do not differ and are made only for the convenience of interaction. This means that both record-oriented and column-oriented batch creation methods achieve the same result in terms of processing and storing data within the Qdrant system.","['}\n\n\t}\n\n);\n\n\n\n```\n\n\n\nare both possible.\n\n\n\n## Upload points\n\n\n\nTo optimize performance, Qdrant supports batch loading of points. I.e., you can load several points into the service in one API call.\n\nBatching allows you to minimize the overhead of creating a network connection.\n\n\n\nThe Qdrant API supports two ways of creating batches - record-oriented and column-oriented.\n\nInternally, these options do not differ and are made only for the convenience of interaction.\n\n\n\nCreate points with batch:\n\n\n\n```http', 'Now, thanks to the new batch search, you don’t need to worry about that. Qdrant will handle multiple search requests in just one API call and will perform those requests in the most optimal way.\n\n\n\n## An example of using the batch search\n\n\n\nWe’ve used the official Python client to show how the batch search might be integrated with your application. Since there have been some changes in the interfaces of Qdrant 0.10.0, we’ll go step by step.\n\n\n\n## Creating the collection', '## Summary\n\n\n\nBatch search allows packing different queries into a single API call and retrieving the results in a single response. If you ever struggled with sending several consecutive queries into Qdrant, then you can easily switch to the new batch search method and simplify your application code. As shown in the benchmarks, that may almost effortlessly speed up your interactions with Qdrant even by over 30%, even not considering the spare network overhead and possible reuse of filters!', 'to create in a second:\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\n\n\nclient = QdrantClient(""http://localhost:6333"")\n\n\n\nclient.create_collection(\n\n    collection_name=""arxiv-titles-instructorxl-embeddings"",\n\n    vectors_config=models.VectorParams(\n\n        size=768,\n\n        distance=models.Distance.COSINE,\n\n    ),\n\n)\n\n```\n\n\n\nIt is always a good idea to use batching, while loading a large dataset, so let\'s do that.\n\nWe are going to need a helper function to split the dataset into batches:', 'from qdrant_client.http.models import Batch\n\n\n\ncohere_client = cohere.Client(""<< your_api_key >>"")\n\nqdrant_client = qdrant_client.QdrantClient()\n\nqdrant_client.upsert(\n\n    collection_name=""MyCollection"",\n\n    points=Batch(\n\n        ids=[1],\n\n        vectors=cohere_client.embed(\n\n            model=""large"",\n\n            texts=[""The best vector database""],\n\n        ).embeddings,\n\n    ),\n\n)\n\n```']","}

	}

);



```



are both possible.



## Upload points



To optimize performance, Qdrant supports batch loading of points. I.e., you can load several points into the service in one API call.

Batching allows you to minimize the overhead of creating a network connection.



The Qdrant API supports two ways of creating batches - record-oriented and column-oriented.

Internally, these options do not differ and are made only for the convenience of interaction.



Create points with batch:



```http
Now, thanks to the new batch search, you don’t need to worry about that. Qdrant will handle multiple search requests in just one API call and will perform those requests in the most optimal way.



## An example of using the batch search



We’ve used the official Python client to show how the batch search might be integrated with your application. Since there have been some changes in the interfaces of Qdrant 0.10.0, we’ll go step by step.



## Creating the collection
## Summary



Batch search allows packing different queries into a single API call and retrieving the results in a single response. If you ever struggled with sending several consecutive queries into Qdrant, then you can easily switch to the new batch search method and simplify your application code. As shown in the benchmarks, that may almost effortlessly speed up your interactions with Qdrant even by over 30%, even not considering the spare network overhead and possible reuse of filters!
to create in a second:



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""http://localhost:6333"")



client.create_collection(

    collection_name=""arxiv-titles-instructorxl-embeddings"",

    vectors_config=models.VectorParams(

        size=768,

        distance=models.Distance.COSINE,

    ),

)

```



It is always a good idea to use batching, while loading a large dataset, so let's do that.

We are going to need a helper function to split the dataset into batches:
from qdrant_client.http.models import Batch



cohere_client = cohere.Client(""<< your_api_key >>"")

qdrant_client = qdrant_client.QdrantClient()

qdrant_client.upsert(

    collection_name=""MyCollection"",

    points=Batch(

        ids=[1],

        vectors=cohere_client.embed(

            model=""large"",

            texts=[""The best vector database""],

        ).embeddings,

    ),

)

```",0.5,0.6538461538461539,0.5666666666666668,0.34328358208955223,0.45098039215686275,0.38983050847457623,0.4264705882352941,0.5576923076923077,0.4833333333333333,0.45588235294117646,0.5961538461538461,0.5166666666666666,0.9280197620391846,0.6831506490707397,0.7301368117332458,0.7058627009391785,0.9733574951533228,0.9373161320885023,68,1.3076923076923077,0.3822232914397399
True,,7902.205,8639abbf,How can you create an index for a specific field in a payload using the Qdrant library?,"To create an index for a specific field in a payload using the Qdrant library, you can utilize the `CreatePayloadIndexAsync` method provided by the client. This method takes in the parameters `collectionName` and `fieldName`. ","To create an index for a specific field in a payload using the Qdrant library, you can follow the code snippets provided in the question. Here is a general guide on how to do it in different programming languages:

1. Python:
```python
client.create_payload_index(
    collection_name=""{collection_name}"",
    field_name=""name_of_the_field_to_index"",
    field_schema=""keyword"",
)
```

2. TypeScript:
```typescript
client.createPayloadIndex(""{collection_name}"", {
    field_name: ""name_of_the_field_to_index"",
    field_schema: ""keyword"",
});
```

3. Rust:
```rust
client.create_payload_index_async(
    ""{collection_name}"",
    ""name_of_the_field_to_index"",
    PayloadSchemaType::Keyword,
    None,
    None,
    None,
    None,
).get();
```

4. C#:
```csharp
await client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""name_of_the_field_to_index"");
```

5. Java:
```java
client.createPayloadIndexAsync(
    ""{collection_name}"",
    ""name_of_the_field_to_index"",
    PayloadSchemaType.Keyword
);
```

These code snippets demonstrate how to create a payload index for a specific field in a collection using the Qdrant library in different programming languages. Just replace the placeholders like `{collection_name}` and `name_of_the_field_to_index` with the actual values you want to use.","to set up the Qdrant [payload index](/documentation/concepts/indexing/#payload-index), so the search 

is more efficient. 



```python

from qdrant_client import models



client.create_payload_index(

    collection_name=""my_collection"",

    field_name=""metadata.library"",

    field_type=models.PayloadSchemaType.KEYWORD,

)

```



The payload index is not the only thing we want to change. Since none of the search
client = QdrantClient(host=""localhost"", port=6333)



client.create_payload_index(

    collection_name=""{collection_name}"",

    field_name=""name_of_the_field_to_index"",

    field_schema=models.TextIndexParams(

        type=""text"",

        tokenizer=models.TokenizerType.WORD,

        min_token_len=2,

        max_token_len=15,

        lowercase=True,

    ),

)

```



```typescript

import { QdrantClient, Schemas } from ""@qdrant/js-client-rest"";
```http

PUT /collections/{collection_name}/index

{

    ""field_name"": ""name_of_the_field_to_index"",

    ""field_schema"": ""keyword""

}

```



```python

client.create_payload_index(

    collection_name=""{collection_name}"",

    field_name=""name_of_the_field_to_index"",

    field_schema=""keyword"",

)

```



```typescript

client.createPayloadIndex(""{collection_name}"", {

  field_name: ""name_of_the_field_to_index"",

  field_schema: ""keyword"",

});

```



```rust

use qdrant_client::qdrant::FieldType;
client

    .createPayloadIndexAsync(

        ""{collection_name}"",

        ""name_of_the_field_to_index"",

        PayloadSchemaType.Keyword,

        null,

        null,

        null,

        null)

    .get();

```



```csharp

using Qdrant.Client;



var client = new QdrantClient(""localhost"", 6334);



await client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""name_of_the_field_to_index"");

```



Available field types are:
client

    .create_field_index(

        ""{collection_name}"",

        ""name_of_the_field_to_index"",

        FieldType::Keyword,

        None,

        None,

    )

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.PayloadSchemaType;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createPayloadIndexAsync(","['to set up the Qdrant [payload index](/documentation/concepts/indexing/#payload-index), so the search \n\nis more efficient. \n\n\n\n```python\n\nfrom qdrant_client import models\n\n\n\nclient.create_payload_index(\n\n    collection_name=""my_collection"",\n\n    field_name=""metadata.library"",\n\n    field_type=models.PayloadSchemaType.KEYWORD,\n\n)\n\n```\n\n\n\nThe payload index is not the only thing we want to change. Since none of the search', 'client = QdrantClient(host=""localhost"", port=6333)\n\n\n\nclient.create_payload_index(\n\n    collection_name=""{collection_name}"",\n\n    field_name=""name_of_the_field_to_index"",\n\n    field_schema=models.TextIndexParams(\n\n        type=""text"",\n\n        tokenizer=models.TokenizerType.WORD,\n\n        min_token_len=2,\n\n        max_token_len=15,\n\n        lowercase=True,\n\n    ),\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient, Schemas } from ""@qdrant/js-client-rest"";', '```http\n\nPUT /collections/{collection_name}/index\n\n{\n\n    ""field_name"": ""name_of_the_field_to_index"",\n\n    ""field_schema"": ""keyword""\n\n}\n\n```\n\n\n\n```python\n\nclient.create_payload_index(\n\n    collection_name=""{collection_name}"",\n\n    field_name=""name_of_the_field_to_index"",\n\n    field_schema=""keyword"",\n\n)\n\n```\n\n\n\n```typescript\n\nclient.createPayloadIndex(""{collection_name}"", {\n\n  field_name: ""name_of_the_field_to_index"",\n\n  field_schema: ""keyword"",\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::qdrant::FieldType;', 'client\n\n    .createPayloadIndexAsync(\n\n        ""{collection_name}"",\n\n        ""name_of_the_field_to_index"",\n\n        PayloadSchemaType.Keyword,\n\n        null,\n\n        null,\n\n        null,\n\n        null)\n\n    .get();\n\n```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""name_of_the_field_to_index"");\n\n```\n\n\n\nAvailable field types are:', 'client\n\n    .create_field_index(\n\n        ""{collection_name}"",\n\n        ""name_of_the_field_to_index"",\n\n        FieldType::Keyword,\n\n        None,\n\n        None,\n\n    )\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createPayloadIndexAsync(']","Question: How can you create an index for a specific field in a payload using the Qdrant library?\n\nContext: to set up the Qdrant [payload index](/documentation/concepts/indexing/#payload-index), so the search 

is more efficient. 



```python

from qdrant_client import models



client.create_payload_index(

collection_name=""my_collection"",

field_name=""metadata.library"",

field_type=models.PayloadSchemaType.KEYWORD,

)

```



The payload index is not the only thing we want to change. Since none of the search
client = QdrantClient(host=""localhost"", port=6333)



client.create_payload_index(

collection_name=""{collection_name}"",

field_name=""name_of_the_field_to_index"",

field_schema=models.TextIndexParams(

type=""text"",

tokenizer=models.TokenizerType.WORD,

min_token_len=2,

max_token_len=15,

lowercase=True,

),

)

```



```typescript

import { QdrantClient, Schemas } from ""@qdrant/js-client-rest"";
```http

PUT /collections/{collection_name}/index

{

""field_name"": ""name_of_the_field_to_index"",

""field_schema"": ""keyword""

}

```



```python

client.create_payload_index(

collection_name=""{collection_name}"",

field_name=""name_of_the_field_to_index"",

field_schema=""keyword"",

)

```



```typescript

client.createPayloadIndex(""{collection_name}"", {

field_name: ""name_of_the_field_to_index"",

field_schema: ""keyword"",

});

```



```rust

use qdrant_client::qdrant::FieldType;
client

.createPayloadIndexAsync(

""{collection_name}"",

""name_of_the_field_to_index"",

PayloadSchemaType.Keyword,

null,

null,

null,

null)

.get();

```



```csharp

using Qdrant.Client;



var client = new QdrantClient(""localhost"", 6334);



await client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""name_of_the_field_to_index"");

```



Available field types are:
client

.create_field_index(

""{collection_name}"",

""name_of_the_field_to_index"",

FieldType::Keyword,

None,

None,

)

.await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.PayloadSchemaType;



QdrantClient client =

new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

.createPayloadIndexAsync(\n\nAnswer:",How can you create an index for a specific field in a payload using the Qdrant library?,"To create an index for a specific field in a payload using the Qdrant library, you can utilize the `CreatePayloadIndexAsync` method provided by the client. This method takes in the parameters `collectionName` and `fieldName`. ","['to set up the Qdrant [payload index](/documentation/concepts/indexing/#payload-index), so the search \n\nis more efficient. \n\n\n\n```python\n\nfrom qdrant_client import models\n\n\n\nclient.create_payload_index(\n\n    collection_name=""my_collection"",\n\n    field_name=""metadata.library"",\n\n    field_type=models.PayloadSchemaType.KEYWORD,\n\n)\n\n```\n\n\n\nThe payload index is not the only thing we want to change. Since none of the search', 'client = QdrantClient(host=""localhost"", port=6333)\n\n\n\nclient.create_payload_index(\n\n    collection_name=""{collection_name}"",\n\n    field_name=""name_of_the_field_to_index"",\n\n    field_schema=models.TextIndexParams(\n\n        type=""text"",\n\n        tokenizer=models.TokenizerType.WORD,\n\n        min_token_len=2,\n\n        max_token_len=15,\n\n        lowercase=True,\n\n    ),\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient, Schemas } from ""@qdrant/js-client-rest"";', '```http\n\nPUT /collections/{collection_name}/index\n\n{\n\n    ""field_name"": ""name_of_the_field_to_index"",\n\n    ""field_schema"": ""keyword""\n\n}\n\n```\n\n\n\n```python\n\nclient.create_payload_index(\n\n    collection_name=""{collection_name}"",\n\n    field_name=""name_of_the_field_to_index"",\n\n    field_schema=""keyword"",\n\n)\n\n```\n\n\n\n```typescript\n\nclient.createPayloadIndex(""{collection_name}"", {\n\n  field_name: ""name_of_the_field_to_index"",\n\n  field_schema: ""keyword"",\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::qdrant::FieldType;', 'client\n\n    .createPayloadIndexAsync(\n\n        ""{collection_name}"",\n\n        ""name_of_the_field_to_index"",\n\n        PayloadSchemaType.Keyword,\n\n        null,\n\n        null,\n\n        null,\n\n        null)\n\n    .get();\n\n```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""name_of_the_field_to_index"");\n\n```\n\n\n\nAvailable field types are:', 'client\n\n    .create_field_index(\n\n        ""{collection_name}"",\n\n        ""name_of_the_field_to_index"",\n\n        FieldType::Keyword,\n\n        None,\n\n        None,\n\n    )\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Collections.PayloadSchemaType;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createPayloadIndexAsync(']","to set up the Qdrant [payload index](/documentation/concepts/indexing/#payload-index), so the search 

is more efficient. 



```python

from qdrant_client import models



client.create_payload_index(

    collection_name=""my_collection"",

    field_name=""metadata.library"",

    field_type=models.PayloadSchemaType.KEYWORD,

)

```



The payload index is not the only thing we want to change. Since none of the search
client = QdrantClient(host=""localhost"", port=6333)



client.create_payload_index(

    collection_name=""{collection_name}"",

    field_name=""name_of_the_field_to_index"",

    field_schema=models.TextIndexParams(

        type=""text"",

        tokenizer=models.TokenizerType.WORD,

        min_token_len=2,

        max_token_len=15,

        lowercase=True,

    ),

)

```



```typescript

import { QdrantClient, Schemas } from ""@qdrant/js-client-rest"";
```http

PUT /collections/{collection_name}/index

{

    ""field_name"": ""name_of_the_field_to_index"",

    ""field_schema"": ""keyword""

}

```



```python

client.create_payload_index(

    collection_name=""{collection_name}"",

    field_name=""name_of_the_field_to_index"",

    field_schema=""keyword"",

)

```



```typescript

client.createPayloadIndex(""{collection_name}"", {

  field_name: ""name_of_the_field_to_index"",

  field_schema: ""keyword"",

});

```



```rust

use qdrant_client::qdrant::FieldType;
client

    .createPayloadIndexAsync(

        ""{collection_name}"",

        ""name_of_the_field_to_index"",

        PayloadSchemaType.Keyword,

        null,

        null,

        null,

        null)

    .get();

```



```csharp

using Qdrant.Client;



var client = new QdrantClient(""localhost"", 6334);



await client.CreatePayloadIndexAsync(collectionName: ""{collection_name}"", fieldName: ""name_of_the_field_to_index"");

```



Available field types are:
client

    .create_field_index(

        ""{collection_name}"",

        ""name_of_the_field_to_index"",

        FieldType::Keyword,

        None,

        None,

    )

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Collections.PayloadSchemaType;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createPayloadIndexAsync(",0.11976047904191617,0.7407407407407407,0.20618556701030927,0.07228915662650602,0.46153846153846156,0.125,0.10179640718562874,0.6296296296296297,0.17525773195876287,0.10778443113772455,0.6666666666666666,0.18556701030927836,0.9328597187995911,0.48068302869796753,0.6276568174362183,0.5444250702857971,0.5486514121294022,0.7564576715230942,128,3.764705882352941,0.3785893587685391
True,,1645.699,93b6ca7a,What is the purpose of the Quantization?,"Quantization is primarily used to reduce the memory footprint and accelerate the search process in high-dimensional vector spaces. In the context of the Qdrant, quantization allows you to optimize the search engine for specific use cases, striking a balance between accuracy, storage efficiency, and search speed.","As mentioned in the discussion, the choice of quantization method is often influenced by the available CPU instructions and the specific use case requirements. Implementing other quantization methods, such as four-bit quantization or compressing two floats into one bit, can be considered based on the trade-offs between accuracy, storage efficiency, and search speed. It would require careful evaluation to determine the impact on performance and the overall effectiveness of the search engine in fulfilling its intended purpose.","Quantization is primarily used to reduce the memory footprint and accelerate the search process in high-dimensional vector spaces.

In the context of the Qdrant, quantization allows you to optimize the search engine for specific use cases, striking a balance between accuracy, storage efficiency, and search speed.



There are tradeoffs associated with quantization.

On the one hand, quantization allows for significant reductions in storage requirements and faster search times.
## Quantum Quantization and Entanglement
Right, so binary quantization is actually very simple. The main idea that we convert the float point elements of the vector into binary representation. So it's either zero or one, depending if the original element is positive or negative. And by doing this we can approximate dot production or cosine similarity, whatever metric you use to compare vectors with just hemming distance, and hemming distance is turned to be very simple to compute. It uses only two most optimized CPU instructions ever
Right, so our choice of quantization is mostly defined by available CPU instructions we can apply to perform those computations. In case of binary quantization, it's straightforward and very simple. That's why we like binary quantization so much. In case of, for example, four bit quantization, it is not as clear which operation we should use. It's not yet clear
Demetrios:

Interesting. Okay, so is there a plan to implement other quantization methods, like four bit quantization or even compressing two floats into one bit?



Andrey Vasnetsov:","['Quantization is primarily used to reduce the memory footprint and accelerate the search process in high-dimensional vector spaces.\n\nIn the context of the Qdrant, quantization allows you to optimize the search engine for specific use cases, striking a balance between accuracy, storage efficiency, and search speed.\n\n\n\nThere are tradeoffs associated with quantization.\n\nOn the one hand, quantization allows for significant reductions in storage requirements and faster search times.', '## Quantum Quantization and Entanglement', ""Right, so binary quantization is actually very simple. The main idea that we convert the float point elements of the vector into binary representation. So it's either zero or one, depending if the original element is positive or negative. And by doing this we can approximate dot production or cosine similarity, whatever metric you use to compare vectors with just hemming distance, and hemming distance is turned to be very simple to compute. It uses only two most optimized CPU instructions ever"", ""Right, so our choice of quantization is mostly defined by available CPU instructions we can apply to perform those computations. In case of binary quantization, it's straightforward and very simple. That's why we like binary quantization so much. In case of, for example, four bit quantization, it is not as clear which operation we should use. It's not yet clear"", 'Demetrios:\n\nInteresting. Okay, so is there a plan to implement other quantization methods, like four bit quantization or even compressing two floats into one bit?\n\n\n\nAndrey Vasnetsov:']","Question: What is the purpose of the Quantization?\n\nContext: Quantization is primarily used to reduce the memory footprint and accelerate the search process in high-dimensional vector spaces.

In the context of the Qdrant, quantization allows you to optimize the search engine for specific use cases, striking a balance between accuracy, storage efficiency, and search speed.



There are tradeoffs associated with quantization.

On the one hand, quantization allows for significant reductions in storage requirements and faster search times.
## Quantum Quantization and Entanglement
Right, so binary quantization is actually very simple. The main idea that we convert the float point elements of the vector into binary representation. So it's either zero or one, depending if the original element is positive or negative. And by doing this we can approximate dot production or cosine similarity, whatever metric you use to compare vectors with just hemming distance, and hemming distance is turned to be very simple to compute. It uses only two most optimized CPU instructions ever
Right, so our choice of quantization is mostly defined by available CPU instructions we can apply to perform those computations. In case of binary quantization, it's straightforward and very simple. That's why we like binary quantization so much. In case of, for example, four bit quantization, it is not as clear which operation we should use. It's not yet clear
Demetrios:

Interesting. Okay, so is there a plan to implement other quantization methods, like four bit quantization or even compressing two floats into one bit?



Andrey Vasnetsov:\n\nAnswer:",What is the purpose of the Quantization?,"Quantization is primarily used to reduce the memory footprint and accelerate the search process in high-dimensional vector spaces. In the context of the Qdrant, quantization allows you to optimize the search engine for specific use cases, striking a balance between accuracy, storage efficiency, and search speed.","['Quantization is primarily used to reduce the memory footprint and accelerate the search process in high-dimensional vector spaces.\n\nIn the context of the Qdrant, quantization allows you to optimize the search engine for specific use cases, striking a balance between accuracy, storage efficiency, and search speed.\n\n\n\nThere are tradeoffs associated with quantization.\n\nOn the one hand, quantization allows for significant reductions in storage requirements and faster search times.', '## Quantum Quantization and Entanglement', ""Right, so binary quantization is actually very simple. The main idea that we convert the float point elements of the vector into binary representation. So it's either zero or one, depending if the original element is positive or negative. And by doing this we can approximate dot production or cosine similarity, whatever metric you use to compare vectors with just hemming distance, and hemming distance is turned to be very simple to compute. It uses only two most optimized CPU instructions ever"", ""Right, so our choice of quantization is mostly defined by available CPU instructions we can apply to perform those computations. In case of binary quantization, it's straightforward and very simple. That's why we like binary quantization so much. In case of, for example, four bit quantization, it is not as clear which operation we should use. It's not yet clear"", 'Demetrios:\n\nInteresting. Okay, so is there a plan to implement other quantization methods, like four bit quantization or even compressing two floats into one bit?\n\n\n\nAndrey Vasnetsov:']","Quantization is primarily used to reduce the memory footprint and accelerate the search process in high-dimensional vector spaces.

In the context of the Qdrant, quantization allows you to optimize the search engine for specific use cases, striking a balance between accuracy, storage efficiency, and search speed.



There are tradeoffs associated with quantization.

On the one hand, quantization allows for significant reductions in storage requirements and faster search times.
## Quantum Quantization and Entanglement
Right, so binary quantization is actually very simple. The main idea that we convert the float point elements of the vector into binary representation. So it's either zero or one, depending if the original element is positive or negative. And by doing this we can approximate dot production or cosine similarity, whatever metric you use to compare vectors with just hemming distance, and hemming distance is turned to be very simple to compute. It uses only two most optimized CPU instructions ever
Right, so our choice of quantization is mostly defined by available CPU instructions we can apply to perform those computations. In case of binary quantization, it's straightforward and very simple. That's why we like binary quantization so much. In case of, for example, four bit quantization, it is not as clear which operation we should use. It's not yet clear
Demetrios:

Interesting. Okay, so is there a plan to implement other quantization methods, like four bit quantization or even compressing two floats into one bit?



Andrey Vasnetsov:",0.28169014084507044,0.4878048780487805,0.3571428571428571,0.12857142857142856,0.225,0.16363636363636364,0.18309859154929578,0.3170731707317073,0.23214285714285715,0.28169014084507044,0.4878048780487805,0.3571428571428571,0.7492255568504333,0.609541654586792,0.6438981294631958,0.6262490153312683,0.9835487887321506,0.9867174638202414,77,1.673913043478261,0.6308693380335828
True,,4958.281,ecc25e8f,How can the retrieval quality of an approximation be measured in the context of semantic search?,"The retrieval quality of an approximation in semantic search can be measured using various quality metrics. Some of these metrics include Precision@k, Mean Reciprocal Rank (MRR), and DCG and NDCG.","In the context of semantic search utilizing Approximate Nearest Neighbors (ANN) algorithms, the retrieval quality of an approximation can be measured using various metrics. Some common quality metrics to assess the performance of semantic search algorithms include:

1. **Precision@k**: Precision at k is a metric that measures the proportion of relevant documents among the top k search results. It calculates how many of the retrieved documents are relevant to the query at a given threshold k.

2. **Mean Reciprocal Rank (MRR)**: Mean Reciprocal Rank is a metric that evaluates the effectiveness of search algorithms by considering the ranks of the first relevant document retrieved in the result list. It provides a measure of the average rank of the first relevant document across multiple queries.

3. **Recall**: Recall measures the ability of a search algorithm to retrieve all relevant documents from the corpus. It calculates the ratio of relevant documents retrieved to the total number of relevant documents available.

4. **F1 Score**: The F1 score is the harmonic mean of precision and recall, providing a single metric that balances both precision and recall. It is often used to evaluate the overall performance of a search algorithm.

5. **Mean Average Precision (MAP)**: Mean Average Precision calculates the average precision across multiple queries, providing a comprehensive measure of the search algorithm's performance in retrieving relevant documents.

6. **nDCG (Normalized Discounted Cumulative Gain)**: nDCG measures the effectiveness of the search algorithm by considering both the relevance and the rank of retrieved documents. It provides a normalized measure of the quality of the search results.

These metrics can be used to evaluate the retrieval quality of the ANN approximation in semantic search algorithms and help in optimizing the search performance for better user experience.","them with the ground truth. In that setup, **finding the most similar documents is implemented as full kNN search, without any approximation**.

As a result, we can measure the quality of the embeddings themselves, without the influence of the ANN algorithm.



## Retrieval quality



Embeddings quality is indeed the most important factor in the semantic search quality. However, vector search engines, such as Qdrant, do not
perform pure kNN search. Instead, they use **Approximate Nearest Neighbors** (ANN) algorithms, which are much faster than the exact search, 

but can return suboptimal results. We can also **measure the retrieval quality of that approximation** which also contributes to the overall

search quality.



### Quality metrics
to do it. 



## Wrapping up



Assessing the quality of retrieval is a critical aspect of evaluating semantic search performance. It is imperative to measure retrieval quality when aiming for optimal quality of.

your search results. Qdrant provides a built-in exact search mode, which can be used to measure the quality of the ANN algorithm itself, 

even in an automated way, as part of your CI/CD pipeline.
search quality.



### Quality metrics



There are various ways of how quantify the quality of semantic search. Some of them, such as [Precision@k](https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Precision_at_k), 

are based on the number of relevant documents in the top-k search results. Others, such as [Mean Reciprocal Rank (MRR)](https://en.wikipedia.org/wiki/Mean_reciprocal_rank),
---

title: Measure retrieval quality

weight: 21

---



# Measure retrieval quality



| Time: 30 min | Level: Intermediate |  |    |

|--------------|---------------------|--|----|



Semantic search pipelines are as good as the embeddings they use. If your model cannot properly represent input data, similar objects might

be far away from each other in the vector space. No surprise, that the search results will be poor in this case. There is, however, another","['them with the ground truth. In that setup, **finding the most similar documents is implemented as full kNN search, without any approximation**.\n\nAs a result, we can measure the quality of the embeddings themselves, without the influence of the ANN algorithm.\n\n\n\n## Retrieval quality\n\n\n\nEmbeddings quality is indeed the most important factor in the semantic search quality. However, vector search engines, such as Qdrant, do not', 'perform pure kNN search. Instead, they use **Approximate Nearest Neighbors** (ANN) algorithms, which are much faster than the exact search, \n\nbut can return suboptimal results. We can also **measure the retrieval quality of that approximation** which also contributes to the overall\n\nsearch quality.\n\n\n\n### Quality metrics', 'to do it. \n\n\n\n## Wrapping up\n\n\n\nAssessing the quality of retrieval is a critical aspect of evaluating semantic search performance. It is imperative to measure retrieval quality when aiming for optimal quality of.\n\nyour search results. Qdrant provides a built-in exact search mode, which can be used to measure the quality of the ANN algorithm itself, \n\neven in an automated way, as part of your CI/CD pipeline.', 'search quality.\n\n\n\n### Quality metrics\n\n\n\nThere are various ways of how quantify the quality of semantic search. Some of them, such as [Precision@k](https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Precision_at_k), \n\nare based on the number of relevant documents in the top-k search results. Others, such as [Mean Reciprocal Rank (MRR)](https://en.wikipedia.org/wiki/Mean_reciprocal_rank),', '---\n\ntitle: Measure retrieval quality\n\nweight: 21\n\n---\n\n\n\n# Measure retrieval quality\n\n\n\n| Time: 30 min | Level: Intermediate |  |    |\n\n|--------------|---------------------|--|----|\n\n\n\nSemantic search pipelines are as good as the embeddings they use. If your model cannot properly represent input data, similar objects might\n\nbe far away from each other in the vector space. No surprise, that the search results will be poor in this case. There is, however, another']","Question: How can the retrieval quality of an approximation be measured in the context of semantic search?\n\nContext: them with the ground truth. In that setup, **finding the most similar documents is implemented as full kNN search, without any approximation**.

As a result, we can measure the quality of the embeddings themselves, without the influence of the ANN algorithm.



## Retrieval quality



Embeddings quality is indeed the most important factor in the semantic search quality. However, vector search engines, such as Qdrant, do not
perform pure kNN search. Instead, they use **Approximate Nearest Neighbors** (ANN) algorithms, which are much faster than the exact search, 

but can return suboptimal results. We can also **measure the retrieval quality of that approximation** which also contributes to the overall

search quality.



### Quality metrics
to do it. 



## Wrapping up



Assessing the quality of retrieval is a critical aspect of evaluating semantic search performance. It is imperative to measure retrieval quality when aiming for optimal quality of.

your search results. Qdrant provides a built-in exact search mode, which can be used to measure the quality of the ANN algorithm itself, 

even in an automated way, as part of your CI/CD pipeline.
search quality.



### Quality metrics



There are various ways of how quantify the quality of semantic search. Some of them, such as [Precision@k](https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Precision_at_k), 

are based on the number of relevant documents in the top-k search results. Others, such as [Mean Reciprocal Rank (MRR)](https://en.wikipedia.org/wiki/Mean_reciprocal_rank),
---

title: Measure retrieval quality

weight: 21

---



# Measure retrieval quality



| Time: 30 min | Level: Intermediate |  |    |

|--------------|---------------------|--|----|



Semantic search pipelines are as good as the embeddings they use. If your model cannot properly represent input data, similar objects might

be far away from each other in the vector space. No surprise, that the search results will be poor in this case. There is, however, another\n\nAnswer:",How can the retrieval quality of an approximation be measured in the context of semantic search?,"The retrieval quality of an approximation in semantic search can be measured using various quality metrics. Some of these metrics include Precision@k, Mean Reciprocal Rank (MRR), and DCG and NDCG.","['them with the ground truth. In that setup, **finding the most similar documents is implemented as full kNN search, without any approximation**.\n\nAs a result, we can measure the quality of the embeddings themselves, without the influence of the ANN algorithm.\n\n\n\n## Retrieval quality\n\n\n\nEmbeddings quality is indeed the most important factor in the semantic search quality. However, vector search engines, such as Qdrant, do not', 'perform pure kNN search. Instead, they use **Approximate Nearest Neighbors** (ANN) algorithms, which are much faster than the exact search, \n\nbut can return suboptimal results. We can also **measure the retrieval quality of that approximation** which also contributes to the overall\n\nsearch quality.\n\n\n\n### Quality metrics', 'to do it. \n\n\n\n## Wrapping up\n\n\n\nAssessing the quality of retrieval is a critical aspect of evaluating semantic search performance. It is imperative to measure retrieval quality when aiming for optimal quality of.\n\nyour search results. Qdrant provides a built-in exact search mode, which can be used to measure the quality of the ANN algorithm itself, \n\neven in an automated way, as part of your CI/CD pipeline.', 'search quality.\n\n\n\n### Quality metrics\n\n\n\nThere are various ways of how quantify the quality of semantic search. Some of them, such as [Precision@k](https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Precision_at_k), \n\nare based on the number of relevant documents in the top-k search results. Others, such as [Mean Reciprocal Rank (MRR)](https://en.wikipedia.org/wiki/Mean_reciprocal_rank),', '---\n\ntitle: Measure retrieval quality\n\nweight: 21\n\n---\n\n\n\n# Measure retrieval quality\n\n\n\n| Time: 30 min | Level: Intermediate |  |    |\n\n|--------------|---------------------|--|----|\n\n\n\nSemantic search pipelines are as good as the embeddings they use. If your model cannot properly represent input data, similar objects might\n\nbe far away from each other in the vector space. No surprise, that the search results will be poor in this case. There is, however, another']","them with the ground truth. In that setup, **finding the most similar documents is implemented as full kNN search, without any approximation**.

As a result, we can measure the quality of the embeddings themselves, without the influence of the ANN algorithm.



## Retrieval quality



Embeddings quality is indeed the most important factor in the semantic search quality. However, vector search engines, such as Qdrant, do not
perform pure kNN search. Instead, they use **Approximate Nearest Neighbors** (ANN) algorithms, which are much faster than the exact search, 

but can return suboptimal results. We can also **measure the retrieval quality of that approximation** which also contributes to the overall

search quality.



### Quality metrics
to do it. 



## Wrapping up



Assessing the quality of retrieval is a critical aspect of evaluating semantic search performance. It is imperative to measure retrieval quality when aiming for optimal quality of.

your search results. Qdrant provides a built-in exact search mode, which can be used to measure the quality of the ANN algorithm itself, 

even in an automated way, as part of your CI/CD pipeline.
search quality.



### Quality metrics



There are various ways of how quantify the quality of semantic search. Some of them, such as [Precision@k](https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Precision_at_k), 

are based on the number of relevant documents in the top-k search results. Others, such as [Mean Reciprocal Rank (MRR)](https://en.wikipedia.org/wiki/Mean_reciprocal_rank),
---

title: Measure retrieval quality

weight: 21

---



# Measure retrieval quality



| Time: 30 min | Level: Intermediate |  |    |

|--------------|---------------------|--|----|



Semantic search pipelines are as good as the embeddings they use. If your model cannot properly represent input data, similar objects might

be far away from each other in the vector space. No surprise, that the search results will be poor in this case. There is, however, another",0.112,0.9655172413793104,0.2007168458781362,0.06827309236947791,0.6071428571428571,0.12274368231046934,0.088,0.7586206896551724,0.15770609318996417,0.1,0.8620689655172413,0.1792114695340502,0.8823453187942505,0.5205264091491699,0.676440417766571,0.5883288979530334,0.49367763641445583,0.8893021229887381,291,9.387096774193548,0.5588481235671164
True,,1810.242,7c68811b,Why does Qdrant deliberately exclude libraries or algorithm implementations in their benchmark comparisons?,"Qdrant excludes libraries or algorithm implementations in their benchmark comparisons because their primary focus is on vector databases. By limiting their comparisons to open-source solutions and avoiding external cloud components, Qdrant ensures hardware parity and minimizes biases. This allows them to provide accurate and unbiased benchmarks specifically tailored to the performance of vector databases, enabling users to make informed decisions based on the data provided.","Qdrant deliberately excludes libraries or algorithm implementations in their benchmark comparisons because their focus is solely on vector databases. By doing so, they can avoid potential problems and biases that may arise from comparing different libraries or algorithms. Additionally, this approach allows them to concentrate on assessing the performance of vector databases specifically. This decision also helps to maintain fairness in their comparisons, as they benchmark only open-source vector databases that can be easily reproduced by others.","We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. 



Why?
Qdrant avoids all these problems and also benefits from the speed boost, as it implements an advanced [query planning strategy](/documentation/search/#query-planning).



<aside role=""status"">The Filtering Benchmark is all about changes in performance between filter and un-filtered queries. Please refer to the search benchmark for absolute speed comparison.</aside>
. Then the benchmarks that I specified were only against PG vector, and we did not benchmark it any further because the speed and the accuracy that Qdrant provides, I think it is already covering our use case and it is way more faster than we thought the solution could be. So right now we did not benchmark against any other vector database or any other solution.
That makes the comparison unfair. That’s why we purely focused on testing the Open Source vector databases, so everybody may reproduce the benchmarks easily.



This is not the final list, and we’ll continue benchmarking as many different engines as possible.



## How to reproduce the benchmark?



The source code is available on [Github](https://github.com/qdrant/vector-db-benchmark) and has a `README.md` file describing the process of running the benchmark for a specific engine.
### What Hasn't Changed?



#### Our Principles of Benchmarking



At Qdrant all code stays open-source. We ensure our benchmarks are accessible for everyone, allowing you to run them on your own hardware. Your input matters to us, and contributions and sharing of best practices are welcome!





Our benchmarks are strictly limited to open-source solutions, ensuring hardware parity and avoiding biases from external cloud components.","[""We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. \n\n\n\nWhy?"", 'Qdrant avoids all these problems and also benefits from the speed boost, as it implements an advanced [query planning strategy](/documentation/search/#query-planning).\n\n\n\n<aside role=""status"">The Filtering Benchmark is all about changes in performance between filter and un-filtered queries. Please refer to the search benchmark for absolute speed comparison.</aside>', '. Then the benchmarks that I specified were only against PG vector, and we did not benchmark it any further because the speed and the accuracy that Qdrant provides, I think it is already covering our use case and it is way more faster than we thought the solution could be. So right now we did not benchmark against any other vector database or any other solution.', 'That makes the comparison unfair. That’s why we purely focused on testing the Open Source vector databases, so everybody may reproduce the benchmarks easily.\n\n\n\nThis is not the final list, and we’ll continue benchmarking as many different engines as possible.\n\n\n\n## How to reproduce the benchmark?\n\n\n\nThe source code is available on [Github](https://github.com/qdrant/vector-db-benchmark) and has a `README.md` file describing the process of running the benchmark for a specific engine.', ""### What Hasn't Changed?\n\n\n\n#### Our Principles of Benchmarking\n\n\n\nAt Qdrant all code stays open-source. We ensure our benchmarks are accessible for everyone, allowing you to run them on your own hardware. Your input matters to us, and contributions and sharing of best practices are welcome!\n\n\n\n\n\nOur benchmarks are strictly limited to open-source solutions, ensuring hardware parity and avoiding biases from external cloud components.""]","Question: Why does Qdrant deliberately exclude libraries or algorithm implementations in their benchmark comparisons?\n\nContext: We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. 



Why?
Qdrant avoids all these problems and also benefits from the speed boost, as it implements an advanced [query planning strategy](/documentation/search/#query-planning).



<aside role=""status"">The Filtering Benchmark is all about changes in performance between filter and un-filtered queries. Please refer to the search benchmark for absolute speed comparison.</aside>
. Then the benchmarks that I specified were only against PG vector, and we did not benchmark it any further because the speed and the accuracy that Qdrant provides, I think it is already covering our use case and it is way more faster than we thought the solution could be. So right now we did not benchmark against any other vector database or any other solution.
That makes the comparison unfair. That’s why we purely focused on testing the Open Source vector databases, so everybody may reproduce the benchmarks easily.



This is not the final list, and we’ll continue benchmarking as many different engines as possible.



## How to reproduce the benchmark?



The source code is available on [Github](https://github.com/qdrant/vector-db-benchmark) and has a `README.md` file describing the process of running the benchmark for a specific engine.
### What Hasn't Changed?



#### Our Principles of Benchmarking



At Qdrant all code stays open-source. We ensure our benchmarks are accessible for everyone, allowing you to run them on your own hardware. Your input matters to us, and contributions and sharing of best practices are welcome!





Our benchmarks are strictly limited to open-source solutions, ensuring hardware parity and avoiding biases from external cloud components.\n\nAnswer:",Why does Qdrant deliberately exclude libraries or algorithm implementations in their benchmark comparisons?,"Qdrant excludes libraries or algorithm implementations in their benchmark comparisons because their primary focus is on vector databases. By limiting their comparisons to open-source solutions and avoiding external cloud components, Qdrant ensures hardware parity and minimizes biases. This allows them to provide accurate and unbiased benchmarks specifically tailored to the performance of vector databases, enabling users to make informed decisions based on the data provided.","[""We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. \n\n\n\nWhy?"", 'Qdrant avoids all these problems and also benefits from the speed boost, as it implements an advanced [query planning strategy](/documentation/search/#query-planning).\n\n\n\n<aside role=""status"">The Filtering Benchmark is all about changes in performance between filter and un-filtered queries. Please refer to the search benchmark for absolute speed comparison.</aside>', '. Then the benchmarks that I specified were only against PG vector, and we did not benchmark it any further because the speed and the accuracy that Qdrant provides, I think it is already covering our use case and it is way more faster than we thought the solution could be. So right now we did not benchmark against any other vector database or any other solution.', 'That makes the comparison unfair. That’s why we purely focused on testing the Open Source vector databases, so everybody may reproduce the benchmarks easily.\n\n\n\nThis is not the final list, and we’ll continue benchmarking as many different engines as possible.\n\n\n\n## How to reproduce the benchmark?\n\n\n\nThe source code is available on [Github](https://github.com/qdrant/vector-db-benchmark) and has a `README.md` file describing the process of running the benchmark for a specific engine.', ""### What Hasn't Changed?\n\n\n\n#### Our Principles of Benchmarking\n\n\n\nAt Qdrant all code stays open-source. We ensure our benchmarks are accessible for everyone, allowing you to run them on your own hardware. Your input matters to us, and contributions and sharing of best practices are welcome!\n\n\n\n\n\nOur benchmarks are strictly limited to open-source solutions, ensuring hardware parity and avoiding biases from external cloud components.""]","We deliberately don't include libraries or algorithm implementations in our comparisons because our focus is squarely on vector databases. 



Why?
Qdrant avoids all these problems and also benefits from the speed boost, as it implements an advanced [query planning strategy](/documentation/search/#query-planning).



<aside role=""status"">The Filtering Benchmark is all about changes in performance between filter and un-filtered queries. Please refer to the search benchmark for absolute speed comparison.</aside>
. Then the benchmarks that I specified were only against PG vector, and we did not benchmark it any further because the speed and the accuracy that Qdrant provides, I think it is already covering our use case and it is way more faster than we thought the solution could be. So right now we did not benchmark against any other vector database or any other solution.
That makes the comparison unfair. That’s why we purely focused on testing the Open Source vector databases, so everybody may reproduce the benchmarks easily.



This is not the final list, and we’ll continue benchmarking as many different engines as possible.



## How to reproduce the benchmark?



The source code is available on [Github](https://github.com/qdrant/vector-db-benchmark) and has a `README.md` file describing the process of running the benchmark for a specific engine.
### What Hasn't Changed?



#### Our Principles of Benchmarking



At Qdrant all code stays open-source. We ensure our benchmarks are accessible for everyone, allowing you to run them on your own hardware. Your input matters to us, and contributions and sharing of best practices are welcome!





Our benchmarks are strictly limited to open-source solutions, ensuring hardware parity and avoiding biases from external cloud components.",0.4935064935064935,0.59375,0.5390070921985816,0.27631578947368424,0.3333333333333333,0.302158273381295,0.38961038961038963,0.46875,0.425531914893617,0.45454545454545453,0.546875,0.4964539007092198,0.9502133727073669,0.7062282562255859,0.7146927714347839,0.7104352712631226,0.9888347186461033,0.9979362709661169,77,1.1846153846153846,0.5190060951567854
True,,3012.536,3580e18a,What is the primary purpose of a Vector Database and why would someone choose to use it over traditional databases?,"A Vector Database is a specialized database system that is specifically designed for efficiently indexing, querying, and retrieving high-dimensional vector data. The primary purpose of a Vector Database is to enable advanced data analysis and similarity-search operations that go beyond the capabilities of traditional, structured query approaches used in conventional databases.","The primary purpose of a Vector Database is to efficiently index, query, and retrieve high-dimensional vector data, enabling advanced data analysis and similarity-search operations beyond the capabilities of traditional databases. One might choose to use a Vector Database over traditional databases for the following reasons:

1. Efficient storage and indexing of high-dimensional data.
2. Ability to handle large-scale datasets with billions of data points.
3. Support for real-time analytics and queries.
4. Handling vectors derived from complex data types like images, videos, and natural language text.
5. Improved performance and reduced latency in machine learning and AI applications.
6. Reduced development and deployment time and cost compared to building a custom solution.

These benefits make Vector Databases a valuable tool for applications that require handling high-dimensional vector data efficiently and accurately.","aliases: [ /blog/what-is-a-vector-database/ ]

---



> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.





## Why use a Vector Database?



The data flood is real.
advantage of their efficient indexing and searching techniques, vector databases enable faster 

and more accurate retrieval of unstructured data already represented as vectors, which can 

help put in front of users the most relevant results to their queries.



In addition, other benefits of using vector databases include:

1. Efficient storage and indexing of high-dimensional data.

3. Ability to handle large-scale datasets with billions of data points.

4. Support for real-time analytics and queries.
Those priorities lead to different architectural decisions that are not reproducible in a general-purpose database, even if it has vector index support.





###### Having a dedicated vector database requires duplication of data.



By their very nature, vector embeddings are derivatives of the primary source data.
And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query
4. Support for real-time analytics and queries.

5. Ability to handle vectors derived from complex data types such as images, videos, and natural language text.

6. Improved performance and reduced latency in machine learning and AI applications.

7. Reduced development and deployment time and cost compared to building a custom solution.



Keep in mind that the specific benefits of using a vector database may vary depending on the","['aliases: [ /blog/what-is-a-vector-database/ ]\n\n---\n\n\n\n> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.\n\n\n\n\n\n## Why use a Vector Database?\n\n\n\nThe data flood is real.', 'advantage of their efficient indexing and searching techniques, vector databases enable faster \n\nand more accurate retrieval of unstructured data already represented as vectors, which can \n\nhelp put in front of users the most relevant results to their queries.\n\n\n\nIn addition, other benefits of using vector databases include:\n\n1. Efficient storage and indexing of high-dimensional data.\n\n3. Ability to handle large-scale datasets with billions of data points.\n\n4. Support for real-time analytics and queries.', 'Those priorities lead to different architectural decisions that are not reproducible in a general-purpose database, even if it has vector index support.\n\n\n\n\n\n###### Having a dedicated vector database requires duplication of data.\n\n\n\nBy their very nature, vector embeddings are derivatives of the primary source data.', ""And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query"", '4. Support for real-time analytics and queries.\n\n5. Ability to handle vectors derived from complex data types such as images, videos, and natural language text.\n\n6. Improved performance and reduced latency in machine learning and AI applications.\n\n7. Reduced development and deployment time and cost compared to building a custom solution.\n\n\n\nKeep in mind that the specific benefits of using a vector database may vary depending on the']","Question: What is the primary purpose of a Vector Database and why would someone choose to use it over traditional databases?\n\nContext: aliases: [ /blog/what-is-a-vector-database/ ]

---



> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.





## Why use a Vector Database?



The data flood is real.
advantage of their efficient indexing and searching techniques, vector databases enable faster 

and more accurate retrieval of unstructured data already represented as vectors, which can 

help put in front of users the most relevant results to their queries.



In addition, other benefits of using vector databases include:

1. Efficient storage and indexing of high-dimensional data.

3. Ability to handle large-scale datasets with billions of data points.

4. Support for real-time analytics and queries.
Those priorities lead to different architectural decisions that are not reproducible in a general-purpose database, even if it has vector index support.





###### Having a dedicated vector database requires duplication of data.



By their very nature, vector embeddings are derivatives of the primary source data.
And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query
4. Support for real-time analytics and queries.

5. Ability to handle vectors derived from complex data types such as images, videos, and natural language text.

6. Improved performance and reduced latency in machine learning and AI applications.

7. Reduced development and deployment time and cost compared to building a custom solution.



Keep in mind that the specific benefits of using a vector database may vary depending on the\n\nAnswer:",What is the primary purpose of a Vector Database and why would someone choose to use it over traditional databases?,"A Vector Database is a specialized database system that is specifically designed for efficiently indexing, querying, and retrieving high-dimensional vector data. The primary purpose of a Vector Database is to enable advanced data analysis and similarity-search operations that go beyond the capabilities of traditional, structured query approaches used in conventional databases.","['aliases: [ /blog/what-is-a-vector-database/ ]\n\n---\n\n\n\n> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.\n\n\n\n\n\n## Why use a Vector Database?\n\n\n\nThe data flood is real.', 'advantage of their efficient indexing and searching techniques, vector databases enable faster \n\nand more accurate retrieval of unstructured data already represented as vectors, which can \n\nhelp put in front of users the most relevant results to their queries.\n\n\n\nIn addition, other benefits of using vector databases include:\n\n1. Efficient storage and indexing of high-dimensional data.\n\n3. Ability to handle large-scale datasets with billions of data points.\n\n4. Support for real-time analytics and queries.', 'Those priorities lead to different architectural decisions that are not reproducible in a general-purpose database, even if it has vector index support.\n\n\n\n\n\n###### Having a dedicated vector database requires duplication of data.\n\n\n\nBy their very nature, vector embeddings are derivatives of the primary source data.', ""And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query"", '4. Support for real-time analytics and queries.\n\n5. Ability to handle vectors derived from complex data types such as images, videos, and natural language text.\n\n6. Improved performance and reduced latency in machine learning and AI applications.\n\n7. Reduced development and deployment time and cost compared to building a custom solution.\n\n\n\nKeep in mind that the specific benefits of using a vector database may vary depending on the']","aliases: [ /blog/what-is-a-vector-database/ ]

---



> A Vector Database is a specialized database system designed for efficiently indexing, querying, and retrieving high-dimensional vector data. Those systems enable advanced data analysis and similarity-search operations that extend well beyond the traditional, structured query approach of conventional databases.





## Why use a Vector Database?



The data flood is real.
advantage of their efficient indexing and searching techniques, vector databases enable faster 

and more accurate retrieval of unstructured data already represented as vectors, which can 

help put in front of users the most relevant results to their queries.



In addition, other benefits of using vector databases include:

1. Efficient storage and indexing of high-dimensional data.

3. Ability to handle large-scale datasets with billions of data points.

4. Support for real-time analytics and queries.
Those priorities lead to different architectural decisions that are not reproducible in a general-purpose database, even if it has vector index support.





###### Having a dedicated vector database requires duplication of data.



By their very nature, vector embeddings are derivatives of the primary source data.
And if we look at this system on the bottom, you see the typical data ingestion. So the user gives a document, we slice it to small chunks, and we compute a numerical representation with vector embeddings and store those in a vector database. Why a vector database? Because it's really efficient to retrieve vectors from it when we get users query
4. Support for real-time analytics and queries.

5. Ability to handle vectors derived from complex data types such as images, videos, and natural language text.

6. Improved performance and reduced latency in machine learning and AI applications.

7. Reduced development and deployment time and cost compared to building a custom solution.



Keep in mind that the specific benefits of using a vector database may vary depending on the",0.2846153846153846,0.7708333333333334,0.41573033707865165,0.1937984496124031,0.5319148936170213,0.2840909090909091,0.2076923076923077,0.5625,0.3033707865168539,0.27692307692307694,0.75,0.40449438202247195,0.9028530716896057,0.6377770304679871,0.744362473487854,0.6869600415229797,0.715106581152213,0.9986725039198063,131,2.5686274509803924,0.3459712703570584
True,,5266.129,43e60fc0,"How does oversampling impact the performance of machine learning models, especially in the context of imbalanced datasets?","Oversampling is a technique used in machine learning to address imbalances in datasets, where one class significantly outnumbers others. This imbalance can lead to skewed model performance, as the model may favor the majority class at the expense of minority classes. By generating additional samples from the minority classes, oversampling helps to equalize the representation of different classes in the training dataset.","Influence of Search Limit:

The search limit parameter plays a crucial role in the performance of machine learning models, especially in the context of oversampling and imbalanced datasets. 

1. **Impact on Model Training Time:** The search limit determines the number of iterations or steps the model takes during the training process. A higher search limit can lead to longer training times, especially when dealing with large datasets or complex models. On the other hand, a lower search limit may limit the model's ability to converge to an optimal solution.

2. **Effect on Model Generalization:** The search limit can also influence the generalization ability of the model. A higher search limit may allow the model to learn more complex patterns in the data, potentially leading to overfitting. Conversely, a lower search limit may result in underfitting, where the model fails to capture important patterns in the data.

3. **Optimal Search Limit Selection:** It is essential to carefully select the search limit based on the specific characteristics of the dataset and the complexity of the model. Cross-validation techniques can be used to determine the optimal search limit that maximizes the model's performance on unseen data.

4. **Balancing Search Limit with Computational Resources:** While a higher search limit may improve the model's performance, it is important to balance this with computational resources and time constraints. In some cases, a moderate search limit may achieve a good balance between model performance and training efficiency.

In summary, the search limit parameter plays a significant role in determining the performance and generalization ability of machine learning models. It is essential to carefully tune this parameter based on the specific requirements of the task at hand to achieve the best possible results.","acc = average_accuracy.pivot(

        index=""limit"", columns=[""oversampling"", ""rescore""], values=""accuracy""

    )

    print(acc)

```



#### Impact of Oversampling



You can use oversampling in machine learning to counteract imbalances in datasets.

It works well when one class significantly outnumbers others. This imbalance

can skew the performance of models, which favors the majority class at the

expense of others. By creating additional samples from the minority classes,
Without an explicit code snippet or output, we focus on the role of oversampling in model fairness and performance. Through graphical representation, you can set up before-and-after comparisons. These comparisons illustrate the contribution to machine learning projects.



![Measuring the impact of oversampling](/blog/openai/Oversampling_Impact.png)



### Leveraging Binary Quantization: Best Practices
The screenshot showcases the effect of oversampling on model performance metrics. While the actual metrics aren't shown, we expect to see improvements in measures such as precision, recall, or F1-score. These improvements illustrate the effectiveness of oversampling in creating a more balanced dataset. It allows the model to learn a better representation of all classes, not just the dominant one.
oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.
In contrast, for lower dimension models (such as text-embedding-3-small with 512 dimensions), the incremental accuracy gains from increased oversampling levels are less significant, even with rescoring enabled. This suggests a diminishing return on accuracy improvement with higher oversampling in lower dimension spaces.



3. **Influence of Search Limit**:","['acc = average_accuracy.pivot(\n\n        index=""limit"", columns=[""oversampling"", ""rescore""], values=""accuracy""\n\n    )\n\n    print(acc)\n\n```\n\n\n\n#### Impact of Oversampling\n\n\n\nYou can use oversampling in machine learning to counteract imbalances in datasets.\n\nIt works well when one class significantly outnumbers others. This imbalance\n\ncan skew the performance of models, which favors the majority class at the\n\nexpense of others. By creating additional samples from the minority classes,', 'Without an explicit code snippet or output, we focus on the role of oversampling in model fairness and performance. Through graphical representation, you can set up before-and-after comparisons. These comparisons illustrate the contribution to machine learning projects.\n\n\n\n![Measuring the impact of oversampling](/blog/openai/Oversampling_Impact.png)\n\n\n\n### Leveraging Binary Quantization: Best Practices', ""The screenshot showcases the effect of oversampling on model performance metrics. While the actual metrics aren't shown, we expect to see improvements in measures such as precision, recall, or F1-score. These improvements illustrate the effectiveness of oversampling in creating a more balanced dataset. It allows the model to learn a better representation of all classes, not just the dominant one."", 'oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.', 'In contrast, for lower dimension models (such as text-embedding-3-small with 512 dimensions), the incremental accuracy gains from increased oversampling levels are less significant, even with rescoring enabled. This suggests a diminishing return on accuracy improvement with higher oversampling in lower dimension spaces.\n\n\n\n3. **Influence of Search Limit**:']","Question: How does oversampling impact the performance of machine learning models, especially in the context of imbalanced datasets?\n\nContext: acc = average_accuracy.pivot(

index=""limit"", columns=[""oversampling"", ""rescore""], values=""accuracy""

)

print(acc)

```



#### Impact of Oversampling



You can use oversampling in machine learning to counteract imbalances in datasets.

It works well when one class significantly outnumbers others. This imbalance

can skew the performance of models, which favors the majority class at the

expense of others. By creating additional samples from the minority classes,
Without an explicit code snippet or output, we focus on the role of oversampling in model fairness and performance. Through graphical representation, you can set up before-and-after comparisons. These comparisons illustrate the contribution to machine learning projects.



![Measuring the impact of oversampling](/blog/openai/Oversampling_Impact.png)



### Leveraging Binary Quantization: Best Practices
The screenshot showcases the effect of oversampling on model performance metrics. While the actual metrics aren't shown, we expect to see improvements in measures such as precision, recall, or F1-score. These improvements illustrate the effectiveness of oversampling in creating a more balanced dataset. It allows the model to learn a better representation of all classes, not just the dominant one.
oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.
In contrast, for lower dimension models (such as text-embedding-3-small with 512 dimensions), the incremental accuracy gains from increased oversampling levels are less significant, even with rescoring enabled. This suggests a diminishing return on accuracy improvement with higher oversampling in lower dimension spaces.



3. **Influence of Search Limit**:\n\nAnswer:","How does oversampling impact the performance of machine learning models, especially in the context of imbalanced datasets?","Oversampling is a technique used in machine learning to address imbalances in datasets, where one class significantly outnumbers others. This imbalance can lead to skewed model performance, as the model may favor the majority class at the expense of minority classes. By generating additional samples from the minority classes, oversampling helps to equalize the representation of different classes in the training dataset.","['acc = average_accuracy.pivot(\n\n        index=""limit"", columns=[""oversampling"", ""rescore""], values=""accuracy""\n\n    )\n\n    print(acc)\n\n```\n\n\n\n#### Impact of Oversampling\n\n\n\nYou can use oversampling in machine learning to counteract imbalances in datasets.\n\nIt works well when one class significantly outnumbers others. This imbalance\n\ncan skew the performance of models, which favors the majority class at the\n\nexpense of others. By creating additional samples from the minority classes,', 'Without an explicit code snippet or output, we focus on the role of oversampling in model fairness and performance. Through graphical representation, you can set up before-and-after comparisons. These comparisons illustrate the contribution to machine learning projects.\n\n\n\n![Measuring the impact of oversampling](/blog/openai/Oversampling_Impact.png)\n\n\n\n### Leveraging Binary Quantization: Best Practices', ""The screenshot showcases the effect of oversampling on model performance metrics. While the actual metrics aren't shown, we expect to see improvements in measures such as precision, recall, or F1-score. These improvements illustrate the effectiveness of oversampling in creating a more balanced dataset. It allows the model to learn a better representation of all classes, not just the dominant one."", 'oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.', 'In contrast, for lower dimension models (such as text-embedding-3-small with 512 dimensions), the incremental accuracy gains from increased oversampling levels are less significant, even with rescoring enabled. This suggests a diminishing return on accuracy improvement with higher oversampling in lower dimension spaces.\n\n\n\n3. **Influence of Search Limit**:']","acc = average_accuracy.pivot(

        index=""limit"", columns=[""oversampling"", ""rescore""], values=""accuracy""

    )

    print(acc)

```



#### Impact of Oversampling



You can use oversampling in machine learning to counteract imbalances in datasets.

It works well when one class significantly outnumbers others. This imbalance

can skew the performance of models, which favors the majority class at the

expense of others. By creating additional samples from the minority classes,
Without an explicit code snippet or output, we focus on the role of oversampling in model fairness and performance. Through graphical representation, you can set up before-and-after comparisons. These comparisons illustrate the contribution to machine learning projects.



![Measuring the impact of oversampling](/blog/openai/Oversampling_Impact.png)



### Leveraging Binary Quantization: Best Practices
The screenshot showcases the effect of oversampling on model performance metrics. While the actual metrics aren't shown, we expect to see improvements in measures such as precision, recall, or F1-score. These improvements illustrate the effectiveness of oversampling in creating a more balanced dataset. It allows the model to learn a better representation of all classes, not just the dominant one.
oversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.
In contrast, for lower dimension models (such as text-embedding-3-small with 512 dimensions), the incremental accuracy gains from increased oversampling levels are less significant, even with rescoring enabled. This suggests a diminishing return on accuracy improvement with higher oversampling in lower dimension spaces.



3. **Influence of Search Limit**:",0.112,0.509090909090909,0.1836065573770492,0.01606425702811245,0.07407407407407407,0.026402640264026396,0.064,0.2909090909090909,0.10491803278688525,0.092,0.41818181818181815,0.15081967213114753,0.44894978404045105,0.5115326046943665,0.5743577480316162,0.5411278009414673,0.578792719718288,0.9997178743700109,288,4.645161290322581,0.6438293083642593
True,,1544.632,d99d50c3,How does binary quantization work in the context of vector comparisons?,"Binary quantization is a method used in indexing and data compression, particularly by Qdrant, that involves splitting a data point's vector in half at a certain point. This process essentially divides the vector into two parts, marking everything above the split point as ""1"" and everything below as ""0"". The result is a string of bits that represents the original vector in a compressed form. This quantized code is much smaller and easier to compare. Especially for OpenAI embeddings, this type of quantization has proven to achieve a massive performance improvement at a lower cost of accuracy.","Yes, it is possible to remove the original vectors and only keep the quantized versions in order to save disk space. Since binary quantization reduces the storage size significantly by converting the float point elements of the vectors into binary representation, storing only the quantized versions can lead to substantial savings in disk space. This approach is feasible as long as the applications or systems utilizing these quantized vectors do not require access to the original vector data.","This is the fastest quantization method, since it lets you perform a vector comparison with a few CPU instructions.



Binary quantization can achieve up to a **40x** speedup compared to the original vectors.



However, binary quantization is only efficient for high-dimensional vectors and require a centered distribution of vector components. 



At the moment, binary quantization shows good accuracy results with the following models:
Right, so binary quantization is actually very simple. The main idea that we convert the float point elements of the vector into binary representation. So it's either zero or one, depending if the original element is positive or negative. And by doing this we can approximate dot production or cosine similarity, whatever metric you use to compare vectors with just hemming distance, and hemming distance is turned to be very simple to compute. It uses only two most optimized CPU instructions ever
> -- Andrey Vasnetsov



Ever wonder why we need quantization for vector indexes? Andrey Vasnetsov explains the complexities and challenges of searching through proximity graphs. Binary quantization reduces storage size and boosts speed by 30x, but not all models are compatible.
Think of each data point as a ruler. Binary quantization splits this ruler in half at a certain point, marking everything above as ""1"" and everything below as ""0"". This [binarization](https://deepai.org/machine-learning-glossary-and-terms/binarization) process results in a string of bits, representing the original vector.







![](/articles_data/what-is-a-vector-database/Binary-Quant.png)
Demetrios:

Yeah, there's some low hanging fruits still on the binary quantization field, so tackle those first and then move your way over to four bit and all that fun stuff. Last question that I've got for you is can we remove original vectors and only keep quantized ones in order to save disk space?



Andrey Vasnetsov:","['This is the fastest quantization method, since it lets you perform a vector comparison with a few CPU instructions.\n\n\n\nBinary quantization can achieve up to a **40x** speedup compared to the original vectors.\n\n\n\nHowever, binary quantization is only efficient for high-dimensional vectors and require a centered distribution of vector components. \n\n\n\nAt the moment, binary quantization shows good accuracy results with the following models:', ""Right, so binary quantization is actually very simple. The main idea that we convert the float point elements of the vector into binary representation. So it's either zero or one, depending if the original element is positive or negative. And by doing this we can approximate dot production or cosine similarity, whatever metric you use to compare vectors with just hemming distance, and hemming distance is turned to be very simple to compute. It uses only two most optimized CPU instructions ever"", '> -- Andrey Vasnetsov\n\n\n\nEver wonder why we need quantization for vector indexes? Andrey Vasnetsov explains the complexities and challenges of searching through proximity graphs. Binary quantization reduces storage size and boosts speed by 30x, but not all models are compatible.', 'Think of each data point as a ruler. Binary quantization splits this ruler in half at a certain point, marking everything above as ""1"" and everything below as ""0"". This [binarization](https://deepai.org/machine-learning-glossary-and-terms/binarization) process results in a string of bits, representing the original vector.\n\n\n\n\n\n\n\n![](/articles_data/what-is-a-vector-database/Binary-Quant.png)', ""Demetrios:\n\nYeah, there's some low hanging fruits still on the binary quantization field, so tackle those first and then move your way over to four bit and all that fun stuff. Last question that I've got for you is can we remove original vectors and only keep quantized ones in order to save disk space?\n\n\n\nAndrey Vasnetsov:""]","Question: How does binary quantization work in the context of vector comparisons?\n\nContext: This is the fastest quantization method, since it lets you perform a vector comparison with a few CPU instructions.



Binary quantization can achieve up to a **40x** speedup compared to the original vectors.



However, binary quantization is only efficient for high-dimensional vectors and require a centered distribution of vector components. 



At the moment, binary quantization shows good accuracy results with the following models:
Right, so binary quantization is actually very simple. The main idea that we convert the float point elements of the vector into binary representation. So it's either zero or one, depending if the original element is positive or negative. And by doing this we can approximate dot production or cosine similarity, whatever metric you use to compare vectors with just hemming distance, and hemming distance is turned to be very simple to compute. It uses only two most optimized CPU instructions ever
> -- Andrey Vasnetsov



Ever wonder why we need quantization for vector indexes? Andrey Vasnetsov explains the complexities and challenges of searching through proximity graphs. Binary quantization reduces storage size and boosts speed by 30x, but not all models are compatible.
Think of each data point as a ruler. Binary quantization splits this ruler in half at a certain point, marking everything above as ""1"" and everything below as ""0"". This [binarization](https://deepai.org/machine-learning-glossary-and-terms/binarization) process results in a string of bits, representing the original vector.







![](/articles_data/what-is-a-vector-database/Binary-Quant.png)
Demetrios:

Yeah, there's some low hanging fruits still on the binary quantization field, so tackle those first and then move your way over to four bit and all that fun stuff. Last question that I've got for you is can we remove original vectors and only keep quantized ones in order to save disk space?



Andrey Vasnetsov:\n\nAnswer:",How does binary quantization work in the context of vector comparisons?,"Binary quantization is a method used in indexing and data compression, particularly by Qdrant, that involves splitting a data point's vector in half at a certain point. This process essentially divides the vector into two parts, marking everything above the split point as ""1"" and everything below as ""0"". The result is a string of bits that represents the original vector in a compressed form. This quantized code is much smaller and easier to compare. Especially for OpenAI embeddings, this type of quantization has proven to achieve a massive performance improvement at a lower cost of accuracy.","['This is the fastest quantization method, since it lets you perform a vector comparison with a few CPU instructions.\n\n\n\nBinary quantization can achieve up to a **40x** speedup compared to the original vectors.\n\n\n\nHowever, binary quantization is only efficient for high-dimensional vectors and require a centered distribution of vector components. \n\n\n\nAt the moment, binary quantization shows good accuracy results with the following models:', ""Right, so binary quantization is actually very simple. The main idea that we convert the float point elements of the vector into binary representation. So it's either zero or one, depending if the original element is positive or negative. And by doing this we can approximate dot production or cosine similarity, whatever metric you use to compare vectors with just hemming distance, and hemming distance is turned to be very simple to compute. It uses only two most optimized CPU instructions ever"", '> -- Andrey Vasnetsov\n\n\n\nEver wonder why we need quantization for vector indexes? Andrey Vasnetsov explains the complexities and challenges of searching through proximity graphs. Binary quantization reduces storage size and boosts speed by 30x, but not all models are compatible.', 'Think of each data point as a ruler. Binary quantization splits this ruler in half at a certain point, marking everything above as ""1"" and everything below as ""0"". This [binarization](https://deepai.org/machine-learning-glossary-and-terms/binarization) process results in a string of bits, representing the original vector.\n\n\n\n\n\n\n\n![](/articles_data/what-is-a-vector-database/Binary-Quant.png)', ""Demetrios:\n\nYeah, there's some low hanging fruits still on the binary quantization field, so tackle those first and then move your way over to four bit and all that fun stuff. Last question that I've got for you is can we remove original vectors and only keep quantized ones in order to save disk space?\n\n\n\nAndrey Vasnetsov:""]","This is the fastest quantization method, since it lets you perform a vector comparison with a few CPU instructions.



Binary quantization can achieve up to a **40x** speedup compared to the original vectors.



However, binary quantization is only efficient for high-dimensional vectors and require a centered distribution of vector components. 



At the moment, binary quantization shows good accuracy results with the following models:
Right, so binary quantization is actually very simple. The main idea that we convert the float point elements of the vector into binary representation. So it's either zero or one, depending if the original element is positive or negative. And by doing this we can approximate dot production or cosine similarity, whatever metric you use to compare vectors with just hemming distance, and hemming distance is turned to be very simple to compute. It uses only two most optimized CPU instructions ever
> -- Andrey Vasnetsov



Ever wonder why we need quantization for vector indexes? Andrey Vasnetsov explains the complexities and challenges of searching through proximity graphs. Binary quantization reduces storage size and boosts speed by 30x, but not all models are compatible.
Think of each data point as a ruler. Binary quantization splits this ruler in half at a certain point, marking everything above as ""1"" and everything below as ""0"". This [binarization](https://deepai.org/machine-learning-glossary-and-terms/binarization) process results in a string of bits, representing the original vector.







![](/articles_data/what-is-a-vector-database/Binary-Quant.png)
Demetrios:

Yeah, there's some low hanging fruits still on the binary quantization field, so tackle those first and then move your way over to four bit and all that fun stuff. Last question that I've got for you is can we remove original vectors and only keep quantized ones in order to save disk space?



Andrey Vasnetsov:",0.32857142857142857,0.26436781609195403,0.29299363057324845,0.043478260869565216,0.03488372093023256,0.038709677419354833,0.15714285714285714,0.12643678160919541,0.14012738853503184,0.32857142857142857,0.26436781609195403,0.29299363057324845,0.5864747762680054,0.5893694162368774,0.5926632285118103,0.5910117626190186,0.9881716407835484,0.9514097236096859,78,0.7959183673469388,0.3758457732767046
True,,1596.8,549b6fb3,What is the significance of the 'always_ram' parameter in the context of vector quantization in Qdrant?,"In the context of vector quantization in Qdrant, the 'always_ram' parameter determines whether quantized vectors should be kept always cached in RAM or not. By default, quantized vectors are loaded in the same manner as the original vectors. Setting 'always_ram' to true ensures that the quantized vectors are consistently cached in RAM, providing faster access times.","The 'always_ram' parameter in the context of vector quantization in Qdrant determines whether quantized vectors should always be cached in RAM or not. When set to 'true', quantized vectors are always kept in RAM, while setting it to 'false' means that quantized vectors are loaded in the same way as the original vectors. This parameter can affect the resulting precision but does not directly impact the memory footprint. It can be useful for tuning the search quality based on the specific requirements and performance characteristics of the application using Qdrant.","This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": false

        }

    }

}

```



```python

from qdrant_client import QdrantClient, models
Using quantiles lower than `1.0` might be useful if there are outliers in your vector components.

This parameter only affects the resulting precision and not the memory footprint.

It might be worth tuning this parameter if you experience a significant decrease in search quality.



`always_ram` - whether to keep quantized vectors always cached in RAM or not. By default, quantized vectors are loaded in the same way as the original vectors.
""size"": 1536,

      ""distance"": ""Cosine""

    },

    ""quantization_config"": {

        ""binary"": {

            ""always_ram"": true

        }

    }

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),
..Default::default()

        }),

        quantization_config: Some(QuantizationConfig {

            quantization: Some(Quantization::Scalar(ScalarQuantization {

                r#type: QuantizationType::Int8.into(),

                always_ram: Some(true),

                ..Default::default()

            })),

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
..Default::default()

        }),

        quantization_config: Some(QuantizationConfig {

            quantization: Some(Quantization::Scalar(ScalarQuantization {

                r#type: QuantizationType::Int8.into(),

                always_ram: Some(true),

                ..Default::default()

            })),

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;","['This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": false\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models', 'Using quantiles lower than `1.0` might be useful if there are outliers in your vector components.\n\nThis parameter only affects the resulting precision and not the memory footprint.\n\nIt might be worth tuning this parameter if you experience a significant decrease in search quality.\n\n\n\n`always_ram` - whether to keep quantized vectors always cached in RAM or not. By default, quantized vectors are loaded in the same way as the original vectors.', '""size"": 1536,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""quantization_config"": {\n\n        ""binary"": {\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),', '..Default::default()\n\n        }),\n\n        quantization_config: Some(QuantizationConfig {\n\n            quantization: Some(Quantization::Scalar(ScalarQuantization {\n\n                r#type: QuantizationType::Int8.into(),\n\n                always_ram: Some(true),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;', '..Default::default()\n\n        }),\n\n        quantization_config: Some(QuantizationConfig {\n\n            quantization: Some(Quantization::Scalar(ScalarQuantization {\n\n                r#type: QuantizationType::Int8.into(),\n\n                always_ram: Some(true),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;']","Question: What is the significance of the 'always_ram' parameter in the context of vector quantization in Qdrant?\n\nContext: This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,

""distance"": ""Cosine""

},

""optimizers_config"": {

""memmap_threshold"": 20000

},

""quantization_config"": {

""scalar"": {

""type"": ""int8"",

""always_ram"": false

}

}

}

```



```python

from qdrant_client import QdrantClient, models
Using quantiles lower than `1.0` might be useful if there are outliers in your vector components.

This parameter only affects the resulting precision and not the memory footprint.

It might be worth tuning this parameter if you experience a significant decrease in search quality.



`always_ram` - whether to keep quantized vectors always cached in RAM or not. By default, quantized vectors are loaded in the same way as the original vectors.
""size"": 1536,

""distance"": ""Cosine""

},

""quantization_config"": {

""binary"": {

""always_ram"": true

}

}

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

collection_name=""{collection_name}"",

vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),
..Default::default()

}),

quantization_config: Some(QuantizationConfig {

quantization: Some(Quantization::Scalar(ScalarQuantization {

r#type: QuantizationType::Int8.into(),

always_ram: Some(true),

..Default::default()

})),

}),

..Default::default()

})

.await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
..Default::default()

}),

quantization_config: Some(QuantizationConfig {

quantization: Some(Quantization::Scalar(ScalarQuantization {

r#type: QuantizationType::Int8.into(),

always_ram: Some(true),

..Default::default()

})),

}),

..Default::default()

})

.await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;\n\nAnswer:",What is the significance of the 'always_ram' parameter in the context of vector quantization in Qdrant?,"In the context of vector quantization in Qdrant, the 'always_ram' parameter determines whether quantized vectors should be kept always cached in RAM or not. By default, quantized vectors are loaded in the same manner as the original vectors. Setting 'always_ram' to true ensures that the quantized vectors are consistently cached in RAM, providing faster access times.","['This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": false\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models', 'Using quantiles lower than `1.0` might be useful if there are outliers in your vector components.\n\nThis parameter only affects the resulting precision and not the memory footprint.\n\nIt might be worth tuning this parameter if you experience a significant decrease in search quality.\n\n\n\n`always_ram` - whether to keep quantized vectors always cached in RAM or not. By default, quantized vectors are loaded in the same way as the original vectors.', '""size"": 1536,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""quantization_config"": {\n\n        ""binary"": {\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),', '..Default::default()\n\n        }),\n\n        quantization_config: Some(QuantizationConfig {\n\n            quantization: Some(Quantization::Scalar(ScalarQuantization {\n\n                r#type: QuantizationType::Int8.into(),\n\n                always_ram: Some(true),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;', '..Default::default()\n\n        }),\n\n        quantization_config: Some(QuantizationConfig {\n\n            quantization: Some(Quantization::Scalar(ScalarQuantization {\n\n                r#type: QuantizationType::Int8.into(),\n\n                always_ram: Some(true),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;']","This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": false

        }

    }

}

```



```python

from qdrant_client import QdrantClient, models
Using quantiles lower than `1.0` might be useful if there are outliers in your vector components.

This parameter only affects the resulting precision and not the memory footprint.

It might be worth tuning this parameter if you experience a significant decrease in search quality.



`always_ram` - whether to keep quantized vectors always cached in RAM or not. By default, quantized vectors are loaded in the same way as the original vectors.
""size"": 1536,

      ""distance"": ""Cosine""

    },

    ""quantization_config"": {

        ""binary"": {

            ""always_ram"": true

        }

    }

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=1536, distance=models.Distance.COSINE),
..Default::default()

        }),

        quantization_config: Some(QuantizationConfig {

            quantization: Some(Quantization::Scalar(ScalarQuantization {

                r#type: QuantizationType::Int8.into(),

                always_ram: Some(true),

                ..Default::default()

            })),

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
..Default::default()

        }),

        quantization_config: Some(QuantizationConfig {

            quantization: Some(Quantization::Scalar(ScalarQuantization {

                r#type: QuantizationType::Int8.into(),

                always_ram: Some(true),

                ..Default::default()

            })),

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;",0.5121951219512195,0.7924528301886793,0.6222222222222222,0.345679012345679,0.5384615384615384,0.42105263157894735,0.35365853658536583,0.5471698113207547,0.4296296296296296,0.4634146341463415,0.7169811320754716,0.562962962962963,0.9582358598709106,0.6890323162078857,0.772132158279419,0.728219211101532,0.9475432629405987,0.775748840183951,90,1.6071428571428572,0.6876216685804435
True,,4971.229,9b62e8e0,How can automatic backups be set up for clusters using the Cloud UI?,"Automatic backups for clusters can be set up using the Cloud UI by following the procedures listed on the page. These procedures allow you to configure snapshots on a daily, weekly, or monthly basis. You have the flexibility to keep as many snapshots as needed and can restore a cluster from the snapshot of your choice. It is important to note that during the restoration of a snapshot, the affected cluster will not be available.","To set up automatic backups for clusters using the Cloud UI, follow these steps:

1. Sign in to the Qdrant Cloud Dashboard at https://cloud.qdrant.io.
2. Select the ""Clusters"" option.
3. Choose the specific cluster that you want to back up.
4. Navigate to the ""Backups"" tab.
5. Here, you can set up a backup schedule with options for daily, weekly, or monthly backups.
6. Define the number of days to retain backup snapshots using the ""Days of Retention"" setting.
7. You can also choose to initiate an immediate snapshot by selecting the ""Backup now"" option.

Additionally, if you need to recover from a snapshot, ensure the following:

- Utilize performant persistent storage for your data.
- Configure the security settings for your deployment as needed.
- Set up and configure Qdrant on multiple nodes for a highly available distributed deployment.
- Implement a load balancer for your Qdrant cluster.
- Create a backup and disaster recovery strategy for your data.

By following these steps, you can easily set up automatic backups for your Qdrant clusters using the Cloud UI and ensure the availability and integrity of your data.","- [Create a cluster](/documentation/cloud/create-cluster/)

- Set up [Authentication](/documentation/cloud/authentication/)

- Configure one or more [Collections](/documentation/concepts/collections/)



## Automatic backups



You can set up automatic backups of your clusters with our Cloud UI. With the

procedures listed in this page, you can set up

snapshots on a daily/weekly/monthly basis. You can keep as many snapshots as you

need. You can restore a cluster from the snapshot of your choice.
recommend replication. It guarantees the proper cluster functionality as long as

at least one replica is running.



For other use-cases such as disaster recovery, you can set up automatic or

self-service backups.



## Prerequisites



You can back up your Qdrant clusters though the Qdrant Cloud

Dashboard at https://cloud.qdrant.io. This section assumes that you've already

set up your cluster, as described in the following sections:



- [Create a cluster](/documentation/cloud/create-cluster/)
[Qdrant Cloud Dashboard](https://cloud.qdrant.io). To do so, take these steps:



1. Sign in to the dashboard

1. Select Clusters.

1. Select the cluster that you want to back up.

   ![Select a cluster](/documentation/cloud/select-cluster.png)

1. Find and select the **Backups** tab.

1. Now you can set up a backup schedule.

   The **Days of Retention** is the number of days after a backup snapshot is

   deleted.

1. Alternatively, you can select **Backup now** to take an immediate snapshot.
It's worth mentioning that Qdrant only provides the necessary building blocks to create an automated failure recovery.

Building a completely automatic process of collection scaling would require control over the cluster machines themself.

Check out our [cloud solution](https://qdrant.to/cloud), where we made exactly that.





**Recover from snapshot**



If there are no copies of data in the cluster, it is still possible to recover from a snapshot.
In addition, you have to make sure:



* To use a performant [persistent storage](#storage) for your data

* To configure the [security settings](/documentation/guides/security/) for your deployment

* To set up and configure Qdrant on multiple nodes for a highly available [distributed deployment](/documentation/guides/distributed_deployment/)

* To set up a load balancer for your Qdrant cluster

* To create a [backup and disaster recovery strategy](/documentation/concepts/snapshots/) for your data","['- [Create a cluster](/documentation/cloud/create-cluster/)\n\n- Set up [Authentication](/documentation/cloud/authentication/)\n\n- Configure one or more [Collections](/documentation/concepts/collections/)\n\n\n\n## Automatic backups\n\n\n\nYou can set up automatic backups of your clusters with our Cloud UI. With the\n\nprocedures listed in this page, you can set up\n\nsnapshots on a daily/weekly/monthly basis. You can keep as many snapshots as you\n\nneed. You can restore a cluster from the snapshot of your choice.', ""recommend replication. It guarantees the proper cluster functionality as long as\n\nat least one replica is running.\n\n\n\nFor other use-cases such as disaster recovery, you can set up automatic or\n\nself-service backups.\n\n\n\n## Prerequisites\n\n\n\nYou can back up your Qdrant clusters though the Qdrant Cloud\n\nDashboard at https://cloud.qdrant.io. This section assumes that you've already\n\nset up your cluster, as described in the following sections:\n\n\n\n- [Create a cluster](/documentation/cloud/create-cluster/)"", '[Qdrant Cloud Dashboard](https://cloud.qdrant.io). To do so, take these steps:\n\n\n\n1. Sign in to the dashboard\n\n1. Select Clusters.\n\n1. Select the cluster that you want to back up.\n\n   ![Select a cluster](/documentation/cloud/select-cluster.png)\n\n1. Find and select the **Backups** tab.\n\n1. Now you can set up a backup schedule.\n\n   The **Days of Retention** is the number of days after a backup snapshot is\n\n   deleted.\n\n1. Alternatively, you can select **Backup now** to take an immediate snapshot.', ""It's worth mentioning that Qdrant only provides the necessary building blocks to create an automated failure recovery.\n\nBuilding a completely automatic process of collection scaling would require control over the cluster machines themself.\n\nCheck out our [cloud solution](https://qdrant.to/cloud), where we made exactly that.\n\n\n\n\n\n**Recover from snapshot**\n\n\n\nIf there are no copies of data in the cluster, it is still possible to recover from a snapshot."", 'In addition, you have to make sure:\n\n\n\n* To use a performant [persistent storage](#storage) for your data\n\n* To configure the [security settings](/documentation/guides/security/) for your deployment\n\n* To set up and configure Qdrant on multiple nodes for a highly available [distributed deployment](/documentation/guides/distributed_deployment/)\n\n* To set up a load balancer for your Qdrant cluster\n\n* To create a [backup and disaster recovery strategy](/documentation/concepts/snapshots/) for your data']","Question: How can automatic backups be set up for clusters using the Cloud UI?\n\nContext: - [Create a cluster](/documentation/cloud/create-cluster/)

- Set up [Authentication](/documentation/cloud/authentication/)

- Configure one or more [Collections](/documentation/concepts/collections/)



## Automatic backups



You can set up automatic backups of your clusters with our Cloud UI. With the

procedures listed in this page, you can set up

snapshots on a daily/weekly/monthly basis. You can keep as many snapshots as you

need. You can restore a cluster from the snapshot of your choice.
recommend replication. It guarantees the proper cluster functionality as long as

at least one replica is running.



For other use-cases such as disaster recovery, you can set up automatic or

self-service backups.



## Prerequisites



You can back up your Qdrant clusters though the Qdrant Cloud

Dashboard at https://cloud.qdrant.io. This section assumes that you've already

set up your cluster, as described in the following sections:



- [Create a cluster](/documentation/cloud/create-cluster/)
[Qdrant Cloud Dashboard](https://cloud.qdrant.io). To do so, take these steps:



1. Sign in to the dashboard

1. Select Clusters.

1. Select the cluster that you want to back up.

![Select a cluster](/documentation/cloud/select-cluster.png)

1. Find and select the **Backups** tab.

1. Now you can set up a backup schedule.

The **Days of Retention** is the number of days after a backup snapshot is

deleted.

1. Alternatively, you can select **Backup now** to take an immediate snapshot.
It's worth mentioning that Qdrant only provides the necessary building blocks to create an automated failure recovery.

Building a completely automatic process of collection scaling would require control over the cluster machines themself.

Check out our [cloud solution](https://qdrant.to/cloud), where we made exactly that.





**Recover from snapshot**



If there are no copies of data in the cluster, it is still possible to recover from a snapshot.
In addition, you have to make sure:



* To use a performant [persistent storage](#storage) for your data

* To configure the [security settings](/documentation/guides/security/) for your deployment

* To set up and configure Qdrant on multiple nodes for a highly available [distributed deployment](/documentation/guides/distributed_deployment/)

* To set up a load balancer for your Qdrant cluster

* To create a [backup and disaster recovery strategy](/documentation/concepts/snapshots/) for your data\n\nAnswer:",How can automatic backups be set up for clusters using the Cloud UI?,"Automatic backups for clusters can be set up using the Cloud UI by following the procedures listed on the page. These procedures allow you to configure snapshots on a daily, weekly, or monthly basis. You have the flexibility to keep as many snapshots as needed and can restore a cluster from the snapshot of your choice. It is important to note that during the restoration of a snapshot, the affected cluster will not be available.","['- [Create a cluster](/documentation/cloud/create-cluster/)\n\n- Set up [Authentication](/documentation/cloud/authentication/)\n\n- Configure one or more [Collections](/documentation/concepts/collections/)\n\n\n\n## Automatic backups\n\n\n\nYou can set up automatic backups of your clusters with our Cloud UI. With the\n\nprocedures listed in this page, you can set up\n\nsnapshots on a daily/weekly/monthly basis. You can keep as many snapshots as you\n\nneed. You can restore a cluster from the snapshot of your choice.', ""recommend replication. It guarantees the proper cluster functionality as long as\n\nat least one replica is running.\n\n\n\nFor other use-cases such as disaster recovery, you can set up automatic or\n\nself-service backups.\n\n\n\n## Prerequisites\n\n\n\nYou can back up your Qdrant clusters though the Qdrant Cloud\n\nDashboard at https://cloud.qdrant.io. This section assumes that you've already\n\nset up your cluster, as described in the following sections:\n\n\n\n- [Create a cluster](/documentation/cloud/create-cluster/)"", '[Qdrant Cloud Dashboard](https://cloud.qdrant.io). To do so, take these steps:\n\n\n\n1. Sign in to the dashboard\n\n1. Select Clusters.\n\n1. Select the cluster that you want to back up.\n\n   ![Select a cluster](/documentation/cloud/select-cluster.png)\n\n1. Find and select the **Backups** tab.\n\n1. Now you can set up a backup schedule.\n\n   The **Days of Retention** is the number of days after a backup snapshot is\n\n   deleted.\n\n1. Alternatively, you can select **Backup now** to take an immediate snapshot.', ""It's worth mentioning that Qdrant only provides the necessary building blocks to create an automated failure recovery.\n\nBuilding a completely automatic process of collection scaling would require control over the cluster machines themself.\n\nCheck out our [cloud solution](https://qdrant.to/cloud), where we made exactly that.\n\n\n\n\n\n**Recover from snapshot**\n\n\n\nIf there are no copies of data in the cluster, it is still possible to recover from a snapshot."", 'In addition, you have to make sure:\n\n\n\n* To use a performant [persistent storage](#storage) for your data\n\n* To configure the [security settings](/documentation/guides/security/) for your deployment\n\n* To set up and configure Qdrant on multiple nodes for a highly available [distributed deployment](/documentation/guides/distributed_deployment/)\n\n* To set up a load balancer for your Qdrant cluster\n\n* To create a [backup and disaster recovery strategy](/documentation/concepts/snapshots/) for your data']","- [Create a cluster](/documentation/cloud/create-cluster/)

- Set up [Authentication](/documentation/cloud/authentication/)

- Configure one or more [Collections](/documentation/concepts/collections/)



## Automatic backups



You can set up automatic backups of your clusters with our Cloud UI. With the

procedures listed in this page, you can set up

snapshots on a daily/weekly/monthly basis. You can keep as many snapshots as you

need. You can restore a cluster from the snapshot of your choice.
recommend replication. It guarantees the proper cluster functionality as long as

at least one replica is running.



For other use-cases such as disaster recovery, you can set up automatic or

self-service backups.



## Prerequisites



You can back up your Qdrant clusters though the Qdrant Cloud

Dashboard at https://cloud.qdrant.io. This section assumes that you've already

set up your cluster, as described in the following sections:



- [Create a cluster](/documentation/cloud/create-cluster/)
[Qdrant Cloud Dashboard](https://cloud.qdrant.io). To do so, take these steps:



1. Sign in to the dashboard

1. Select Clusters.

1. Select the cluster that you want to back up.

   ![Select a cluster](/documentation/cloud/select-cluster.png)

1. Find and select the **Backups** tab.

1. Now you can set up a backup schedule.

   The **Days of Retention** is the number of days after a backup snapshot is

   deleted.

1. Alternatively, you can select **Backup now** to take an immediate snapshot.
It's worth mentioning that Qdrant only provides the necessary building blocks to create an automated failure recovery.

Building a completely automatic process of collection scaling would require control over the cluster machines themself.

Check out our [cloud solution](https://qdrant.to/cloud), where we made exactly that.





**Recover from snapshot**



If there are no copies of data in the cluster, it is still possible to recover from a snapshot.
In addition, you have to make sure:



* To use a performant [persistent storage](#storage) for your data

* To configure the [security settings](/documentation/guides/security/) for your deployment

* To set up and configure Qdrant on multiple nodes for a highly available [distributed deployment](/documentation/guides/distributed_deployment/)

* To set up a load balancer for your Qdrant cluster

* To create a [backup and disaster recovery strategy](/documentation/concepts/snapshots/) for your data",0.23214285714285715,0.6,0.3347639484978541,0.07784431137724551,0.203125,0.11255411255411256,0.1488095238095238,0.38461538461538464,0.21459227467811162,0.2261904761904762,0.5846153846153846,0.3261802575107296,0.7997562885284424,0.5653712749481201,0.6434196829795837,0.6018757820129395,0.6478446547228556,0.8140607496898156,184,2.453333333333333,0.49969875875526537
True,,3857.1040000000003,168ff484,What are snapshots in the context of Qdrant Cloud and how are they used in a distributed setup?,"Snapshots in Qdrant Cloud are `tar` archive files that contain data and configuration of a specific collection on a specific node at a specific time. In a distributed setup with multiple nodes in a cluster, snapshots must be created for each node separately when dealing with a single collection. These snapshots can be used to archive data or easily replicate an existing deployment.","In the context of Qdrant Cloud, snapshots are a way to archive data or easily replicate an existing deployment. They are not meant for disaster recovery; for that purpose, users are advised to use backups which are physical disk-level copies of the data.

In a distributed setup, snapshots can be used to create whole storage snapshots that can be downloaded from Qdrant Cloud. However, it's important to note that you cannot restore a Qdrant Cloud cluster from a whole storage snapshot directly using Qdrant Cloud; instead, the Qdrant CLI would be needed for that. For disaster recovery, it's recommended to use backups instead of snapshots.

To create a full storage snapshot, you can make a HTTP POST request to the `/snapshots` endpoint. Additionally, Qdrant provides a Python SDK that allows you to create a full snapshot using code, as shown in the example provided.

In a distributed setup with multiple nodes, you would need to create a snapshot on each node. This can be done by calling the endpoint on each node or creating a separate client instance for each node using the Python SDK. Qdrant provides the necessary building blocks for automated failure recovery, but complete automation of collection scaling would require control over the cluster machines themselves.

If there are no copies of data in the cluster, it is still possible to recover from a snapshot. This can be done through the Qdrant Cloud Dashboard by signing in, selecting the cluster, going to the Backups tab, and setting up a backup schedule or taking an immediate snapshot.","This feature can be used to archive data or easily replicate an existing deployment. For disaster recovery, Qdrant Cloud users may prefer to use [Backups](/documentation/cloud/backups/) instead, which are physical disk-level copies of your data.



For a step-by-step guide on how to use snapshots, see our [tutorial](/documentation/tutorials/create-snapshot/).



## Store snapshots
<aside role=""status"">Whole storage snapshots can be created and downloaded from Qdrant Cloud, but you cannot restore a Qdrant Cloud cluster from a whole storage snapshot since that requires use of the Qdrant CLI. You can use <a href=""/documentation/cloud/backups/"">Backups</a> instead.</aside>



### Create full storage snapshot



```http

POST /snapshots

```



```python

from qdrant_client import QdrantClient



client = QdrantClient(""localhost"", port=6333)



client.create_full_snapshot()

```
</details>



If you already have a collection, you can skip the previous step and start by [creating a snapshot](#create-and-download-snapshots).



## Create and download snapshots



Qdrant exposes an HTTP endpoint to request creating a snapshot, but we can also call it with the Python SDK.

Our setup consists of 3 nodes, so we need to call the endpoint **on each of them** and create a snapshot on each node. While using Python SDK, that means creating a separate client instance for each node.
It's worth mentioning that Qdrant only provides the necessary building blocks to create an automated failure recovery.

Building a completely automatic process of collection scaling would require control over the cluster machines themself.

Check out our [cloud solution](https://qdrant.to/cloud), where we made exactly that.





**Recover from snapshot**



If there are no copies of data in the cluster, it is still possible to recover from a snapshot.
[Qdrant Cloud Dashboard](https://cloud.qdrant.io). To do so, take these steps:



1. Sign in to the dashboard

1. Select Clusters.

1. Select the cluster that you want to back up.

   ![Select a cluster](/documentation/cloud/select-cluster.png)

1. Find and select the **Backups** tab.

1. Now you can set up a backup schedule.

   The **Days of Retention** is the number of days after a backup snapshot is

   deleted.

1. Alternatively, you can select **Backup now** to take an immediate snapshot.","['This feature can be used to archive data or easily replicate an existing deployment. For disaster recovery, Qdrant Cloud users may prefer to use [Backups](/documentation/cloud/backups/) instead, which are physical disk-level copies of your data.\n\n\n\nFor a step-by-step guide on how to use snapshots, see our [tutorial](/documentation/tutorials/create-snapshot/).\n\n\n\n## Store snapshots', '<aside role=""status"">Whole storage snapshots can be created and downloaded from Qdrant Cloud, but you cannot restore a Qdrant Cloud cluster from a whole storage snapshot since that requires use of the Qdrant CLI. You can use <a href=""/documentation/cloud/backups/"">Backups</a> instead.</aside>\n\n\n\n### Create full storage snapshot\n\n\n\n```http\n\nPOST /snapshots\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_full_snapshot()\n\n```', '</details>\n\n\n\nIf you already have a collection, you can skip the previous step and start by [creating a snapshot](#create-and-download-snapshots).\n\n\n\n## Create and download snapshots\n\n\n\nQdrant exposes an HTTP endpoint to request creating a snapshot, but we can also call it with the Python SDK.\n\nOur setup consists of 3 nodes, so we need to call the endpoint **on each of them** and create a snapshot on each node. While using Python SDK, that means creating a separate client instance for each node.', ""It's worth mentioning that Qdrant only provides the necessary building blocks to create an automated failure recovery.\n\nBuilding a completely automatic process of collection scaling would require control over the cluster machines themself.\n\nCheck out our [cloud solution](https://qdrant.to/cloud), where we made exactly that.\n\n\n\n\n\n**Recover from snapshot**\n\n\n\nIf there are no copies of data in the cluster, it is still possible to recover from a snapshot."", '[Qdrant Cloud Dashboard](https://cloud.qdrant.io). To do so, take these steps:\n\n\n\n1. Sign in to the dashboard\n\n1. Select Clusters.\n\n1. Select the cluster that you want to back up.\n\n   ![Select a cluster](/documentation/cloud/select-cluster.png)\n\n1. Find and select the **Backups** tab.\n\n1. Now you can set up a backup schedule.\n\n   The **Days of Retention** is the number of days after a backup snapshot is\n\n   deleted.\n\n1. Alternatively, you can select **Backup now** to take an immediate snapshot.']","Question: What are snapshots in the context of Qdrant Cloud and how are they used in a distributed setup?\n\nContext: This feature can be used to archive data or easily replicate an existing deployment. For disaster recovery, Qdrant Cloud users may prefer to use [Backups](/documentation/cloud/backups/) instead, which are physical disk-level copies of your data.



For a step-by-step guide on how to use snapshots, see our [tutorial](/documentation/tutorials/create-snapshot/).



## Store snapshots
<aside role=""status"">Whole storage snapshots can be created and downloaded from Qdrant Cloud, but you cannot restore a Qdrant Cloud cluster from a whole storage snapshot since that requires use of the Qdrant CLI. You can use <a href=""/documentation/cloud/backups/"">Backups</a> instead.</aside>



### Create full storage snapshot



```http

POST /snapshots

```



```python

from qdrant_client import QdrantClient



client = QdrantClient(""localhost"", port=6333)



client.create_full_snapshot()

```
</details>



If you already have a collection, you can skip the previous step and start by [creating a snapshot](#create-and-download-snapshots).



## Create and download snapshots



Qdrant exposes an HTTP endpoint to request creating a snapshot, but we can also call it with the Python SDK.

Our setup consists of 3 nodes, so we need to call the endpoint **on each of them** and create a snapshot on each node. While using Python SDK, that means creating a separate client instance for each node.
It's worth mentioning that Qdrant only provides the necessary building blocks to create an automated failure recovery.

Building a completely automatic process of collection scaling would require control over the cluster machines themself.

Check out our [cloud solution](https://qdrant.to/cloud), where we made exactly that.





**Recover from snapshot**



If there are no copies of data in the cluster, it is still possible to recover from a snapshot.
[Qdrant Cloud Dashboard](https://cloud.qdrant.io). To do so, take these steps:



1. Sign in to the dashboard

1. Select Clusters.

1. Select the cluster that you want to back up.

![Select a cluster](/documentation/cloud/select-cluster.png)

1. Find and select the **Backups** tab.

1. Now you can set up a backup schedule.

The **Days of Retention** is the number of days after a backup snapshot is

deleted.

1. Alternatively, you can select **Backup now** to take an immediate snapshot.\n\nAnswer:",What are snapshots in the context of Qdrant Cloud and how are they used in a distributed setup?,"Snapshots in Qdrant Cloud are `tar` archive files that contain data and configuration of a specific collection on a specific node at a specific time. In a distributed setup with multiple nodes in a cluster, snapshots must be created for each node separately when dealing with a single collection. These snapshots can be used to archive data or easily replicate an existing deployment.","['This feature can be used to archive data or easily replicate an existing deployment. For disaster recovery, Qdrant Cloud users may prefer to use [Backups](/documentation/cloud/backups/) instead, which are physical disk-level copies of your data.\n\n\n\nFor a step-by-step guide on how to use snapshots, see our [tutorial](/documentation/tutorials/create-snapshot/).\n\n\n\n## Store snapshots', '<aside role=""status"">Whole storage snapshots can be created and downloaded from Qdrant Cloud, but you cannot restore a Qdrant Cloud cluster from a whole storage snapshot since that requires use of the Qdrant CLI. You can use <a href=""/documentation/cloud/backups/"">Backups</a> instead.</aside>\n\n\n\n### Create full storage snapshot\n\n\n\n```http\n\nPOST /snapshots\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_full_snapshot()\n\n```', '</details>\n\n\n\nIf you already have a collection, you can skip the previous step and start by [creating a snapshot](#create-and-download-snapshots).\n\n\n\n## Create and download snapshots\n\n\n\nQdrant exposes an HTTP endpoint to request creating a snapshot, but we can also call it with the Python SDK.\n\nOur setup consists of 3 nodes, so we need to call the endpoint **on each of them** and create a snapshot on each node. While using Python SDK, that means creating a separate client instance for each node.', ""It's worth mentioning that Qdrant only provides the necessary building blocks to create an automated failure recovery.\n\nBuilding a completely automatic process of collection scaling would require control over the cluster machines themself.\n\nCheck out our [cloud solution](https://qdrant.to/cloud), where we made exactly that.\n\n\n\n\n\n**Recover from snapshot**\n\n\n\nIf there are no copies of data in the cluster, it is still possible to recover from a snapshot."", '[Qdrant Cloud Dashboard](https://cloud.qdrant.io). To do so, take these steps:\n\n\n\n1. Sign in to the dashboard\n\n1. Select Clusters.\n\n1. Select the cluster that you want to back up.\n\n   ![Select a cluster](/documentation/cloud/select-cluster.png)\n\n1. Find and select the **Backups** tab.\n\n1. Now you can set up a backup schedule.\n\n   The **Days of Retention** is the number of days after a backup snapshot is\n\n   deleted.\n\n1. Alternatively, you can select **Backup now** to take an immediate snapshot.']","This feature can be used to archive data or easily replicate an existing deployment. For disaster recovery, Qdrant Cloud users may prefer to use [Backups](/documentation/cloud/backups/) instead, which are physical disk-level copies of your data.



For a step-by-step guide on how to use snapshots, see our [tutorial](/documentation/tutorials/create-snapshot/).



## Store snapshots
<aside role=""status"">Whole storage snapshots can be created and downloaded from Qdrant Cloud, but you cannot restore a Qdrant Cloud cluster from a whole storage snapshot since that requires use of the Qdrant CLI. You can use <a href=""/documentation/cloud/backups/"">Backups</a> instead.</aside>



### Create full storage snapshot



```http

POST /snapshots

```



```python

from qdrant_client import QdrantClient



client = QdrantClient(""localhost"", port=6333)



client.create_full_snapshot()

```
</details>



If you already have a collection, you can skip the previous step and start by [creating a snapshot](#create-and-download-snapshots).



## Create and download snapshots



Qdrant exposes an HTTP endpoint to request creating a snapshot, but we can also call it with the Python SDK.

Our setup consists of 3 nodes, so we need to call the endpoint **on each of them** and create a snapshot on each node. While using Python SDK, that means creating a separate client instance for each node.
It's worth mentioning that Qdrant only provides the necessary building blocks to create an automated failure recovery.

Building a completely automatic process of collection scaling would require control over the cluster machines themself.

Check out our [cloud solution](https://qdrant.to/cloud), where we made exactly that.





**Recover from snapshot**



If there are no copies of data in the cluster, it is still possible to recover from a snapshot.
[Qdrant Cloud Dashboard](https://cloud.qdrant.io). To do so, take these steps:



1. Sign in to the dashboard

1. Select Clusters.

1. Select the cluster that you want to back up.

   ![Select a cluster](/documentation/cloud/select-cluster.png)

1. Find and select the **Backups** tab.

1. Now you can set up a backup schedule.

   The **Days of Retention** is the number of days after a backup snapshot is

   deleted.

1. Alternatively, you can select **Backup now** to take an immediate snapshot.",0.16666666666666666,0.6964285714285714,0.2689655172413793,0.08583690987124463,0.36363636363636365,0.1388888888888889,0.1111111111111111,0.4642857142857143,0.1793103448275862,0.1623931623931624,0.6785714285714286,0.2620689655172414,0.876802921295166,0.5714495182037354,0.6730455756187439,0.6181005835533142,0.7679341943003237,0.6084872856736183,262,4.158730158730159,0.27850628182347803
True,,1858.9340000000002,b7739ebb,What is the significance of the lowercase parameter in the context of text filters in Qdrant?,"The lowercase parameter in Qdrant is used to specify whether the index should be case-insensitive or not. When set to true, Qdrant will convert all the texts to lowercase before indexing them. This means that during searches, the case of the letters in the query will not affect the results.","In the context of text filters in Qdrant, the significance of the `lowercase` parameter is that if it is set to `true`, then the index will be case-insensitive. This means that Qdrant will convert all the texts to lowercase before performing any comparisons or filtering based on text data. This allows for case-insensitive search operations, making it easier to find matches regardless of the casing of the input text.","## Using text filters in practice



![](/blog/from_cms/1_pbtd2tzqtjqqlbi61r8czg.webp ""There are also some additional parameters you can provide, such as  min_token_len — minimal length of the token max_token_len — maximal length of the token lowercase — if set to true, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase Using text filters in practice"")
* **min_token_len** — minimal length of the token

* **max_token_len** — maximal length of the token

* **lowercase** — if set to *true*, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase



## Using text filters in practice
This feature is implemented as additional filters during the search and will enable you to incorporate custom logic on top of semantic similarity.



During the filtering, Qdrant will check the conditions over those values that match the type of the filtering condition. If the stored value type does not fit the filtering condition - it will be considered not satisfied.



For example, you will get an empty output if you apply the [range condition](../filtering/#range) on the string data.
using static Qdrant.Client.Grpc.Conditions;



var client = new QdrantClient(""localhost"", 6334);



// The ! operator negates the condition(must not)

await client.ScrollAsync(

	collectionName: ""{collection_name}"",

	filter: !(MatchKeyword(""city"", ""London"") & MatchKeyword(""color"", ""red""))

);

```



Filtered points would be:



```json

[

  { ""id"": 5, ""city"": ""Moscow"", ""color"": ""green"" },

  { ""id"": 6, ""city"": ""Moscow"", ""color"": ""blue"" }

]

```
filter: Some(Filter::should([

            Condition::matches(""city"", ""london"".to_string()),

            Condition::matches(""color"", ""red"".to_string()),

        ])),

        ..Default::default()

    })

    .await?;

```



```java

import static io.qdrant.client.ConditionFactory.matchKeyword;



import io.qdrant.client.grpc.Points.Filter;

import io.qdrant.client.grpc.Points.ScrollPoints;

import java.util.List;



client

    .scrollAsync(

        ScrollPoints.newBuilder()","['## Using text filters in practice\n\n\n\n![](/blog/from_cms/1_pbtd2tzqtjqqlbi61r8czg.webp ""There are also some additional parameters you can provide, such as  min_token_len — minimal length of the token max_token_len — maximal length of the token lowercase — if set to true, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase Using text filters in practice"")', '* **min_token_len**\xa0— minimal length of the token\n\n* **max_token_len**\xa0— maximal length of the token\n\n* **lowercase**\xa0— if set to\xa0*true*, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase\n\n\n\n## Using text filters in practice', 'This feature is implemented as additional filters during the search and will enable you to incorporate custom logic on top of semantic similarity.\n\n\n\nDuring the filtering, Qdrant will check the conditions over those values that match the type of the filtering condition. If the stored value type does not fit the filtering condition - it will be considered not satisfied.\n\n\n\nFor example, you will get an empty output if you apply the [range condition](../filtering/#range) on the string data.', 'using static Qdrant.Client.Grpc.Conditions;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\n// The ! operator negates the condition(must not)\n\nawait client.ScrollAsync(\n\n\tcollectionName: ""{collection_name}"",\n\n\tfilter: !(MatchKeyword(""city"", ""London"") & MatchKeyword(""color"", ""red""))\n\n);\n\n```\n\n\n\nFiltered points would be:\n\n\n\n```json\n\n[\n\n  { ""id"": 5, ""city"": ""Moscow"", ""color"": ""green"" },\n\n  { ""id"": 6, ""city"": ""Moscow"", ""color"": ""blue"" }\n\n]\n\n```', 'filter: Some(Filter::should([\n\n            Condition::matches(""city"", ""london"".to_string()),\n\n            Condition::matches(""color"", ""red"".to_string()),\n\n        ])),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\n\nimport io.qdrant.client.grpc.Points.Filter;\n\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nimport java.util.List;\n\n\n\nclient\n\n    .scrollAsync(\n\n        ScrollPoints.newBuilder()']","Question: What is the significance of the lowercase parameter in the context of text filters in Qdrant?\n\nContext: ## Using text filters in practice



![](/blog/from_cms/1_pbtd2tzqtjqqlbi61r8czg.webp ""There are also some additional parameters you can provide, such as  min_token_len — minimal length of the token max_token_len — maximal length of the token lowercase — if set to true, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase Using text filters in practice"")
* **min_token_len** — minimal length of the token

* **max_token_len** — maximal length of the token

* **lowercase** — if set to *true*, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase



## Using text filters in practice
This feature is implemented as additional filters during the search and will enable you to incorporate custom logic on top of semantic similarity.



During the filtering, Qdrant will check the conditions over those values that match the type of the filtering condition. If the stored value type does not fit the filtering condition - it will be considered not satisfied.



For example, you will get an empty output if you apply the [range condition](../filtering/#range) on the string data.
using static Qdrant.Client.Grpc.Conditions;



var client = new QdrantClient(""localhost"", 6334);



// The ! operator negates the condition(must not)

await client.ScrollAsync(

collectionName: ""{collection_name}"",

filter: !(MatchKeyword(""city"", ""London"") & MatchKeyword(""color"", ""red""))

);

```



Filtered points would be:



```json

[

{ ""id"": 5, ""city"": ""Moscow"", ""color"": ""green"" },

{ ""id"": 6, ""city"": ""Moscow"", ""color"": ""blue"" }

]

```
filter: Some(Filter::should([

Condition::matches(""city"", ""london"".to_string()),

Condition::matches(""color"", ""red"".to_string()),

])),

..Default::default()

})

.await?;

```



```java

import static io.qdrant.client.ConditionFactory.matchKeyword;



import io.qdrant.client.grpc.Points.Filter;

import io.qdrant.client.grpc.Points.ScrollPoints;

import java.util.List;



client

.scrollAsync(

ScrollPoints.newBuilder()\n\nAnswer:",What is the significance of the lowercase parameter in the context of text filters in Qdrant?,"The lowercase parameter in Qdrant is used to specify whether the index should be case-insensitive or not. When set to true, Qdrant will convert all the texts to lowercase before indexing them. This means that during searches, the case of the letters in the query will not affect the results.","['## Using text filters in practice\n\n\n\n![](/blog/from_cms/1_pbtd2tzqtjqqlbi61r8czg.webp ""There are also some additional parameters you can provide, such as  min_token_len — minimal length of the token max_token_len — maximal length of the token lowercase — if set to true, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase Using text filters in practice"")', '* **min_token_len**\xa0— minimal length of the token\n\n* **max_token_len**\xa0— maximal length of the token\n\n* **lowercase**\xa0— if set to\xa0*true*, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase\n\n\n\n## Using text filters in practice', 'This feature is implemented as additional filters during the search and will enable you to incorporate custom logic on top of semantic similarity.\n\n\n\nDuring the filtering, Qdrant will check the conditions over those values that match the type of the filtering condition. If the stored value type does not fit the filtering condition - it will be considered not satisfied.\n\n\n\nFor example, you will get an empty output if you apply the [range condition](../filtering/#range) on the string data.', 'using static Qdrant.Client.Grpc.Conditions;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\n// The ! operator negates the condition(must not)\n\nawait client.ScrollAsync(\n\n\tcollectionName: ""{collection_name}"",\n\n\tfilter: !(MatchKeyword(""city"", ""London"") & MatchKeyword(""color"", ""red""))\n\n);\n\n```\n\n\n\nFiltered points would be:\n\n\n\n```json\n\n[\n\n  { ""id"": 5, ""city"": ""Moscow"", ""color"": ""green"" },\n\n  { ""id"": 6, ""city"": ""Moscow"", ""color"": ""blue"" }\n\n]\n\n```', 'filter: Some(Filter::should([\n\n            Condition::matches(""city"", ""london"".to_string()),\n\n            Condition::matches(""color"", ""red"".to_string()),\n\n        ])),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\n\nimport io.qdrant.client.grpc.Points.Filter;\n\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\nimport java.util.List;\n\n\n\nclient\n\n    .scrollAsync(\n\n        ScrollPoints.newBuilder()']","## Using text filters in practice



![](/blog/from_cms/1_pbtd2tzqtjqqlbi61r8czg.webp ""There are also some additional parameters you can provide, such as  min_token_len — minimal length of the token max_token_len — maximal length of the token lowercase — if set to true, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase Using text filters in practice"")
* **min_token_len** — minimal length of the token

* **max_token_len** — maximal length of the token

* **lowercase** — if set to *true*, then the index will be case-insensitive, as Qdrant will convert all the texts to lowercase



## Using text filters in practice
This feature is implemented as additional filters during the search and will enable you to incorporate custom logic on top of semantic similarity.



During the filtering, Qdrant will check the conditions over those values that match the type of the filtering condition. If the stored value type does not fit the filtering condition - it will be considered not satisfied.



For example, you will get an empty output if you apply the [range condition](../filtering/#range) on the string data.
using static Qdrant.Client.Grpc.Conditions;



var client = new QdrantClient(""localhost"", 6334);



// The ! operator negates the condition(must not)

await client.ScrollAsync(

	collectionName: ""{collection_name}"",

	filter: !(MatchKeyword(""city"", ""London"") & MatchKeyword(""color"", ""red""))

);

```



Filtered points would be:



```json

[

  { ""id"": 5, ""city"": ""Moscow"", ""color"": ""green"" },

  { ""id"": 6, ""city"": ""Moscow"", ""color"": ""blue"" }

]

```
filter: Some(Filter::should([

            Condition::matches(""city"", ""london"".to_string()),

            Condition::matches(""color"", ""red"".to_string()),

        ])),

        ..Default::default()

    })

    .await?;

```



```java

import static io.qdrant.client.ConditionFactory.matchKeyword;



import io.qdrant.client.grpc.Points.Filter;

import io.qdrant.client.grpc.Points.ScrollPoints;

import java.util.List;



client

    .scrollAsync(

        ScrollPoints.newBuilder()",0.46875,0.6818181818181818,0.5555555555555556,0.25396825396825395,0.37209302325581395,0.3018867924528302,0.3125,0.45454545454545453,0.3703703703703703,0.453125,0.6590909090909091,0.537037037037037,0.9188530445098877,0.7034656405448914,0.7164586186408997,0.7099026441574097,0.6302650564660628,0.9340521592336396,69,1.38,0.29139946463028504
True,,4268.572,6660c319,How does adjusting the `write_consistency_factor` parameter impact write operations in a distributed deployment using Qdrant?,"The `write_consistency_factor` parameter in a distributed deployment using Qdrant defines the number of replicas that must acknowledge a write operation before responding to the client. By increasing this value, the write operations become more tolerant to network partitions within the cluster. However, this also means that a higher number of replicas need to be active in order to perform write operations successfully.","Adjusting the `write_consistency_factor` parameter in a distributed deployment using Qdrant impacts the write operations as follows:

1. **Number of Replicas Acknowledging Write Operations**: The `write_consistency_factor` parameter determines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations more tolerant to network partitions in the cluster. For example, setting `write_consistency_factor` to 2 means that at least 2 replicas must acknowledge the write operation before it is considered successful.

2. **Network Partition Tolerance**: A higher `write_consistency_factor` value increases the tolerance to network partitions in the cluster. This means that even if some replicas are temporarily unreachable due to network issues, as long as the required number of replicas specified by `write_consistency_factor` are available, the write operation can proceed.

3. **Active Replicas Requirement**: When `write_consistency_factor` is set to a value greater than 1, it will require a higher number of replicas to be active in order to perform write operations successfully. If the number of active replicas falls below the `write_consistency_factor` value, write operations will fail.

In summary, adjusting the `write_consistency_factor` parameter in Qdrant's distributed deployment affects the durability and availability of write operations by determining the number of replicas that need to acknowledge a write operation for it to be considered successful.","* `params` - other collection parameters, including `write_consistency_factor` and `on_disk_payload`. 



Full API specification is available in [schema definitions](https://qdrant.github.io/qdrant/redoc/index.html#tag/collections/operation/update_collection).



Calls to this endpoint may be blocking as it waits for existing optimizers to

finish. We recommended against using this in a production database as it may

introduce huge overhead due to the rebuilding of the index.
- `write_consistency_factor` - defines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations tolerant to network partitions in the cluster, but will require a higher number of replicas to be active to perform write operations.
### Write consistency factor



The `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to one by default.

It can be configured at the collection's creation time.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 300,

        ""distance"": ""Cosine""

    },

    ""shard_number"": 6,

    ""replication_factor"": 2,

    ""write_consistency_factor"": 2,

}

```



```python
""write_consistency_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),

    shard_number=6,

    replication_factor=2,

    write_consistency_factor=2,

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";
collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

	shardNumber: 6,

	replicationFactor: 2,

	writeConsistencyFactor: 2

);

```



Write operations will fail if the number of active replicas is less than the `write_consistency_factor`.



### Read consistency



Read `consistency` can be specified for most read requests and will ensure that the returned result

is consistent across cluster nodes.","['* `params` - other collection parameters, including `write_consistency_factor` and `on_disk_payload`. \n\n\n\nFull API specification is available in [schema definitions](https://qdrant.github.io/qdrant/redoc/index.html#tag/collections/operation/update_collection).\n\n\n\nCalls to this endpoint may be blocking as it waits for existing optimizers to\n\nfinish. We recommended against using this in a production database as it may\n\nintroduce huge overhead due to the rebuilding of the index.', '- `write_consistency_factor` - defines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations tolerant to network partitions in the cluster, but will require a higher number of replicas to be active to perform write operations.', '### Write consistency factor\n\n\n\nThe `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to one by default.\n\nIt can be configured at the collection\'s creation time.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""size"": 300,\n\n        ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 6,\n\n    ""replication_factor"": 2,\n\n    ""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python', '""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n\n    shard_number=6,\n\n    replication_factor=2,\n\n    write_consistency_factor=2,\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";', 'collectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\n\tshardNumber: 6,\n\n\treplicationFactor: 2,\n\n\twriteConsistencyFactor: 2\n\n);\n\n```\n\n\n\nWrite operations will fail if the number of active replicas is less than the `write_consistency_factor`.\n\n\n\n### Read consistency\n\n\n\nRead `consistency` can be specified for most read requests and will ensure that the returned result\n\nis consistent across cluster nodes.']","Question: How does adjusting the `write_consistency_factor` parameter impact write operations in a distributed deployment using Qdrant?\n\nContext: * `params` - other collection parameters, including `write_consistency_factor` and `on_disk_payload`. 



Full API specification is available in [schema definitions](https://qdrant.github.io/qdrant/redoc/index.html#tag/collections/operation/update_collection).



Calls to this endpoint may be blocking as it waits for existing optimizers to

finish. We recommended against using this in a production database as it may

introduce huge overhead due to the rebuilding of the index.
- `write_consistency_factor` - defines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations tolerant to network partitions in the cluster, but will require a higher number of replicas to be active to perform write operations.
### Write consistency factor



The `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to one by default.

It can be configured at the collection's creation time.



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 300,

""distance"": ""Cosine""

},

""shard_number"": 6,

""replication_factor"": 2,

""write_consistency_factor"": 2,

}

```



```python
""write_consistency_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

collection_name=""{collection_name}"",

vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),

shard_number=6,

replication_factor=2,

write_consistency_factor=2,

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";
collectionName: ""{collection_name}"",

vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

shardNumber: 6,

replicationFactor: 2,

writeConsistencyFactor: 2

);

```



Write operations will fail if the number of active replicas is less than the `write_consistency_factor`.



### Read consistency



Read `consistency` can be specified for most read requests and will ensure that the returned result

is consistent across cluster nodes.\n\nAnswer:",How does adjusting the `write_consistency_factor` parameter impact write operations in a distributed deployment using Qdrant?,"The `write_consistency_factor` parameter in a distributed deployment using Qdrant defines the number of replicas that must acknowledge a write operation before responding to the client. By increasing this value, the write operations become more tolerant to network partitions within the cluster. However, this also means that a higher number of replicas need to be active in order to perform write operations successfully.","['* `params` - other collection parameters, including `write_consistency_factor` and `on_disk_payload`. \n\n\n\nFull API specification is available in [schema definitions](https://qdrant.github.io/qdrant/redoc/index.html#tag/collections/operation/update_collection).\n\n\n\nCalls to this endpoint may be blocking as it waits for existing optimizers to\n\nfinish. We recommended against using this in a production database as it may\n\nintroduce huge overhead due to the rebuilding of the index.', '- `write_consistency_factor` - defines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations tolerant to network partitions in the cluster, but will require a higher number of replicas to be active to perform write operations.', '### Write consistency factor\n\n\n\nThe `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to one by default.\n\nIt can be configured at the collection\'s creation time.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""size"": 300,\n\n        ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 6,\n\n    ""replication_factor"": 2,\n\n    ""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python', '""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n\n    shard_number=6,\n\n    replication_factor=2,\n\n    write_consistency_factor=2,\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";', 'collectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\n\tshardNumber: 6,\n\n\treplicationFactor: 2,\n\n\twriteConsistencyFactor: 2\n\n);\n\n```\n\n\n\nWrite operations will fail if the number of active replicas is less than the `write_consistency_factor`.\n\n\n\n### Read consistency\n\n\n\nRead `consistency` can be specified for most read requests and will ensure that the returned result\n\nis consistent across cluster nodes.']","* `params` - other collection parameters, including `write_consistency_factor` and `on_disk_payload`. 



Full API specification is available in [schema definitions](https://qdrant.github.io/qdrant/redoc/index.html#tag/collections/operation/update_collection).



Calls to this endpoint may be blocking as it waits for existing optimizers to

finish. We recommended against using this in a production database as it may

introduce huge overhead due to the rebuilding of the index.
- `write_consistency_factor` - defines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations tolerant to network partitions in the cluster, but will require a higher number of replicas to be active to perform write operations.
### Write consistency factor



The `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to one by default.

It can be configured at the collection's creation time.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 300,

        ""distance"": ""Cosine""

    },

    ""shard_number"": 6,

    ""replication_factor"": 2,

    ""write_consistency_factor"": 2,

}

```



```python
""write_consistency_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),

    shard_number=6,

    replication_factor=2,

    write_consistency_factor=2,

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";
collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

	shardNumber: 6,

	replicationFactor: 2,

	writeConsistencyFactor: 2

);

```



Write operations will fail if the number of active replicas is less than the `write_consistency_factor`.



### Read consistency



Read `consistency` can be specified for most read requests and will ensure that the returned result

is consistent across cluster nodes.",0.2463768115942029,0.9107142857142857,0.38783269961977185,0.19902912621359223,0.7454545454545455,0.31417624521072796,0.23671497584541062,0.875,0.3726235741444867,0.2463768115942029,0.9107142857142857,0.38783269961977185,0.9426864385604858,0.6170654296875,0.7425670027732849,0.6740239262580872,0.5322270222558556,0.8176113630955418,213,3.435483870967742,0.7178990230412916
True,,2450.3849999999998,a157e289,What are some of the features and support services that come pre-configured with each instance in Qdrant Cloud?,"Each instance in Qdrant Cloud comes pre-configured with the following tools, features, and support services:1. Automatically created with the latest available version of Qdrant.
2. Upgradeable to later versions of Qdrant as they are released.
3. Equipped with monitoring and logging to observe the health of each cluster.
4. Accessible through the Qdrant Cloud Console.
5. Vertically scalable.
6. Offered on AWS and GCP, with Azure currently in development.
","Some of the features and support services that come pre-configured with each instance in Qdrant Cloud include:

1. APIs for managing embeddings and documents.
2. Support for custom embeddings and document storage paths.
3. Automatic indexing of embeddings for faster search operations.
4. Ability to create multiple collections for organizing data.
5. Secure access control through API keys.
6. Seamless transition from on-premise to cloud deployment without changing the interaction methods.
7. Easy creation of a Qdrant Cloud account with the provision of a new API key for each request.","## Prerequisites



Before you start, make sure you have the following:



1. Airbyte instance, either [Open Source](https://airbyte.com/solutions/airbyte-open-source), 

   [Self-Managed](https://airbyte.com/solutions/airbyte-enterprise), or [Cloud](https://airbyte.com/solutions/airbyte-cloud). 

2. Running instance of Qdrant. It has to be accessible by URL from the machine where Airbyte is running. 

   You can follow the [installation guide](/documentation/guides/installation/) to set up Qdrant.
## Prerequisites



Before you start, make sure you have the following:



1. A Qdrant instance to connect to. You can get free cloud instance [cloud.qdrant.io](https://cloud.qdrant.io/). 

2. An account at Make.com. You can register yourself [here](https://www.make.com/en/register).



## Setting up a connection



Navigate to your scenario on the Make dashboard and select a Qdrant app module to start a connection.

![Qdrant Make connection](/documentation/frameworks/make/connection.png)
## Configuration



Qdrant settings can be configured by setting values to the qdrant property in the `settings.yaml` file. By default, Qdrant tries to connect to an instance at http://localhost:3000.



Example: 

```yaml

qdrant:

    url: ""https://xyz-example.eu-central.aws.cloud.qdrant.io:6333""

    api_key: ""<your-api-key>""

```



The available [configuration options](https://docs.privategpt.dev/manual/storage/vector-stores#qdrant-configuration) are:

| Field        | Description |
docs, embeddings, 

    path=""/tmp/local_qdrant"",

    collection_name=""my_documents"",

)

```



### On-premise server deployment



No matter if you choose to launch Qdrant locally with [a Docker container](/documentation/guides/installation/), or 

select a Kubernetes deployment with [the official Helm chart](https://github.com/qdrant/qdrant-helm), the way you're 

going to connect to such an instance will be identical. You'll need to provide a URL pointing to the service.



```python
Transitioning from on-premise to the cloud version of Qdrant does not require changing anything in the way you interact with the service. All you have to do is [create a Qdrant Cloud account](https://qdrant.to/cloud) and [provide a new API key]({{< ref ""/documentation/cloud/authentication"" >}}) to each request.","['## Prerequisites\n\n\n\nBefore you start, make sure you have the following:\n\n\n\n1. Airbyte instance, either [Open Source](https://airbyte.com/solutions/airbyte-open-source), \n\n   [Self-Managed](https://airbyte.com/solutions/airbyte-enterprise), or [Cloud](https://airbyte.com/solutions/airbyte-cloud). \n\n2. Running instance of Qdrant. It has to be accessible by URL from the machine where Airbyte is running. \n\n   You can follow the [installation guide](/documentation/guides/installation/) to set up Qdrant.', '## Prerequisites\n\n\n\nBefore you start, make sure you have the following:\n\n\n\n1. A Qdrant instance to connect to. You can get free cloud instance [cloud.qdrant.io](https://cloud.qdrant.io/). \n\n2. An account at Make.com. You can register yourself [here](https://www.make.com/en/register).\n\n\n\n## Setting up a connection\n\n\n\nNavigate to your scenario on the Make dashboard and select a Qdrant app module to start a connection.\n\n![Qdrant Make connection](/documentation/frameworks/make/connection.png)', '## Configuration\n\n\n\nQdrant settings can be configured by setting values to the qdrant property in the `settings.yaml` file. By default, Qdrant tries to connect to an instance at http://localhost:3000.\n\n\n\nExample: \n\n```yaml\n\nqdrant:\n\n    url: ""https://xyz-example.eu-central.aws.cloud.qdrant.io:6333""\n\n    api_key: ""<your-api-key>""\n\n```\n\n\n\nThe available [configuration options](https://docs.privategpt.dev/manual/storage/vector-stores#qdrant-configuration) are:\n\n| Field        | Description |', 'docs, embeddings, \n\n    path=""/tmp/local_qdrant"",\n\n    collection_name=""my_documents"",\n\n)\n\n```\n\n\n\n### On-premise server deployment\n\n\n\nNo matter if you choose to launch Qdrant locally with [a Docker container](/documentation/guides/installation/), or \n\nselect a Kubernetes deployment with [the official Helm chart](https://github.com/qdrant/qdrant-helm), the way you\'re \n\ngoing to connect to such an instance will be identical. You\'ll need to provide a URL pointing to the service.\n\n\n\n```python', 'Transitioning from on-premise to the cloud version of Qdrant does not require changing anything in the way you interact with the service. All you have to do is [create a Qdrant Cloud account](https://qdrant.to/cloud) and [provide a new API key]({{< ref ""/documentation/cloud/authentication"" >}}) to each request.']","Question: What are some of the features and support services that come pre-configured with each instance in Qdrant Cloud?\n\nContext: ## Prerequisites



Before you start, make sure you have the following:



1. Airbyte instance, either [Open Source](https://airbyte.com/solutions/airbyte-open-source), 

[Self-Managed](https://airbyte.com/solutions/airbyte-enterprise), or [Cloud](https://airbyte.com/solutions/airbyte-cloud). 

2. Running instance of Qdrant. It has to be accessible by URL from the machine where Airbyte is running. 

You can follow the [installation guide](/documentation/guides/installation/) to set up Qdrant.
## Prerequisites



Before you start, make sure you have the following:



1. A Qdrant instance to connect to. You can get free cloud instance [cloud.qdrant.io](https://cloud.qdrant.io/). 

2. An account at Make.com. You can register yourself [here](https://www.make.com/en/register).



## Setting up a connection



Navigate to your scenario on the Make dashboard and select a Qdrant app module to start a connection.

![Qdrant Make connection](/documentation/frameworks/make/connection.png)
## Configuration



Qdrant settings can be configured by setting values to the qdrant property in the `settings.yaml` file. By default, Qdrant tries to connect to an instance at http://localhost:3000.



Example: 

```yaml

qdrant:

url: ""https://xyz-example.eu-central.aws.cloud.qdrant.io:6333""

api_key: ""<your-api-key>""

```



The available [configuration options](https://docs.privategpt.dev/manual/storage/vector-stores#qdrant-configuration) are:

| Field        | Description |
docs, embeddings, 

path=""/tmp/local_qdrant"",

collection_name=""my_documents"",

)

```



### On-premise server deployment



No matter if you choose to launch Qdrant locally with [a Docker container](/documentation/guides/installation/), or 

select a Kubernetes deployment with [the official Helm chart](https://github.com/qdrant/qdrant-helm), the way you're 

going to connect to such an instance will be identical. You'll need to provide a URL pointing to the service.



```python
Transitioning from on-premise to the cloud version of Qdrant does not require changing anything in the way you interact with the service. All you have to do is [create a Qdrant Cloud account](https://qdrant.to/cloud) and [provide a new API key]({{< ref ""/documentation/cloud/authentication"" >}}) to each request.\n\nAnswer:",What are some of the features and support services that come pre-configured with each instance in Qdrant Cloud?,"Each instance in Qdrant Cloud comes pre-configured with the following tools, features, and support services:1. Automatically created with the latest available version of Qdrant.
2. Upgradeable to later versions of Qdrant as they are released.
3. Equipped with monitoring and logging to observe the health of each cluster.
4. Accessible through the Qdrant Cloud Console.
5. Vertically scalable.
6. Offered on AWS and GCP, with Azure currently in development.
","['## Prerequisites\n\n\n\nBefore you start, make sure you have the following:\n\n\n\n1. Airbyte instance, either [Open Source](https://airbyte.com/solutions/airbyte-open-source), \n\n   [Self-Managed](https://airbyte.com/solutions/airbyte-enterprise), or [Cloud](https://airbyte.com/solutions/airbyte-cloud). \n\n2. Running instance of Qdrant. It has to be accessible by URL from the machine where Airbyte is running. \n\n   You can follow the [installation guide](/documentation/guides/installation/) to set up Qdrant.', '## Prerequisites\n\n\n\nBefore you start, make sure you have the following:\n\n\n\n1. A Qdrant instance to connect to. You can get free cloud instance [cloud.qdrant.io](https://cloud.qdrant.io/). \n\n2. An account at Make.com. You can register yourself [here](https://www.make.com/en/register).\n\n\n\n## Setting up a connection\n\n\n\nNavigate to your scenario on the Make dashboard and select a Qdrant app module to start a connection.\n\n![Qdrant Make connection](/documentation/frameworks/make/connection.png)', '## Configuration\n\n\n\nQdrant settings can be configured by setting values to the qdrant property in the `settings.yaml` file. By default, Qdrant tries to connect to an instance at http://localhost:3000.\n\n\n\nExample: \n\n```yaml\n\nqdrant:\n\n    url: ""https://xyz-example.eu-central.aws.cloud.qdrant.io:6333""\n\n    api_key: ""<your-api-key>""\n\n```\n\n\n\nThe available [configuration options](https://docs.privategpt.dev/manual/storage/vector-stores#qdrant-configuration) are:\n\n| Field        | Description |', 'docs, embeddings, \n\n    path=""/tmp/local_qdrant"",\n\n    collection_name=""my_documents"",\n\n)\n\n```\n\n\n\n### On-premise server deployment\n\n\n\nNo matter if you choose to launch Qdrant locally with [a Docker container](/documentation/guides/installation/), or \n\nselect a Kubernetes deployment with [the official Helm chart](https://github.com/qdrant/qdrant-helm), the way you\'re \n\ngoing to connect to such an instance will be identical. You\'ll need to provide a URL pointing to the service.\n\n\n\n```python', 'Transitioning from on-premise to the cloud version of Qdrant does not require changing anything in the way you interact with the service. All you have to do is [create a Qdrant Cloud account](https://qdrant.to/cloud) and [provide a new API key]({{< ref ""/documentation/cloud/authentication"" >}}) to each request.']","## Prerequisites



Before you start, make sure you have the following:



1. Airbyte instance, either [Open Source](https://airbyte.com/solutions/airbyte-open-source), 

   [Self-Managed](https://airbyte.com/solutions/airbyte-enterprise), or [Cloud](https://airbyte.com/solutions/airbyte-cloud). 

2. Running instance of Qdrant. It has to be accessible by URL from the machine where Airbyte is running. 

   You can follow the [installation guide](/documentation/guides/installation/) to set up Qdrant.
## Prerequisites



Before you start, make sure you have the following:



1. A Qdrant instance to connect to. You can get free cloud instance [cloud.qdrant.io](https://cloud.qdrant.io/). 

2. An account at Make.com. You can register yourself [here](https://www.make.com/en/register).



## Setting up a connection



Navigate to your scenario on the Make dashboard and select a Qdrant app module to start a connection.

![Qdrant Make connection](/documentation/frameworks/make/connection.png)
## Configuration



Qdrant settings can be configured by setting values to the qdrant property in the `settings.yaml` file. By default, Qdrant tries to connect to an instance at http://localhost:3000.



Example: 

```yaml

qdrant:

    url: ""https://xyz-example.eu-central.aws.cloud.qdrant.io:6333""

    api_key: ""<your-api-key>""

```



The available [configuration options](https://docs.privategpt.dev/manual/storage/vector-stores#qdrant-configuration) are:

| Field        | Description |
docs, embeddings, 

    path=""/tmp/local_qdrant"",

    collection_name=""my_documents"",

)

```



### On-premise server deployment



No matter if you choose to launch Qdrant locally with [a Docker container](/documentation/guides/installation/), or 

select a Kubernetes deployment with [the official Helm chart](https://github.com/qdrant/qdrant-helm), the way you're 

going to connect to such an instance will be identical. You'll need to provide a URL pointing to the service.



```python
Transitioning from on-premise to the cloud version of Qdrant does not require changing anything in the way you interact with the service. All you have to do is [create a Qdrant Cloud account](https://qdrant.to/cloud) and [provide a new API key]({{< ref ""/documentation/cloud/authentication"" >}}) to each request.",0.40229885057471265,0.5223880597014925,0.4545454545454545,0.13953488372093023,0.18181818181818182,0.15789473684210528,0.1724137931034483,0.22388059701492538,0.19480519480519484,0.3218390804597701,0.417910447761194,0.36363636363636365,0.8606330156326294,0.6505416035652161,0.6686035990715027,0.6594489812850952,0.3929881136864424,0.181985005736351,90,1.3043478260869565,0.36469133139761967
True,,3405.771,3cf8f281,How is the `must_not` clause used in conjunction with other clauses in filtering data?,"The `must_not` clause in filtering data is used to exclude documents that meet specific criteria. The `must_not` clause can be used in combination with the `must` clause to create a more refined filter. Specifically, the `must_not` clause is used to specify conditions that must not be met for a document to be included in the results.","The `must_not` clause is used in conjunction with other clauses in filtering data to exclude certain conditions from the result set. It specifies conditions that must not be met in order for a document to be included in the final results.

Here is an example using the `must_not` clause in conjunction with other clauses:

```http
POST /collections/{collection_name}/points/scroll

{

""filter"": {

""must"": [

{ ""key"": ""city"", ""match"": { ""value"": ""London"" } }

],

""must_not"": [

{ ""key"": ""color"", ""match"": { ""value"": ""red"" } }

]

}

}
```

In this example, the filter specifies that documents must have the city value of ""London"" (`must` clause) but must not have the color value of ""red"" (`must_not` clause) to be included in the results.

By combining `must`, `must_not`, and `should` clauses in various ways, you can create complex filtering conditions to retrieve specific data from your dataset.","{ ""id"": 6, ""city"": ""Moscow"", ""color"": ""blue"" }

]

```



When using `must_not`, the clause becomes `true` if none if the conditions listed inside `should` is satisfied.

In this sense, `must_not` is equivalent to the expression `(NOT A) AND (NOT B) AND (NOT C)`.



### Clauses combination



It is also possible to use several clauses simultaneously:



```http

POST /collections/{collection_name}/points/scroll

{

    ""filter"": {

        ""must"": [
{ ""id"": 3, ""city"": ""London"", ""color"": ""blue"" },

  { ""id"": 4, ""city"": ""Berlin"", ""color"": ""red"" }

]

```



When using `should`, the clause becomes `true` if at least one condition listed inside `should` is satisfied.

In this sense, `should` is equivalent to the operator `OR`.



### Must Not



Example:



```http

POST /collections/{collection_name}/points/scroll

{

    ""filter"": {

        ""must_not"": [

            { ""key"": ""city"", ""match"": { ""value"": ""London"" } },
[{ ""id"": 2, ""city"": ""London"", ""color"": ""red"" }]

```



When using `must`, the clause becomes `true` only if every condition listed inside `must` is satisfied.

In this sense, `must` is equivalent to the operator `AND`.



### Should



Example:



```http

POST /collections/{collection_name}/points/scroll

{

    ""filter"": {

        ""should"": [

            { ""key"": ""city"", ""match"": { ""value"": ""London"" } },

            { ""key"": ""color"", ""match"": { ""value"": ""red"" } }

        ]

    }

}

```
],

        must_not=[

            models.FieldCondition(key=""color"", match=models.MatchValue(value=""red"")),

        ],

    ),

)

```



```typescript

client.scroll(""{collection_name}"", {

  filter: {

    must: [

      {

        key: ""city"",

        match: { value: ""London"" },

      },

    ],

    must_not: [

      {

        key: ""color"",

        match: { value: ""red"" },

      },

    ],

  },

});

```



```rust

use qdrant_client::qdrant::{Condition, Filter, ScrollPoints};
filter: Some(Filter::must_not([

            Condition::matches(""city"", ""london"".to_string()),

            Condition::matches(""color"", ""red"".to_string()),

        ])),

        ..Default::default()

    })

    .await?;

```



```java

import java.util.List;



import static io.qdrant.client.ConditionFactory.matchKeyword;



import io.qdrant.client.grpc.Points.Filter;

import io.qdrant.client.grpc.Points.ScrollPoints;



client

    .scrollAsync(

        ScrollPoints.newBuilder()","['{ ""id"": 6, ""city"": ""Moscow"", ""color"": ""blue"" }\n\n]\n\n```\n\n\n\nWhen using `must_not`, the clause becomes `true` if none if the conditions listed inside `should` is satisfied.\n\nIn this sense, `must_not` is equivalent to the expression `(NOT A) AND (NOT B) AND (NOT C)`.\n\n\n\n### Clauses combination\n\n\n\nIt is also possible to use several clauses simultaneously:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/scroll\n\n{\n\n    ""filter"": {\n\n        ""must"": [', '{ ""id"": 3, ""city"": ""London"", ""color"": ""blue"" },\n\n  { ""id"": 4, ""city"": ""Berlin"", ""color"": ""red"" }\n\n]\n\n```\n\n\n\nWhen using `should`, the clause becomes `true` if at least one condition listed inside `should` is satisfied.\n\nIn this sense, `should` is equivalent to the operator `OR`.\n\n\n\n### Must Not\n\n\n\nExample:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/scroll\n\n{\n\n    ""filter"": {\n\n        ""must_not"": [\n\n            { ""key"": ""city"", ""match"": { ""value"": ""London"" } },', '[{ ""id"": 2, ""city"": ""London"", ""color"": ""red"" }]\n\n```\n\n\n\nWhen using `must`, the clause becomes `true` only if every condition listed inside `must` is satisfied.\n\nIn this sense, `must` is equivalent to the operator `AND`.\n\n\n\n### Should\n\n\n\nExample:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/scroll\n\n{\n\n    ""filter"": {\n\n        ""should"": [\n\n            { ""key"": ""city"", ""match"": { ""value"": ""London"" } },\n\n            { ""key"": ""color"", ""match"": { ""value"": ""red"" } }\n\n        ]\n\n    }\n\n}\n\n```', '],\n\n        must_not=[\n\n            models.FieldCondition(key=""color"", match=models.MatchValue(value=""red"")),\n\n        ],\n\n    ),\n\n)\n\n```\n\n\n\n```typescript\n\nclient.scroll(""{collection_name}"", {\n\n  filter: {\n\n    must: [\n\n      {\n\n        key: ""city"",\n\n        match: { value: ""London"" },\n\n      },\n\n    ],\n\n    must_not: [\n\n      {\n\n        key: ""color"",\n\n        match: { value: ""red"" },\n\n      },\n\n    ],\n\n  },\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPoints};', 'filter: Some(Filter::must_not([\n\n            Condition::matches(""city"", ""london"".to_string()),\n\n            Condition::matches(""color"", ""red"".to_string()),\n\n        ])),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\n\nimport io.qdrant.client.grpc.Points.Filter;\n\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\n\n\nclient\n\n    .scrollAsync(\n\n        ScrollPoints.newBuilder()']","Question: How is the `must_not` clause used in conjunction with other clauses in filtering data?\n\nContext: { ""id"": 6, ""city"": ""Moscow"", ""color"": ""blue"" }

]

```



When using `must_not`, the clause becomes `true` if none if the conditions listed inside `should` is satisfied.

In this sense, `must_not` is equivalent to the expression `(NOT A) AND (NOT B) AND (NOT C)`.



### Clauses combination



It is also possible to use several clauses simultaneously:



```http

POST /collections/{collection_name}/points/scroll

{

""filter"": {

""must"": [
{ ""id"": 3, ""city"": ""London"", ""color"": ""blue"" },

{ ""id"": 4, ""city"": ""Berlin"", ""color"": ""red"" }

]

```



When using `should`, the clause becomes `true` if at least one condition listed inside `should` is satisfied.

In this sense, `should` is equivalent to the operator `OR`.



### Must Not



Example:



```http

POST /collections/{collection_name}/points/scroll

{

""filter"": {

""must_not"": [

{ ""key"": ""city"", ""match"": { ""value"": ""London"" } },
[{ ""id"": 2, ""city"": ""London"", ""color"": ""red"" }]

```



When using `must`, the clause becomes `true` only if every condition listed inside `must` is satisfied.

In this sense, `must` is equivalent to the operator `AND`.



### Should



Example:



```http

POST /collections/{collection_name}/points/scroll

{

""filter"": {

""should"": [

{ ""key"": ""city"", ""match"": { ""value"": ""London"" } },

{ ""key"": ""color"", ""match"": { ""value"": ""red"" } }

]

}

}

```
],

must_not=[

models.FieldCondition(key=""color"", match=models.MatchValue(value=""red"")),

],

),

)

```



```typescript

client.scroll(""{collection_name}"", {

filter: {

must: [

{

key: ""city"",

match: { value: ""London"" },

},

],

must_not: [

{

key: ""color"",

match: { value: ""red"" },

},

],

},

});

```



```rust

use qdrant_client::qdrant::{Condition, Filter, ScrollPoints};
filter: Some(Filter::must_not([

Condition::matches(""city"", ""london"".to_string()),

Condition::matches(""color"", ""red"".to_string()),

])),

..Default::default()

})

.await?;

```



```java

import java.util.List;



import static io.qdrant.client.ConditionFactory.matchKeyword;



import io.qdrant.client.grpc.Points.Filter;

import io.qdrant.client.grpc.Points.ScrollPoints;



client

.scrollAsync(

ScrollPoints.newBuilder()\n\nAnswer:",How is the `must_not` clause used in conjunction with other clauses in filtering data?,"The `must_not` clause in filtering data is used to exclude documents that meet specific criteria. The `must_not` clause can be used in combination with the `must` clause to create a more refined filter. Specifically, the `must_not` clause is used to specify conditions that must not be met for a document to be included in the results.","['{ ""id"": 6, ""city"": ""Moscow"", ""color"": ""blue"" }\n\n]\n\n```\n\n\n\nWhen using `must_not`, the clause becomes `true` if none if the conditions listed inside `should` is satisfied.\n\nIn this sense, `must_not` is equivalent to the expression `(NOT A) AND (NOT B) AND (NOT C)`.\n\n\n\n### Clauses combination\n\n\n\nIt is also possible to use several clauses simultaneously:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/scroll\n\n{\n\n    ""filter"": {\n\n        ""must"": [', '{ ""id"": 3, ""city"": ""London"", ""color"": ""blue"" },\n\n  { ""id"": 4, ""city"": ""Berlin"", ""color"": ""red"" }\n\n]\n\n```\n\n\n\nWhen using `should`, the clause becomes `true` if at least one condition listed inside `should` is satisfied.\n\nIn this sense, `should` is equivalent to the operator `OR`.\n\n\n\n### Must Not\n\n\n\nExample:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/scroll\n\n{\n\n    ""filter"": {\n\n        ""must_not"": [\n\n            { ""key"": ""city"", ""match"": { ""value"": ""London"" } },', '[{ ""id"": 2, ""city"": ""London"", ""color"": ""red"" }]\n\n```\n\n\n\nWhen using `must`, the clause becomes `true` only if every condition listed inside `must` is satisfied.\n\nIn this sense, `must` is equivalent to the operator `AND`.\n\n\n\n### Should\n\n\n\nExample:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/scroll\n\n{\n\n    ""filter"": {\n\n        ""should"": [\n\n            { ""key"": ""city"", ""match"": { ""value"": ""London"" } },\n\n            { ""key"": ""color"", ""match"": { ""value"": ""red"" } }\n\n        ]\n\n    }\n\n}\n\n```', '],\n\n        must_not=[\n\n            models.FieldCondition(key=""color"", match=models.MatchValue(value=""red"")),\n\n        ],\n\n    ),\n\n)\n\n```\n\n\n\n```typescript\n\nclient.scroll(""{collection_name}"", {\n\n  filter: {\n\n    must: [\n\n      {\n\n        key: ""city"",\n\n        match: { value: ""London"" },\n\n      },\n\n    ],\n\n    must_not: [\n\n      {\n\n        key: ""color"",\n\n        match: { value: ""red"" },\n\n      },\n\n    ],\n\n  },\n\n});\n\n```\n\n\n\n```rust\n\nuse qdrant_client::qdrant::{Condition, Filter, ScrollPoints};', 'filter: Some(Filter::must_not([\n\n            Condition::matches(""city"", ""london"".to_string()),\n\n            Condition::matches(""color"", ""red"".to_string()),\n\n        ])),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\n\nimport io.qdrant.client.grpc.Points.Filter;\n\nimport io.qdrant.client.grpc.Points.ScrollPoints;\n\n\n\nclient\n\n    .scrollAsync(\n\n        ScrollPoints.newBuilder()']","{ ""id"": 6, ""city"": ""Moscow"", ""color"": ""blue"" }

]

```



When using `must_not`, the clause becomes `true` if none if the conditions listed inside `should` is satisfied.

In this sense, `must_not` is equivalent to the expression `(NOT A) AND (NOT B) AND (NOT C)`.



### Clauses combination



It is also possible to use several clauses simultaneously:



```http

POST /collections/{collection_name}/points/scroll

{

    ""filter"": {

        ""must"": [
{ ""id"": 3, ""city"": ""London"", ""color"": ""blue"" },

  { ""id"": 4, ""city"": ""Berlin"", ""color"": ""red"" }

]

```



When using `should`, the clause becomes `true` if at least one condition listed inside `should` is satisfied.

In this sense, `should` is equivalent to the operator `OR`.



### Must Not



Example:



```http

POST /collections/{collection_name}/points/scroll

{

    ""filter"": {

        ""must_not"": [

            { ""key"": ""city"", ""match"": { ""value"": ""London"" } },
[{ ""id"": 2, ""city"": ""London"", ""color"": ""red"" }]

```



When using `must`, the clause becomes `true` only if every condition listed inside `must` is satisfied.

In this sense, `must` is equivalent to the operator `AND`.



### Should



Example:



```http

POST /collections/{collection_name}/points/scroll

{

    ""filter"": {

        ""should"": [

            { ""key"": ""city"", ""match"": { ""value"": ""London"" } },

            { ""key"": ""color"", ""match"": { ""value"": ""red"" } }

        ]

    }

}

```
],

        must_not=[

            models.FieldCondition(key=""color"", match=models.MatchValue(value=""red"")),

        ],

    ),

)

```



```typescript

client.scroll(""{collection_name}"", {

  filter: {

    must: [

      {

        key: ""city"",

        match: { value: ""London"" },

      },

    ],

    must_not: [

      {

        key: ""color"",

        match: { value: ""red"" },

      },

    ],

  },

});

```



```rust

use qdrant_client::qdrant::{Condition, Filter, ScrollPoints};
filter: Some(Filter::must_not([

            Condition::matches(""city"", ""london"".to_string()),

            Condition::matches(""color"", ""red"".to_string()),

        ])),

        ..Default::default()

    })

    .await?;

```



```java

import java.util.List;



import static io.qdrant.client.ConditionFactory.matchKeyword;



import io.qdrant.client.grpc.Points.Filter;

import io.qdrant.client.grpc.Points.ScrollPoints;



client

    .scrollAsync(

        ScrollPoints.newBuilder()",0.36507936507936506,0.8846153846153846,0.5168539325842696,0.216,0.5294117647058824,0.3068181818181818,0.2222222222222222,0.5384615384615384,0.3146067415730337,0.3333333333333333,0.8076923076923077,0.47191011235955055,0.8039578199386597,0.616723358631134,0.7371850609779358,0.6715952754020691,0.6934693716466427,0.839773657421271,129,2.3035714285714284,0.5377340862942257
True,,4486.066,d8e44919,What are some advantages of vector search over keyword-based search?,"Vector search has clear advantages over keyword-based search in various scenarios as outlined in the document chunk. Some of these advantages include:

1. Multi-lingual & multi-modal search: Vector search is effective in handling searches across multiple languages and modalities.
2. For short texts with typos and ambiguous content-dependent meanings: Vector search excels in situations where the search queries are short, contain typos, or have ambiguous meanings.
3. Specialized domains with tuned encoder models: Vector search is beneficial in specialized domains where encoder models can be fine-tuned for better search results.
4. Document-as-a-Query similarity search: Vector search allows for similarity searches where the entire document can be used as a query to find similar documents.

While vector search offers these advantages, it is important to note that keyword-based search still has its relevance in certain cases. For example, in out-of-domain search.","Some advantages of vector search over keyword-based search include:

1. **Multi-lingual & Multi-modal Search**: Vector search can handle multiple languages and modalities efficiently, making it suitable for diverse content sources.

2. **Handling Short Texts with Typos and Ambiguities**: Vector search is more robust in understanding short texts with typos and content-dependent meanings, where traditional keyword-based search may struggle.

3. **Specialized Domains with Tuned Encoder Models**: Vector search can be fine-tuned for specific domains using encoder models, improving the relevance and accuracy of search results in specialized areas.

4. **Document-as-a-Query Similarity Search**: Vector search enables similarity searches where documents themselves are used as queries, allowing for more nuanced and context-aware retrieval of relevant information.

5. **Optimization for Ranking and Clustering**: Vector search is optimized for tasks like ranking and clustering, providing more advanced capabilities for information retrieval compared to keyword-based search.

6. **Reduction in Memory Footprint**: Vector search engines, like Qdrant, often implement quantization techniques that reduce the memory footprint of embeddings, making them more resource-efficient.

7. **Flexibility in Resource Usage**: In open-source vector search solutions, you pay for the resources you use rather than the number of databases, offering cost-effectiveness and scalability based on specific use cases.

8. **High Compression Rate with Over-Parameterized Vectors**: Vector search can achieve high compression rates because the large vectors used are over-parameterized for retrieval tasks, ensuring that important information is encoded efficiently for ranking and clustering purposes.","preprocessing of the documents and queries. Vector search turned out to be a breakthrough, as it has

some clear advantages in the following scenarios:



- 🌍 Multi-lingual & multi-modal search

- 🤔 For short texts with typos and ambiguous content-dependent meanings

- 👨‍🔬 Specialized domains with tuned encoder models

- 📄 Document-as-a-Query similarity search



It doesn't mean we do not keyword search anymore. There are also some cases in which this kind of method

might be useful:
are able to benefit the advantages of both methods.



Again, it's worth mentioning that with the 3rd experiment, with cross-encoder reranking, Qdrant returned more than 48.12% of 

the relevant items and BM25 around 66.66%.



## Some anecdotal observations



None of the algorithms works better in all the cases. There might be some specific queries in which keyword-based search

will be a winner and the other way around. The table shows some interesting examples we could find in WANDS dataset
## Next Steps



Vector search is an exciting alternative to sparse methods. It solves the issues we had with the keyword-based search without needing to maintain lots of heuristics manually. It requires an additional component, a neural encoder, to convert text into vectors. 



[**Tutorial 1 - Qdrant for Complete Beginners**](../../tutorials/search-beginners)
In the open-source world, you pay for the resources you use, not the number of different databases you run.

Resources depend more on the optimal solution for each use case.

As a result, running a dedicated vector search engine can be even cheaper, as it allows optimization specifically for vector search use cases.



For instance, Qdrant implements a number of [quantization techniques](documentation/guides/quantization/) that can significantly reduce the memory footprint of embeddings.
One of the reasons vector search still works with such a high compression rate is that these large vectors are over-parameterized for retrieval. This is because they are designed for ranking, clustering, and similar use cases, which typically need more information encoded in the vector.","[""preprocessing of the documents and queries. Vector search turned out to be a breakthrough, as it has\n\nsome clear advantages in the following scenarios:\n\n\n\n- 🌍 Multi-lingual & multi-modal search\n\n- 🤔 For short texts with typos and ambiguous content-dependent meanings\n\n- 👨\u200d🔬 Specialized domains with tuned encoder models\n\n- 📄 Document-as-a-Query similarity search\n\n\n\nIt doesn't mean we do not keyword search anymore. There are also some cases in which this kind of method\n\nmight be useful:"", ""are able to benefit the advantages of both methods.\n\n\n\nAgain, it's worth mentioning that with the 3rd experiment, with cross-encoder reranking, Qdrant returned more than 48.12% of \n\nthe relevant items and BM25 around 66.66%.\n\n\n\n## Some anecdotal observations\n\n\n\nNone of the algorithms works better in all the cases. There might be some specific queries in which keyword-based search\n\nwill be a winner and the other way around. The table shows some interesting examples we could find in WANDS dataset"", '## Next Steps\n\n\n\nVector search is an exciting alternative to sparse methods. It solves the issues we had with the keyword-based search without needing to maintain lots of heuristics manually. It requires an additional component, a neural encoder, to convert text into vectors. \n\n\n\n[**Tutorial 1 - Qdrant for Complete Beginners**](../../tutorials/search-beginners)', 'In the open-source world, you pay for the resources you use, not the number of different databases you run.\n\nResources depend more on the optimal solution for each use case.\n\nAs a result, running a dedicated vector search engine can be even cheaper, as it allows optimization specifically for vector search use cases.\n\n\n\nFor instance, Qdrant implements a number of [quantization techniques](documentation/guides/quantization/) that can significantly reduce the memory footprint of embeddings.', 'One of the reasons vector search still works with such a high compression rate is that these large vectors are over-parameterized for retrieval. This is because they are designed for ranking, clustering, and similar use cases, which typically need more information encoded in the vector.']","Question: What are some advantages of vector search over keyword-based search?\n\nContext: preprocessing of the documents and queries. Vector search turned out to be a breakthrough, as it has

some clear advantages in the following scenarios:



- 🌍 Multi-lingual & multi-modal search

- 🤔 For short texts with typos and ambiguous content-dependent meanings

- 👨‍🔬 Specialized domains with tuned encoder models

- 📄 Document-as-a-Query similarity search



It doesn't mean we do not keyword search anymore. There are also some cases in which this kind of method

might be useful:
are able to benefit the advantages of both methods.



Again, it's worth mentioning that with the 3rd experiment, with cross-encoder reranking, Qdrant returned more than 48.12% of 

the relevant items and BM25 around 66.66%.



## Some anecdotal observations



None of the algorithms works better in all the cases. There might be some specific queries in which keyword-based search

will be a winner and the other way around. The table shows some interesting examples we could find in WANDS dataset
## Next Steps



Vector search is an exciting alternative to sparse methods. It solves the issues we had with the keyword-based search without needing to maintain lots of heuristics manually. It requires an additional component, a neural encoder, to convert text into vectors. 



[**Tutorial 1 - Qdrant for Complete Beginners**](../../tutorials/search-beginners)
In the open-source world, you pay for the resources you use, not the number of different databases you run.

Resources depend more on the optimal solution for each use case.

As a result, running a dedicated vector search engine can be even cheaper, as it allows optimization specifically for vector search use cases.



For instance, Qdrant implements a number of [quantization techniques](documentation/guides/quantization/) that can significantly reduce the memory footprint of embeddings.
One of the reasons vector search still works with such a high compression rate is that these large vectors are over-parameterized for retrieval. This is because they are designed for ranking, clustering, and similar use cases, which typically need more information encoded in the vector.\n\nAnswer:",What are some advantages of vector search over keyword-based search?,"Vector search has clear advantages over keyword-based search in various scenarios as outlined in the document chunk. Some of these advantages include:

1. Multi-lingual & multi-modal search: Vector search is effective in handling searches across multiple languages and modalities.
2. For short texts with typos and ambiguous content-dependent meanings: Vector search excels in situations where the search queries are short, contain typos, or have ambiguous meanings.
3. Specialized domains with tuned encoder models: Vector search is beneficial in specialized domains where encoder models can be fine-tuned for better search results.
4. Document-as-a-Query similarity search: Vector search allows for similarity searches where the entire document can be used as a query to find similar documents.

While vector search offers these advantages, it is important to note that keyword-based search still has its relevance in certain cases. For example, in out-of-domain search.","[""preprocessing of the documents and queries. Vector search turned out to be a breakthrough, as it has\n\nsome clear advantages in the following scenarios:\n\n\n\n- 🌍 Multi-lingual & multi-modal search\n\n- 🤔 For short texts with typos and ambiguous content-dependent meanings\n\n- 👨\u200d🔬 Specialized domains with tuned encoder models\n\n- 📄 Document-as-a-Query similarity search\n\n\n\nIt doesn't mean we do not keyword search anymore. There are also some cases in which this kind of method\n\nmight be useful:"", ""are able to benefit the advantages of both methods.\n\n\n\nAgain, it's worth mentioning that with the 3rd experiment, with cross-encoder reranking, Qdrant returned more than 48.12% of \n\nthe relevant items and BM25 around 66.66%.\n\n\n\n## Some anecdotal observations\n\n\n\nNone of the algorithms works better in all the cases. There might be some specific queries in which keyword-based search\n\nwill be a winner and the other way around. The table shows some interesting examples we could find in WANDS dataset"", '## Next Steps\n\n\n\nVector search is an exciting alternative to sparse methods. It solves the issues we had with the keyword-based search without needing to maintain lots of heuristics manually. It requires an additional component, a neural encoder, to convert text into vectors. \n\n\n\n[**Tutorial 1 - Qdrant for Complete Beginners**](../../tutorials/search-beginners)', 'In the open-source world, you pay for the resources you use, not the number of different databases you run.\n\nResources depend more on the optimal solution for each use case.\n\nAs a result, running a dedicated vector search engine can be even cheaper, as it allows optimization specifically for vector search use cases.\n\n\n\nFor instance, Qdrant implements a number of [quantization techniques](documentation/guides/quantization/) that can significantly reduce the memory footprint of embeddings.', 'One of the reasons vector search still works with such a high compression rate is that these large vectors are over-parameterized for retrieval. This is because they are designed for ranking, clustering, and similar use cases, which typically need more information encoded in the vector.']","preprocessing of the documents and queries. Vector search turned out to be a breakthrough, as it has

some clear advantages in the following scenarios:



- 🌍 Multi-lingual & multi-modal search

- 🤔 For short texts with typos and ambiguous content-dependent meanings

- 👨‍🔬 Specialized domains with tuned encoder models

- 📄 Document-as-a-Query similarity search



It doesn't mean we do not keyword search anymore. There are also some cases in which this kind of method

might be useful:
are able to benefit the advantages of both methods.



Again, it's worth mentioning that with the 3rd experiment, with cross-encoder reranking, Qdrant returned more than 48.12% of 

the relevant items and BM25 around 66.66%.



## Some anecdotal observations



None of the algorithms works better in all the cases. There might be some specific queries in which keyword-based search

will be a winner and the other way around. The table shows some interesting examples we could find in WANDS dataset
## Next Steps



Vector search is an exciting alternative to sparse methods. It solves the issues we had with the keyword-based search without needing to maintain lots of heuristics manually. It requires an additional component, a neural encoder, to convert text into vectors. 



[**Tutorial 1 - Qdrant for Complete Beginners**](../../tutorials/search-beginners)
In the open-source world, you pay for the resources you use, not the number of different databases you run.

Resources depend more on the optimal solution for each use case.

As a result, running a dedicated vector search engine can be even cheaper, as it allows optimization specifically for vector search use cases.



For instance, Qdrant implements a number of [quantization techniques](documentation/guides/quantization/) that can significantly reduce the memory footprint of embeddings.
One of the reasons vector search still works with such a high compression rate is that these large vectors are over-parameterized for retrieval. This is because they are designed for ranking, clustering, and similar use cases, which typically need more information encoded in the vector.",0.4297520661157025,0.7172413793103448,0.537467700258398,0.22821576763485477,0.3819444444444444,0.28571428571428575,0.30991735537190085,0.5172413793103449,0.38759689922480617,0.3925619834710744,0.6551724137931034,0.49095607235142125,0.9671492576599121,0.6702627539634705,0.7226755023002625,0.6954830884933472,0.5938413302283152,0.6091841816710907,232,1.669064748201439,0.44802181957497306
True,,2280.761,cf75d54c,What is the purpose of the DocArray library and how does it relate to the Qdrant engine?,"The DocArray library is designed to define a structure for unstructured data, making it easier to process a collection of documents that may include various data types such as audio, video, and text. This library simplifies the handling of these diverse types of data within a single framework. On the other hand, the Qdrant engine focuses on enabling the scaling of vector search and storage capabilities. By integrating the DocArray library with the Qdrant engine, users can benefit from efficient processing of unstructured data and enhanced scalability for vector search operations. This integration streamlines the handling of different data types while also optimizing the performance of vector search and storage functions.","The purpose of the DocArray library is to define a structure for unstructured data and simplify the processing of a collection of documents, including various data types such as audio, video, text, and more. It provides a Pythonic API for deep-learning engineers to efficiently process, embed, search, recommend, store, and transfer data.

The integration of the Qdrant engine with the DocArray library allows for scalable vector search and storage capabilities. Qdrant serves as a high-performance document store within the DocArray framework, enabling users to experience the convenience of a Pythonic API combined with the performance of the Qdrant engine for their data processing needs.","DocArray library defines a structure for the unstructured data and simplifies processing a collection of documents,

including audio, video, text, and other data types. Qdrant engine empowers scaling of its vector search and storage.



Read more about the integration by this [link](/documentation/install/#docarray)
---

title: DocArray

weight: 300

aliases: [ ../integrations/docarray/ ]

---



# DocArray

You can use Qdrant natively in DocArray, where Qdrant serves as a high-performance document store to enable scalable vector search.



DocArray is a library from Jina AI for nested, unstructured data in transit, including text, image, audio, video, 3D mesh, etc.

It allows deep-learning engineers to efficiently process, embed, search, recommend, store, and transfer the data with a Pythonic API.
date: 2022-03-15T15:00:00+03:00

author: Alyona Kavyerina

featured: false

author_link: https://medium.com/@alyona.kavyerina

tags:

  - jina integration

  - docarray

categories:

  - News

---

We are happy to announce that [Jina.AI](https://jina.ai/) integrates Qdrant engine as a storage backend to their [DocArray](https://docarray.jina.ai/) solution.



Now you can experience the convenience of Pythonic API and Rust performance in a single workflow.
WITH ENGINE = ""qdrant"",

PARAMETERS = {

    ""location"": "":memory:"",

    ""collection_config"": {

        ""size"": 386,

        ""distance"": ""Cosine""

    }

}

```



The available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).



## Creating a new table
```python

from qdrant_client import QdrantClient, models

from nomic import embed



output = embed.text(

    texts=[""Qdrant is the best vector database!""],

    model=""nomic-embed-text-v1"",

    task_type=""search_document"",

)



qdrant_client = QdrantClient()

qdrant_client.upsert(

    collection_name=""my-collection"",

    points=models.Batch(

        ids=[1],

        vectors=output[""embeddings""],

    ),

)

```



To query the collection, set the `task_type` to `search_query`:



```python","['DocArray library defines a structure for the unstructured data and simplifies processing a collection of documents,\n\nincluding audio, video, text, and other data types. Qdrant engine empowers scaling of its vector search and storage.\n\n\n\nRead more about the integration by this [link](/documentation/install/#docarray)', '---\n\ntitle: DocArray\n\nweight: 300\n\naliases: [ ../integrations/docarray/ ]\n\n---\n\n\n\n# DocArray\n\nYou can use Qdrant natively in DocArray, where Qdrant serves as a high-performance document store to enable scalable vector search.\n\n\n\nDocArray is a library from Jina AI for nested, unstructured data in transit, including text, image, audio, video, 3D mesh, etc.\n\nIt allows deep-learning engineers to efficiently process, embed, search, recommend, store, and transfer the data with a Pythonic API.', 'date: 2022-03-15T15:00:00+03:00\n\nauthor: Alyona Kavyerina\n\nfeatured: false\n\nauthor_link: https://medium.com/@alyona.kavyerina\n\ntags:\n\n  - jina integration\n\n  - docarray\n\ncategories:\n\n  - News\n\n---\n\nWe are happy to announce that [Jina.AI](https://jina.ai/) integrates Qdrant engine as a storage backend to their [DocArray](https://docarray.jina.ai/) solution.\n\n\n\nNow you can experience the convenience of Pythonic API and Rust performance in a single workflow.', 'WITH ENGINE = ""qdrant"",\n\nPARAMETERS = {\n\n    ""location"": "":memory:"",\n\n    ""collection_config"": {\n\n        ""size"": 386,\n\n        ""distance"": ""Cosine""\n\n    }\n\n}\n\n```\n\n\n\nThe available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).\n\n\n\n## Creating a new table', '```python\n\nfrom qdrant_client import QdrantClient, models\n\nfrom nomic import embed\n\n\n\noutput = embed.text(\n\n    texts=[""Qdrant is the best vector database!""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_document"",\n\n)\n\n\n\nqdrant_client = QdrantClient()\n\nqdrant_client.upsert(\n\n    collection_name=""my-collection"",\n\n    points=models.Batch(\n\n        ids=[1],\n\n        vectors=output[""embeddings""],\n\n    ),\n\n)\n\n```\n\n\n\nTo query the collection, set the `task_type` to `search_query`:\n\n\n\n```python']","Question: What is the purpose of the DocArray library and how does it relate to the Qdrant engine?\n\nContext: DocArray library defines a structure for the unstructured data and simplifies processing a collection of documents,

including audio, video, text, and other data types. Qdrant engine empowers scaling of its vector search and storage.



Read more about the integration by this [link](/documentation/install/#docarray)
---

title: DocArray

weight: 300

aliases: [ ../integrations/docarray/ ]

---



# DocArray

You can use Qdrant natively in DocArray, where Qdrant serves as a high-performance document store to enable scalable vector search.



DocArray is a library from Jina AI for nested, unstructured data in transit, including text, image, audio, video, 3D mesh, etc.

It allows deep-learning engineers to efficiently process, embed, search, recommend, store, and transfer the data with a Pythonic API.
date: 2022-03-15T15:00:00+03:00

author: Alyona Kavyerina

featured: false

author_link: https://medium.com/@alyona.kavyerina

tags:

- jina integration

- docarray

categories:

- News

---

We are happy to announce that [Jina.AI](https://jina.ai/) integrates Qdrant engine as a storage backend to their [DocArray](https://docarray.jina.ai/) solution.



Now you can experience the convenience of Pythonic API and Rust performance in a single workflow.
WITH ENGINE = ""qdrant"",

PARAMETERS = {

""location"": "":memory:"",

""collection_config"": {

""size"": 386,

""distance"": ""Cosine""

}

}

```



The available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).



## Creating a new table
```python

from qdrant_client import QdrantClient, models

from nomic import embed



output = embed.text(

texts=[""Qdrant is the best vector database!""],

model=""nomic-embed-text-v1"",

task_type=""search_document"",

)



qdrant_client = QdrantClient()

qdrant_client.upsert(

collection_name=""my-collection"",

points=models.Batch(

ids=[1],

vectors=output[""embeddings""],

),

)

```



To query the collection, set the `task_type` to `search_query`:



```python\n\nAnswer:",What is the purpose of the DocArray library and how does it relate to the Qdrant engine?,"The DocArray library is designed to define a structure for unstructured data, making it easier to process a collection of documents that may include various data types such as audio, video, and text. This library simplifies the handling of these diverse types of data within a single framework. On the other hand, the Qdrant engine focuses on enabling the scaling of vector search and storage capabilities. By integrating the DocArray library with the Qdrant engine, users can benefit from efficient processing of unstructured data and enhanced scalability for vector search operations. This integration streamlines the handling of different data types while also optimizing the performance of vector search and storage functions.","['DocArray library defines a structure for the unstructured data and simplifies processing a collection of documents,\n\nincluding audio, video, text, and other data types. Qdrant engine empowers scaling of its vector search and storage.\n\n\n\nRead more about the integration by this [link](/documentation/install/#docarray)', '---\n\ntitle: DocArray\n\nweight: 300\n\naliases: [ ../integrations/docarray/ ]\n\n---\n\n\n\n# DocArray\n\nYou can use Qdrant natively in DocArray, where Qdrant serves as a high-performance document store to enable scalable vector search.\n\n\n\nDocArray is a library from Jina AI for nested, unstructured data in transit, including text, image, audio, video, 3D mesh, etc.\n\nIt allows deep-learning engineers to efficiently process, embed, search, recommend, store, and transfer the data with a Pythonic API.', 'date: 2022-03-15T15:00:00+03:00\n\nauthor: Alyona Kavyerina\n\nfeatured: false\n\nauthor_link: https://medium.com/@alyona.kavyerina\n\ntags:\n\n  - jina integration\n\n  - docarray\n\ncategories:\n\n  - News\n\n---\n\nWe are happy to announce that [Jina.AI](https://jina.ai/) integrates Qdrant engine as a storage backend to their [DocArray](https://docarray.jina.ai/) solution.\n\n\n\nNow you can experience the convenience of Pythonic API and Rust performance in a single workflow.', 'WITH ENGINE = ""qdrant"",\n\nPARAMETERS = {\n\n    ""location"": "":memory:"",\n\n    ""collection_config"": {\n\n        ""size"": 386,\n\n        ""distance"": ""Cosine""\n\n    }\n\n}\n\n```\n\n\n\nThe available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).\n\n\n\n## Creating a new table', '```python\n\nfrom qdrant_client import QdrantClient, models\n\nfrom nomic import embed\n\n\n\noutput = embed.text(\n\n    texts=[""Qdrant is the best vector database!""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_document"",\n\n)\n\n\n\nqdrant_client = QdrantClient()\n\nqdrant_client.upsert(\n\n    collection_name=""my-collection"",\n\n    points=models.Batch(\n\n        ids=[1],\n\n        vectors=output[""embeddings""],\n\n    ),\n\n)\n\n```\n\n\n\nTo query the collection, set the `task_type` to `search_query`:\n\n\n\n```python']","DocArray library defines a structure for the unstructured data and simplifies processing a collection of documents,

including audio, video, text, and other data types. Qdrant engine empowers scaling of its vector search and storage.



Read more about the integration by this [link](/documentation/install/#docarray)
---

title: DocArray

weight: 300

aliases: [ ../integrations/docarray/ ]

---



# DocArray

You can use Qdrant natively in DocArray, where Qdrant serves as a high-performance document store to enable scalable vector search.



DocArray is a library from Jina AI for nested, unstructured data in transit, including text, image, audio, video, 3D mesh, etc.

It allows deep-learning engineers to efficiently process, embed, search, recommend, store, and transfer the data with a Pythonic API.
date: 2022-03-15T15:00:00+03:00

author: Alyona Kavyerina

featured: false

author_link: https://medium.com/@alyona.kavyerina

tags:

  - jina integration

  - docarray

categories:

  - News

---

We are happy to announce that [Jina.AI](https://jina.ai/) integrates Qdrant engine as a storage backend to their [DocArray](https://docarray.jina.ai/) solution.



Now you can experience the convenience of Pythonic API and Rust performance in a single workflow.
WITH ENGINE = ""qdrant"",

PARAMETERS = {

    ""location"": "":memory:"",

    ""collection_config"": {

        ""size"": 386,

        ""distance"": ""Cosine""

    }

}

```



The available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).



## Creating a new table
```python

from qdrant_client import QdrantClient, models

from nomic import embed



output = embed.text(

    texts=[""Qdrant is the best vector database!""],

    model=""nomic-embed-text-v1"",

    task_type=""search_document"",

)



qdrant_client = QdrantClient()

qdrant_client.upsert(

    collection_name=""my-collection"",

    points=models.Batch(

        ids=[1],

        vectors=output[""embeddings""],

    ),

)

```



To query the collection, set the `task_type` to `search_query`:



```python",0.6373626373626373,0.5858585858585859,0.6105263157894737,0.3,0.2755102040816326,0.28723404255319146,0.3956043956043956,0.36363636363636365,0.3789473684210526,0.5714285714285714,0.5252525252525253,0.5473684210526316,0.8446837663650513,0.6989571452140808,0.6951662302017212,0.6970565319061279,0.9821431557647884,0.9644495218293742,104,0.9369369369369369,0.5632007755015705
True,,3709.4049999999997,ab76b42e,What are the search-time parameters that can be used to tune the search accuracy and speed?,"The search-time parameters that can be used to tune the search accuracy and speed are ""hnsw_ef"" and ""exact"". The ""hnsw_ef"" parameter is set to 128, which controls the search accuracy by specifying the number of neighbors to inspect during the search process. The ""exact"" parameter is set to false, indicating that an approximate search method is used for faster retrieval of results. These parameters are essential for optimizing the search process in the context of the QdrantClient for efficient retrieval of relevant data points.","Search-time parameters that can be used to tune the search accuracy and speed include:

1. **Exact Search**: Setting the `exact` parameter to `true` will perform exact search, which may be slower but more accurate. This can be useful to compare search results with different parameters like `hnsw_ef`.

2. **Latency vs Throughput**: There are two main approaches to measure the speed of search - latency of the request (time from submission to response) and throughput (number of requests per second). Balancing these metrics is crucial for optimizing search performance.

3. **Disk Speed**: Analyzing disk parameters and their impact on search speed is important. Tools like `fio` can be used to measure disk speed, which can influence the overall search performance.

4. **Dimensionality of Vectors**: Higher dimensionality of vectors may result in lower precision loss during search. Understanding the trade-offs between precision and speed based on vector dimensionality is key to optimizing search parameters.","collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },

	optimizersConfig: new OptimizersConfigDiff { MemmapThreshold = 20000 },

	quantizationConfig: new QuantizationConfig

	{

		Scalar = new ScalarQuantization { Type = QuantizationType.Int8, AlwaysRam = true }

	}

);

```



There are also some search-time parameters you can use to tune the search accuracy and speed:



```http

POST /collections/{collection_name}/points/search

{
. And that's how we can basically control accuracy without rebuilding index, without changing any kind of parameters inside the stored data structures. But we can do it real time in just one parameter change of the search query itself.
- `exact` - if set to `true`, will perform exact search, which will be slower, but more accurate. You can use it to compare results of the search with different `hnsw_ef` values versus the ground truth.



## Latency vs Throughput



- There are two main approaches to measure the speed of search:

  - latency of the request - the time from the moment request is submitted to the moment a response is received

  - throughput - the number of requests per second the system can handle
We can serve the search requests with 135mb of RAM, but the speed of the requests makes it impossible to use the system in production.



Let's see how we can improve the speed.





## How to speed up the search





<!--

We need to look into disk parameters and see how they affect the search speed.



Let's measure the disk speed with `fio`:



```

fio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=fiotest --filename=testfio --bs=4k --iodepth=64 --size=8G --readwrite=randread

```
<td><span style=""color: green;"">-41,56%</span></td>

      </tr>

   </tbody>

</table>



In all the cases, the decrease in search precision is negligible, but we keep a latency 

reduction of at least 28.57%, even up to 60,64%, while searching. As a rule of thumb,

the higher the dimensionality of the vectors, the lower the precision loss.



### Oversampling and Rescoring","['collectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },\n\n\toptimizersConfig: new OptimizersConfigDiff { MemmapThreshold = 20000 },\n\n\tquantizationConfig: new QuantizationConfig\n\n\t{\n\n\t\tScalar = new ScalarQuantization { Type = QuantizationType.Int8, AlwaysRam = true }\n\n\t}\n\n);\n\n```\n\n\n\nThere are also some search-time parameters you can use to tune the search accuracy and speed:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/search\n\n{', "". And that's how we can basically control accuracy without rebuilding index, without changing any kind of parameters inside the stored data structures. But we can do it real time in just one parameter change of the search query itself."", '- `exact` - if set to `true`, will perform exact search, which will be slower, but more accurate. You can use it to compare results of the search with different `hnsw_ef` values versus the ground truth.\n\n\n\n## Latency vs Throughput\n\n\n\n- There are two main approaches to measure the speed of search:\n\n  - latency of the request - the time from the moment request is submitted to the moment a response is received\n\n  - throughput - the number of requests per second the system can handle', ""We can serve the search requests with 135mb of RAM, but the speed of the requests makes it impossible to use the system in production.\n\n\n\nLet's see how we can improve the speed.\n\n\n\n\n\n## How to speed up the search\n\n\n\n\n\n<!--\n\nWe need to look into disk parameters and see how they affect the search speed.\n\n\n\nLet's measure the disk speed with `fio`:\n\n\n\n```\n\nfio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=fiotest --filename=testfio --bs=4k --iodepth=64 --size=8G --readwrite=randread\n\n```"", '<td><span style=""color: green;"">-41,56%</span></td>\n\n      </tr>\n\n   </tbody>\n\n</table>\n\n\n\nIn all the cases, the decrease in search precision is negligible, but we keep a latency \n\nreduction of at least 28.57%, even up to 60,64%, while searching. As a rule of thumb,\n\nthe higher the dimensionality of the vectors, the lower the precision loss.\n\n\n\n### Oversampling and Rescoring']","Question: What are the search-time parameters that can be used to tune the search accuracy and speed?\n\nContext: collectionName: ""{collection_name}"",

vectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },

optimizersConfig: new OptimizersConfigDiff { MemmapThreshold = 20000 },

quantizationConfig: new QuantizationConfig

{

Scalar = new ScalarQuantization { Type = QuantizationType.Int8, AlwaysRam = true }

}

);

```



There are also some search-time parameters you can use to tune the search accuracy and speed:



```http

POST /collections/{collection_name}/points/search

{
. And that's how we can basically control accuracy without rebuilding index, without changing any kind of parameters inside the stored data structures. But we can do it real time in just one parameter change of the search query itself.
- `exact` - if set to `true`, will perform exact search, which will be slower, but more accurate. You can use it to compare results of the search with different `hnsw_ef` values versus the ground truth.



## Latency vs Throughput



- There are two main approaches to measure the speed of search:

- latency of the request - the time from the moment request is submitted to the moment a response is received

- throughput - the number of requests per second the system can handle
We can serve the search requests with 135mb of RAM, but the speed of the requests makes it impossible to use the system in production.



Let's see how we can improve the speed.





## How to speed up the search





<!--

We need to look into disk parameters and see how they affect the search speed.



Let's measure the disk speed with `fio`:



```

fio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=fiotest --filename=testfio --bs=4k --iodepth=64 --size=8G --readwrite=randread

```
<td><span style=""color: green;"">-41,56%</span></td>

</tr>

</tbody>

</table>



In all the cases, the decrease in search precision is negligible, but we keep a latency 

reduction of at least 28.57%, even up to 60,64%, while searching. As a rule of thumb,

the higher the dimensionality of the vectors, the lower the precision loss.



### Oversampling and Rescoring\n\nAnswer:",What are the search-time parameters that can be used to tune the search accuracy and speed?,"The search-time parameters that can be used to tune the search accuracy and speed are ""hnsw_ef"" and ""exact"". The ""hnsw_ef"" parameter is set to 128, which controls the search accuracy by specifying the number of neighbors to inspect during the search process. The ""exact"" parameter is set to false, indicating that an approximate search method is used for faster retrieval of results. These parameters are essential for optimizing the search process in the context of the QdrantClient for efficient retrieval of relevant data points.","['collectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },\n\n\toptimizersConfig: new OptimizersConfigDiff { MemmapThreshold = 20000 },\n\n\tquantizationConfig: new QuantizationConfig\n\n\t{\n\n\t\tScalar = new ScalarQuantization { Type = QuantizationType.Int8, AlwaysRam = true }\n\n\t}\n\n);\n\n```\n\n\n\nThere are also some search-time parameters you can use to tune the search accuracy and speed:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/search\n\n{', "". And that's how we can basically control accuracy without rebuilding index, without changing any kind of parameters inside the stored data structures. But we can do it real time in just one parameter change of the search query itself."", '- `exact` - if set to `true`, will perform exact search, which will be slower, but more accurate. You can use it to compare results of the search with different `hnsw_ef` values versus the ground truth.\n\n\n\n## Latency vs Throughput\n\n\n\n- There are two main approaches to measure the speed of search:\n\n  - latency of the request - the time from the moment request is submitted to the moment a response is received\n\n  - throughput - the number of requests per second the system can handle', ""We can serve the search requests with 135mb of RAM, but the speed of the requests makes it impossible to use the system in production.\n\n\n\nLet's see how we can improve the speed.\n\n\n\n\n\n## How to speed up the search\n\n\n\n\n\n<!--\n\nWe need to look into disk parameters and see how they affect the search speed.\n\n\n\nLet's measure the disk speed with `fio`:\n\n\n\n```\n\nfio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=fiotest --filename=testfio --bs=4k --iodepth=64 --size=8G --readwrite=randread\n\n```"", '<td><span style=""color: green;"">-41,56%</span></td>\n\n      </tr>\n\n   </tbody>\n\n</table>\n\n\n\nIn all the cases, the decrease in search precision is negligible, but we keep a latency \n\nreduction of at least 28.57%, even up to 60,64%, while searching. As a rule of thumb,\n\nthe higher the dimensionality of the vectors, the lower the precision loss.\n\n\n\n### Oversampling and Rescoring']","collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 768, Distance = Distance.Cosine },

	optimizersConfig: new OptimizersConfigDiff { MemmapThreshold = 20000 },

	quantizationConfig: new QuantizationConfig

	{

		Scalar = new ScalarQuantization { Type = QuantizationType.Int8, AlwaysRam = true }

	}

);

```



There are also some search-time parameters you can use to tune the search accuracy and speed:



```http

POST /collections/{collection_name}/points/search

{
. And that's how we can basically control accuracy without rebuilding index, without changing any kind of parameters inside the stored data structures. But we can do it real time in just one parameter change of the search query itself.
- `exact` - if set to `true`, will perform exact search, which will be slower, but more accurate. You can use it to compare results of the search with different `hnsw_ef` values versus the ground truth.



## Latency vs Throughput



- There are two main approaches to measure the speed of search:

  - latency of the request - the time from the moment request is submitted to the moment a response is received

  - throughput - the number of requests per second the system can handle
We can serve the search requests with 135mb of RAM, but the speed of the requests makes it impossible to use the system in production.



Let's see how we can improve the speed.





## How to speed up the search





<!--

We need to look into disk parameters and see how they affect the search speed.



Let's measure the disk speed with `fio`:



```

fio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=fiotest --filename=testfio --bs=4k --iodepth=64 --size=8G --readwrite=randread

```
<td><span style=""color: green;"">-41,56%</span></td>

      </tr>

   </tbody>

</table>



In all the cases, the decrease in search precision is negligible, but we keep a latency 

reduction of at least 28.57%, even up to 60,64%, while searching. As a rule of thumb,

the higher the dimensionality of the vectors, the lower the precision loss.



### Oversampling and Rescoring",0.3108108108108108,0.6052631578947368,0.4107142857142857,0.12244897959183673,0.24,0.16216216216216214,0.19594594594594594,0.3815789473684211,0.2589285714285714,0.2702702702702703,0.5263157894736842,0.35714285714285715,0.7087720632553101,0.6075961589813232,0.6571903228759766,0.631420910358429,0.6879184652449719,0.4907180331647396,151,1.7976190476190477,0.3998700477279746
True,,3752.327,f22780af,What is the significance of using named vectors in a collection within the Qdrant system?,"Named vectors in a collection within the Qdrant system allow for the inclusion of multiple vectors in a single point, with each vector having its own dimensionality and metric requirements. This feature enables more flexibility in organizing and structuring data within a collection, as different vectors can represent distinct aspects or features of the data points. By utilizing named vectors, users can better tailor the representation of their data to suit specific analysis or search requirements, enhancing the overall efficiency and effectiveness of the system.","Named vectors in a collection within the Qdrant system hold significance as they allow for easier identification and organization of data. By assigning names to vectors, users can efficiently reference and manipulate specific vectors within a collection, enhancing the overall manageability and usability of the data.

In the context of the Qdrant system, using named vectors in a collection enables users to provide data for each vector using the vector's designated name. This approach streamlines the process of working with multiple vectors within a single collection, as it allows for clear delineation and access to individual vectors based on their names.

Additionally, named vectors facilitate data consistency and accuracy within the collection by ensuring that each vector is uniquely identified and associated with the correct data. This helps maintain the integrity of the dataset and supports more precise operations such as searching, retrieval, and analysis of specific vectors.

Overall, the use of named vectors in a collection within the Qdrant system enhances organizational efficiency, data management capabilities, and the overall functionality of the system for storing and working with multiple vectors effectively.","Even with such a system, Qdrant ensures data consistency.



[*Available as of v0.10.0*](#create-vector-name)



If the collection was created with multiple vectors, each vector data can be provided using the vector's name:



```http

PUT /collections/{collection_name}/points

{

    ""points"": [

        {

            ""id"": 1,

            ""vector"": {

                ""image"": [0.9, 0.1, 0.1, 0.2],

                ""text"": [0.4, 0.7, 0.1, 0.8, 0.1, 0.1, 0.9, 0.2]

            }

        },

        {
```



## Creating a collection



Adding new functionalities typically requires making some changes to the interfaces, so no surprise we had to do it to enable the multiple vectors support. Currently, if you want to create a collection, you need to define the configuration of all the vectors you want to store for each object. Each vector type has its own name and the distance function used to measure how far the points are.



```python

from qdrant_client import QdrantClient
PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""hnsw_config"": {

        ""on_disk"": true

    }

}

```



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),
. In that case, the Python client for Qdrant also provides a parameter called exact, and if we specify it as true, then it basically does not use indexing and it makes a full search on the whole vector collection, basically.
collection_name=""MyCollection"",

    vectors_config=VectorParams(size=EMBEDDING_SIZE, distance=Distance.DOT),

)





qdrant_client.upsert(

    collection_name=""MyCollection"",

    points=Batch(

        ids=list(range(len(embeddings))),

        vectors=embeddings,

    ),

)



```","['Even with such a system, Qdrant ensures data consistency.\n\n\n\n[*Available as of v0.10.0*](#create-vector-name)\n\n\n\nIf the collection was created with multiple vectors, each vector data can be provided using the vector\'s name:\n\n\n\n```http\n\nPUT /collections/{collection_name}/points\n\n{\n\n    ""points"": [\n\n        {\n\n            ""id"": 1,\n\n            ""vector"": {\n\n                ""image"": [0.9, 0.1, 0.1, 0.2],\n\n                ""text"": [0.4, 0.7, 0.1, 0.8, 0.1, 0.1, 0.9, 0.2]\n\n            }\n\n        },\n\n        {', '```\n\n\n\n## Creating a collection\n\n\n\nAdding new functionalities typically requires making some changes to the interfaces, so no surprise we had to do it to enable the multiple vectors support. Currently, if you want to create a collection, you need to define the configuration of all the vectors you want to store for each object. Each vector type has its own name and the distance function used to measure how far the points are.\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient', 'PUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""hnsw_config"": {\n\n        ""on_disk"": true\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),', '. In that case, the Python client for Qdrant also provides a parameter called exact, and if we specify it as true, then it basically does not use indexing and it makes a full search on the whole vector collection, basically.', 'collection_name=""MyCollection"",\n\n    vectors_config=VectorParams(size=EMBEDDING_SIZE, distance=Distance.DOT),\n\n)\n\n\n\n\n\nqdrant_client.upsert(\n\n    collection_name=""MyCollection"",\n\n    points=Batch(\n\n        ids=list(range(len(embeddings))),\n\n        vectors=embeddings,\n\n    ),\n\n)\n\n\n\n```']","Question: What is the significance of using named vectors in a collection within the Qdrant system?\n\nContext: Even with such a system, Qdrant ensures data consistency.



[*Available as of v0.10.0*](#create-vector-name)



If the collection was created with multiple vectors, each vector data can be provided using the vector's name:



```http

PUT /collections/{collection_name}/points

{

""points"": [

{

""id"": 1,

""vector"": {

""image"": [0.9, 0.1, 0.1, 0.2],

""text"": [0.4, 0.7, 0.1, 0.8, 0.1, 0.1, 0.9, 0.2]

}

},

{
```



## Creating a collection



Adding new functionalities typically requires making some changes to the interfaces, so no surprise we had to do it to enable the multiple vectors support. Currently, if you want to create a collection, you need to define the configuration of all the vectors you want to store for each object. Each vector type has its own name and the distance function used to measure how far the points are.



```python

from qdrant_client import QdrantClient
PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,

""distance"": ""Cosine""

},

""optimizers_config"": {

""memmap_threshold"": 20000

},

""hnsw_config"": {

""on_disk"": true

}

}

```



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

collection_name=""{collection_name}"",

vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),
. In that case, the Python client for Qdrant also provides a parameter called exact, and if we specify it as true, then it basically does not use indexing and it makes a full search on the whole vector collection, basically.
collection_name=""MyCollection"",

vectors_config=VectorParams(size=EMBEDDING_SIZE, distance=Distance.DOT),

)





qdrant_client.upsert(

collection_name=""MyCollection"",

points=Batch(

ids=list(range(len(embeddings))),

vectors=embeddings,

),

)



```\n\nAnswer:",What is the significance of using named vectors in a collection within the Qdrant system?,"Named vectors in a collection within the Qdrant system allow for the inclusion of multiple vectors in a single point, with each vector having its own dimensionality and metric requirements. This feature enables more flexibility in organizing and structuring data within a collection, as different vectors can represent distinct aspects or features of the data points. By utilizing named vectors, users can better tailor the representation of their data to suit specific analysis or search requirements, enhancing the overall efficiency and effectiveness of the system.","['Even with such a system, Qdrant ensures data consistency.\n\n\n\n[*Available as of v0.10.0*](#create-vector-name)\n\n\n\nIf the collection was created with multiple vectors, each vector data can be provided using the vector\'s name:\n\n\n\n```http\n\nPUT /collections/{collection_name}/points\n\n{\n\n    ""points"": [\n\n        {\n\n            ""id"": 1,\n\n            ""vector"": {\n\n                ""image"": [0.9, 0.1, 0.1, 0.2],\n\n                ""text"": [0.4, 0.7, 0.1, 0.8, 0.1, 0.1, 0.9, 0.2]\n\n            }\n\n        },\n\n        {', '```\n\n\n\n## Creating a collection\n\n\n\nAdding new functionalities typically requires making some changes to the interfaces, so no surprise we had to do it to enable the multiple vectors support. Currently, if you want to create a collection, you need to define the configuration of all the vectors you want to store for each object. Each vector type has its own name and the distance function used to measure how far the points are.\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient', 'PUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""hnsw_config"": {\n\n        ""on_disk"": true\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),', '. In that case, the Python client for Qdrant also provides a parameter called exact, and if we specify it as true, then it basically does not use indexing and it makes a full search on the whole vector collection, basically.', 'collection_name=""MyCollection"",\n\n    vectors_config=VectorParams(size=EMBEDDING_SIZE, distance=Distance.DOT),\n\n)\n\n\n\n\n\nqdrant_client.upsert(\n\n    collection_name=""MyCollection"",\n\n    points=Batch(\n\n        ids=list(range(len(embeddings))),\n\n        vectors=embeddings,\n\n    ),\n\n)\n\n\n\n```']","Even with such a system, Qdrant ensures data consistency.



[*Available as of v0.10.0*](#create-vector-name)



If the collection was created with multiple vectors, each vector data can be provided using the vector's name:



```http

PUT /collections/{collection_name}/points

{

    ""points"": [

        {

            ""id"": 1,

            ""vector"": {

                ""image"": [0.9, 0.1, 0.1, 0.2],

                ""text"": [0.4, 0.7, 0.1, 0.8, 0.1, 0.1, 0.9, 0.2]

            }

        },

        {
```



## Creating a collection



Adding new functionalities typically requires making some changes to the interfaces, so no surprise we had to do it to enable the multiple vectors support. Currently, if you want to create a collection, you need to define the configuration of all the vectors you want to store for each object. Each vector type has its own name and the distance function used to measure how far the points are.



```python

from qdrant_client import QdrantClient
PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""hnsw_config"": {

        ""on_disk"": true

    }

}

```



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),
. In that case, the Python client for Qdrant also provides a parameter called exact, and if we specify it as true, then it basically does not use indexing and it makes a full search on the whole vector collection, basically.
collection_name=""MyCollection"",

    vectors_config=VectorParams(size=EMBEDDING_SIZE, distance=Distance.DOT),

)





qdrant_client.upsert(

    collection_name=""MyCollection"",

    points=Batch(

        ids=list(range(len(embeddings))),

        vectors=embeddings,

    ),

)



```",0.3067484662576687,0.6578947368421053,0.41841004184100417,0.1111111111111111,0.24,0.1518987341772152,0.17791411042944785,0.3815789473684211,0.24267782426778242,0.26380368098159507,0.5657894736842105,0.35983263598326365,0.9049480557441711,0.6484321355819702,0.677942156791687,0.6628588438034058,0.9653639661264606,0.9604866473625103,183,2.152941176470588,0.35357048554312825
True,,5295.063,8bce6da2,What parameters can be configured in the configuration file to improve performance in HNSW indexing?,"In the context of HNSW indexing, the parameters that can be configured in the configuration file to enhance performance are `m`, `ef_construct`, and `ef`. 

- `m`: This parameter represents the number of edges per node in the index graph. A higher value for `m` leads to more accurate search results but also requires more space. By adjusting `m`, you can control the trade-off between search accuracy and space efficiency.

- `ef_construct`: When building the index, `ef_construct` specifies the number of neighbors to consider. Increasing the value of `ef_construct` improves the accuracy of the search but also increases the time required to build the index. 

- `ef`: This parameter is used when searching for targets. It determines the search range for finding nearest neighbors. By setting an appropriate value for `ef`, you can optimize the search process to balance efficiency and accuracy in finding the nearest neighbors within the specified search range.","To improve performance in HNSW indexing, the following parameters can be configured in the configuration file:

1. `m`: This parameter controls the maximum number of neighbors for each node in the graph. Increasing the value of `m` can improve search precision but may also increase memory usage.

2. `ef_construct`: This parameter sets the size of the dynamic list for the nearest neighbors during the construction of the index. Increasing `ef_construct` can improve search quality but will also increase the time it takes to construct the index.

3. `payload_m`: This parameter can be set to a non-zero value to enable payload support in the HNSW index. This can be beneficial in scenarios where additional data needs to be associated with each vector.

4. `on_disk`: By setting this parameter to true, you can store parts of the index on disk instead of keeping everything in memory. This can be helpful when dealing with large datasets that do not fit entirely in memory.

5. `indexing_threshold`: This parameter determines when a new index segment is built based on the size of non-indexed vectors. Adjusting this parameter can optimize the indexing process for different collection sizes and vector dimensionalities.

By configuring these parameters appropriately in the HNSW configuration file, you can fine-tune the performance of the indexing process to meet your specific requirements.","hnswConfig: new HnswConfigDiff { OnDisk = true }

);

```



In this scenario you can increase the precision of the search by increasing the `ef` and `m` parameters of the HNSW index, even with limited RAM.



```json

...

""hnsw_config"": {

    ""m"": 64,

    ""ef_construct"": 512,

    ""on_disk"": true

}

...

```



The disk IOPS is a critical factor in this scenario, it will determine how fast you can perform search.
queries will be executed on the whole collection, we can also change its configuration, so the HNSW 

graph is not built globally. This is also done due to [performance reasons](/documentation/guides/multiple-partitions/#calibrate-performance).

**You should not be changing these parameters, if you know there will be some global search operations

done on the collection.**



```python

client.update_collection(

    collection_name=""my_collection"",
To implement this approach, you should:



1. Set `payload_m` in the HNSW configuration to a non-zero value, such as 16.

2. Set `m` in hnsw config to 0. This will disable building global index for the whole collection.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""hnsw_config"": {

        ""payload_m"": 16,

        ""m"": 0

    }

}

```



```python

from qdrant_client import QdrantClient, models
### Indexing vectors in HNSW



In some cases, you might be surprised the value of `indexed_vectors_count` is lower than `vectors_count`. This is an intended behaviour and

depends on the [optimizer configuration](../optimizer). A new index segment is built if the size of non-indexed vectors is higher than the

value of `indexing_threshold`(in kB).  If your collection is very small or the dimensionality of the vectors is low, there might be no HNSW segment
see how it affects the precision. Of course, we need to wait until the indexing is finished before we can perform the search.



```python

client.update_collection(

    collection_name=""arxiv-titles-instructorxl-embeddings"",

    hnsw_config=models.HnswConfigDiff(

        m=32,  # Increase the number of edges per node from the default 16 to 32

        ef_construct=200,  # Increase the number of neighbours from the default 100 to 200

    )

)



while True:","['hnswConfig: new HnswConfigDiff { OnDisk = true }\n\n);\n\n```\n\n\n\nIn this scenario you can increase the precision of the search by increasing the `ef` and `m` parameters of the HNSW index, even with limited RAM.\n\n\n\n```json\n\n...\n\n""hnsw_config"": {\n\n    ""m"": 64,\n\n    ""ef_construct"": 512,\n\n    ""on_disk"": true\n\n}\n\n...\n\n```\n\n\n\nThe disk IOPS is a critical factor in this scenario, it will determine how fast you can perform search.', 'queries will be executed on the whole collection, we can also change its configuration, so the HNSW \n\ngraph is not built globally. This is also done due to [performance reasons](/documentation/guides/multiple-partitions/#calibrate-performance).\n\n**You should not be changing these parameters, if you know there will be some global search operations\n\ndone on the collection.**\n\n\n\n```python\n\nclient.update_collection(\n\n    collection_name=""my_collection"",', 'To implement this approach, you should:\n\n\n\n1. Set `payload_m` in the HNSW configuration to a non-zero value, such as 16.\n\n2. Set `m` in hnsw config to 0. This will disable building global index for the whole collection.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""hnsw_config"": {\n\n        ""payload_m"": 16,\n\n        ""m"": 0\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models', '### Indexing vectors in HNSW\n\n\n\nIn some cases, you might be surprised the value of `indexed_vectors_count` is lower than `vectors_count`. This is an intended behaviour and\n\ndepends on the [optimizer configuration](../optimizer). A new index segment is built if the size of non-indexed vectors is higher than the\n\nvalue of `indexing_threshold`(in kB).  If your collection is very small or the dimensionality of the vectors is low, there might be no HNSW segment', 'see how it affects the precision. Of course, we need to wait until the indexing is finished before we can perform the search.\n\n\n\n```python\n\nclient.update_collection(\n\n    collection_name=""arxiv-titles-instructorxl-embeddings"",\n\n    hnsw_config=models.HnswConfigDiff(\n\n        m=32,  # Increase the number of edges per node from the default 16 to 32\n\n        ef_construct=200,  # Increase the number of neighbours from the default 100 to 200\n\n    )\n\n)\n\n\n\nwhile True:']","Question: What parameters can be configured in the configuration file to improve performance in HNSW indexing?\n\nContext: hnswConfig: new HnswConfigDiff { OnDisk = true }

);

```



In this scenario you can increase the precision of the search by increasing the `ef` and `m` parameters of the HNSW index, even with limited RAM.



```json

...

""hnsw_config"": {

""m"": 64,

""ef_construct"": 512,

""on_disk"": true

}

...

```



The disk IOPS is a critical factor in this scenario, it will determine how fast you can perform search.
queries will be executed on the whole collection, we can also change its configuration, so the HNSW 

graph is not built globally. This is also done due to [performance reasons](/documentation/guides/multiple-partitions/#calibrate-performance).

**You should not be changing these parameters, if you know there will be some global search operations

done on the collection.**



```python

client.update_collection(

collection_name=""my_collection"",
To implement this approach, you should:



1. Set `payload_m` in the HNSW configuration to a non-zero value, such as 16.

2. Set `m` in hnsw config to 0. This will disable building global index for the whole collection.



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,

""distance"": ""Cosine""

},

""hnsw_config"": {

""payload_m"": 16,

""m"": 0

}

}

```



```python

from qdrant_client import QdrantClient, models
### Indexing vectors in HNSW



In some cases, you might be surprised the value of `indexed_vectors_count` is lower than `vectors_count`. This is an intended behaviour and

depends on the [optimizer configuration](../optimizer). A new index segment is built if the size of non-indexed vectors is higher than the

value of `indexing_threshold`(in kB).  If your collection is very small or the dimensionality of the vectors is low, there might be no HNSW segment
see how it affects the precision. Of course, we need to wait until the indexing is finished before we can perform the search.



```python

client.update_collection(

collection_name=""arxiv-titles-instructorxl-embeddings"",

hnsw_config=models.HnswConfigDiff(

m=32,  # Increase the number of edges per node from the default 16 to 32

ef_construct=200,  # Increase the number of neighbours from the default 100 to 200

)

)



while True:\n\nAnswer:",What parameters can be configured in the configuration file to improve performance in HNSW indexing?,"In the context of HNSW indexing, the parameters that can be configured in the configuration file to enhance performance are `m`, `ef_construct`, and `ef`. 

- `m`: This parameter represents the number of edges per node in the index graph. A higher value for `m` leads to more accurate search results but also requires more space. By adjusting `m`, you can control the trade-off between search accuracy and space efficiency.

- `ef_construct`: When building the index, `ef_construct` specifies the number of neighbors to consider. Increasing the value of `ef_construct` improves the accuracy of the search but also increases the time required to build the index. 

- `ef`: This parameter is used when searching for targets. It determines the search range for finding nearest neighbors. By setting an appropriate value for `ef`, you can optimize the search process to balance efficiency and accuracy in finding the nearest neighbors within the specified search range.","['hnswConfig: new HnswConfigDiff { OnDisk = true }\n\n);\n\n```\n\n\n\nIn this scenario you can increase the precision of the search by increasing the `ef` and `m` parameters of the HNSW index, even with limited RAM.\n\n\n\n```json\n\n...\n\n""hnsw_config"": {\n\n    ""m"": 64,\n\n    ""ef_construct"": 512,\n\n    ""on_disk"": true\n\n}\n\n...\n\n```\n\n\n\nThe disk IOPS is a critical factor in this scenario, it will determine how fast you can perform search.', 'queries will be executed on the whole collection, we can also change its configuration, so the HNSW \n\ngraph is not built globally. This is also done due to [performance reasons](/documentation/guides/multiple-partitions/#calibrate-performance).\n\n**You should not be changing these parameters, if you know there will be some global search operations\n\ndone on the collection.**\n\n\n\n```python\n\nclient.update_collection(\n\n    collection_name=""my_collection"",', 'To implement this approach, you should:\n\n\n\n1. Set `payload_m` in the HNSW configuration to a non-zero value, such as 16.\n\n2. Set `m` in hnsw config to 0. This will disable building global index for the whole collection.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""hnsw_config"": {\n\n        ""payload_m"": 16,\n\n        ""m"": 0\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models', '### Indexing vectors in HNSW\n\n\n\nIn some cases, you might be surprised the value of `indexed_vectors_count` is lower than `vectors_count`. This is an intended behaviour and\n\ndepends on the [optimizer configuration](../optimizer). A new index segment is built if the size of non-indexed vectors is higher than the\n\nvalue of `indexing_threshold`(in kB).  If your collection is very small or the dimensionality of the vectors is low, there might be no HNSW segment', 'see how it affects the precision. Of course, we need to wait until the indexing is finished before we can perform the search.\n\n\n\n```python\n\nclient.update_collection(\n\n    collection_name=""arxiv-titles-instructorxl-embeddings"",\n\n    hnsw_config=models.HnswConfigDiff(\n\n        m=32,  # Increase the number of edges per node from the default 16 to 32\n\n        ef_construct=200,  # Increase the number of neighbours from the default 100 to 200\n\n    )\n\n)\n\n\n\nwhile True:']","hnswConfig: new HnswConfigDiff { OnDisk = true }

);

```



In this scenario you can increase the precision of the search by increasing the `ef` and `m` parameters of the HNSW index, even with limited RAM.



```json

...

""hnsw_config"": {

    ""m"": 64,

    ""ef_construct"": 512,

    ""on_disk"": true

}

...

```



The disk IOPS is a critical factor in this scenario, it will determine how fast you can perform search.
queries will be executed on the whole collection, we can also change its configuration, so the HNSW 

graph is not built globally. This is also done due to [performance reasons](/documentation/guides/multiple-partitions/#calibrate-performance).

**You should not be changing these parameters, if you know there will be some global search operations

done on the collection.**



```python

client.update_collection(

    collection_name=""my_collection"",
To implement this approach, you should:



1. Set `payload_m` in the HNSW configuration to a non-zero value, such as 16.

2. Set `m` in hnsw config to 0. This will disable building global index for the whole collection.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""hnsw_config"": {

        ""payload_m"": 16,

        ""m"": 0

    }

}

```



```python

from qdrant_client import QdrantClient, models
### Indexing vectors in HNSW



In some cases, you might be surprised the value of `indexed_vectors_count` is lower than `vectors_count`. This is an intended behaviour and

depends on the [optimizer configuration](../optimizer). A new index segment is built if the size of non-indexed vectors is higher than the

value of `indexing_threshold`(in kB).  If your collection is very small or the dimensionality of the vectors is low, there might be no HNSW segment
see how it affects the precision. Of course, we need to wait until the indexing is finished before we can perform the search.



```python

client.update_collection(

    collection_name=""arxiv-titles-instructorxl-embeddings"",

    hnsw_config=models.HnswConfigDiff(

        m=32,  # Increase the number of edges per node from the default 16 to 32

        ef_construct=200,  # Increase the number of neighbours from the default 100 to 200

    )

)



while True:",0.3902439024390244,0.5970149253731343,0.471976401179941,0.11764705882352941,0.18045112781954886,0.14243323442136496,0.23902439024390243,0.3656716417910448,0.28908554572271383,0.3804878048780488,0.582089552238806,0.46017699115044247,0.9100819230079651,0.644310474395752,0.6873095035552979,0.6651157736778259,0.4262022818438709,0.4741393569856882,218,1.472972972972973,0.2802127206910264
True,,4053.916,9063b531,How does product quantization differ from scalar quantization in terms of compression and computational efficiency?,"Product quantization involves dividing data into chunks and quantizing each segment individually, approximating each chunk with a centroid index that represents the original vector component. The positions of these centroids are determined through clustering algorithms like k-means, with Qdrant currently utilizing 256 centroids, allowing each centroid index to be represented by a single byte. Product quantization can achieve higher compression factors compared to scalar quantization. However, there are tradeoffs to consider. Product quantization distance calculations are not SIMD-friendly, resulting in slower computational speed compared to scalar quantization. Additionally, product quantization introduces a loss of accuracy, making it more suitable for high-dimensional vectors. To optimize quantization parameters for specific use cases, it is recommended to refer to the ""Quantization Tips"" section for more information.","Product quantization differs from scalar quantization in terms of compression and computational efficiency in the following ways:

1. **Compression Rate:** Product quantization typically offers a higher compression rate compared to scalar quantization. This means that it can reduce the memory usage more effectively by compressing the data.

2. **Computational Efficiency:** Scalar quantization is generally more computationally efficient than product quantization. Scalar quantization involves simpler operations on individual components of the vector, making it faster for encoding and decoding. On the other hand, product quantization involves more complex operations on subspaces of the vector, leading to slower processing times.

3. **Accuracy:** Product quantization tends to have a significant loss of accuracy compared to scalar quantization. This loss of accuracy is a trade-off for achieving higher compression rates. Scalar quantization, being more straightforward, may provide better accuracy but at the cost of lower compression.

4. **Search Speed:** Product quantization can impact search speed, particularly in the context of nearest neighbor search. The higher the compression ratio in product quantization, the lower the search precision, which can affect the efficiency of search operations. Scalar quantization, being faster computationally, may offer better search speed in some scenarios.

In summary, product quantization is favored for scenarios where memory footprint is a top priority and search speed is not critical. On the other hand, scalar quantization may be preferred when accuracy and computational efficiency are more important factors.","<td>474 s</td>

      </tr>

   </tbody>

</table>



It turns out that in some cases, Product Quantization may not only reduce the memory usage, 

but also the search time.



## Good practices



Compared to Scalar Quantization, Product Quantization offers a higher compression rate. However, this comes with considerable trade-offs in accuracy, and at times, in-RAM search speed.



Product Quantization tends to be favored in certain specific scenarios:
* **Product Quantization** may provide a better compression ratio, but it has a significant loss of accuracy and is slower than scalar quantization. It is recommended if the memory footprint is the top priority and the search speed is not critical.



## Setting up Quantization in Qdrant



You can configure quantization for a collection by specifying the quantization parameters in the `quantization_config` section of the collection configuration.
. For example, on one of the previous releases we have scalar quantization and product quantization, which can compress up to 64 times the size of the vector. And we only keep in fast storage these compressed vectors.
<td>147 s</td>

         <td>339 s</td>

         <td>217 s</td>

         <td>178 s</td>

      </tr>

   </tbody>

</table>



Product Quantization increases both indexing and searching time. The higher the compression ratio, 

the lower the search precision. The main benefit is undoubtedly the reduced usage of memory.



#### Arxiv-titles-384-angular-no-filters



<table>

   <thead>

      <tr>

         <th></th>

         <th>Original</th>

         <th>1D clusters</th>
But there are some tradeoffs. Product quantization distance calculations are not SIMD-friendly, so it is slower than scalar quantization.

Also, product quantization has a loss of accuracy, so it is recommended to use it only for high-dimensional vectors.



Please refer to the [Quantization Tips](#quantization-tips) section for more information on how to optimize the quantization parameters for your use case.



## How to choose the right quantization method","['<td>474 s</td>\n\n      </tr>\n\n   </tbody>\n\n</table>\n\n\n\nIt turns out that in some cases, Product Quantization may not only reduce the memory usage, \n\nbut also the search time.\n\n\n\n## Good practices\n\n\n\nCompared to Scalar Quantization, Product Quantization offers a higher compression rate. However, this comes with considerable trade-offs in accuracy, and at times, in-RAM search speed.\n\n\n\nProduct Quantization tends to be favored in certain specific scenarios:', '* **Product Quantization** may provide a better compression ratio, but it has a significant loss of accuracy and is slower than scalar quantization. It is recommended if the memory footprint is the top priority and the search speed is not critical.\n\n\n\n## Setting up Quantization in Qdrant\n\n\n\nYou can configure quantization for a collection by specifying the quantization parameters in the `quantization_config` section of the collection configuration.', '. For example, on one of the previous releases we have scalar quantization and product quantization, which can compress up to 64 times the size of the vector. And we only keep in fast storage these compressed vectors.', '<td>147 s</td>\n\n         <td>339 s</td>\n\n         <td>217 s</td>\n\n         <td>178 s</td>\n\n      </tr>\n\n   </tbody>\n\n</table>\n\n\n\nProduct Quantization increases both indexing and searching time. The higher the compression ratio, \n\nthe lower the search precision. The main benefit is undoubtedly the reduced usage of memory.\n\n\n\n#### Arxiv-titles-384-angular-no-filters\n\n\n\n<table>\n\n   <thead>\n\n      <tr>\n\n         <th></th>\n\n         <th>Original</th>\n\n         <th>1D clusters</th>', 'But there are some tradeoffs. Product quantization distance calculations are not SIMD-friendly, so it is slower than scalar quantization.\n\nAlso, product quantization has a loss of accuracy, so it is recommended to use it only for high-dimensional vectors.\n\n\n\nPlease refer to the [Quantization Tips](#quantization-tips) section for more information on how to optimize the quantization parameters for your use case.\n\n\n\n## How to choose the right quantization method']","Question: How does product quantization differ from scalar quantization in terms of compression and computational efficiency?\n\nContext: <td>474 s</td>

</tr>

</tbody>

</table>



It turns out that in some cases, Product Quantization may not only reduce the memory usage, 

but also the search time.



## Good practices



Compared to Scalar Quantization, Product Quantization offers a higher compression rate. However, this comes with considerable trade-offs in accuracy, and at times, in-RAM search speed.



Product Quantization tends to be favored in certain specific scenarios:
* **Product Quantization** may provide a better compression ratio, but it has a significant loss of accuracy and is slower than scalar quantization. It is recommended if the memory footprint is the top priority and the search speed is not critical.



## Setting up Quantization in Qdrant



You can configure quantization for a collection by specifying the quantization parameters in the `quantization_config` section of the collection configuration.
. For example, on one of the previous releases we have scalar quantization and product quantization, which can compress up to 64 times the size of the vector. And we only keep in fast storage these compressed vectors.
<td>147 s</td>

<td>339 s</td>

<td>217 s</td>

<td>178 s</td>

</tr>

</tbody>

</table>



Product Quantization increases both indexing and searching time. The higher the compression ratio, 

the lower the search precision. The main benefit is undoubtedly the reduced usage of memory.



#### Arxiv-titles-384-angular-no-filters



<table>

<thead>

<tr>

<th></th>

<th>Original</th>

<th>1D clusters</th>
But there are some tradeoffs. Product quantization distance calculations are not SIMD-friendly, so it is slower than scalar quantization.

Also, product quantization has a loss of accuracy, so it is recommended to use it only for high-dimensional vectors.



Please refer to the [Quantization Tips](#quantization-tips) section for more information on how to optimize the quantization parameters for your use case.



## How to choose the right quantization method\n\nAnswer:",How does product quantization differ from scalar quantization in terms of compression and computational efficiency?,"Product quantization involves dividing data into chunks and quantizing each segment individually, approximating each chunk with a centroid index that represents the original vector component. The positions of these centroids are determined through clustering algorithms like k-means, with Qdrant currently utilizing 256 centroids, allowing each centroid index to be represented by a single byte. Product quantization can achieve higher compression factors compared to scalar quantization. However, there are tradeoffs to consider. Product quantization distance calculations are not SIMD-friendly, resulting in slower computational speed compared to scalar quantization. Additionally, product quantization introduces a loss of accuracy, making it more suitable for high-dimensional vectors. To optimize quantization parameters for specific use cases, it is recommended to refer to the ""Quantization Tips"" section for more information.","['<td>474 s</td>\n\n      </tr>\n\n   </tbody>\n\n</table>\n\n\n\nIt turns out that in some cases, Product Quantization may not only reduce the memory usage, \n\nbut also the search time.\n\n\n\n## Good practices\n\n\n\nCompared to Scalar Quantization, Product Quantization offers a higher compression rate. However, this comes with considerable trade-offs in accuracy, and at times, in-RAM search speed.\n\n\n\nProduct Quantization tends to be favored in certain specific scenarios:', '* **Product Quantization** may provide a better compression ratio, but it has a significant loss of accuracy and is slower than scalar quantization. It is recommended if the memory footprint is the top priority and the search speed is not critical.\n\n\n\n## Setting up Quantization in Qdrant\n\n\n\nYou can configure quantization for a collection by specifying the quantization parameters in the `quantization_config` section of the collection configuration.', '. For example, on one of the previous releases we have scalar quantization and product quantization, which can compress up to 64 times the size of the vector. And we only keep in fast storage these compressed vectors.', '<td>147 s</td>\n\n         <td>339 s</td>\n\n         <td>217 s</td>\n\n         <td>178 s</td>\n\n      </tr>\n\n   </tbody>\n\n</table>\n\n\n\nProduct Quantization increases both indexing and searching time. The higher the compression ratio, \n\nthe lower the search precision. The main benefit is undoubtedly the reduced usage of memory.\n\n\n\n#### Arxiv-titles-384-angular-no-filters\n\n\n\n<table>\n\n   <thead>\n\n      <tr>\n\n         <th></th>\n\n         <th>Original</th>\n\n         <th>1D clusters</th>', 'But there are some tradeoffs. Product quantization distance calculations are not SIMD-friendly, so it is slower than scalar quantization.\n\nAlso, product quantization has a loss of accuracy, so it is recommended to use it only for high-dimensional vectors.\n\n\n\nPlease refer to the [Quantization Tips](#quantization-tips) section for more information on how to optimize the quantization parameters for your use case.\n\n\n\n## How to choose the right quantization method']","<td>474 s</td>

      </tr>

   </tbody>

</table>



It turns out that in some cases, Product Quantization may not only reduce the memory usage, 

but also the search time.



## Good practices



Compared to Scalar Quantization, Product Quantization offers a higher compression rate. However, this comes with considerable trade-offs in accuracy, and at times, in-RAM search speed.



Product Quantization tends to be favored in certain specific scenarios:
* **Product Quantization** may provide a better compression ratio, but it has a significant loss of accuracy and is slower than scalar quantization. It is recommended if the memory footprint is the top priority and the search speed is not critical.



## Setting up Quantization in Qdrant



You can configure quantization for a collection by specifying the quantization parameters in the `quantization_config` section of the collection configuration.
. For example, on one of the previous releases we have scalar quantization and product quantization, which can compress up to 64 times the size of the vector. And we only keep in fast storage these compressed vectors.
<td>147 s</td>

         <td>339 s</td>

         <td>217 s</td>

         <td>178 s</td>

      </tr>

   </tbody>

</table>



Product Quantization increases both indexing and searching time. The higher the compression ratio, 

the lower the search precision. The main benefit is undoubtedly the reduced usage of memory.



#### Arxiv-titles-384-angular-no-filters



<table>

   <thead>

      <tr>

         <th></th>

         <th>Original</th>

         <th>1D clusters</th>
But there are some tradeoffs. Product quantization distance calculations are not SIMD-friendly, so it is slower than scalar quantization.

Also, product quantization has a loss of accuracy, so it is recommended to use it only for high-dimensional vectors.



Please refer to the [Quantization Tips](#quantization-tips) section for more information on how to optimize the quantization parameters for your use case.



## How to choose the right quantization method",0.26046511627906976,0.4666666666666667,0.33432835820895523,0.0794392523364486,0.14285714285714285,0.10210210210210209,0.13488372093023257,0.24166666666666667,0.17313432835820897,0.25116279069767444,0.45,0.32238805970149254,0.713883638381958,0.5743144750595093,0.5845879316329956,0.579405665397644,0.7341147458783406,0.7536563909878689,232,1.886178861788618,0.5916897993132691
True,,4237.449,8864a7f7,What is the significance of Qdrant's approach to storing multiple vectors per object in data indexing?,"Qdrant's approach to storing multiple vectors per object in data indexing is significant as it opens up new possibilities in data representation and retrieval. By allowing multiple vectors to be associated with a single object, Qdrant enables more nuanced and detailed analysis of the data. This approach can be particularly beneficial in applications such as data science, neural networks, database management, and similarity search. It provides a more comprehensive understanding of the relationships between objects and enhances the accuracy and efficiency of search and retrieval processes. Overall, Qdrant's innovative vector storage strategy contributes to pushing the boundaries of data indexing and offers practical applications and benefits in various fields.","Qdrant's approach to storing multiple vectors per object in data indexing is significant for several reasons:

1. **Efficient Memory Usage**: By allowing multiple vectors per object to be stored together, Qdrant reduces memory requirements significantly, up to 64 times in some cases. This efficient use of memory can lead to cost savings and improved performance in data retrieval processes.

2. **Improved Data Representation**: Storing multiple vectors per object enables more comprehensive and detailed representation of data points. This can be particularly useful in scenarios where a single object can be described by different vectors, each capturing a unique aspect or feature.

3. **Enhanced Querying Capabilities**: With the ability to store multiple vectors per object, Qdrant enables more flexible querying options. Users can leverage different vectors associated with an object to perform complex similarity calculations and retrieve relevant results efficiently.

4. **Support for Optional Vectors**: Qdrant's support for optional vectors provides flexibility in data modeling. Not all vectors need to be mandatory for each object, allowing for a more customizable approach to data representation based on specific use cases.

Overall, Qdrant's approach to storing multiple vectors per object opens up new possibilities in data indexing, offering improved efficiency, flexibility, and enhanced capabilities for data representation and retrieval.","---

draft: false

title: Storing multiple vectors per object in Qdrant

slug: storing-multiple-vectors-per-object-in-qdrant

short_description: Qdrant's approach to storing multiple vectors per object,

  unraveling new possibilities in data representation and retrieval.

description: Discover how Qdrant continues to push the boundaries of data

  indexing, providing insights into the practical applications and benefits of

  this novel vector storage strategy.
5. Qdrant allows storing multiple vectors per point, and those might be of a different dimensionality. Pinecone doesn't support anything similar.

6. Vectors in Pinecone are mandatory for each point. Qdrant supports optional vectors.



It is worth mentioning, that **Pinecone will automatically create metadata indexes for all the fields**. Qdrant assumes you know
author_link: https://medium.com/@lukawskikacper

date: 2022-09-19T13:30:00+02:00

draft: false

---



[Qdrant 0.10 is a new version](https://github.com/qdrant/qdrant/releases/tag/v0.10.0) that brings a lot of performance 

improvements, but also some new features which were heavily requested by our users. Here is an overview of what has changed.



## Storing multiple vectors per object
It is not surprising that a method used for creating neural encoding plays an important role in the search process and its quality. If your data points might be described using several vectors, then the latest release of Qdrant gives you an opportunity to store them together and reuse the payloads, instead of creating several collections and querying them separately.
detail. In a nutshell, you can **reduce the memory requirements by up to 64 times**!



### Optional named vectors



Qdrant has been supporting multiple named vectors per point for quite a long time. Those may have 

utterly different dimensionality and distance functions used to calculate similarity. Having multiple 

embeddings per item is an essential real-world scenario. For example, you might be encoding textual","[""---\n\ndraft: false\n\ntitle: Storing multiple vectors per object in Qdrant\n\nslug: storing-multiple-vectors-per-object-in-qdrant\n\nshort_description: Qdrant's approach to storing multiple vectors per object,\n\n  unraveling new possibilities in data representation and retrieval.\n\ndescription: Discover how Qdrant continues to push the boundaries of data\n\n  indexing, providing insights into the practical applications and benefits of\n\n  this novel vector storage strategy."", ""5. Qdrant allows storing multiple vectors per point, and those might be of a different dimensionality. Pinecone doesn't support anything similar.\n\n6. Vectors in Pinecone are mandatory for each point. Qdrant supports optional vectors.\n\n\n\nIt is worth mentioning, that **Pinecone will automatically create metadata indexes for all the fields**. Qdrant assumes you know"", 'author_link: https://medium.com/@lukawskikacper\n\ndate: 2022-09-19T13:30:00+02:00\n\ndraft: false\n\n---\n\n\n\n[Qdrant 0.10 is a new version](https://github.com/qdrant/qdrant/releases/tag/v0.10.0) that brings a lot of performance \n\nimprovements, but also some new features which were heavily requested by our users. Here is an overview of what has changed.\n\n\n\n## Storing multiple vectors per object', 'It is not surprising that a method used for creating neural encoding plays an important role in the search process and its quality. If your data points might be described using several vectors, then the latest release of Qdrant gives you an opportunity to store them together and reuse the payloads, instead of creating several collections and querying them separately.', 'detail. In a nutshell, you can **reduce the memory requirements by up to 64 times**!\n\n\n\n### Optional named vectors\n\n\n\nQdrant has been supporting multiple named vectors per point for quite a long time. Those may have \n\nutterly different dimensionality and distance functions used to calculate similarity. Having multiple \n\nembeddings per item is an essential real-world scenario. For example, you might be encoding textual']","Question: What is the significance of Qdrant's approach to storing multiple vectors per object in data indexing?\n\nContext: ---

draft: false

title: Storing multiple vectors per object in Qdrant

slug: storing-multiple-vectors-per-object-in-qdrant

short_description: Qdrant's approach to storing multiple vectors per object,

unraveling new possibilities in data representation and retrieval.

description: Discover how Qdrant continues to push the boundaries of data

indexing, providing insights into the practical applications and benefits of

this novel vector storage strategy.
5. Qdrant allows storing multiple vectors per point, and those might be of a different dimensionality. Pinecone doesn't support anything similar.

6. Vectors in Pinecone are mandatory for each point. Qdrant supports optional vectors.



It is worth mentioning, that **Pinecone will automatically create metadata indexes for all the fields**. Qdrant assumes you know
author_link: https://medium.com/@lukawskikacper

date: 2022-09-19T13:30:00+02:00

draft: false

---



[Qdrant 0.10 is a new version](https://github.com/qdrant/qdrant/releases/tag/v0.10.0) that brings a lot of performance 

improvements, but also some new features which were heavily requested by our users. Here is an overview of what has changed.



## Storing multiple vectors per object
It is not surprising that a method used for creating neural encoding plays an important role in the search process and its quality. If your data points might be described using several vectors, then the latest release of Qdrant gives you an opportunity to store them together and reuse the payloads, instead of creating several collections and querying them separately.
detail. In a nutshell, you can **reduce the memory requirements by up to 64 times**!



### Optional named vectors



Qdrant has been supporting multiple named vectors per point for quite a long time. Those may have 

utterly different dimensionality and distance functions used to calculate similarity. Having multiple 

embeddings per item is an essential real-world scenario. For example, you might be encoding textual\n\nAnswer:",What is the significance of Qdrant's approach to storing multiple vectors per object in data indexing?,"Qdrant's approach to storing multiple vectors per object in data indexing is significant as it opens up new possibilities in data representation and retrieval. By allowing multiple vectors to be associated with a single object, Qdrant enables more nuanced and detailed analysis of the data. This approach can be particularly beneficial in applications such as data science, neural networks, database management, and similarity search. It provides a more comprehensive understanding of the relationships between objects and enhances the accuracy and efficiency of search and retrieval processes. Overall, Qdrant's innovative vector storage strategy contributes to pushing the boundaries of data indexing and offers practical applications and benefits in various fields.","[""---\n\ndraft: false\n\ntitle: Storing multiple vectors per object in Qdrant\n\nslug: storing-multiple-vectors-per-object-in-qdrant\n\nshort_description: Qdrant's approach to storing multiple vectors per object,\n\n  unraveling new possibilities in data representation and retrieval.\n\ndescription: Discover how Qdrant continues to push the boundaries of data\n\n  indexing, providing insights into the practical applications and benefits of\n\n  this novel vector storage strategy."", ""5. Qdrant allows storing multiple vectors per point, and those might be of a different dimensionality. Pinecone doesn't support anything similar.\n\n6. Vectors in Pinecone are mandatory for each point. Qdrant supports optional vectors.\n\n\n\nIt is worth mentioning, that **Pinecone will automatically create metadata indexes for all the fields**. Qdrant assumes you know"", 'author_link: https://medium.com/@lukawskikacper\n\ndate: 2022-09-19T13:30:00+02:00\n\ndraft: false\n\n---\n\n\n\n[Qdrant 0.10 is a new version](https://github.com/qdrant/qdrant/releases/tag/v0.10.0) that brings a lot of performance \n\nimprovements, but also some new features which were heavily requested by our users. Here is an overview of what has changed.\n\n\n\n## Storing multiple vectors per object', 'It is not surprising that a method used for creating neural encoding plays an important role in the search process and its quality. If your data points might be described using several vectors, then the latest release of Qdrant gives you an opportunity to store them together and reuse the payloads, instead of creating several collections and querying them separately.', 'detail. In a nutshell, you can **reduce the memory requirements by up to 64 times**!\n\n\n\n### Optional named vectors\n\n\n\nQdrant has been supporting multiple named vectors per point for quite a long time. Those may have \n\nutterly different dimensionality and distance functions used to calculate similarity. Having multiple \n\nembeddings per item is an essential real-world scenario. For example, you might be encoding textual']","---

draft: false

title: Storing multiple vectors per object in Qdrant

slug: storing-multiple-vectors-per-object-in-qdrant

short_description: Qdrant's approach to storing multiple vectors per object,

  unraveling new possibilities in data representation and retrieval.

description: Discover how Qdrant continues to push the boundaries of data

  indexing, providing insights into the practical applications and benefits of

  this novel vector storage strategy.
5. Qdrant allows storing multiple vectors per point, and those might be of a different dimensionality. Pinecone doesn't support anything similar.

6. Vectors in Pinecone are mandatory for each point. Qdrant supports optional vectors.



It is worth mentioning, that **Pinecone will automatically create metadata indexes for all the fields**. Qdrant assumes you know
author_link: https://medium.com/@lukawskikacper

date: 2022-09-19T13:30:00+02:00

draft: false

---



[Qdrant 0.10 is a new version](https://github.com/qdrant/qdrant/releases/tag/v0.10.0) that brings a lot of performance 

improvements, but also some new features which were heavily requested by our users. Here is an overview of what has changed.



## Storing multiple vectors per object
It is not surprising that a method used for creating neural encoding plays an important role in the search process and its quality. If your data points might be described using several vectors, then the latest release of Qdrant gives you an opportunity to store them together and reuse the payloads, instead of creating several collections and querying them separately.
detail. In a nutshell, you can **reduce the memory requirements by up to 64 times**!



### Optional named vectors



Qdrant has been supporting multiple named vectors per point for quite a long time. Those may have 

utterly different dimensionality and distance functions used to calculate similarity. Having multiple 

embeddings per item is an essential real-world scenario. For example, you might be encoding textual",0.3382352941176471,0.6571428571428571,0.44660194174757284,0.2019704433497537,0.3942307692307692,0.267100977198697,0.21568627450980393,0.41904761904761906,0.28478964401294504,0.3284313725490196,0.638095238095238,0.4336569579288026,0.8719968199729919,0.6614901423454285,0.7291504144668579,0.6936743259429932,0.7495535906010236,0.97696802620776,209,1.882882882882883,0.5039281602313072
True,,3036.612,4f48ff28,What configuration is required to enable in-memory quantization with on-disk original vectors in Qdrant?,"To configure in-memory quantization with on-disk original vectors in Qdrant, you need to create a collection with the following configuration:

```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 768,

        ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": true

        }

    }

}
```

Additionally, in the Python code snippet provided, you can use the QdrantClient library to create the collection with the specified configuration parameters. This includes defining vector size, distance metric (such as Cosine similarity), memmap threshold for optimization, and scalar quantization configuration with type set to INT8","To enable in-memory quantization with on-disk original vectors in Qdrant, you can configure the collection with the following settings:

```http
PUT /collections/{collection_name}

{
  ""vectors"": {
    ""size"": 768,
    ""distance"": ""Cosine""
  },
  ""optimizers_config"": {
    ""memmap_threshold"": 20000
  },
  ""quantization_config"": {
    ""scalar"": {
      ""type"": ""int8"",
      ""always_ram"": false
    }
  }
}
```

Setting `""always_ram"": false` in the quantization configuration allows Qdrant to use mmap storage for the original vectors on disk while still using in-memory quantization.

By using this configuration, you can reduce the memory footprint by a factor of 4 and speed up the search process by leveraging SIMD CPU instructions for fast vector comparison with 8-bit integers.

Keep in mind that removing the original vectors compromises certain features like oversampling and segment building, and may not be compatible with all types of quantization methods.","To configure in-memory quantization, with on-disk original vectors, you need to create a collection with the following configuration:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 768,

        ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": true

        }

    }

}

```



```python
This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": false

        }

    }

}

```



```python

from qdrant_client import QdrantClient, models
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
5. RAM: Store the full vectors and payload on disk. Limit what you load from memory to the binary quantization index. This helps reduce the memory footprint and improve the overall efficiency of the system. The incremental latency from the disk read is negligible compared to the latency savings from the binary scoring in Qdrant, which uses SIMD instructions where possible.



Want to discuss these findings and learn more about Binary Quantization? [Join our Discord community.](https://discord.gg/qdrant)
Right? So unfortunately Qdrant architecture is not designed and not expecting this type of behavior for several reasons. First of all, removing of the original vectors will compromise some features like oversampling, like segment building. And actually removing of those original vectors will only be compatible with some types of quantization for example, it won't be compatible with scalar quantization because in this case we won't be able to rebuild index to do maintenance of the system","['To configure in-memory quantization, with on-disk original vectors, you need to create a collection with the following configuration:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""size"": 768,\n\n        ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python', 'This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": false\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models', 'Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.\n\n\n\nIn addition to reducing the memory footprint, scalar quantization also speeds up the search process.\n\nQdrant uses a special SIMD CPU instruction to perform fast vector comparison.\n\nThis instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.', '5. RAM: Store the full vectors and payload on disk. Limit what you load from memory to the binary quantization index. This helps reduce the memory footprint and improve the overall efficiency of the system. The incremental latency from the disk read is negligible compared to the latency savings from the binary scoring in Qdrant, which uses SIMD instructions where possible.\n\n\n\nWant to discuss these findings and learn more about Binary Quantization? [Join our Discord community.](https://discord.gg/qdrant)', ""Right? So unfortunately Qdrant architecture is not designed and not expecting this type of behavior for several reasons. First of all, removing of the original vectors will compromise some features like oversampling, like segment building. And actually removing of those original vectors will only be compatible with some types of quantization for example, it won't be compatible with scalar quantization because in this case we won't be able to rebuild index to do maintenance of the system""]","Question: What configuration is required to enable in-memory quantization with on-disk original vectors in Qdrant?\n\nContext: To configure in-memory quantization, with on-disk original vectors, you need to create a collection with the following configuration:



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,

""distance"": ""Cosine""

},

""optimizers_config"": {

""memmap_threshold"": 20000

},

""quantization_config"": {

""scalar"": {

""type"": ""int8"",

""always_ram"": true

}

}

}

```



```python
This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,

""distance"": ""Cosine""

},

""optimizers_config"": {

""memmap_threshold"": 20000

},

""quantization_config"": {

""scalar"": {

""type"": ""int8"",

""always_ram"": false

}

}

}

```



```python

from qdrant_client import QdrantClient, models
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
5. RAM: Store the full vectors and payload on disk. Limit what you load from memory to the binary quantization index. This helps reduce the memory footprint and improve the overall efficiency of the system. The incremental latency from the disk read is negligible compared to the latency savings from the binary scoring in Qdrant, which uses SIMD instructions where possible.



Want to discuss these findings and learn more about Binary Quantization? [Join our Discord community.](https://discord.gg/qdrant)
Right? So unfortunately Qdrant architecture is not designed and not expecting this type of behavior for several reasons. First of all, removing of the original vectors will compromise some features like oversampling, like segment building. And actually removing of those original vectors will only be compatible with some types of quantization for example, it won't be compatible with scalar quantization because in this case we won't be able to rebuild index to do maintenance of the system\n\nAnswer:",What configuration is required to enable in-memory quantization with on-disk original vectors in Qdrant?,"To configure in-memory quantization with on-disk original vectors in Qdrant, you need to create a collection with the following configuration:

```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 768,

        ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": true

        }

    }

}
```

Additionally, in the Python code snippet provided, you can use the QdrantClient library to create the collection with the specified configuration parameters. This includes defining vector size, distance metric (such as Cosine similarity), memmap threshold for optimization, and scalar quantization configuration with type set to INT8","['To configure in-memory quantization, with on-disk original vectors, you need to create a collection with the following configuration:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""size"": 768,\n\n        ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python', 'This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": false\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models', 'Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.\n\n\n\nIn addition to reducing the memory footprint, scalar quantization also speeds up the search process.\n\nQdrant uses a special SIMD CPU instruction to perform fast vector comparison.\n\nThis instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.', '5. RAM: Store the full vectors and payload on disk. Limit what you load from memory to the binary quantization index. This helps reduce the memory footprint and improve the overall efficiency of the system. The incremental latency from the disk read is negligible compared to the latency savings from the binary scoring in Qdrant, which uses SIMD instructions where possible.\n\n\n\nWant to discuss these findings and learn more about Binary Quantization? [Join our Discord community.](https://discord.gg/qdrant)', ""Right? So unfortunately Qdrant architecture is not designed and not expecting this type of behavior for several reasons. First of all, removing of the original vectors will compromise some features like oversampling, like segment building. And actually removing of those original vectors will only be compatible with some types of quantization for example, it won't be compatible with scalar quantization because in this case we won't be able to rebuild index to do maintenance of the system""]","To configure in-memory quantization, with on-disk original vectors, you need to create a collection with the following configuration:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 768,

        ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": true

        }

    }

}

```



```python
This mode is enabled by setting `always_ram` to `false` in the quantization config while using mmap storage:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""quantization_config"": {

        ""scalar"": {

            ""type"": ""int8"",

            ""always_ram"": false

        }

    }

}

```



```python

from qdrant_client import QdrantClient, models
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
5. RAM: Store the full vectors and payload on disk. Limit what you load from memory to the binary quantization index. This helps reduce the memory footprint and improve the overall efficiency of the system. The incremental latency from the disk read is negligible compared to the latency savings from the binary scoring in Qdrant, which uses SIMD instructions where possible.



Want to discuss these findings and learn more about Binary Quantization? [Join our Discord community.](https://discord.gg/qdrant)
Right? So unfortunately Qdrant architecture is not designed and not expecting this type of behavior for several reasons. First of all, removing of the original vectors will compromise some features like oversampling, like segment building. And actually removing of those original vectors will only be compatible with some types of quantization for example, it won't be compatible with scalar quantization because in this case we won't be able to rebuild index to do maintenance of the system",0.43902439024390244,0.6352941176470588,0.5192307692307692,0.28688524590163933,0.4166666666666667,0.3398058252427184,0.36585365853658536,0.5294117647058824,0.4326923076923077,0.3902439024390244,0.5647058823529412,0.4615384615384615,0.9853230714797974,0.6332252621650696,0.6928823590278625,0.6617119312286377,0.704338757476459,0.42167872190475464,121,1.4404761904761905,0.666524752197879
True,,3752.809,6b758425,How can dissimilarity search be used for outlier detection in a dataset?,"Dissimilarity search can be utilized for outlier detection in a dataset by first establishing a set of reference points that are considered ""normal"". These reference points serve as a benchmark for comparison. Subsequently, the dissimilarity search algorithm is applied to identify the data points that are the most dissimilar to the reference set. These identified points are then flagged as potential outliers or anomalies in the dataset. This approach allows for the detection of abnormal data points even in cases where labels are not available, enabling the identification of outliers based on their deviation from the established ""normal"" reference points. This method can be a valuable tool in data analysis and anomaly detection tasks.","Dissimilarity search can be used for outlier detection in a dataset by following these steps:

1. **Define Normal Reference Points**: Begin by selecting a set of reference points that are considered to be ""normal"" within the dataset. These reference points represent the typical or expected data points.

2. **Calculate Dissimilarities**: Use dissimilarity search to find data points that are the most dissimilar to the reference set. This involves calculating the distance or dissimilarity between each data point and the reference points.

3. **Identify Outliers**: The data points that have the highest dissimilarity scores can be considered as outliers or anomalies in the dataset. These points deviate significantly from the normal patterns observed in the reference set.

4. **Further Analysis**: Once potential outliers are identified, they can be subjected to further analysis or investigation to understand the reasons for their divergence from the normal data distribution. This analysis can help in identifying potential errors, mislabelings, or unusual patterns within the dataset.

In the context of outlier detection, dissimilarity search helps in flagging data points that exhibit unusual characteristics compared to the majority of the dataset. By leveraging dissimilarity measures, it becomes possible to identify outliers without the need for predefined labels or explicit anomaly detection models.","### Case: Outlier Detection



In some cases, we might not even have labels, but it is still possible to try to detect anomalies in our dataset.

Dissimilarity search can be used for this purpose as well.



{{< figure width=80% src=/articles_data/vector-similarity-beyond-search/anomaly-detection.png caption=""Anomaly Detection"" >}}



The only thing we need is a bunch of reference points that we consider ""normal"".
Then we can search for the most dissimilar points to this reference set and use them as candidates for further analysis.





## Diversity Search



Even with no input provided vector, (dis-)similarity can improve an overall selection of items from the dataset.



The naive approach is to do random sampling. 

However, unless our dataset has a uniform distribution, the results of such sampling might be biased toward more frequent types of items.
Unlike full-text match, Vector similarity can compare any pair of documents (or points) and assign a similarity score. 

It doesn’t rely on keywords or other metadata. 

With vector similarity, we can easily achieve a dissimilarity search by inverting the search objective from maximizing similarity to minimizing it.



The dissimilarity search can find items in areas where previously no other search could be used.

Let’s look at a few examples.



### Case: Mislabeling Detection
There is no silver bullet. You should validate your dataset thoroughly, and you need tools for this.



When you are sure that there are not many objects placed in the wrong category, they can be considered outliers or anomalies.

Thus, you can train a model or a bunch of models capable of looking for anomalies, e.g. autoencoder and a classifier on it.

However, this is again a resource-intensive task, both in terms of time and manual labour, since labels have to be provided for classification.
You might find yourself in a situation when the model focuses on non-important features, selects a lot of irrelevant elements, and fails to find genuine errors. 

To mitigate this issue, you can perform a diversity search.



Diversity search is a method for finding the most distinctive examples in the data.

As similarity search, it also operates on embeddings and measures the distances between them.

The difference lies in deciding which point should be extracted next.","['### Case: Outlier Detection\n\n\n\nIn some cases, we might not even have labels, but it is still possible to try to detect anomalies in our dataset.\n\nDissimilarity search can be used for this purpose as well.\n\n\n\n{{< figure width=80% src=/articles_data/vector-similarity-beyond-search/anomaly-detection.png caption=""Anomaly Detection"" >}}\n\n\n\nThe only thing we need is a bunch of reference points that we consider ""normal"".', 'Then we can search for the most dissimilar points to this reference set and use them as candidates for further analysis.\n\n\n\n\n\n## Diversity Search\n\n\n\nEven with no input provided vector, (dis-)similarity can improve an overall selection of items from the dataset.\n\n\n\nThe naive approach is to do random sampling. \n\nHowever, unless our dataset has a uniform distribution, the results of such sampling might be biased toward more frequent types of items.', 'Unlike full-text match, Vector similarity can compare any pair of documents (or points) and assign a similarity score. \n\nIt doesn’t rely on keywords or other metadata. \n\nWith vector similarity, we can easily achieve a dissimilarity search by inverting the search objective from maximizing similarity to minimizing it.\n\n\n\nThe dissimilarity search can find items in areas where previously no other search could be used.\n\nLet’s look at a few examples.\n\n\n\n### Case: Mislabeling Detection', 'There is no silver bullet. You should validate your dataset thoroughly, and you need tools for this.\n\n\n\nWhen you are sure that there are not many objects placed in the wrong category, they can be considered outliers or anomalies.\n\nThus, you can train a model or a bunch of models capable of looking for anomalies, e.g. autoencoder and a classifier on it.\n\nHowever, this is again a resource-intensive task, both in terms of time and manual labour, since labels have to be provided for classification.', 'You might find yourself in a situation when the model focuses on non-important features, selects a lot of irrelevant elements, and fails to find genuine errors. \n\nTo mitigate this issue, you can perform a diversity search.\n\n\n\nDiversity search is a method for finding the most distinctive examples in the data.\n\nAs similarity search, it also operates on embeddings and measures the distances between them.\n\nThe difference lies in deciding which point should be extracted next.']","Question: How can dissimilarity search be used for outlier detection in a dataset?\n\nContext: ### Case: Outlier Detection



In some cases, we might not even have labels, but it is still possible to try to detect anomalies in our dataset.

Dissimilarity search can be used for this purpose as well.



{{< figure width=80% src=/articles_data/vector-similarity-beyond-search/anomaly-detection.png caption=""Anomaly Detection"" >}}



The only thing we need is a bunch of reference points that we consider ""normal"".
Then we can search for the most dissimilar points to this reference set and use them as candidates for further analysis.





## Diversity Search



Even with no input provided vector, (dis-)similarity can improve an overall selection of items from the dataset.



The naive approach is to do random sampling. 

However, unless our dataset has a uniform distribution, the results of such sampling might be biased toward more frequent types of items.
Unlike full-text match, Vector similarity can compare any pair of documents (or points) and assign a similarity score. 

It doesn’t rely on keywords or other metadata. 

With vector similarity, we can easily achieve a dissimilarity search by inverting the search objective from maximizing similarity to minimizing it.



The dissimilarity search can find items in areas where previously no other search could be used.

Let’s look at a few examples.



### Case: Mislabeling Detection
There is no silver bullet. You should validate your dataset thoroughly, and you need tools for this.



When you are sure that there are not many objects placed in the wrong category, they can be considered outliers or anomalies.

Thus, you can train a model or a bunch of models capable of looking for anomalies, e.g. autoencoder and a classifier on it.

However, this is again a resource-intensive task, both in terms of time and manual labour, since labels have to be provided for classification.
You might find yourself in a situation when the model focuses on non-important features, selects a lot of irrelevant elements, and fails to find genuine errors. 

To mitigate this issue, you can perform a diversity search.



Diversity search is a method for finding the most distinctive examples in the data.

As similarity search, it also operates on embeddings and measures the distances between them.

The difference lies in deciding which point should be extracted next.\n\nAnswer:",How can dissimilarity search be used for outlier detection in a dataset?,"Dissimilarity search can be utilized for outlier detection in a dataset by first establishing a set of reference points that are considered ""normal"". These reference points serve as a benchmark for comparison. Subsequently, the dissimilarity search algorithm is applied to identify the data points that are the most dissimilar to the reference set. These identified points are then flagged as potential outliers or anomalies in the dataset. This approach allows for the detection of abnormal data points even in cases where labels are not available, enabling the identification of outliers based on their deviation from the established ""normal"" reference points. This method can be a valuable tool in data analysis and anomaly detection tasks.","['### Case: Outlier Detection\n\n\n\nIn some cases, we might not even have labels, but it is still possible to try to detect anomalies in our dataset.\n\nDissimilarity search can be used for this purpose as well.\n\n\n\n{{< figure width=80% src=/articles_data/vector-similarity-beyond-search/anomaly-detection.png caption=""Anomaly Detection"" >}}\n\n\n\nThe only thing we need is a bunch of reference points that we consider ""normal"".', 'Then we can search for the most dissimilar points to this reference set and use them as candidates for further analysis.\n\n\n\n\n\n## Diversity Search\n\n\n\nEven with no input provided vector, (dis-)similarity can improve an overall selection of items from the dataset.\n\n\n\nThe naive approach is to do random sampling. \n\nHowever, unless our dataset has a uniform distribution, the results of such sampling might be biased toward more frequent types of items.', 'Unlike full-text match, Vector similarity can compare any pair of documents (or points) and assign a similarity score. \n\nIt doesn’t rely on keywords or other metadata. \n\nWith vector similarity, we can easily achieve a dissimilarity search by inverting the search objective from maximizing similarity to minimizing it.\n\n\n\nThe dissimilarity search can find items in areas where previously no other search could be used.\n\nLet’s look at a few examples.\n\n\n\n### Case: Mislabeling Detection', 'There is no silver bullet. You should validate your dataset thoroughly, and you need tools for this.\n\n\n\nWhen you are sure that there are not many objects placed in the wrong category, they can be considered outliers or anomalies.\n\nThus, you can train a model or a bunch of models capable of looking for anomalies, e.g. autoencoder and a classifier on it.\n\nHowever, this is again a resource-intensive task, both in terms of time and manual labour, since labels have to be provided for classification.', 'You might find yourself in a situation when the model focuses on non-important features, selects a lot of irrelevant elements, and fails to find genuine errors. \n\nTo mitigate this issue, you can perform a diversity search.\n\n\n\nDiversity search is a method for finding the most distinctive examples in the data.\n\nAs similarity search, it also operates on embeddings and measures the distances between them.\n\nThe difference lies in deciding which point should be extracted next.']","### Case: Outlier Detection



In some cases, we might not even have labels, but it is still possible to try to detect anomalies in our dataset.

Dissimilarity search can be used for this purpose as well.



{{< figure width=80% src=/articles_data/vector-similarity-beyond-search/anomaly-detection.png caption=""Anomaly Detection"" >}}



The only thing we need is a bunch of reference points that we consider ""normal"".
Then we can search for the most dissimilar points to this reference set and use them as candidates for further analysis.





## Diversity Search



Even with no input provided vector, (dis-)similarity can improve an overall selection of items from the dataset.



The naive approach is to do random sampling. 

However, unless our dataset has a uniform distribution, the results of such sampling might be biased toward more frequent types of items.
Unlike full-text match, Vector similarity can compare any pair of documents (or points) and assign a similarity score. 

It doesn’t rely on keywords or other metadata. 

With vector similarity, we can easily achieve a dissimilarity search by inverting the search objective from maximizing similarity to minimizing it.



The dissimilarity search can find items in areas where previously no other search could be used.

Let’s look at a few examples.



### Case: Mislabeling Detection
There is no silver bullet. You should validate your dataset thoroughly, and you need tools for this.



When you are sure that there are not many objects placed in the wrong category, they can be considered outliers or anomalies.

Thus, you can train a model or a bunch of models capable of looking for anomalies, e.g. autoencoder and a classifier on it.

However, this is again a resource-intensive task, both in terms of time and manual labour, since labels have to be provided for classification.
You might find yourself in a situation when the model focuses on non-important features, selects a lot of irrelevant elements, and fails to find genuine errors. 

To mitigate this issue, you can perform a diversity search.



Diversity search is a method for finding the most distinctive examples in the data.

As similarity search, it also operates on embeddings and measures the distances between them.

The difference lies in deciding which point should be extracted next.",0.3891891891891892,0.7058823529411765,0.5017421602787456,0.20108695652173914,0.36633663366336633,0.2596491228070176,0.2864864864864865,0.5196078431372549,0.3693379790940766,0.3675675675675676,0.6666666666666666,0.47386759581881527,0.8945778012275696,0.6720485687255859,0.7153227925300598,0.6930108070373535,0.8178260687522457,0.991205426180386,205,1.7982456140350878,0.41483713175628806
True,,3369.202,a39f27a9,How does binary quantization work and what benefits does it offer in terms of query processing times and data compression?,"Binary quantization is a method used by Qdrant for fast indexing and data compression. In this process, each data point is represented as a vector. The quantization splits the vector in half at a certain point, marking everything above as ""1"" and everything below as ""0"". This results in a string of bits that represents the original vector, making it much smaller and easier to compare. By supporting vector comparisons, binary quantization can significantly speed up query processing times, up to 40 times faster. This method is especially effective for OpenAI embeddings, where it has been shown to achieve a massive performance improvement at a lower cost of accuracy.","Binary quantization is a technique used for compressing vectors into a more compact representation by converting continuous values into binary values. This method reduces the storage footprint of the database and speeds up query processing times by simplifying distance calculations between vectors to bitwise operations. 

The benefits of binary quantization include:
1. Reduced storage footprint: It helps with large-scale datasets and saves memory, scaling up to 30x at the same cost.
2. Enhanced speed of data retrieval: Smaller data sizes generally lead to faster searches.
3. Accelerated search process: Simplified distance calculations between vectors to bitwise operations enable real-time querying even in extensive databases.

While binary quantization may lead to recall degradation, the tradeoff between speed and recall accuracy can be balanced at the time of search rather than at the time of index creation. Overall, binary quantization offers significant improvements in query processing times and data compression, making it a valuable technique for efficient data storage and retrieval.","#### What is Binary Quantization?



Quantization is a technique used for reducing the total size of the database. It works by compressing vectors into a more compact representation at the cost of accuracy.



[Binary Quantization](https://qdrant.tech/articles/binary-quantization/) is a fast indexing and data compression method used by Qdrant. It supports vector comparisons, which can dramatically speed up query processing times (up to 40x faster!).
![](/blog/openai/Accuracy_Models.png)



The efficiency gains from Binary Quantization are as follows: 



- Reduced storage footprint: It helps with large-scale datasets. It also saves on memory, and scales up to 30x at the same cost. 

- Enhanced speed of data retrieval: Smaller data sizes generally leads to faster searches. 

- Accelerated search process: It is based on simplified distance calculations between vectors to bitwise operations. This enables real-time querying even in extensive databases.
By reducing storage needs, you can scale applications with lower costs. This addresses a critical challenge posed by the original embedding sizes. Binary Quantization also speeds the search process. It simplifies the complex distance calculations between vectors into more manageable bitwise operations, which supports potentially real-time searches across vast datasets.
5 Keys to Learning from the Episode:



1. The necessity of quantization and the complex challenges it helps to overcome.

2. The transformative effects of binary quantization on processing speed and storage size reduction.

3. A detailed exploration of oversampling and its real-time precision control in query search.

4. Understanding the simplicity and effectiveness of binary quantization, especially when compared to more intricate quantization methods.
As is the case with other quantization methods, these benefits come at the cost of recall degradation. However, our implementation lets you balance the tradeoff between speed and recall accuracy at time of search, rather than time of index creation. 



The rest of this article will cover:

1. The importance of binary quantization

2. Basic implementation using our Python client

3. Benchmark analysis and usage recommendations



## What is Binary Quantization?","['#### What is Binary Quantization?\n\n\n\nQuantization is a technique used for reducing the total size of the database. It works by compressing vectors into a more compact representation at the cost of accuracy.\n\n\n\n[Binary Quantization](https://qdrant.tech/articles/binary-quantization/) is a fast indexing and data compression method used by Qdrant. It supports vector comparisons, which can dramatically speed up query processing times (up to 40x faster!).', '![](/blog/openai/Accuracy_Models.png)\n\n\n\nThe efficiency gains from Binary Quantization are as follows: \n\n\n\n- Reduced storage footprint: It helps with large-scale datasets. It also saves on memory, and scales up to 30x at the same cost. \n\n- Enhanced speed of data retrieval: Smaller data sizes generally leads to faster searches. \n\n- Accelerated search process: It is based on simplified distance calculations between vectors to bitwise operations. This enables real-time querying even in extensive databases.', 'By reducing storage needs, you can scale applications with lower costs. This addresses a critical challenge posed by the original embedding sizes. Binary Quantization also speeds the search process. It simplifies the complex distance calculations between vectors into more manageable bitwise operations, which supports potentially real-time searches across vast datasets.', '5 Keys to Learning from the Episode:\n\n\n\n1. The necessity of quantization and the complex challenges it helps to overcome.\n\n2. The transformative effects of binary quantization on processing speed and storage size reduction.\n\n3. A detailed exploration of oversampling and its real-time precision control in query search.\n\n4. Understanding the simplicity and effectiveness of binary quantization, especially when compared to more intricate quantization methods.', 'As is the case with other quantization methods, these benefits come at the cost of recall degradation. However, our implementation lets you balance the tradeoff between speed and recall accuracy at time of search, rather than time of index creation. \n\n\n\nThe rest of this article will cover:\n\n1. The importance of binary quantization\n\n2. Basic implementation using our Python client\n\n3. Benchmark analysis and usage recommendations\n\n\n\n## What is Binary Quantization?']","Question: How does binary quantization work and what benefits does it offer in terms of query processing times and data compression?\n\nContext: #### What is Binary Quantization?



Quantization is a technique used for reducing the total size of the database. It works by compressing vectors into a more compact representation at the cost of accuracy.



[Binary Quantization](https://qdrant.tech/articles/binary-quantization/) is a fast indexing and data compression method used by Qdrant. It supports vector comparisons, which can dramatically speed up query processing times (up to 40x faster!).
![](/blog/openai/Accuracy_Models.png)



The efficiency gains from Binary Quantization are as follows: 



- Reduced storage footprint: It helps with large-scale datasets. It also saves on memory, and scales up to 30x at the same cost. 

- Enhanced speed of data retrieval: Smaller data sizes generally leads to faster searches. 

- Accelerated search process: It is based on simplified distance calculations between vectors to bitwise operations. This enables real-time querying even in extensive databases.
By reducing storage needs, you can scale applications with lower costs. This addresses a critical challenge posed by the original embedding sizes. Binary Quantization also speeds the search process. It simplifies the complex distance calculations between vectors into more manageable bitwise operations, which supports potentially real-time searches across vast datasets.
5 Keys to Learning from the Episode:



1. The necessity of quantization and the complex challenges it helps to overcome.

2. The transformative effects of binary quantization on processing speed and storage size reduction.

3. A detailed exploration of oversampling and its real-time precision control in query search.

4. Understanding the simplicity and effectiveness of binary quantization, especially when compared to more intricate quantization methods.
As is the case with other quantization methods, these benefits come at the cost of recall degradation. However, our implementation lets you balance the tradeoff between speed and recall accuracy at time of search, rather than time of index creation. 



The rest of this article will cover:

1. The importance of binary quantization

2. Basic implementation using our Python client

3. Benchmark analysis and usage recommendations



## What is Binary Quantization?\n\nAnswer:",How does binary quantization work and what benefits does it offer in terms of query processing times and data compression?,"Binary quantization is a method used by Qdrant for fast indexing and data compression. In this process, each data point is represented as a vector. The quantization splits the vector in half at a certain point, marking everything above as ""1"" and everything below as ""0"". This results in a string of bits that represents the original vector, making it much smaller and easier to compare. By supporting vector comparisons, binary quantization can significantly speed up query processing times, up to 40 times faster. This method is especially effective for OpenAI embeddings, where it has been shown to achieve a massive performance improvement at a lower cost of accuracy.","['#### What is Binary Quantization?\n\n\n\nQuantization is a technique used for reducing the total size of the database. It works by compressing vectors into a more compact representation at the cost of accuracy.\n\n\n\n[Binary Quantization](https://qdrant.tech/articles/binary-quantization/) is a fast indexing and data compression method used by Qdrant. It supports vector comparisons, which can dramatically speed up query processing times (up to 40x faster!).', '![](/blog/openai/Accuracy_Models.png)\n\n\n\nThe efficiency gains from Binary Quantization are as follows: \n\n\n\n- Reduced storage footprint: It helps with large-scale datasets. It also saves on memory, and scales up to 30x at the same cost. \n\n- Enhanced speed of data retrieval: Smaller data sizes generally leads to faster searches. \n\n- Accelerated search process: It is based on simplified distance calculations between vectors to bitwise operations. This enables real-time querying even in extensive databases.', 'By reducing storage needs, you can scale applications with lower costs. This addresses a critical challenge posed by the original embedding sizes. Binary Quantization also speeds the search process. It simplifies the complex distance calculations between vectors into more manageable bitwise operations, which supports potentially real-time searches across vast datasets.', '5 Keys to Learning from the Episode:\n\n\n\n1. The necessity of quantization and the complex challenges it helps to overcome.\n\n2. The transformative effects of binary quantization on processing speed and storage size reduction.\n\n3. A detailed exploration of oversampling and its real-time precision control in query search.\n\n4. Understanding the simplicity and effectiveness of binary quantization, especially when compared to more intricate quantization methods.', 'As is the case with other quantization methods, these benefits come at the cost of recall degradation. However, our implementation lets you balance the tradeoff between speed and recall accuracy at time of search, rather than time of index creation. \n\n\n\nThe rest of this article will cover:\n\n1. The importance of binary quantization\n\n2. Basic implementation using our Python client\n\n3. Benchmark analysis and usage recommendations\n\n\n\n## What is Binary Quantization?']","#### What is Binary Quantization?



Quantization is a technique used for reducing the total size of the database. It works by compressing vectors into a more compact representation at the cost of accuracy.



[Binary Quantization](https://qdrant.tech/articles/binary-quantization/) is a fast indexing and data compression method used by Qdrant. It supports vector comparisons, which can dramatically speed up query processing times (up to 40x faster!).
![](/blog/openai/Accuracy_Models.png)



The efficiency gains from Binary Quantization are as follows: 



- Reduced storage footprint: It helps with large-scale datasets. It also saves on memory, and scales up to 30x at the same cost. 

- Enhanced speed of data retrieval: Smaller data sizes generally leads to faster searches. 

- Accelerated search process: It is based on simplified distance calculations between vectors to bitwise operations. This enables real-time querying even in extensive databases.
By reducing storage needs, you can scale applications with lower costs. This addresses a critical challenge posed by the original embedding sizes. Binary Quantization also speeds the search process. It simplifies the complex distance calculations between vectors into more manageable bitwise operations, which supports potentially real-time searches across vast datasets.
5 Keys to Learning from the Episode:



1. The necessity of quantization and the complex challenges it helps to overcome.

2. The transformative effects of binary quantization on processing speed and storage size reduction.

3. A detailed exploration of oversampling and its real-time precision control in query search.

4. Understanding the simplicity and effectiveness of binary quantization, especially when compared to more intricate quantization methods.
As is the case with other quantization methods, these benefits come at the cost of recall degradation. However, our implementation lets you balance the tradeoff between speed and recall accuracy at time of search, rather than time of index creation. 



The rest of this article will cover:

1. The importance of binary quantization

2. Basic implementation using our Python client

3. Benchmark analysis and usage recommendations



## What is Binary Quantization?",0.33112582781456956,0.5,0.39840637450199207,0.08,0.12121212121212122,0.09638554216867469,0.152317880794702,0.23,0.18326693227091637,0.31788079470198677,0.48,0.38247011952191234,0.8201457262039185,0.6030195951461792,0.6293883323669434,0.6159218549728394,0.9693915722101727,0.787096936677699,159,1.4587155963302751,0.5464417655230579
True,,1953.4450000000002,931e972b,What is the primary function of vector embeddings in the context of machine learning and artificial intelligence?,"Vector embeddings play a crucial role in machine learning and artificial intelligence by converting complex data into a format that machines can easily understand and process. These embeddings represent data points in a multi-dimensional space, where similar data points are closer together and dissimilar data points are farther apart. By capturing the underlying relationships and similarities between data points, vector embeddings enable algorithms to perform tasks such as similarity search, recommendation systems, and natural language processing more effectively. In essence, vector embeddings help in transforming raw data into a structured and meaningful representation that can be utilized by machine learning models to make accurate predictions and decisions.","The primary function of vector embeddings in the context of machine learning and artificial intelligence is to transform high-dimensional data, such as text, images, or audio, into lower-dimensional vectors that capture the semantic meaning of the input data. These embeddings enable algorithms to process and analyze the data more efficiently, making it easier for machine learning models to work with complex and large datasets. By representing data in vector form, embeddings help in tasks like similarity comparison, classification, and clustering. Ultimately, the goal of vector embeddings is to enhance the performance of machine learning models by providing meaningful numerical representations of the input data.","- machine-learning

  - artificial intelligence



---



> **Embeddings** are numerical machine learning representations of the semantic of the input data. They capture the meaning of complex, high-dimensional data, like text, images, or audio, into vectors. Enabling algorithms to process and analyze the data more efficiently.
The **creation** of vector data (so we can store this high-dimensional data on our vector database) is primarily done through **embeddings**.



![](/articles_data/what-is-a-vector-database/Vector-Data.jpg)



### How do Embeddings Work?



Embeddings translate this high-dimensional data into a more manageable, **lower-dimensional** vector form that's more suitable for machine learning and data processing applications, typically through **neural network models**.
> The quality of the vector representations drives the performance. The embedding model that works best for you depends on your use case.





### Creating Vector Embeddings



Embeddings translate the complexities of human language to a format that computers can understand. It uses neural networks to assign **numerical values** to the input data, in a way that similar data has similar values.
![The process for turning raw data into embeddings and placing them into the vector space](/articles_data/what-are-embeddings/How-Embeddings-Work.jpg)
## Why Use Vector Embeddings?



The **nuances** of natural language or the hidden **meaning** in large datasets of images, sounds, or user interactions are hard to fit into a table. Traditional relational databases can't efficiently query most types of data being currently used and produced, making the **retrieval** of this information very limited.","['- machine-learning\n\n  - artificial intelligence\n\n\n\n---\n\n\n\n> **Embeddings** are numerical machine learning representations of the semantic of the input data. They capture the meaning of complex, high-dimensional data, like text, images, or audio, into vectors. Enabling algorithms to process and analyze the data more efficiently.', ""The **creation** of vector data (so we can store this high-dimensional data on our vector database) is primarily done through **embeddings**.\n\n\n\n![](/articles_data/what-is-a-vector-database/Vector-Data.jpg)\n\n\n\n### How do Embeddings Work?\n\n\n\nEmbeddings translate this high-dimensional data into a more manageable, **lower-dimensional** vector form that's more suitable for machine learning and data processing applications, typically through **neural network models**."", '> The quality of the vector representations drives the performance. The embedding model that works best for you depends on your use case.\n\n\n\n\n\n### Creating Vector Embeddings\n\n\n\nEmbeddings translate the complexities of human language to a format that computers can understand. It uses neural networks to assign **numerical values** to the input data, in a way that similar data has similar values.', '![The process for turning raw data into embeddings and placing them into the vector space](/articles_data/what-are-embeddings/How-Embeddings-Work.jpg)', ""## Why Use Vector Embeddings?\n\n\n\nThe **nuances** of natural language or the hidden **meaning** in large datasets of images, sounds, or user interactions are hard to fit into a table. Traditional relational databases can't efficiently query most types of data being currently used and produced, making the **retrieval** of this information very limited.""]","Question: What is the primary function of vector embeddings in the context of machine learning and artificial intelligence?\n\nContext: - machine-learning

- artificial intelligence



---



> **Embeddings** are numerical machine learning representations of the semantic of the input data. They capture the meaning of complex, high-dimensional data, like text, images, or audio, into vectors. Enabling algorithms to process and analyze the data more efficiently.
The **creation** of vector data (so we can store this high-dimensional data on our vector database) is primarily done through **embeddings**.



![](/articles_data/what-is-a-vector-database/Vector-Data.jpg)



### How do Embeddings Work?



Embeddings translate this high-dimensional data into a more manageable, **lower-dimensional** vector form that's more suitable for machine learning and data processing applications, typically through **neural network models**.
> The quality of the vector representations drives the performance. The embedding model that works best for you depends on your use case.





### Creating Vector Embeddings



Embeddings translate the complexities of human language to a format that computers can understand. It uses neural networks to assign **numerical values** to the input data, in a way that similar data has similar values.
![The process for turning raw data into embeddings and placing them into the vector space](/articles_data/what-are-embeddings/How-Embeddings-Work.jpg)
## Why Use Vector Embeddings?



The **nuances** of natural language or the hidden **meaning** in large datasets of images, sounds, or user interactions are hard to fit into a table. Traditional relational databases can't efficiently query most types of data being currently used and produced, making the **retrieval** of this information very limited.\n\nAnswer:",What is the primary function of vector embeddings in the context of machine learning and artificial intelligence?,"Vector embeddings play a crucial role in machine learning and artificial intelligence by converting complex data into a format that machines can easily understand and process. These embeddings represent data points in a multi-dimensional space, where similar data points are closer together and dissimilar data points are farther apart. By capturing the underlying relationships and similarities between data points, vector embeddings enable algorithms to perform tasks such as similarity search, recommendation systems, and natural language processing more effectively. In essence, vector embeddings help in transforming raw data into a structured and meaningful representation that can be utilized by machine learning models to make accurate predictions and decisions.","['- machine-learning\n\n  - artificial intelligence\n\n\n\n---\n\n\n\n> **Embeddings** are numerical machine learning representations of the semantic of the input data. They capture the meaning of complex, high-dimensional data, like text, images, or audio, into vectors. Enabling algorithms to process and analyze the data more efficiently.', ""The **creation** of vector data (so we can store this high-dimensional data on our vector database) is primarily done through **embeddings**.\n\n\n\n![](/articles_data/what-is-a-vector-database/Vector-Data.jpg)\n\n\n\n### How do Embeddings Work?\n\n\n\nEmbeddings translate this high-dimensional data into a more manageable, **lower-dimensional** vector form that's more suitable for machine learning and data processing applications, typically through **neural network models**."", '> The quality of the vector representations drives the performance. The embedding model that works best for you depends on your use case.\n\n\n\n\n\n### Creating Vector Embeddings\n\n\n\nEmbeddings translate the complexities of human language to a format that computers can understand. It uses neural networks to assign **numerical values** to the input data, in a way that similar data has similar values.', '![The process for turning raw data into embeddings and placing them into the vector space](/articles_data/what-are-embeddings/How-Embeddings-Work.jpg)', ""## Why Use Vector Embeddings?\n\n\n\nThe **nuances** of natural language or the hidden **meaning** in large datasets of images, sounds, or user interactions are hard to fit into a table. Traditional relational databases can't efficiently query most types of data being currently used and produced, making the **retrieval** of this information very limited.""]","- machine-learning

  - artificial intelligence



---



> **Embeddings** are numerical machine learning representations of the semantic of the input data. They capture the meaning of complex, high-dimensional data, like text, images, or audio, into vectors. Enabling algorithms to process and analyze the data more efficiently.
The **creation** of vector data (so we can store this high-dimensional data on our vector database) is primarily done through **embeddings**.



![](/articles_data/what-is-a-vector-database/Vector-Data.jpg)



### How do Embeddings Work?



Embeddings translate this high-dimensional data into a more manageable, **lower-dimensional** vector form that's more suitable for machine learning and data processing applications, typically through **neural network models**.
> The quality of the vector representations drives the performance. The embedding model that works best for you depends on your use case.





### Creating Vector Embeddings



Embeddings translate the complexities of human language to a format that computers can understand. It uses neural networks to assign **numerical values** to the input data, in a way that similar data has similar values.
![The process for turning raw data into embeddings and placing them into the vector space](/articles_data/what-are-embeddings/How-Embeddings-Work.jpg)
## Why Use Vector Embeddings?



The **nuances** of natural language or the hidden **meaning** in large datasets of images, sounds, or user interactions are hard to fit into a table. Traditional relational databases can't efficiently query most types of data being currently used and produced, making the **retrieval** of this information very limited.",0.5306122448979592,0.5048543689320388,0.5174129353233832,0.17525773195876287,0.16666666666666666,0.1708542713567839,0.2857142857142857,0.27184466019417475,0.27860696517412936,0.46938775510204084,0.44660194174757284,0.4577114427860697,0.8267699480056763,0.7420991063117981,0.7321743965148926,0.7371034026145935,0.9919056577491574,0.9922910928726196,104,0.9719626168224299,0.6189157168335071
True,,2443.306,35947b87,What is the concept of the `best_score` strategy introduced in version 1.6.0 of the recommendation system?,"The `best_score` strategy, introduced in version 1.6.0 of the recommendation system, is based on the idea of finding similar vectors by identifying those that are closer to a positive example while avoiding those that are closer to a negative one. This strategy measures each candidate against every example and selects the best positive and best negative scores. The final score is determined using a specific formula: if the best positive score is greater than the best negative score, the final score is set as the best positive score. Otherwise, the final score is calculated as the negative of the square of the best negative score. It is important to note that the performance of the `best_score` strategy is linearly impacted by the number of examples provided.","The concept of the `best_score` strategy introduced in version 1.6.0 of the recommendation system is based on the idea of finding similar vectors that are closer to a positive example while avoiding those that are closer to a negative example. This strategy takes into account multiple positive and negative examples separately, enhancing the diversity of the recommendations compared to the old strategy where only a single vector was considered.

The `best_score` strategy aims to provide a richer variety of recommendations by considering the proximity of vectors to positive examples and the distance from negative examples. This approach leads to a more nuanced and tailored set of recommendations based on the specific positive and negative examples provided in the request.","This is the default strategy that's going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.



### Best score strategy



*Available as of v1.6.0*



A new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.
##### One positive and one negative example



<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>



The more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there 

is just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making 

the variety richer.
```



Example result of this API would be



```json

{

  ""result"": [

    { ""id"": 10, ""score"": 0.81 },

    { ""id"": 14, ""score"": 0.75 },

    { ""id"": 11, ""score"": 0.73 }

  ],

  ""status"": ""ok"",

  ""time"": 0.001

}

```



The algorithm used to get the recommendations is selected from the available `strategy` options. Each of them has its own strengths and weaknesses, so experiment and choose the one that works best for your case.



### Average vector strategy
extended the API, so **you can now choose the strategy of how to find the recommended points**.



```http

POST /collections/{collection_name}/points/recommend

{

  ""positive"": [100, 231],

  ""negative"": [718, [0.2, 0.3, 0.4, 0.5]],

  ""filter"": {

        ""must"": [

            {

                ""key"": ""city"",

                ""match"": {

                    ""value"": ""London""

                }

            }

        ]

  },

  ""strategy"": ""average_vector"",

  ""limit"": 3

}

```
Metrics and Business Metrics](https://neptune.ai/blog/recommender-systems-metrics)* is a great introduction to that topic. 

I selected the following ones:



- NDCG@5, NDCG@10

- DCG@5, DCG@10

- MRR@5, MRR@10

- Precision@5, Precision@10

- Recall@5, Recall@10



Since both systems return a score for each result, we could use DCG and NDCG metrics. However, BM25 scores are not

normalized be default. We performed the normalization to a range `[0, 1]` by dividing each score by the maximum","['This is the default strategy that\'s going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.\n\n\n\n### Best score strategy\n\n\n\n*Available as of v1.6.0*\n\n\n\nA new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.', '##### One positive and one negative example\n\n\n\n<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>\n\n\n\nThe more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there \n\nis just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making \n\nthe variety richer.', '```\n\n\n\nExample result of this API would be\n\n\n\n```json\n\n{\n\n  ""result"": [\n\n    { ""id"": 10, ""score"": 0.81 },\n\n    { ""id"": 14, ""score"": 0.75 },\n\n    { ""id"": 11, ""score"": 0.73 }\n\n  ],\n\n  ""status"": ""ok"",\n\n  ""time"": 0.001\n\n}\n\n```\n\n\n\nThe algorithm used to get the recommendations is selected from the available `strategy` options. Each of them has its own strengths and weaknesses, so experiment and choose the one that works best for your case.\n\n\n\n### Average vector strategy', 'extended the API, so **you can now choose the strategy of how to find the recommended points**.\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/recommend\n\n{\n\n  ""positive"": [100, 231],\n\n  ""negative"": [718, [0.2, 0.3, 0.4, 0.5]],\n\n  ""filter"": {\n\n        ""must"": [\n\n            {\n\n                ""key"": ""city"",\n\n                ""match"": {\n\n                    ""value"": ""London""\n\n                }\n\n            }\n\n        ]\n\n  },\n\n  ""strategy"": ""average_vector"",\n\n  ""limit"": 3\n\n}\n\n```', 'Metrics and Business Metrics](https://neptune.ai/blog/recommender-systems-metrics)* is a great introduction to that topic. \n\nI selected the following ones:\n\n\n\n- NDCG@5, NDCG@10\n\n- DCG@5, DCG@10\n\n- MRR@5, MRR@10\n\n- Precision@5, Precision@10\n\n- Recall@5, Recall@10\n\n\n\nSince both systems return a score for each result, we could use DCG and NDCG metrics. However, BM25 scores are not\n\nnormalized be default. We performed the normalization to a range `[0, 1]` by dividing each score by the maximum']","Question: What is the concept of the `best_score` strategy introduced in version 1.6.0 of the recommendation system?\n\nContext: This is the default strategy that's going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.



### Best score strategy



*Available as of v1.6.0*



A new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.
##### One positive and one negative example



<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>



The more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there 

is just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making 

the variety richer.
```



Example result of this API would be



```json

{

""result"": [

{ ""id"": 10, ""score"": 0.81 },

{ ""id"": 14, ""score"": 0.75 },

{ ""id"": 11, ""score"": 0.73 }

],

""status"": ""ok"",

""time"": 0.001

}

```



The algorithm used to get the recommendations is selected from the available `strategy` options. Each of them has its own strengths and weaknesses, so experiment and choose the one that works best for your case.



### Average vector strategy
extended the API, so **you can now choose the strategy of how to find the recommended points**.



```http

POST /collections/{collection_name}/points/recommend

{

""positive"": [100, 231],

""negative"": [718, [0.2, 0.3, 0.4, 0.5]],

""filter"": {

""must"": [

{

""key"": ""city"",

""match"": {

""value"": ""London""

}

}

]

},

""strategy"": ""average_vector"",

""limit"": 3

}

```
Metrics and Business Metrics](https://neptune.ai/blog/recommender-systems-metrics)* is a great introduction to that topic. 

I selected the following ones:



- NDCG@5, NDCG@10

- DCG@5, DCG@10

- MRR@5, MRR@10

- Precision@5, Precision@10

- Recall@5, Recall@10



Since both systems return a score for each result, we could use DCG and NDCG metrics. However, BM25 scores are not

normalized be default. We performed the normalization to a range `[0, 1]` by dividing each score by the maximum\n\nAnswer:",What is the concept of the `best_score` strategy introduced in version 1.6.0 of the recommendation system?,"The `best_score` strategy, introduced in version 1.6.0 of the recommendation system, is based on the idea of finding similar vectors by identifying those that are closer to a positive example while avoiding those that are closer to a negative one. This strategy measures each candidate against every example and selects the best positive and best negative scores. The final score is determined using a specific formula: if the best positive score is greater than the best negative score, the final score is set as the best positive score. Otherwise, the final score is calculated as the negative of the square of the best negative score. It is important to note that the performance of the `best_score` strategy is linearly impacted by the number of examples provided.","['This is the default strategy that\'s going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.\n\n\n\n### Best score strategy\n\n\n\n*Available as of v1.6.0*\n\n\n\nA new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.', '##### One positive and one negative example\n\n\n\n<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>\n\n\n\nThe more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there \n\nis just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making \n\nthe variety richer.', '```\n\n\n\nExample result of this API would be\n\n\n\n```json\n\n{\n\n  ""result"": [\n\n    { ""id"": 10, ""score"": 0.81 },\n\n    { ""id"": 14, ""score"": 0.75 },\n\n    { ""id"": 11, ""score"": 0.73 }\n\n  ],\n\n  ""status"": ""ok"",\n\n  ""time"": 0.001\n\n}\n\n```\n\n\n\nThe algorithm used to get the recommendations is selected from the available `strategy` options. Each of them has its own strengths and weaknesses, so experiment and choose the one that works best for your case.\n\n\n\n### Average vector strategy', 'extended the API, so **you can now choose the strategy of how to find the recommended points**.\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/recommend\n\n{\n\n  ""positive"": [100, 231],\n\n  ""negative"": [718, [0.2, 0.3, 0.4, 0.5]],\n\n  ""filter"": {\n\n        ""must"": [\n\n            {\n\n                ""key"": ""city"",\n\n                ""match"": {\n\n                    ""value"": ""London""\n\n                }\n\n            }\n\n        ]\n\n  },\n\n  ""strategy"": ""average_vector"",\n\n  ""limit"": 3\n\n}\n\n```', 'Metrics and Business Metrics](https://neptune.ai/blog/recommender-systems-metrics)* is a great introduction to that topic. \n\nI selected the following ones:\n\n\n\n- NDCG@5, NDCG@10\n\n- DCG@5, DCG@10\n\n- MRR@5, MRR@10\n\n- Precision@5, Precision@10\n\n- Recall@5, Recall@10\n\n\n\nSince both systems return a score for each result, we could use DCG and NDCG metrics. However, BM25 scores are not\n\nnormalized be default. We performed the normalization to a range `[0, 1]` by dividing each score by the maximum']","This is the default strategy that's going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.



### Best score strategy



*Available as of v1.6.0*



A new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.
##### One positive and one negative example



<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>



The more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there 

is just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making 

the variety richer.
```



Example result of this API would be



```json

{

  ""result"": [

    { ""id"": 10, ""score"": 0.81 },

    { ""id"": 14, ""score"": 0.75 },

    { ""id"": 11, ""score"": 0.73 }

  ],

  ""status"": ""ok"",

  ""time"": 0.001

}

```



The algorithm used to get the recommendations is selected from the available `strategy` options. Each of them has its own strengths and weaknesses, so experiment and choose the one that works best for your case.



### Average vector strategy
extended the API, so **you can now choose the strategy of how to find the recommended points**.



```http

POST /collections/{collection_name}/points/recommend

{

  ""positive"": [100, 231],

  ""negative"": [718, [0.2, 0.3, 0.4, 0.5]],

  ""filter"": {

        ""must"": [

            {

                ""key"": ""city"",

                ""match"": {

                    ""value"": ""London""

                }

            }

        ]

  },

  ""strategy"": ""average_vector"",

  ""limit"": 3

}

```
Metrics and Business Metrics](https://neptune.ai/blog/recommender-systems-metrics)* is a great introduction to that topic. 

I selected the following ones:



- NDCG@5, NDCG@10

- DCG@5, DCG@10

- MRR@5, MRR@10

- Precision@5, Precision@10

- Recall@5, Recall@10



Since both systems return a score for each result, we could use DCG and NDCG metrics. However, BM25 scores are not

normalized be default. We performed the normalization to a range `[0, 1]` by dividing each score by the maximum",0.5471698113207547,0.5225225225225225,0.5345622119815667,0.37142857142857144,0.35454545454545455,0.3627906976744186,0.4528301886792453,0.43243243243243246,0.4423963133640553,0.5283018867924528,0.5045045045045045,0.5161290322580644,0.8829871416091919,0.6646277904510498,0.651635468006134,0.658067524433136,0.8773609674535692,0.576417338848114,119,0.9444444444444444,0.3185224014182241
True,,4439.056,7f84d885,How does Qdrant handle sparse vectors and what changes have been made to accommodate them?,"Qdrant, until recently, was not able to handle sparse vectors natively. The majority of dimensions in sparse vectors are usually zeros, making them theoretically high dimensional. However, Qdrant stores sparse vectors differently by only keeping track of the non-zero dimensions. Previously, some users attempted to convert sparse vectors to dense vectors as a workaround, but this was not considered the best solution. In response to user demand for a single tool that can handle both sparse and dense vectors, Qdrant has now introduced support for sparse vectors. This change allows users to work with both sparse and dense vectors seamlessly within the Qdrant tool, eliminating the need for alternative solutions or tools for keyword lookup.","Qdrant now has the capability to handle sparse vectors natively, starting from version 1.7.0. Some key changes have been made to accommodate sparse vectors in Qdrant:

1. **Support for Sparse Vectors:** Qdrant now supports sparse vectors, which are vectors characterized by a high proportion of zeroes. This is a significant addition that allows users to work with sparse data efficiently.

2. **Efficient Indexing:** Qdrant utilizes an inverted index structure to store vectors for each non-zero dimension. This optimization helps in reducing memory usage and improves search speed, especially when dealing with sparse vectors.

3. **Consistency with Named Vectors API:** Extra care has been taken to ensure that the handling of sparse vectors is consistent with the existing named vectors API in Qdrant. This consistency makes it easier for users to work with sparse vectors in their codebases without major changes.

4. **Sorting on Index Persisting:** Users no longer need to sort the indices and values before upserting them into Qdrant. Qdrant will handle the sorting when the index is persisted, for example, on disk. This simplifies the process for users and improves performance.

5. **Search Mechanism:** During a search, the index will identify vectors with non-zero values in query dimensions. This mechanism ensures that only relevant vectors are considered during the search process, optimizing efficiency.

Overall, the addition of support for sparse vectors in Qdrant enhances its capabilities and provides users with a more versatile and efficient tool for handling sparse data in their applications.","Until now, Qdrant has not been able to handle sparse vectors natively. Some were trying to convert them to dense vectors, but that was not the best solution or a suggested way. We even wrote a piece with [our thoughts on building a hybrid search](/articles/hybrid-search/), and we encouraged you to use a different tool for keyword lookup.
Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk.
performance.



## Sparse Vector Index



*Available as of v1.7.0*



### Key Features of Sparse Vector Index

- **Support for Sparse Vectors:** Qdrant supports sparse vectors, characterized by a high proportion of zeroes.

- **Efficient Indexing:** Utilizes an inverted index structure to store vectors for each non-zero dimension, optimizing memory and search speed.



### Search Mechanism

- **Index Usage:** The index identifies vectors with non-zero values in query dimensions during a search.
},

)

```





### 3. Inserting Sparse Vectors



Here, we see the process of inserting a sparse vector into the Qdrant collection. This step is key to building a dataset that can be quickly retrieved in the first stage of the retrieval process, utilizing the efficiency of sparse vectors. Since this is for demonstration purposes, we insert only one point with Sparse Vector and no dense vector.



```python

client.upsert(

    collection_name=COLLECTION_NAME,

    points=[
# Insert sparse vector into Qdrant collection

point_id = 1  # Assign a unique ID for the point

```



### 2. Creating a Collection with Sparse Vector Support



```python

client.recreate_collection(

    collection_name=COLLECTION_NAME,

    vectors_config={},

    sparse_vectors_config={

        ""text"": models.SparseVectorParams(

            index=models.SparseIndexParams(

                on_disk=False,

            )

        )

    },

)

```





### 3. Inserting Sparse Vectors","['Until now, Qdrant has not been able to handle sparse vectors natively. Some were trying to convert them to dense vectors, but that was not the best solution or a suggested way. We even wrote a piece with [our thoughts on building a hybrid search](/articles/hybrid-search/), and we encouraged you to use a different tool for keyword lookup.', ""Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk."", 'performance.\n\n\n\n## Sparse Vector Index\n\n\n\n*Available as of v1.7.0*\n\n\n\n### Key Features of Sparse Vector Index\n\n- **Support for Sparse Vectors:** Qdrant supports sparse vectors, characterized by a high proportion of zeroes.\n\n- **Efficient Indexing:** Utilizes an inverted index structure to store vectors for each non-zero dimension, optimizing memory and search speed.\n\n\n\n### Search Mechanism\n\n- **Index Usage:** The index identifies vectors with non-zero values in query dimensions during a search.', '},\n\n)\n\n```\n\n\n\n\n\n### 3. Inserting Sparse Vectors\n\n\n\nHere, we see the process of inserting a sparse vector into the Qdrant collection. This step is key to building a dataset that can be quickly retrieved in the first stage of the retrieval process, utilizing the efficiency of sparse vectors. Since this is for demonstration purposes, we insert only one point with Sparse Vector and no dense vector.\n\n\n\n```python\n\nclient.upsert(\n\n    collection_name=COLLECTION_NAME,\n\n    points=[', '# Insert sparse vector into Qdrant collection\n\npoint_id = 1  # Assign a unique ID for the point\n\n```\n\n\n\n### 2. Creating a Collection with Sparse Vector Support\n\n\n\n```python\n\nclient.recreate_collection(\n\n    collection_name=COLLECTION_NAME,\n\n    vectors_config={},\n\n    sparse_vectors_config={\n\n        ""text"": models.SparseVectorParams(\n\n            index=models.SparseIndexParams(\n\n                on_disk=False,\n\n            )\n\n        )\n\n    },\n\n)\n\n```\n\n\n\n\n\n### 3. Inserting Sparse Vectors']","Question: How does Qdrant handle sparse vectors and what changes have been made to accommodate them?\n\nContext: Until now, Qdrant has not been able to handle sparse vectors natively. Some were trying to convert them to dense vectors, but that was not the best solution or a suggested way. We even wrote a piece with [our thoughts on building a hybrid search](/articles/hybrid-search/), and we encouraged you to use a different tool for keyword lookup.
Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk.
performance.



## Sparse Vector Index



*Available as of v1.7.0*



### Key Features of Sparse Vector Index

- **Support for Sparse Vectors:** Qdrant supports sparse vectors, characterized by a high proportion of zeroes.

- **Efficient Indexing:** Utilizes an inverted index structure to store vectors for each non-zero dimension, optimizing memory and search speed.



### Search Mechanism

- **Index Usage:** The index identifies vectors with non-zero values in query dimensions during a search.
},

)

```





### 3. Inserting Sparse Vectors



Here, we see the process of inserting a sparse vector into the Qdrant collection. This step is key to building a dataset that can be quickly retrieved in the first stage of the retrieval process, utilizing the efficiency of sparse vectors. Since this is for demonstration purposes, we insert only one point with Sparse Vector and no dense vector.



```python

client.upsert(

collection_name=COLLECTION_NAME,

points=[
# Insert sparse vector into Qdrant collection

point_id = 1  # Assign a unique ID for the point

```



### 2. Creating a Collection with Sparse Vector Support



```python

client.recreate_collection(

collection_name=COLLECTION_NAME,

vectors_config={},

sparse_vectors_config={

""text"": models.SparseVectorParams(

index=models.SparseIndexParams(

on_disk=False,

)

)

},

)

```





### 3. Inserting Sparse Vectors\n\nAnswer:",How does Qdrant handle sparse vectors and what changes have been made to accommodate them?,"Qdrant, until recently, was not able to handle sparse vectors natively. The majority of dimensions in sparse vectors are usually zeros, making them theoretically high dimensional. However, Qdrant stores sparse vectors differently by only keeping track of the non-zero dimensions. Previously, some users attempted to convert sparse vectors to dense vectors as a workaround, but this was not considered the best solution. In response to user demand for a single tool that can handle both sparse and dense vectors, Qdrant has now introduced support for sparse vectors. This change allows users to work with both sparse and dense vectors seamlessly within the Qdrant tool, eliminating the need for alternative solutions or tools for keyword lookup.","['Until now, Qdrant has not been able to handle sparse vectors natively. Some were trying to convert them to dense vectors, but that was not the best solution or a suggested way. We even wrote a piece with [our thoughts on building a hybrid search](/articles/hybrid-search/), and we encouraged you to use a different tool for keyword lookup.', ""Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk."", 'performance.\n\n\n\n## Sparse Vector Index\n\n\n\n*Available as of v1.7.0*\n\n\n\n### Key Features of Sparse Vector Index\n\n- **Support for Sparse Vectors:** Qdrant supports sparse vectors, characterized by a high proportion of zeroes.\n\n- **Efficient Indexing:** Utilizes an inverted index structure to store vectors for each non-zero dimension, optimizing memory and search speed.\n\n\n\n### Search Mechanism\n\n- **Index Usage:** The index identifies vectors with non-zero values in query dimensions during a search.', '},\n\n)\n\n```\n\n\n\n\n\n### 3. Inserting Sparse Vectors\n\n\n\nHere, we see the process of inserting a sparse vector into the Qdrant collection. This step is key to building a dataset that can be quickly retrieved in the first stage of the retrieval process, utilizing the efficiency of sparse vectors. Since this is for demonstration purposes, we insert only one point with Sparse Vector and no dense vector.\n\n\n\n```python\n\nclient.upsert(\n\n    collection_name=COLLECTION_NAME,\n\n    points=[', '# Insert sparse vector into Qdrant collection\n\npoint_id = 1  # Assign a unique ID for the point\n\n```\n\n\n\n### 2. Creating a Collection with Sparse Vector Support\n\n\n\n```python\n\nclient.recreate_collection(\n\n    collection_name=COLLECTION_NAME,\n\n    vectors_config={},\n\n    sparse_vectors_config={\n\n        ""text"": models.SparseVectorParams(\n\n            index=models.SparseIndexParams(\n\n                on_disk=False,\n\n            )\n\n        )\n\n    },\n\n)\n\n```\n\n\n\n\n\n### 3. Inserting Sparse Vectors']","Until now, Qdrant has not been able to handle sparse vectors natively. Some were trying to convert them to dense vectors, but that was not the best solution or a suggested way. We even wrote a piece with [our thoughts on building a hybrid search](/articles/hybrid-search/), and we encouraged you to use a different tool for keyword lookup.
Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk.
performance.



## Sparse Vector Index



*Available as of v1.7.0*



### Key Features of Sparse Vector Index

- **Support for Sparse Vectors:** Qdrant supports sparse vectors, characterized by a high proportion of zeroes.

- **Efficient Indexing:** Utilizes an inverted index structure to store vectors for each non-zero dimension, optimizing memory and search speed.



### Search Mechanism

- **Index Usage:** The index identifies vectors with non-zero values in query dimensions during a search.
},

)

```





### 3. Inserting Sparse Vectors



Here, we see the process of inserting a sparse vector into the Qdrant collection. This step is key to building a dataset that can be quickly retrieved in the first stage of the retrieval process, utilizing the efficiency of sparse vectors. Since this is for demonstration purposes, we insert only one point with Sparse Vector and no dense vector.



```python

client.upsert(

    collection_name=COLLECTION_NAME,

    points=[
# Insert sparse vector into Qdrant collection

point_id = 1  # Assign a unique ID for the point

```



### 2. Creating a Collection with Sparse Vector Support



```python

client.recreate_collection(

    collection_name=COLLECTION_NAME,

    vectors_config={},

    sparse_vectors_config={

        ""text"": models.SparseVectorParams(

            index=models.SparseIndexParams(

                on_disk=False,

            )

        )

    },

)

```





### 3. Inserting Sparse Vectors",0.2863247863247863,0.6146788990825688,0.39067055393586003,0.0815450643776824,0.17592592592592593,0.11143695014662758,0.17094017094017094,0.3669724770642202,0.23323615160349853,0.24358974358974358,0.5229357798165137,0.33236151603498537,0.9054970741271973,0.5742747187614441,0.6311473250389099,0.6013693809509277,0.6040441563955563,0.5842016321378953,245,2.130434782608696,0.45972179509983074
True,,2401.809,1687b327,What is the purpose of the `prefix` parameter in the configuration options for the Qdrant instance?,"The `prefix` parameter in the configuration options for the Qdrant instance serves the purpose of adding a specific prefix to the REST URL path. For example, setting the `prefix` parameter to `service/v1` would result in the REST API endpoint being accessed at `http://localhost:6333/service/v1/{qdrant-endpoint}`. This allows for customization and organization of the API endpoints under a specific path, making it easier to manage and access different functionalities within the Qdrant instance.","The `prefix` parameter in the configuration options for the Qdrant instance is used to define a common prefix for all environment variables related to Qdrant. This prefix helps organize and distinguish Qdrant-specific environment variables from other variables in the system.

In the given example, the `prefix` used is `QDRANT__`. So, all Qdrant-related environment variables are prefixed with `QDRANT__` followed by a double underscore `__`. This naming convention helps ensure that the configuration options for Qdrant are easily identifiable and do not clash with other environment variables that may be present in the system.

By using a `prefix`, it becomes easier to manage and configure the Qdrant instance as all relevant environment variables are grouped under a common naming convention.","(see [ordering](#order-and-priority)).



All environment variables are prefixed with `QDRANT__` and are separated with

`__`.



These variables:



```bash

QDRANT__LOG_LEVEL=INFO

QDRANT__SERVICE__HTTP_PORT=6333

QDRANT__SERVICE__ENABLE_TLS=1

QDRANT__TLS__CERT=./tls/cert.pem

QDRANT__TLS__CERT_TTL=3600

```



result in this configuration:



```yaml

log_level: INFO

service:

  http_port: 6333

  enable_tls: true

tls:

  cert: ./tls/cert.pem

  cert_ttl: 3600

```
WITH ENGINE = ""qdrant"",

PARAMETERS = {

    ""location"": "":memory:"",

    ""collection_config"": {

        ""size"": 386,

        ""distance"": ""Cosine""

    }

}

```



The available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).



## Creating a new table
config: Some(Config::Params(VectorParams {

                size: 768,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        optimizers_config: Some(OptimizersConfigDiff {

            default_segment_number: Some(16),

            ..Default::default()

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
config: Some(Config::Params(VectorParams {

                size: 768,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        optimizers_config: Some(OptimizersConfigDiff {

            memmap_threshold: Some(20000),

            ..Default::default()

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createCollectionAsync(

        CreateCollection.newBuilder()

            .setCollectionName(""{collection_name}"")

            .setVectorsConfig(

                VectorsConfig.newBuilder()

                    .setParams(

                        VectorParams.newBuilder()

                            .setSize(768)","['(see [ordering](#order-and-priority)).\n\n\n\nAll environment variables are prefixed with `QDRANT__` and are separated with\n\n`__`.\n\n\n\nThese variables:\n\n\n\n```bash\n\nQDRANT__LOG_LEVEL=INFO\n\nQDRANT__SERVICE__HTTP_PORT=6333\n\nQDRANT__SERVICE__ENABLE_TLS=1\n\nQDRANT__TLS__CERT=./tls/cert.pem\n\nQDRANT__TLS__CERT_TTL=3600\n\n```\n\n\n\nresult in this configuration:\n\n\n\n```yaml\n\nlog_level: INFO\n\nservice:\n\n  http_port: 6333\n\n  enable_tls: true\n\ntls:\n\n  cert: ./tls/cert.pem\n\n  cert_ttl: 3600\n\n```', 'WITH ENGINE = ""qdrant"",\n\nPARAMETERS = {\n\n    ""location"": "":memory:"",\n\n    ""collection_config"": {\n\n        ""size"": 386,\n\n        ""distance"": ""Cosine""\n\n    }\n\n}\n\n```\n\n\n\nThe available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).\n\n\n\n## Creating a new table', 'config: Some(Config::Params(VectorParams {\n\n                size: 768,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        optimizers_config: Some(OptimizersConfigDiff {\n\n            default_segment_number: Some(16),\n\n            ..Default::default()\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;', 'config: Some(Config::Params(VectorParams {\n\n                size: 768,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        optimizers_config: Some(OptimizersConfigDiff {\n\n            memmap_threshold: Some(20000),\n\n            ..Default::default()\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;', 'import io.qdrant.client.grpc.Collections.VectorsConfig;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createCollectionAsync(\n\n        CreateCollection.newBuilder()\n\n            .setCollectionName(""{collection_name}"")\n\n            .setVectorsConfig(\n\n                VectorsConfig.newBuilder()\n\n                    .setParams(\n\n                        VectorParams.newBuilder()\n\n                            .setSize(768)']","Question: What is the purpose of the `prefix` parameter in the configuration options for the Qdrant instance?\n\nContext: (see [ordering](#order-and-priority)).



All environment variables are prefixed with `QDRANT__` and are separated with

`__`.



These variables:



```bash

QDRANT__LOG_LEVEL=INFO

QDRANT__SERVICE__HTTP_PORT=6333

QDRANT__SERVICE__ENABLE_TLS=1

QDRANT__TLS__CERT=./tls/cert.pem

QDRANT__TLS__CERT_TTL=3600

```



result in this configuration:



```yaml

log_level: INFO

service:

http_port: 6333

enable_tls: true

tls:

cert: ./tls/cert.pem

cert_ttl: 3600

```
WITH ENGINE = ""qdrant"",

PARAMETERS = {

""location"": "":memory:"",

""collection_config"": {

""size"": 386,

""distance"": ""Cosine""

}

}

```



The available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).



## Creating a new table
config: Some(Config::Params(VectorParams {

size: 768,

distance: Distance::Cosine.into(),

..Default::default()

})),

}),

optimizers_config: Some(OptimizersConfigDiff {

default_segment_number: Some(16),

..Default::default()

}),

..Default::default()

})

.await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
config: Some(Config::Params(VectorParams {

size: 768,

distance: Distance::Cosine.into(),

..Default::default()

})),

}),

optimizers_config: Some(OptimizersConfigDiff {

memmap_threshold: Some(20000),

..Default::default()

}),

..Default::default()

})

.await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

.createCollectionAsync(

CreateCollection.newBuilder()

.setCollectionName(""{collection_name}"")

.setVectorsConfig(

VectorsConfig.newBuilder()

.setParams(

VectorParams.newBuilder()

.setSize(768)\n\nAnswer:",What is the purpose of the `prefix` parameter in the configuration options for the Qdrant instance?,"The `prefix` parameter in the configuration options for the Qdrant instance serves the purpose of adding a specific prefix to the REST URL path. For example, setting the `prefix` parameter to `service/v1` would result in the REST API endpoint being accessed at `http://localhost:6333/service/v1/{qdrant-endpoint}`. This allows for customization and organization of the API endpoints under a specific path, making it easier to manage and access different functionalities within the Qdrant instance.","['(see [ordering](#order-and-priority)).\n\n\n\nAll environment variables are prefixed with `QDRANT__` and are separated with\n\n`__`.\n\n\n\nThese variables:\n\n\n\n```bash\n\nQDRANT__LOG_LEVEL=INFO\n\nQDRANT__SERVICE__HTTP_PORT=6333\n\nQDRANT__SERVICE__ENABLE_TLS=1\n\nQDRANT__TLS__CERT=./tls/cert.pem\n\nQDRANT__TLS__CERT_TTL=3600\n\n```\n\n\n\nresult in this configuration:\n\n\n\n```yaml\n\nlog_level: INFO\n\nservice:\n\n  http_port: 6333\n\n  enable_tls: true\n\ntls:\n\n  cert: ./tls/cert.pem\n\n  cert_ttl: 3600\n\n```', 'WITH ENGINE = ""qdrant"",\n\nPARAMETERS = {\n\n    ""location"": "":memory:"",\n\n    ""collection_config"": {\n\n        ""size"": 386,\n\n        ""distance"": ""Cosine""\n\n    }\n\n}\n\n```\n\n\n\nThe available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).\n\n\n\n## Creating a new table', 'config: Some(Config::Params(VectorParams {\n\n                size: 768,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        optimizers_config: Some(OptimizersConfigDiff {\n\n            default_segment_number: Some(16),\n\n            ..Default::default()\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;', 'config: Some(Config::Params(VectorParams {\n\n                size: 768,\n\n                distance: Distance::Cosine.into(),\n\n                ..Default::default()\n\n            })),\n\n        }),\n\n        optimizers_config: Some(OptimizersConfigDiff {\n\n            memmap_threshold: Some(20000),\n\n            ..Default::default()\n\n        }),\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;', 'import io.qdrant.client.grpc.Collections.VectorsConfig;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createCollectionAsync(\n\n        CreateCollection.newBuilder()\n\n            .setCollectionName(""{collection_name}"")\n\n            .setVectorsConfig(\n\n                VectorsConfig.newBuilder()\n\n                    .setParams(\n\n                        VectorParams.newBuilder()\n\n                            .setSize(768)']","(see [ordering](#order-and-priority)).



All environment variables are prefixed with `QDRANT__` and are separated with

`__`.



These variables:



```bash

QDRANT__LOG_LEVEL=INFO

QDRANT__SERVICE__HTTP_PORT=6333

QDRANT__SERVICE__ENABLE_TLS=1

QDRANT__TLS__CERT=./tls/cert.pem

QDRANT__TLS__CERT_TTL=3600

```



result in this configuration:



```yaml

log_level: INFO

service:

  http_port: 6333

  enable_tls: true

tls:

  cert: ./tls/cert.pem

  cert_ttl: 3600

```
WITH ENGINE = ""qdrant"",

PARAMETERS = {

    ""location"": "":memory:"",

    ""collection_config"": {

        ""size"": 386,

        ""distance"": ""Cosine""

    }

}

```



The available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).



## Creating a new table
config: Some(Config::Params(VectorParams {

                size: 768,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        optimizers_config: Some(OptimizersConfigDiff {

            default_segment_number: Some(16),

            ..Default::default()

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
config: Some(Config::Params(VectorParams {

                size: 768,

                distance: Distance::Cosine.into(),

                ..Default::default()

            })),

        }),

        optimizers_config: Some(OptimizersConfigDiff {

            memmap_threshold: Some(20000),

            ..Default::default()

        }),

        ..Default::default()

    })

    .await?;

```



```java

import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;
import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createCollectionAsync(

        CreateCollection.newBuilder()

            .setCollectionName(""{collection_name}"")

            .setVectorsConfig(

                VectorsConfig.newBuilder()

                    .setParams(

                        VectorParams.newBuilder()

                            .setSize(768)",0.2803738317757009,0.45454545454545453,0.34682080924855485,0.10377358490566038,0.16923076923076924,0.1286549707602339,0.21495327102803738,0.3484848484848485,0.2658959537572254,0.2616822429906542,0.42424242424242425,0.32369942196531787,0.7782497406005859,0.6477338075637817,0.6466971635818481,0.6472150683403015,0.9083072685947021,0.5409081677595775,118,1.6388888888888888,0.4185618939291998
True,,743.968,39b1a105,What is the default scoring metric used in Qdrant for search operations?,"The default scoring metric used in Qdrant for search operations is `Dot product`. It is not necessary to specify this metric explicitly as it is the default setting. However, Qdrant also supports other distance metrics such as Cosine for scoring. When performing a search operation in Qdrant, if no specific metric is mentioned, the system will automatically use the Dot product as the scoring metric.",The default scoring metric used in Qdrant for search operations is the Dot product.,"| Index| Sparse Query | Dense Query |

| --- | --- | --- | 

| Scoring Metric | Default is `Dot product`, no need to specify it | `Distance` has supported metrics e.g. Dot, Cosine |

| Search Type | Always exact in Qdrant | HNSW is an approximate NN |

| Return Behaviour | Returns only vectors with non-zero values in the same indices as the query vector | Returns `limit` vectors |



In general, the speed of the search is proportional to the number of non-zero values in the query vector.



```http
qdrant: &QdrantClient,

) -> Result<Vec<ScoredPoint>> {

    Ok(qdrant.search_points(&SearchPoints {

        collection_name,

        limit: 5, // use what fits your use case here

        with_payload: Some(true.into()),

        vector: embed(client, text, api_key)?,

        ..Default::default()

    }).await?.result)

}

```
let search_result = client

    .search_points(&SearchPoints {

        collection_name: ""test_collection"".to_string(),

        vector: vec![0.2, 0.1, 0.9, 0.7],

        filter: Some(Filter::all([Condition::matches(

            ""city"",

            ""London"".to_string(),

        )])),

        limit: 2,

        ..Default::default()

    })

    .await?;



dbg!(search_result);

```



```java

import static io.qdrant.client.ConditionFactory.matchKeyword;



List<ScoredPoint> searchResult =

    client
search_points: searches,

        read_consistency: None,

        ..Default::default()

    })

    .await?;

```



```java

import java.util.List;



import static io.qdrant.client.ConditionFactory.matchKeyword;



import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Points.Filter;

import io.qdrant.client.grpc.Points.SearchPoints;



QdrantClient client =
to do it. 



## Wrapping up



Assessing the quality of retrieval is a critical aspect of evaluating semantic search performance. It is imperative to measure retrieval quality when aiming for optimal quality of.

your search results. Qdrant provides a built-in exact search mode, which can be used to measure the quality of the ANN algorithm itself, 

even in an automated way, as part of your CI/CD pipeline.","['| Index| Sparse Query | Dense Query |\n\n| --- | --- | --- | \n\n| Scoring Metric | Default is `Dot product`, no need to specify it | `Distance` has supported metrics e.g. Dot, Cosine |\n\n| Search Type | Always exact in Qdrant | HNSW is an approximate NN |\n\n| Return Behaviour | Returns only vectors with non-zero values in the same indices as the query vector | Returns `limit` vectors |\n\n\n\nIn general, the speed of the search is proportional to the number of non-zero values in the query vector.\n\n\n\n```http', 'qdrant: &QdrantClient,\n\n) -> Result<Vec<ScoredPoint>> {\n\n    Ok(qdrant.search_points(&SearchPoints {\n\n        collection_name,\n\n        limit: 5, // use what fits your use case here\n\n        with_payload: Some(true.into()),\n\n        vector: embed(client, text, api_key)?,\n\n        ..Default::default()\n\n    }).await?.result)\n\n}\n\n```', 'let search_result = client\n\n    .search_points(&SearchPoints {\n\n        collection_name: ""test_collection"".to_string(),\n\n        vector: vec![0.2, 0.1, 0.9, 0.7],\n\n        filter: Some(Filter::all([Condition::matches(\n\n            ""city"",\n\n            ""London"".to_string(),\n\n        )])),\n\n        limit: 2,\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n\n\ndbg!(search_result);\n\n```\n\n\n\n```java\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\n\nList<ScoredPoint> searchResult =\n\n    client', 'search_points: searches,\n\n        read_consistency: None,\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Points.Filter;\n\nimport io.qdrant.client.grpc.Points.SearchPoints;\n\n\n\nQdrantClient client =', 'to do it. \n\n\n\n## Wrapping up\n\n\n\nAssessing the quality of retrieval is a critical aspect of evaluating semantic search performance. It is imperative to measure retrieval quality when aiming for optimal quality of.\n\nyour search results. Qdrant provides a built-in exact search mode, which can be used to measure the quality of the ANN algorithm itself, \n\neven in an automated way, as part of your CI/CD pipeline.']","Question: What is the default scoring metric used in Qdrant for search operations?\n\nContext: | Index| Sparse Query | Dense Query |

| --- | --- | --- | 

| Scoring Metric | Default is `Dot product`, no need to specify it | `Distance` has supported metrics e.g. Dot, Cosine |

| Search Type | Always exact in Qdrant | HNSW is an approximate NN |

| Return Behaviour | Returns only vectors with non-zero values in the same indices as the query vector | Returns `limit` vectors |



In general, the speed of the search is proportional to the number of non-zero values in the query vector.



```http
qdrant: &QdrantClient,

) -> Result<Vec<ScoredPoint>> {

Ok(qdrant.search_points(&SearchPoints {

collection_name,

limit: 5, // use what fits your use case here

with_payload: Some(true.into()),

vector: embed(client, text, api_key)?,

..Default::default()

}).await?.result)

}

```
let search_result = client

.search_points(&SearchPoints {

collection_name: ""test_collection"".to_string(),

vector: vec![0.2, 0.1, 0.9, 0.7],

filter: Some(Filter::all([Condition::matches(

""city"",

""London"".to_string(),

)])),

limit: 2,

..Default::default()

})

.await?;



dbg!(search_result);

```



```java

import static io.qdrant.client.ConditionFactory.matchKeyword;



List<ScoredPoint> searchResult =

client
search_points: searches,

read_consistency: None,

..Default::default()

})

.await?;

```



```java

import java.util.List;



import static io.qdrant.client.ConditionFactory.matchKeyword;



import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Points.Filter;

import io.qdrant.client.grpc.Points.SearchPoints;



QdrantClient client =
to do it. 



## Wrapping up



Assessing the quality of retrieval is a critical aspect of evaluating semantic search performance. It is imperative to measure retrieval quality when aiming for optimal quality of.

your search results. Qdrant provides a built-in exact search mode, which can be used to measure the quality of the ANN algorithm itself, 

even in an automated way, as part of your CI/CD pipeline.\n\nAnswer:",What is the default scoring metric used in Qdrant for search operations?,"The default scoring metric used in Qdrant for search operations is `Dot product`. It is not necessary to specify this metric explicitly as it is the default setting. However, Qdrant also supports other distance metrics such as Cosine for scoring. When performing a search operation in Qdrant, if no specific metric is mentioned, the system will automatically use the Dot product as the scoring metric.","['| Index| Sparse Query | Dense Query |\n\n| --- | --- | --- | \n\n| Scoring Metric | Default is `Dot product`, no need to specify it | `Distance` has supported metrics e.g. Dot, Cosine |\n\n| Search Type | Always exact in Qdrant | HNSW is an approximate NN |\n\n| Return Behaviour | Returns only vectors with non-zero values in the same indices as the query vector | Returns `limit` vectors |\n\n\n\nIn general, the speed of the search is proportional to the number of non-zero values in the query vector.\n\n\n\n```http', 'qdrant: &QdrantClient,\n\n) -> Result<Vec<ScoredPoint>> {\n\n    Ok(qdrant.search_points(&SearchPoints {\n\n        collection_name,\n\n        limit: 5, // use what fits your use case here\n\n        with_payload: Some(true.into()),\n\n        vector: embed(client, text, api_key)?,\n\n        ..Default::default()\n\n    }).await?.result)\n\n}\n\n```', 'let search_result = client\n\n    .search_points(&SearchPoints {\n\n        collection_name: ""test_collection"".to_string(),\n\n        vector: vec![0.2, 0.1, 0.9, 0.7],\n\n        filter: Some(Filter::all([Condition::matches(\n\n            ""city"",\n\n            ""London"".to_string(),\n\n        )])),\n\n        limit: 2,\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n\n\ndbg!(search_result);\n\n```\n\n\n\n```java\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\n\nList<ScoredPoint> searchResult =\n\n    client', 'search_points: searches,\n\n        read_consistency: None,\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\n\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Points.Filter;\n\nimport io.qdrant.client.grpc.Points.SearchPoints;\n\n\n\nQdrantClient client =', 'to do it. \n\n\n\n## Wrapping up\n\n\n\nAssessing the quality of retrieval is a critical aspect of evaluating semantic search performance. It is imperative to measure retrieval quality when aiming for optimal quality of.\n\nyour search results. Qdrant provides a built-in exact search mode, which can be used to measure the quality of the ANN algorithm itself, \n\neven in an automated way, as part of your CI/CD pipeline.']","| Index| Sparse Query | Dense Query |

| --- | --- | --- | 

| Scoring Metric | Default is `Dot product`, no need to specify it | `Distance` has supported metrics e.g. Dot, Cosine |

| Search Type | Always exact in Qdrant | HNSW is an approximate NN |

| Return Behaviour | Returns only vectors with non-zero values in the same indices as the query vector | Returns `limit` vectors |



In general, the speed of the search is proportional to the number of non-zero values in the query vector.



```http
qdrant: &QdrantClient,

) -> Result<Vec<ScoredPoint>> {

    Ok(qdrant.search_points(&SearchPoints {

        collection_name,

        limit: 5, // use what fits your use case here

        with_payload: Some(true.into()),

        vector: embed(client, text, api_key)?,

        ..Default::default()

    }).await?.result)

}

```
let search_result = client

    .search_points(&SearchPoints {

        collection_name: ""test_collection"".to_string(),

        vector: vec![0.2, 0.1, 0.9, 0.7],

        filter: Some(Filter::all([Condition::matches(

            ""city"",

            ""London"".to_string(),

        )])),

        limit: 2,

        ..Default::default()

    })

    .await?;



dbg!(search_result);

```



```java

import static io.qdrant.client.ConditionFactory.matchKeyword;



List<ScoredPoint> searchResult =

    client
search_points: searches,

        read_consistency: None,

        ..Default::default()

    })

    .await?;

```



```java

import java.util.List;



import static io.qdrant.client.ConditionFactory.matchKeyword;



import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;

import io.qdrant.client.grpc.Points.Filter;

import io.qdrant.client.grpc.Points.SearchPoints;



QdrantClient client =
to do it. 



## Wrapping up



Assessing the quality of retrieval is a critical aspect of evaluating semantic search performance. It is imperative to measure retrieval quality when aiming for optimal quality of.

your search results. Qdrant provides a built-in exact search mode, which can be used to measure the quality of the ANN algorithm itself, 

even in an automated way, as part of your CI/CD pipeline.",1.0,0.2033898305084746,0.33802816901408456,1.0,0.1896551724137931,0.3188405797101449,1.0,0.2033898305084746,0.33802816901408456,1.0,0.2033898305084746,0.33802816901408456,0.9470928907394409,0.7628515958786011,0.5855770707130432,0.6625614166259766,0.9953416455537081,0.9891980106185656,14,0.2153846153846154,0.3168169756783022
True,,3069.242,5d8259a6,What options are available for using Qdrant if the official clients do not support the language you are using?,"If the official clients for Qdrant do not support the language you are using, you have the option to either use the REST API directly or generate a client for your language using OpenAPI definitions or protobuf definitions. By utilizing the OpenAPI definitions available at [this link](https://github.com/qdrant/qdrant/blob/master/docs/redoc/master/openapi.json) or the protobuf definitions at [this link](https://github.com/qdrant/qdrant/tree/master/lib/api/src/grpc/proto), you can interact with Qdrant's functionalities even if there is no official client available for your specific programming language. This flexibility allows developers to integrate Qdrant into a wide range of applications and environments.","If the official clients of Qdrant do not support the language you are using, you can still interact with Qdrant through the more flexible API introduced in Qdrant 1.6. This API allows you to provide both IDs and vectors of positive and negative examples, and even combine them within a single request. This new implementation is backward compatible, so you can easily upgrade your existing Qdrant instance without any changes in your code.

Additionally, you can leverage tools like LangChain, which can handle the interactions with Qdrant in the background. This way, you don't have to work directly with the QdrantClient. If you prefer to dig into the source code, you can access all the processing through a Google Colab notebook provided in the project documentation.

By utilizing the flexible API of Qdrant and tools like LangChain, you can still integrate Qdrant into your projects even if the official clients do not support your preferred programming language.","**Clients**: Qdrant supports various programming languages for client interaction, such as Python, Go, Rust, and Typescript. This way developers can connect to and interact with Qdrant using the programming language they prefer.





### Vector Database Use Cases
. In the default build configuration, qdrant does not include support for all languages, due to the increasing size of the resulting binary. Chinese, Japanese and Korean languages are not enabled by default, but can be enabled by building qdrant from source with `--features multiling-chinese,multiling-japanese,multiling-korean` flags.
So one thing which I mean, one is definitely try the different models which we support. We support a reasonable range of models, including a few multilingual ones. Second is while we take care of this when you do use with Qdrants. So, for instance, let's say this is how you would have to manually specify, let's say, passage or query. When you do this, let's say add and query. What we do, we add the passage and query keys while creating the Embeddings for you. So this is taken care of
However, if the only information you had was that your user dislikes some items, you couldn't use it directly.



Qdrant 1.6 brings a more flexible API. You can now provide both IDs and vectors of positive and negative examples. You can even 

combine them within a single request. That makes the new implementation backward compatible, so you can easily upgrade an existing

Qdrant instance without any changes in your code. And the default behaviour of the API is still the same as before. However, we
of code, thanks to the recent integration with Qdrant. We're not even going to work directly with `QdrantClient`, as everything is already done in the background

by LangChain. If you want to get into the source code right away, all the processing is available as a 

[Google Colab notebook](https://colab.research.google.com/drive/19RxxkZdnq_YqBH5kBV10Rt0Rax-kminD?usp=sharing).



## Implementing Question Answering with LangChain and Qdrant



### Configuration","['**Clients**: Qdrant supports various programming languages for client interaction, such as Python, Go, Rust, and Typescript. This way developers can connect to and interact with Qdrant using the programming language they prefer.\n\n\n\n\n\n### Vector Database Use Cases', '. In the default build configuration, qdrant does not include support for all languages, due to the increasing size of the resulting binary. Chinese, Japanese and Korean languages are not enabled by default, but can be enabled by building qdrant from source with `--features multiling-chinese,multiling-japanese,multiling-korean` flags.', ""So one thing which I mean, one is definitely try the different models which we support. We support a reasonable range of models, including a few multilingual ones. Second is while we take care of this when you do use with Qdrants. So, for instance, let's say this is how you would have to manually specify, let's say, passage or query. When you do this, let's say add and query. What we do, we add the passage and query keys while creating the Embeddings for you. So this is taken care of"", ""However, if the only information you had was that your user dislikes some items, you couldn't use it directly.\n\n\n\nQdrant 1.6 brings a more flexible API. You can now provide both IDs and vectors of positive and negative examples. You can even \n\ncombine them within a single request. That makes the new implementation backward compatible, so you can easily upgrade an existing\n\nQdrant instance without any changes in your code. And the default behaviour of the API is still the same as before. However, we"", ""of code, thanks to the recent integration with Qdrant. We're not even going to work directly with `QdrantClient`, as everything is already done in the background\n\nby LangChain. If you want to get into the source code right away, all the processing is available as a \n\n[Google Colab notebook](https://colab.research.google.com/drive/19RxxkZdnq_YqBH5kBV10Rt0Rax-kminD?usp=sharing).\n\n\n\n## Implementing Question Answering with LangChain and Qdrant\n\n\n\n### Configuration""]","Question: What options are available for using Qdrant if the official clients do not support the language you are using?\n\nContext: **Clients**: Qdrant supports various programming languages for client interaction, such as Python, Go, Rust, and Typescript. This way developers can connect to and interact with Qdrant using the programming language they prefer.





### Vector Database Use Cases
. In the default build configuration, qdrant does not include support for all languages, due to the increasing size of the resulting binary. Chinese, Japanese and Korean languages are not enabled by default, but can be enabled by building qdrant from source with `--features multiling-chinese,multiling-japanese,multiling-korean` flags.
So one thing which I mean, one is definitely try the different models which we support. We support a reasonable range of models, including a few multilingual ones. Second is while we take care of this when you do use with Qdrants. So, for instance, let's say this is how you would have to manually specify, let's say, passage or query. When you do this, let's say add and query. What we do, we add the passage and query keys while creating the Embeddings for you. So this is taken care of
However, if the only information you had was that your user dislikes some items, you couldn't use it directly.



Qdrant 1.6 brings a more flexible API. You can now provide both IDs and vectors of positive and negative examples. You can even 

combine them within a single request. That makes the new implementation backward compatible, so you can easily upgrade an existing

Qdrant instance without any changes in your code. And the default behaviour of the API is still the same as before. However, we
of code, thanks to the recent integration with Qdrant. We're not even going to work directly with `QdrantClient`, as everything is already done in the background

by LangChain. If you want to get into the source code right away, all the processing is available as a 

[Google Colab notebook](https://colab.research.google.com/drive/19RxxkZdnq_YqBH5kBV10Rt0Rax-kminD?usp=sharing).



## Implementing Question Answering with LangChain and Qdrant



### Configuration\n\nAnswer:",What options are available for using Qdrant if the official clients do not support the language you are using?,"If the official clients for Qdrant do not support the language you are using, you have the option to either use the REST API directly or generate a client for your language using OpenAPI definitions or protobuf definitions. By utilizing the OpenAPI definitions available at [this link](https://github.com/qdrant/qdrant/blob/master/docs/redoc/master/openapi.json) or the protobuf definitions at [this link](https://github.com/qdrant/qdrant/tree/master/lib/api/src/grpc/proto), you can interact with Qdrant's functionalities even if there is no official client available for your specific programming language. This flexibility allows developers to integrate Qdrant into a wide range of applications and environments.","['**Clients**: Qdrant supports various programming languages for client interaction, such as Python, Go, Rust, and Typescript. This way developers can connect to and interact with Qdrant using the programming language they prefer.\n\n\n\n\n\n### Vector Database Use Cases', '. In the default build configuration, qdrant does not include support for all languages, due to the increasing size of the resulting binary. Chinese, Japanese and Korean languages are not enabled by default, but can be enabled by building qdrant from source with `--features multiling-chinese,multiling-japanese,multiling-korean` flags.', ""So one thing which I mean, one is definitely try the different models which we support. We support a reasonable range of models, including a few multilingual ones. Second is while we take care of this when you do use with Qdrants. So, for instance, let's say this is how you would have to manually specify, let's say, passage or query. When you do this, let's say add and query. What we do, we add the passage and query keys while creating the Embeddings for you. So this is taken care of"", ""However, if the only information you had was that your user dislikes some items, you couldn't use it directly.\n\n\n\nQdrant 1.6 brings a more flexible API. You can now provide both IDs and vectors of positive and negative examples. You can even \n\ncombine them within a single request. That makes the new implementation backward compatible, so you can easily upgrade an existing\n\nQdrant instance without any changes in your code. And the default behaviour of the API is still the same as before. However, we"", ""of code, thanks to the recent integration with Qdrant. We're not even going to work directly with `QdrantClient`, as everything is already done in the background\n\nby LangChain. If you want to get into the source code right away, all the processing is available as a \n\n[Google Colab notebook](https://colab.research.google.com/drive/19RxxkZdnq_YqBH5kBV10Rt0Rax-kminD?usp=sharing).\n\n\n\n## Implementing Question Answering with LangChain and Qdrant\n\n\n\n### Configuration""]","**Clients**: Qdrant supports various programming languages for client interaction, such as Python, Go, Rust, and Typescript. This way developers can connect to and interact with Qdrant using the programming language they prefer.





### Vector Database Use Cases
. In the default build configuration, qdrant does not include support for all languages, due to the increasing size of the resulting binary. Chinese, Japanese and Korean languages are not enabled by default, but can be enabled by building qdrant from source with `--features multiling-chinese,multiling-japanese,multiling-korean` flags.
So one thing which I mean, one is definitely try the different models which we support. We support a reasonable range of models, including a few multilingual ones. Second is while we take care of this when you do use with Qdrants. So, for instance, let's say this is how you would have to manually specify, let's say, passage or query. When you do this, let's say add and query. What we do, we add the passage and query keys while creating the Embeddings for you. So this is taken care of
However, if the only information you had was that your user dislikes some items, you couldn't use it directly.



Qdrant 1.6 brings a more flexible API. You can now provide both IDs and vectors of positive and negative examples. You can even 

combine them within a single request. That makes the new implementation backward compatible, so you can easily upgrade an existing

Qdrant instance without any changes in your code. And the default behaviour of the API is still the same as before. However, we
of code, thanks to the recent integration with Qdrant. We're not even going to work directly with `QdrantClient`, as everything is already done in the background

by LangChain. If you want to get into the source code right away, all the processing is available as a 

[Google Colab notebook](https://colab.research.google.com/drive/19RxxkZdnq_YqBH5kBV10Rt0Rax-kminD?usp=sharing).



## Implementing Question Answering with LangChain and Qdrant



### Configuration",0.3287671232876712,0.45714285714285713,0.3824701195219124,0.1310344827586207,0.18269230769230768,0.15261044176706826,0.1917808219178082,0.26666666666666666,0.22310756972111553,0.2808219178082192,0.3904761904761905,0.3266932270916335,0.7218080759048462,0.6333662867546082,0.6315158605575562,0.6324397325515747,0.978263136833751,0.6960597497721512,158,1.6989247311827957,0.44686468212471897
True,,1921.1370000000002,bc3a13de,What are the two main interfaces available for interacting with Qdrant and where can the documentation for each be found?,"The two main interfaces available for interacting with Qdrant are REST API and gRPC API. The documentation for REST API can be found in the [OpenAPI Specification](https://qdrant.github.io/qdrant/redoc/index.html), while the documentation for gRPC API can be found [here](https://github.com/qdrant/qdrant/blob/master/docs/grpc/docs.md). The gRPC methods in Qdrant follow the same principles as REST, with each REST endpoint having a corresponding gRPC method. The gRPC interface in Qdrant is available on a specified port as outlined in the configuration file, with the default port being 6334. If choosing to use gRPC, it is necessary to expose the port when starting Qdrant, such as when running the service inside a Docker container.","The two main interfaces available for interacting with Qdrant are:

1. **REST API**: This interface allows interaction with Qdrant via HTTP requests. The documentation for the REST API can be found in the [Qdrant API Reference](https://qdrant.docs.apiary.io/).

2. **Python Client**: This interface allows interaction with Qdrant using Python scripts. The documentation for the Python client can be found in the [Qdrant Python Client repository](https://github.com/qdrant/python-client).","|![java](/docs/misc/java.webp)|**[Java](https://github.com/qdrant/java-client)**|[Available on Maven Central](https://central.sonatype.com/artifact/io.qdrant/client)|[Latest Release](https://github.com/qdrant/java-client/releases)|





## API Reference



All interaction with Qdrant takes place via the REST API. We recommend using REST API if you are using Qdrant for the first time or if you are working on a prototype.



|API|Documentation|

|-|-|
In the **Console**, you may use the REST API to interact with Qdrant, while in **Collections**, you can manage all the collections and upload Snapshots. 



![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)



### Accessing the Web UI



First, run the Docker container:



```bash

docker run -p 6333:6333 -p 6334:6334 \

    -v $(pwd)/qdrant_storage:/qdrant/storage:z \

    qdrant/qdrant

```



The GUI is available at `http://localhost:6333/dashboard`
might also be found in the [LangChain documentation](https://python.langchain.com/docs/integrations/vectorstores/qdrant).
```python

QDRANT_MAIN_URL = ""https://my-cluster.com:6333""

QDRANT_NODES = (

    ""https://node-0.my-cluster.com:6333"",

    ""https://node-1.my-cluster.com:6333"",

    ""https://node-2.my-cluster.com:6333"",

)

QDRANT_API_KEY = ""my-api-key""

```



<aside role=""status"">If you are using Qdrant Cloud, you can find the URL and API key in the <a href=""https://cloud.qdrant.io/"">Qdrant Cloud dashboard</a>.</aside>



We can now create a client instance:



```python

from qdrant_client import QdrantClient
You can get started using Qdrant with the Python `qdrant-client`, by pulling the latest docker 

image of `qdrant` and connecting to it locally, or by trying out [Qdrant's Cloud](https://cloud.qdrant.io/) 

free tier option until you are ready to make the full switch.



With that out of the way, let's talk about what are vector databases.



## What Are Vector Databases?



![dbs](https://raw.githubusercontent.com/ramonpzg/mlops-sydney-2023/main/images/databases.png)","['|![java](/docs/misc/java.webp)|**[Java](https://github.com/qdrant/java-client)**|[Available on Maven Central](https://central.sonatype.com/artifact/io.qdrant/client)|[Latest Release](https://github.com/qdrant/java-client/releases)|\n\n\n\n\n\n## API Reference\n\n\n\nAll interaction with Qdrant takes place via the REST API. We recommend using REST API if you are using Qdrant for the first time or if you are working on a prototype.\n\n\n\n|API|Documentation|\n\n|-|-|', 'In the **Console**, you may use the REST API to interact with Qdrant, while in **Collections**, you can manage all the collections and upload Snapshots. \n\n\n\n![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)\n\n\n\n### Accessing the Web UI\n\n\n\nFirst, run the Docker container:\n\n\n\n```bash\n\ndocker run -p 6333:6333 -p 6334:6334 \\\n\n    -v $(pwd)/qdrant_storage:/qdrant/storage:z \\\n\n    qdrant/qdrant\n\n```\n\n\n\nThe GUI is available at `http://localhost:6333/dashboard`', 'might also be found in the [LangChain documentation](https://python.langchain.com/docs/integrations/vectorstores/qdrant).', '```python\n\nQDRANT_MAIN_URL = ""https://my-cluster.com:6333""\n\nQDRANT_NODES = (\n\n    ""https://node-0.my-cluster.com:6333"",\n\n    ""https://node-1.my-cluster.com:6333"",\n\n    ""https://node-2.my-cluster.com:6333"",\n\n)\n\nQDRANT_API_KEY = ""my-api-key""\n\n```\n\n\n\n<aside role=""status"">If you are using Qdrant Cloud, you can find the URL and API key in the <a href=""https://cloud.qdrant.io/"">Qdrant Cloud dashboard</a>.</aside>\n\n\n\nWe can now create a client instance:\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient', ""You can get started using Qdrant with the Python `qdrant-client`, by pulling the latest docker \n\nimage of `qdrant` and connecting to it locally, or by trying out [Qdrant's Cloud](https://cloud.qdrant.io/) \n\nfree tier option until you are ready to make the full switch.\n\n\n\nWith that out of the way, let's talk about what are vector databases.\n\n\n\n## What Are Vector Databases?\n\n\n\n![dbs](https://raw.githubusercontent.com/ramonpzg/mlops-sydney-2023/main/images/databases.png)""]","Question: What are the two main interfaces available for interacting with Qdrant and where can the documentation for each be found?\n\nContext: |![java](/docs/misc/java.webp)|**[Java](https://github.com/qdrant/java-client)**|[Available on Maven Central](https://central.sonatype.com/artifact/io.qdrant/client)|[Latest Release](https://github.com/qdrant/java-client/releases)|





## API Reference



All interaction with Qdrant takes place via the REST API. We recommend using REST API if you are using Qdrant for the first time or if you are working on a prototype.



|API|Documentation|

|-|-|
In the **Console**, you may use the REST API to interact with Qdrant, while in **Collections**, you can manage all the collections and upload Snapshots. 



![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)



### Accessing the Web UI



First, run the Docker container:



```bash

docker run -p 6333:6333 -p 6334:6334 \

-v $(pwd)/qdrant_storage:/qdrant/storage:z \

qdrant/qdrant

```



The GUI is available at `http://localhost:6333/dashboard`
might also be found in the [LangChain documentation](https://python.langchain.com/docs/integrations/vectorstores/qdrant).
```python

QDRANT_MAIN_URL = ""https://my-cluster.com:6333""

QDRANT_NODES = (

""https://node-0.my-cluster.com:6333"",

""https://node-1.my-cluster.com:6333"",

""https://node-2.my-cluster.com:6333"",

)

QDRANT_API_KEY = ""my-api-key""

```



<aside role=""status"">If you are using Qdrant Cloud, you can find the URL and API key in the <a href=""https://cloud.qdrant.io/"">Qdrant Cloud dashboard</a>.</aside>



We can now create a client instance:



```python

from qdrant_client import QdrantClient
You can get started using Qdrant with the Python `qdrant-client`, by pulling the latest docker 

image of `qdrant` and connecting to it locally, or by trying out [Qdrant's Cloud](https://cloud.qdrant.io/) 

free tier option until you are ready to make the full switch.



With that out of the way, let's talk about what are vector databases.



## What Are Vector Databases?



![dbs](https://raw.githubusercontent.com/ramonpzg/mlops-sydney-2023/main/images/databases.png)\n\nAnswer:",What are the two main interfaces available for interacting with Qdrant and where can the documentation for each be found?,"The two main interfaces available for interacting with Qdrant are REST API and gRPC API. The documentation for REST API can be found in the [OpenAPI Specification](https://qdrant.github.io/qdrant/redoc/index.html), while the documentation for gRPC API can be found [here](https://github.com/qdrant/qdrant/blob/master/docs/grpc/docs.md). The gRPC methods in Qdrant follow the same principles as REST, with each REST endpoint having a corresponding gRPC method. The gRPC interface in Qdrant is available on a specified port as outlined in the configuration file, with the default port being 6334. If choosing to use gRPC, it is necessary to expose the port when starting Qdrant, such as when running the service inside a Docker container.","['|![java](/docs/misc/java.webp)|**[Java](https://github.com/qdrant/java-client)**|[Available on Maven Central](https://central.sonatype.com/artifact/io.qdrant/client)|[Latest Release](https://github.com/qdrant/java-client/releases)|\n\n\n\n\n\n## API Reference\n\n\n\nAll interaction with Qdrant takes place via the REST API. We recommend using REST API if you are using Qdrant for the first time or if you are working on a prototype.\n\n\n\n|API|Documentation|\n\n|-|-|', 'In the **Console**, you may use the REST API to interact with Qdrant, while in **Collections**, you can manage all the collections and upload Snapshots. \n\n\n\n![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)\n\n\n\n### Accessing the Web UI\n\n\n\nFirst, run the Docker container:\n\n\n\n```bash\n\ndocker run -p 6333:6333 -p 6334:6334 \\\n\n    -v $(pwd)/qdrant_storage:/qdrant/storage:z \\\n\n    qdrant/qdrant\n\n```\n\n\n\nThe GUI is available at `http://localhost:6333/dashboard`', 'might also be found in the [LangChain documentation](https://python.langchain.com/docs/integrations/vectorstores/qdrant).', '```python\n\nQDRANT_MAIN_URL = ""https://my-cluster.com:6333""\n\nQDRANT_NODES = (\n\n    ""https://node-0.my-cluster.com:6333"",\n\n    ""https://node-1.my-cluster.com:6333"",\n\n    ""https://node-2.my-cluster.com:6333"",\n\n)\n\nQDRANT_API_KEY = ""my-api-key""\n\n```\n\n\n\n<aside role=""status"">If you are using Qdrant Cloud, you can find the URL and API key in the <a href=""https://cloud.qdrant.io/"">Qdrant Cloud dashboard</a>.</aside>\n\n\n\nWe can now create a client instance:\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient', ""You can get started using Qdrant with the Python `qdrant-client`, by pulling the latest docker \n\nimage of `qdrant` and connecting to it locally, or by trying out [Qdrant's Cloud](https://cloud.qdrant.io/) \n\nfree tier option until you are ready to make the full switch.\n\n\n\nWith that out of the way, let's talk about what are vector databases.\n\n\n\n## What Are Vector Databases?\n\n\n\n![dbs](https://raw.githubusercontent.com/ramonpzg/mlops-sydney-2023/main/images/databases.png)""]","|![java](/docs/misc/java.webp)|**[Java](https://github.com/qdrant/java-client)**|[Available on Maven Central](https://central.sonatype.com/artifact/io.qdrant/client)|[Latest Release](https://github.com/qdrant/java-client/releases)|





## API Reference



All interaction with Qdrant takes place via the REST API. We recommend using REST API if you are using Qdrant for the first time or if you are working on a prototype.



|API|Documentation|

|-|-|
In the **Console**, you may use the REST API to interact with Qdrant, while in **Collections**, you can manage all the collections and upload Snapshots. 



![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)



### Accessing the Web UI



First, run the Docker container:



```bash

docker run -p 6333:6333 -p 6334:6334 \

    -v $(pwd)/qdrant_storage:/qdrant/storage:z \

    qdrant/qdrant

```



The GUI is available at `http://localhost:6333/dashboard`
might also be found in the [LangChain documentation](https://python.langchain.com/docs/integrations/vectorstores/qdrant).
```python

QDRANT_MAIN_URL = ""https://my-cluster.com:6333""

QDRANT_NODES = (

    ""https://node-0.my-cluster.com:6333"",

    ""https://node-1.my-cluster.com:6333"",

    ""https://node-2.my-cluster.com:6333"",

)

QDRANT_API_KEY = ""my-api-key""

```



<aside role=""status"">If you are using Qdrant Cloud, you can find the URL and API key in the <a href=""https://cloud.qdrant.io/"">Qdrant Cloud dashboard</a>.</aside>



We can now create a client instance:



```python

from qdrant_client import QdrantClient
You can get started using Qdrant with the Python `qdrant-client`, by pulling the latest docker 

image of `qdrant` and connecting to it locally, or by trying out [Qdrant's Cloud](https://cloud.qdrant.io/) 

free tier option until you are ready to make the full switch.



With that out of the way, let's talk about what are vector databases.



## What Are Vector Databases?



![dbs](https://raw.githubusercontent.com/ramonpzg/mlops-sydney-2023/main/images/databases.png)",0.6268656716417911,0.38181818181818183,0.4745762711864407,0.3787878787878788,0.22935779816513763,0.2857142857142857,0.47761194029850745,0.2909090909090909,0.3615819209039548,0.5223880597014925,0.3181818181818182,0.3954802259887006,0.9235274195671082,0.7193131446838379,0.6422146558761597,0.6785809993743896,0.7085105900963147,0.6432937532663345,67,0.6146788990825688,0.37787611166564183
True,,4629.26,234fb505,When should one use gRPC with Qdrant and what factors should be considered in making this choice?,"gRPC is recommended for use with Qdrant when optimizing the performance of an application is a priority and when the user is already familiar with Qdrant. The decision to use gRPC over the REST API is a trade-off between convenience and speed. gRPC is a binary protocol that offers higher performance compared to REST API, but it can be more challenging to debug. Therefore, if the goal is to maximize performance and the user is comfortable with the potential debugging complexities associated with gRPC, it is advisable to opt for gRPC when interacting with Qdrant.","When considering whether to use gRPC with Qdrant, there are several factors to take into account:

1. **Performance:** gRPC is known for its high performance due to its binary protocol and efficient data serialization. If you need high-speed communication between services or want to optimize the performance of your application, gRPC can be a good choice.

2. **Familiarity:** If you are already familiar with Qdrant and gRPC, using gRPC may be a natural choice for you. However, if you are more comfortable working with REST APIs or if your team lacks experience with gRPC, this should also be considered.

3. **Debugging:** Debugging gRPC can be more challenging compared to REST APIs due to its binary nature. If easy debugging is a priority for your project, you may want to stick with REST APIs.

4. **Portability:** gRPC is supported in various programming languages, making it a good choice for building cross-language applications. If you need your services to interact seamlessly across different languages, gRPC can be a suitable option.

In conclusion, consider using gRPC with Qdrant when you prioritize performance, are familiar with gRPC, and require efficient communication between services. However, factors such as debugging ease and team expertise should also be taken into consideration before making the choice.","qdrant/qdrant

```



**When to use gRPC:** The choice between gRPC and the REST API is a trade-off between convenience and speed. gRPC is a binary protocol and can be more challenging to debug. We recommend using gRPC if you are already familiar with Qdrant and are trying to optimize the performance of your application.



## Qdrant Web UI



Qdrant's Web UI is an intuitive and efficient graphic interface for your Qdrant Collections, REST API and data points.
As per the [configuration file](https://github.com/qdrant/qdrant/blob/master/config/config.yaml), the gRPC interface is available on the specified port.



```yaml

service:

  grpc_port: 6334

```

<aside role=""status"">If you decide to use gRPC, you must expose the port when starting Qdrant.</aside>

 

Running the service inside of Docker will look like this:



```bash

docker run -p 6333:6333 -p 6334:6334 \

    -v $(pwd)/qdrant_storage:/qdrant/storage:z \

    qdrant/qdrant

```
![REST API vs gRPC upload time, sec](/blog/qdrant-v-0-6-0-engine-with-grpc-released/upload_time.png)



Read more about the gRPC interface and whether you should use it by this [link](/documentation/quick_start/#grpc).



The release v0.6.0 includes several bug fixes. More information is available in a [changelog](https://github.com/qdrant/qdrant/releases/tag/v0.6.0).



New version was provided in addition to the REST API that the company keeps supporting due to its easy debugging.
* `6334` - For the [gRPC](/documentation/interfaces/#grpc-interface) API

* `6335` - For [Distributed deployment](/documentation/guides/distributed_deployment/)



All Qdrant instances in a cluster must be able to:



- Communicate with each other over these ports

- Allow incoming connections to ports `6333` and `6334` from clients that use Qdrant.



## Installation options



Qdrant can be installed in different ways depending on your needs:
| Field        | Description |

|--------------|-------------|

| location     | If `:memory:` - use in-memory Qdrant instance.<br>If `str` - use it as a `url` parameter.|

| url          | Either host or str of `Optional[scheme], host, Optional[port], Optional[prefix]`.<br> Eg. `http://localhost:6333` |

| port         | Port of the REST API interface. Default: `6333` |

| grpc_port    | Port of the gRPC interface. Default: `6334` |","[""qdrant/qdrant\n\n```\n\n\n\n**When to use gRPC:** The choice between gRPC and the REST API is a trade-off between convenience and speed. gRPC is a binary protocol and can be more challenging to debug. We recommend using gRPC if you are already familiar with Qdrant and are trying to optimize the performance of your application.\n\n\n\n## Qdrant Web UI\n\n\n\nQdrant's Web UI is an intuitive and efficient graphic interface for your Qdrant Collections, REST API and data points."", 'As per the [configuration file](https://github.com/qdrant/qdrant/blob/master/config/config.yaml), the gRPC interface is available on the specified port.\n\n\n\n```yaml\n\nservice:\n\n  grpc_port: 6334\n\n```\n\n<aside role=""status"">If you decide to use gRPC, you must expose the port when starting Qdrant.</aside>\n\n \n\nRunning the service inside of Docker will look like this:\n\n\n\n```bash\n\ndocker run -p 6333:6333 -p 6334:6334 \\\n\n    -v $(pwd)/qdrant_storage:/qdrant/storage:z \\\n\n    qdrant/qdrant\n\n```', '![REST API vs gRPC upload time, sec](/blog/qdrant-v-0-6-0-engine-with-grpc-released/upload_time.png)\n\n\n\nRead more about the gRPC interface and whether you should use it by this [link](/documentation/quick_start/#grpc).\n\n\n\nThe release v0.6.0 includes several bug fixes. More information is available in a [changelog](https://github.com/qdrant/qdrant/releases/tag/v0.6.0).\n\n\n\nNew version was provided in addition to the REST API that the company keeps supporting due to its easy debugging.', '* `6334` - For the [gRPC](/documentation/interfaces/#grpc-interface) API\n\n* `6335` - For [Distributed deployment](/documentation/guides/distributed_deployment/)\n\n\n\nAll Qdrant instances in a cluster must be able to:\n\n\n\n- Communicate with each other over these ports\n\n- Allow incoming connections to ports `6333` and `6334` from clients that use Qdrant.\n\n\n\n## Installation options\n\n\n\nQdrant can be installed in different ways depending on your needs:', '| Field        | Description |\n\n|--------------|-------------|\n\n| location     | If `:memory:` - use in-memory Qdrant instance.<br>If `str` - use it as a `url` parameter.|\n\n| url          | Either host or str of `Optional[scheme], host, Optional[port], Optional[prefix]`.<br> Eg. `http://localhost:6333` |\n\n| port         | Port of the REST API interface. Default: `6333` |\n\n| grpc_port    | Port of the gRPC interface. Default: `6334` |']","Question: When should one use gRPC with Qdrant and what factors should be considered in making this choice?\n\nContext: qdrant/qdrant

```



**When to use gRPC:** The choice between gRPC and the REST API is a trade-off between convenience and speed. gRPC is a binary protocol and can be more challenging to debug. We recommend using gRPC if you are already familiar with Qdrant and are trying to optimize the performance of your application.



## Qdrant Web UI



Qdrant's Web UI is an intuitive and efficient graphic interface for your Qdrant Collections, REST API and data points.
As per the [configuration file](https://github.com/qdrant/qdrant/blob/master/config/config.yaml), the gRPC interface is available on the specified port.



```yaml

service:

grpc_port: 6334

```

<aside role=""status"">If you decide to use gRPC, you must expose the port when starting Qdrant.</aside>



Running the service inside of Docker will look like this:



```bash

docker run -p 6333:6333 -p 6334:6334 \

-v $(pwd)/qdrant_storage:/qdrant/storage:z \

qdrant/qdrant

```
![REST API vs gRPC upload time, sec](/blog/qdrant-v-0-6-0-engine-with-grpc-released/upload_time.png)



Read more about the gRPC interface and whether you should use it by this [link](/documentation/quick_start/#grpc).



The release v0.6.0 includes several bug fixes. More information is available in a [changelog](https://github.com/qdrant/qdrant/releases/tag/v0.6.0).



New version was provided in addition to the REST API that the company keeps supporting due to its easy debugging.
* `6334` - For the [gRPC](/documentation/interfaces/#grpc-interface) API

* `6335` - For [Distributed deployment](/documentation/guides/distributed_deployment/)



All Qdrant instances in a cluster must be able to:



- Communicate with each other over these ports

- Allow incoming connections to ports `6333` and `6334` from clients that use Qdrant.



## Installation options



Qdrant can be installed in different ways depending on your needs:
| Field        | Description |

|--------------|-------------|

| location     | If `:memory:` - use in-memory Qdrant instance.<br>If `str` - use it as a `url` parameter.|

| url          | Either host or str of `Optional[scheme], host, Optional[port], Optional[prefix]`.<br> Eg. `http://localhost:6333` |

| port         | Port of the REST API interface. Default: `6333` |

| grpc_port    | Port of the gRPC interface. Default: `6334` |\n\nAnswer:",When should one use gRPC with Qdrant and what factors should be considered in making this choice?,"gRPC is recommended for use with Qdrant when optimizing the performance of an application is a priority and when the user is already familiar with Qdrant. The decision to use gRPC over the REST API is a trade-off between convenience and speed. gRPC is a binary protocol that offers higher performance compared to REST API, but it can be more challenging to debug. Therefore, if the goal is to maximize performance and the user is comfortable with the potential debugging complexities associated with gRPC, it is advisable to opt for gRPC when interacting with Qdrant.","[""qdrant/qdrant\n\n```\n\n\n\n**When to use gRPC:** The choice between gRPC and the REST API is a trade-off between convenience and speed. gRPC is a binary protocol and can be more challenging to debug. We recommend using gRPC if you are already familiar with Qdrant and are trying to optimize the performance of your application.\n\n\n\n## Qdrant Web UI\n\n\n\nQdrant's Web UI is an intuitive and efficient graphic interface for your Qdrant Collections, REST API and data points."", 'As per the [configuration file](https://github.com/qdrant/qdrant/blob/master/config/config.yaml), the gRPC interface is available on the specified port.\n\n\n\n```yaml\n\nservice:\n\n  grpc_port: 6334\n\n```\n\n<aside role=""status"">If you decide to use gRPC, you must expose the port when starting Qdrant.</aside>\n\n \n\nRunning the service inside of Docker will look like this:\n\n\n\n```bash\n\ndocker run -p 6333:6333 -p 6334:6334 \\\n\n    -v $(pwd)/qdrant_storage:/qdrant/storage:z \\\n\n    qdrant/qdrant\n\n```', '![REST API vs gRPC upload time, sec](/blog/qdrant-v-0-6-0-engine-with-grpc-released/upload_time.png)\n\n\n\nRead more about the gRPC interface and whether you should use it by this [link](/documentation/quick_start/#grpc).\n\n\n\nThe release v0.6.0 includes several bug fixes. More information is available in a [changelog](https://github.com/qdrant/qdrant/releases/tag/v0.6.0).\n\n\n\nNew version was provided in addition to the REST API that the company keeps supporting due to its easy debugging.', '* `6334` - For the [gRPC](/documentation/interfaces/#grpc-interface) API\n\n* `6335` - For [Distributed deployment](/documentation/guides/distributed_deployment/)\n\n\n\nAll Qdrant instances in a cluster must be able to:\n\n\n\n- Communicate with each other over these ports\n\n- Allow incoming connections to ports `6333` and `6334` from clients that use Qdrant.\n\n\n\n## Installation options\n\n\n\nQdrant can be installed in different ways depending on your needs:', '| Field        | Description |\n\n|--------------|-------------|\n\n| location     | If `:memory:` - use in-memory Qdrant instance.<br>If `str` - use it as a `url` parameter.|\n\n| url          | Either host or str of `Optional[scheme], host, Optional[port], Optional[prefix]`.<br> Eg. `http://localhost:6333` |\n\n| port         | Port of the REST API interface. Default: `6333` |\n\n| grpc_port    | Port of the gRPC interface. Default: `6334` |']","qdrant/qdrant

```



**When to use gRPC:** The choice between gRPC and the REST API is a trade-off between convenience and speed. gRPC is a binary protocol and can be more challenging to debug. We recommend using gRPC if you are already familiar with Qdrant and are trying to optimize the performance of your application.



## Qdrant Web UI



Qdrant's Web UI is an intuitive and efficient graphic interface for your Qdrant Collections, REST API and data points.
As per the [configuration file](https://github.com/qdrant/qdrant/blob/master/config/config.yaml), the gRPC interface is available on the specified port.



```yaml

service:

  grpc_port: 6334

```

<aside role=""status"">If you decide to use gRPC, you must expose the port when starting Qdrant.</aside>

 

Running the service inside of Docker will look like this:



```bash

docker run -p 6333:6333 -p 6334:6334 \

    -v $(pwd)/qdrant_storage:/qdrant/storage:z \

    qdrant/qdrant

```
![REST API vs gRPC upload time, sec](/blog/qdrant-v-0-6-0-engine-with-grpc-released/upload_time.png)



Read more about the gRPC interface and whether you should use it by this [link](/documentation/quick_start/#grpc).



The release v0.6.0 includes several bug fixes. More information is available in a [changelog](https://github.com/qdrant/qdrant/releases/tag/v0.6.0).



New version was provided in addition to the REST API that the company keeps supporting due to its easy debugging.
* `6334` - For the [gRPC](/documentation/interfaces/#grpc-interface) API

* `6335` - For [Distributed deployment](/documentation/guides/distributed_deployment/)



All Qdrant instances in a cluster must be able to:



- Communicate with each other over these ports

- Allow incoming connections to ports `6333` and `6334` from clients that use Qdrant.



## Installation options



Qdrant can be installed in different ways depending on your needs:
| Field        | Description |

|--------------|-------------|

| location     | If `:memory:` - use in-memory Qdrant instance.<br>If `str` - use it as a `url` parameter.|

| url          | Either host or str of `Optional[scheme], host, Optional[port], Optional[prefix]`.<br> Eg. `http://localhost:6333` |

| port         | Port of the REST API interface. Default: `6333` |

| grpc_port    | Port of the gRPC interface. Default: `6334` |",0.2857142857142857,0.6823529411764706,0.4027777777777778,0.10891089108910891,0.2619047619047619,0.15384615384615385,0.15270935960591134,0.36470588235294116,0.2152777777777778,0.24630541871921183,0.5882352941176471,0.3472222222222222,0.9240267276763916,0.6164385080337524,0.6981537938117981,0.6547563672065735,0.6069000474443393,0.9801237464998849,208,2.1894736842105265,0.6304399904452243
True,,1370.5369999999998,f01fcb2d,Where can the GUI for Qdrant be accessed?,"The GUI for Qdrant can be accessed at `http://localhost:6333/dashboard`. This web address will lead you to the graphical user interface (GUI) for Qdrant, providing a visual interface for interacting with the Qdrant system. The GUI allows users to perform various operations and tasks related to Qdrant, such as managing indexes, querying data, and configuring settings. By accessing the GUI at the specified URL, users can easily navigate and interact with the Qdrant system in a user-friendly and intuitive manner.",The GUI for Qdrant can be accessed through the web interface at `http://localhost:6333/dashboard` after running the Docker container as explained in the provided code snippet. You can also access the Dashboard locally from [http://localhost:6333/dashboard](http://localhost:6333/dashboard).,"In the **Console**, you may use the REST API to interact with Qdrant, while in **Collections**, you can manage all the collections and upload Snapshots. 



![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)



### Accessing the Web UI



First, run the Docker container:



```bash

docker run -p 6333:6333 -p 6334:6334 \

    -v $(pwd)/qdrant_storage:/qdrant/storage:z \

    qdrant/qdrant

```



The GUI is available at `http://localhost:6333/dashboard`
Try it out now! If you have Docker running, you can [quickstart Qdrant](https://qdrant.tech/documentation/quick-start/) and access the Dashboard locally from [http://localhost:6333/dashboard](http://localhost:6333/dashboard). You should see this simple access point to Qdrant:



![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)



### Temporary directory for Snapshots
WITH ENGINE = ""qdrant"",

PARAMETERS = {

    ""location"": "":memory:"",

    ""collection_config"": {

        ""size"": 386,

        ""distance"": ""Cosine""

    }

}

```



The available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).



## Creating a new table
```python

QDRANT_MAIN_URL = ""https://my-cluster.com:6333""

QDRANT_NODES = (

    ""https://node-0.my-cluster.com:6333"",

    ""https://node-1.my-cluster.com:6333"",

    ""https://node-2.my-cluster.com:6333"",

)

QDRANT_API_KEY = ""my-api-key""

```



<aside role=""status"">If you are using Qdrant Cloud, you can find the URL and API key in the <a href=""https://cloud.qdrant.io/"">Qdrant Cloud dashboard</a>.</aside>



We can now create a client instance:



```python

from qdrant_client import QdrantClient
```bash

unstructured-ingest \

  local \

  --input-path ""discord-output"" \

  --embedding-provider ""langchain-huggingface"" \

  qdrant \

  --collection-name ""<COLLECTION_NAME>"" \

  --api-key ""<QDRANT_API_KEY>"" \

  --location ""<QDRANT_URL>""

```","['In the **Console**, you may use the REST API to interact with Qdrant, while in **Collections**, you can manage all the collections and upload Snapshots. \n\n\n\n![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)\n\n\n\n### Accessing the Web UI\n\n\n\nFirst, run the Docker container:\n\n\n\n```bash\n\ndocker run -p 6333:6333 -p 6334:6334 \\\n\n    -v $(pwd)/qdrant_storage:/qdrant/storage:z \\\n\n    qdrant/qdrant\n\n```\n\n\n\nThe GUI is available at `http://localhost:6333/dashboard`', 'Try it out now! If you have Docker running, you can [quickstart Qdrant](https://qdrant.tech/documentation/quick-start/) and access the Dashboard locally from [http://localhost:6333/dashboard](http://localhost:6333/dashboard). You should see this simple access point to Qdrant:\n\n\n\n![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)\n\n\n\n### Temporary directory for Snapshots', 'WITH ENGINE = ""qdrant"",\n\nPARAMETERS = {\n\n    ""location"": "":memory:"",\n\n    ""collection_config"": {\n\n        ""size"": 386,\n\n        ""distance"": ""Cosine""\n\n    }\n\n}\n\n```\n\n\n\nThe available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).\n\n\n\n## Creating a new table', '```python\n\nQDRANT_MAIN_URL = ""https://my-cluster.com:6333""\n\nQDRANT_NODES = (\n\n    ""https://node-0.my-cluster.com:6333"",\n\n    ""https://node-1.my-cluster.com:6333"",\n\n    ""https://node-2.my-cluster.com:6333"",\n\n)\n\nQDRANT_API_KEY = ""my-api-key""\n\n```\n\n\n\n<aside role=""status"">If you are using Qdrant Cloud, you can find the URL and API key in the <a href=""https://cloud.qdrant.io/"">Qdrant Cloud dashboard</a>.</aside>\n\n\n\nWe can now create a client instance:\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient', '```bash\n\nunstructured-ingest \\\n\n  local \\\n\n  --input-path ""discord-output"" \\\n\n  --embedding-provider ""langchain-huggingface"" \\\n\n  qdrant \\\n\n  --collection-name ""<COLLECTION_NAME>"" \\\n\n  --api-key ""<QDRANT_API_KEY>"" \\\n\n  --location ""<QDRANT_URL>""\n\n```']","Question: Where can the GUI for Qdrant be accessed?\n\nContext: In the **Console**, you may use the REST API to interact with Qdrant, while in **Collections**, you can manage all the collections and upload Snapshots. 



![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)



### Accessing the Web UI



First, run the Docker container:



```bash

docker run -p 6333:6333 -p 6334:6334 \

-v $(pwd)/qdrant_storage:/qdrant/storage:z \

qdrant/qdrant

```



The GUI is available at `http://localhost:6333/dashboard`
Try it out now! If you have Docker running, you can [quickstart Qdrant](https://qdrant.tech/documentation/quick-start/) and access the Dashboard locally from [http://localhost:6333/dashboard](http://localhost:6333/dashboard). You should see this simple access point to Qdrant:



![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)



### Temporary directory for Snapshots
WITH ENGINE = ""qdrant"",

PARAMETERS = {

""location"": "":memory:"",

""collection_config"": {

""size"": 386,

""distance"": ""Cosine""

}

}

```



The available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).



## Creating a new table
```python

QDRANT_MAIN_URL = ""https://my-cluster.com:6333""

QDRANT_NODES = (

""https://node-0.my-cluster.com:6333"",

""https://node-1.my-cluster.com:6333"",

""https://node-2.my-cluster.com:6333"",

)

QDRANT_API_KEY = ""my-api-key""

```



<aside role=""status"">If you are using Qdrant Cloud, you can find the URL and API key in the <a href=""https://cloud.qdrant.io/"">Qdrant Cloud dashboard</a>.</aside>



We can now create a client instance:



```python

from qdrant_client import QdrantClient
```bash

unstructured-ingest \

local \

--input-path ""discord-output"" \

--embedding-provider ""langchain-huggingface"" \

qdrant \

--collection-name ""<COLLECTION_NAME>"" \

--api-key ""<QDRANT_API_KEY>"" \

--location ""<QDRANT_URL>""

```\n\nAnswer:",Where can the GUI for Qdrant be accessed?,"The GUI for Qdrant can be accessed at `http://localhost:6333/dashboard`. This web address will lead you to the graphical user interface (GUI) for Qdrant, providing a visual interface for interacting with the Qdrant system. The GUI allows users to perform various operations and tasks related to Qdrant, such as managing indexes, querying data, and configuring settings. By accessing the GUI at the specified URL, users can easily navigate and interact with the Qdrant system in a user-friendly and intuitive manner.","['In the **Console**, you may use the REST API to interact with Qdrant, while in **Collections**, you can manage all the collections and upload Snapshots. \n\n\n\n![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)\n\n\n\n### Accessing the Web UI\n\n\n\nFirst, run the Docker container:\n\n\n\n```bash\n\ndocker run -p 6333:6333 -p 6334:6334 \\\n\n    -v $(pwd)/qdrant_storage:/qdrant/storage:z \\\n\n    qdrant/qdrant\n\n```\n\n\n\nThe GUI is available at `http://localhost:6333/dashboard`', 'Try it out now! If you have Docker running, you can [quickstart Qdrant](https://qdrant.tech/documentation/quick-start/) and access the Dashboard locally from [http://localhost:6333/dashboard](http://localhost:6333/dashboard). You should see this simple access point to Qdrant:\n\n\n\n![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)\n\n\n\n### Temporary directory for Snapshots', 'WITH ENGINE = ""qdrant"",\n\nPARAMETERS = {\n\n    ""location"": "":memory:"",\n\n    ""collection_config"": {\n\n        ""size"": 386,\n\n        ""distance"": ""Cosine""\n\n    }\n\n}\n\n```\n\n\n\nThe available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).\n\n\n\n## Creating a new table', '```python\n\nQDRANT_MAIN_URL = ""https://my-cluster.com:6333""\n\nQDRANT_NODES = (\n\n    ""https://node-0.my-cluster.com:6333"",\n\n    ""https://node-1.my-cluster.com:6333"",\n\n    ""https://node-2.my-cluster.com:6333"",\n\n)\n\nQDRANT_API_KEY = ""my-api-key""\n\n```\n\n\n\n<aside role=""status"">If you are using Qdrant Cloud, you can find the URL and API key in the <a href=""https://cloud.qdrant.io/"">Qdrant Cloud dashboard</a>.</aside>\n\n\n\nWe can now create a client instance:\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient', '```bash\n\nunstructured-ingest \\\n\n  local \\\n\n  --input-path ""discord-output"" \\\n\n  --embedding-provider ""langchain-huggingface"" \\\n\n  qdrant \\\n\n  --collection-name ""<COLLECTION_NAME>"" \\\n\n  --api-key ""<QDRANT_API_KEY>"" \\\n\n  --location ""<QDRANT_URL>""\n\n```']","In the **Console**, you may use the REST API to interact with Qdrant, while in **Collections**, you can manage all the collections and upload Snapshots. 



![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)



### Accessing the Web UI



First, run the Docker container:



```bash

docker run -p 6333:6333 -p 6334:6334 \

    -v $(pwd)/qdrant_storage:/qdrant/storage:z \

    qdrant/qdrant

```



The GUI is available at `http://localhost:6333/dashboard`
Try it out now! If you have Docker running, you can [quickstart Qdrant](https://qdrant.tech/documentation/quick-start/) and access the Dashboard locally from [http://localhost:6333/dashboard](http://localhost:6333/dashboard). You should see this simple access point to Qdrant:



![Qdrant Web UI](/articles_data/qdrant-1.3.x/web-ui.png)



### Temporary directory for Snapshots
WITH ENGINE = ""qdrant"",

PARAMETERS = {

    ""location"": "":memory:"",

    ""collection_config"": {

        ""size"": 386,

        ""distance"": ""Cosine""

    }

}

```



The available arguments for instantiating Qdrant can be found [here](https://github.com/mindsdb/mindsdb/blob/23a509cb26bacae9cc22475497b8644e3f3e23c3/mindsdb/integrations/handlers/qdrant_handler/qdrant_handler.py#L408-L468).



## Creating a new table
```python

QDRANT_MAIN_URL = ""https://my-cluster.com:6333""

QDRANT_NODES = (

    ""https://node-0.my-cluster.com:6333"",

    ""https://node-1.my-cluster.com:6333"",

    ""https://node-2.my-cluster.com:6333"",

)

QDRANT_API_KEY = ""my-api-key""

```



<aside role=""status"">If you are using Qdrant Cloud, you can find the URL and API key in the <a href=""https://cloud.qdrant.io/"">Qdrant Cloud dashboard</a>.</aside>



We can now create a client instance:



```python

from qdrant_client import QdrantClient
```bash

unstructured-ingest \

  local \

  --input-path ""discord-output"" \

  --embedding-provider ""langchain-huggingface"" \

  qdrant \

  --collection-name ""<COLLECTION_NAME>"" \

  --api-key ""<QDRANT_API_KEY>"" \

  --location ""<QDRANT_URL>""

```",0.48717948717948717,0.25675675675675674,0.33628318584070793,0.23684210526315788,0.1232876712328767,0.16216216216216214,0.3333333333333333,0.17567567567567569,0.23008849557522124,0.41025641025641024,0.21621621621621623,0.2831858407079646,0.7473304271697998,0.623569130897522,0.5921692848205566,0.6074637174606323,0.9047371409833431,0.8896808596327901,38,0.475,0.4412191037306603
True,,3127.806,8a484b58,What are the three ways to use Qdrant?,"According to the documentation, there are three ways to use Qdrant:

1. Run a Docker image: This method is recommended for users who do not have a Python development environment. By running a Docker image, users can quickly set up a local Qdrant server and storage.

2. Get the Python client: Users familiar with Python can install the Qdrant client by using `pip install qdrant-client`. The Python client also supports an in-memory database.

3. Spin up a Qdrant Cloud cluster: This method is recommended for running Qdrant in a production environment. Users can set up their first instance by following the Quickstart guide provided in the documentation.","The three ways to use Qdrant are:

1. Run a Docker image: This method is suitable for users who do not have a Python development environment. By running a Docker image, you can set up a local Qdrant server and storage quickly.

2. Get the Python client: If you are familiar with Python, you can install the Python client by using `pip install qdrant-client`. The client also supports an in-memory database.

3. Use Qdrant for common use cases: To interact with Qdrant from Python, it is recommended to use the out-of-the-box client library. This involves installing the client using `pip install qdrant-client`, setting up startup records and vectors, and writing a script to upload data into the search engine.","## First-Time Users:



There are three ways to use Qdrant:



1. [**Run a Docker image**](quick-start/) if you don't have a Python development environment. Setup a local Qdrant server and storage in a few moments. 

2. [**Get the Python client**](https://github.com/qdrant/qdrant-client) if you're familiar with Python. Just `pip install qdrant-client`. The client also supports an in-memory database.
| [Optimization](tutorials/optimize/)           | Optimize Qdrant's resource usage. | [Multitenancy](tutorials/multiple-partitions/) | Setup Qdrant for multiple independent users. |                  



## Common Use Cases:
To interact with Qdrant from python, I recommend using an out-of-the-box client library.



To install it, use the following command



```bash

pip install qdrant-client

```



At this point, we should have startup records in file `startups.json`, encoded vectors in file `startup_vectors.npy`, and running Qdrant on a local machine.

Let's write a script to upload all startup data and vectors into the search engine.



First, let's create a client object for Qdrant.



```python

# Import client library
## What sets Qdrant apart?
technology, jump to the section most relevant to your use case.



As you go through the tutorials, please let us know if any questions come up in our 

[Discord channel here](https://qdrant.to/discord). 😎","[""## First-Time Users:\n\n\n\nThere are three ways to use Qdrant:\n\n\n\n1. [**Run a Docker image**](quick-start/) if you don't have a Python development environment. Setup a local Qdrant server and storage in a few moments. \n\n2. [**Get the Python client**](https://github.com/qdrant/qdrant-client) if you're familiar with Python. Just `pip install qdrant-client`. The client also supports an in-memory database."", ""| [Optimization](tutorials/optimize/)           | Optimize Qdrant's resource usage. | [Multitenancy](tutorials/multiple-partitions/) | Setup Qdrant for multiple independent users. |                  \n\n\n\n## Common Use Cases:"", ""To interact with Qdrant from python, I recommend using an out-of-the-box client library.\n\n\n\nTo install it, use the following command\n\n\n\n```bash\n\npip install qdrant-client\n\n```\n\n\n\nAt this point, we should have startup records in file `startups.json`, encoded vectors in file `startup_vectors.npy`, and running Qdrant on a local machine.\n\nLet's write a script to upload all startup data and vectors into the search engine.\n\n\n\nFirst, let's create a client object for Qdrant.\n\n\n\n```python\n\n# Import client library"", '## What sets Qdrant apart?', 'technology, jump to the section most relevant to your use case.\n\n\n\nAs you go through the tutorials, please let us know if any questions come up in our \n\n[Discord channel here](https://qdrant.to/discord). 😎']","Question: What are the three ways to use Qdrant?\n\nContext: ## First-Time Users:



There are three ways to use Qdrant:



1. [**Run a Docker image**](quick-start/) if you don't have a Python development environment. Setup a local Qdrant server and storage in a few moments. 

2. [**Get the Python client**](https://github.com/qdrant/qdrant-client) if you're familiar with Python. Just `pip install qdrant-client`. The client also supports an in-memory database.
| [Optimization](tutorials/optimize/)           | Optimize Qdrant's resource usage. | [Multitenancy](tutorials/multiple-partitions/) | Setup Qdrant for multiple independent users. |                  



## Common Use Cases:
To interact with Qdrant from python, I recommend using an out-of-the-box client library.



To install it, use the following command



```bash

pip install qdrant-client

```



At this point, we should have startup records in file `startups.json`, encoded vectors in file `startup_vectors.npy`, and running Qdrant on a local machine.

Let's write a script to upload all startup data and vectors into the search engine.



First, let's create a client object for Qdrant.



```python

# Import client library
## What sets Qdrant apart?
technology, jump to the section most relevant to your use case.



As you go through the tutorials, please let us know if any questions come up in our 

[Discord channel here](https://qdrant.to/discord). 😎\n\nAnswer:",What are the three ways to use Qdrant?,"According to the documentation, there are three ways to use Qdrant:

1. Run a Docker image: This method is recommended for users who do not have a Python development environment. By running a Docker image, users can quickly set up a local Qdrant server and storage.

2. Get the Python client: Users familiar with Python can install the Qdrant client by using `pip install qdrant-client`. The Python client also supports an in-memory database.

3. Spin up a Qdrant Cloud cluster: This method is recommended for running Qdrant in a production environment. Users can set up their first instance by following the Quickstart guide provided in the documentation.","[""## First-Time Users:\n\n\n\nThere are three ways to use Qdrant:\n\n\n\n1. [**Run a Docker image**](quick-start/) if you don't have a Python development environment. Setup a local Qdrant server and storage in a few moments. \n\n2. [**Get the Python client**](https://github.com/qdrant/qdrant-client) if you're familiar with Python. Just `pip install qdrant-client`. The client also supports an in-memory database."", ""| [Optimization](tutorials/optimize/)           | Optimize Qdrant's resource usage. | [Multitenancy](tutorials/multiple-partitions/) | Setup Qdrant for multiple independent users. |                  \n\n\n\n## Common Use Cases:"", ""To interact with Qdrant from python, I recommend using an out-of-the-box client library.\n\n\n\nTo install it, use the following command\n\n\n\n```bash\n\npip install qdrant-client\n\n```\n\n\n\nAt this point, we should have startup records in file `startups.json`, encoded vectors in file `startup_vectors.npy`, and running Qdrant on a local machine.\n\nLet's write a script to upload all startup data and vectors into the search engine.\n\n\n\nFirst, let's create a client object for Qdrant.\n\n\n\n```python\n\n# Import client library"", '## What sets Qdrant apart?', 'technology, jump to the section most relevant to your use case.\n\n\n\nAs you go through the tutorials, please let us know if any questions come up in our \n\n[Discord channel here](https://qdrant.to/discord). 😎']","## First-Time Users:



There are three ways to use Qdrant:



1. [**Run a Docker image**](quick-start/) if you don't have a Python development environment. Setup a local Qdrant server and storage in a few moments. 

2. [**Get the Python client**](https://github.com/qdrant/qdrant-client) if you're familiar with Python. Just `pip install qdrant-client`. The client also supports an in-memory database.
| [Optimization](tutorials/optimize/)           | Optimize Qdrant's resource usage. | [Multitenancy](tutorials/multiple-partitions/) | Setup Qdrant for multiple independent users. |                  



## Common Use Cases:
To interact with Qdrant from python, I recommend using an out-of-the-box client library.



To install it, use the following command



```bash

pip install qdrant-client

```



At this point, we should have startup records in file `startups.json`, encoded vectors in file `startup_vectors.npy`, and running Qdrant on a local machine.

Let's write a script to upload all startup data and vectors into the search engine.



First, let's create a client object for Qdrant.



```python

# Import client library
## What sets Qdrant apart?
technology, jump to the section most relevant to your use case.



As you go through the tutorials, please let us know if any questions come up in our 

[Discord channel here](https://qdrant.to/discord). 😎",0.6216216216216216,0.71875,0.6666666666666667,0.4727272727272727,0.5473684210526316,0.5073170731707317,0.5585585585585585,0.6458333333333334,0.5990338164251208,0.6126126126126126,0.7083333333333334,0.6570048309178743,0.9480949640274048,0.7477171421051025,0.7714254260063171,0.7593863010406494,0.9338897104801921,0.8322378680071173,119,1.1121495327102804,0.5644086978082791
True,,5211.836,ee3293c0,What are the recommended ways for Qdrant users to provide feedback or contribute to the project?,"Qdrant encourages feedback and contributions from its users, specifically Data Scientists, ML Engineers, and MLOps professionals. The best way for Qdrant users to contribute is by providing feedback on their experience with Qdrant. This can include reporting problems, unexpected behaviors, or suggesting improvements in documentation. Users can share their feedback through various channels such as creating an issue on the Qdrant GitHub repository, starting a discussion on GitHub, or sending a message on Discord. Additionally, users who use Qdrant or Metric Learning in their projects are encouraged to share their stories, articles, and demos with the Qdrant community. For those familiar with Rust, there is a specific contribution guide available on the Qdrant GitHub repository. If users encounter problems with understanding the code or architecture, they can reach out to the Qdrant team at any time for assistance.","As a Qdrant user, there are several recommended ways for you to provide feedback or contribute to the project:

1. **Feedback**:
   - Let the Qdrant team know about your experiences with the platform. If you encounter any issues, unexpected behavior, or find areas lacking in documentation, share them with the team.
   - You can provide feedback by creating an issue on the [Qdrant GitHub repository](https://github.com/qdrant/qdrant/issues), starting a discussion in the [Qdrant GitHub discussions](https://github.com/qdrant/qdrant/discussions), or by reaching out through the [Qdrant Discord channel](https://discord.gg/tdtYvXjC4h).

2. **Share your Story**:
   - If you use Qdrant or Metric Learning in your projects, the team would love to hear your story. Feel free to share articles, demos, or use cases with the community.

3. **Contribution Guide**:
   - For those familiar with Rust, you can check out the [Qdrant contribution guide](https://github.com/qdrant/qdrant/blob/master/CONTRIBUTING.md) to understand how you can contribute to the project.

4. **Code and Architecture Understanding**:
   - If you have any problems with code or architecture understanding, you can reach out to the Qdrant team at any time for assistance.

5. **Work with Qdrant**:
   - If you are feeling confident and want to contribute more actively, you can explore opportunities to [work with the Qdrant team](https://qdrant.join.com/).

By providing feedback, sharing your experiences, and contributing to the project, you can help Qdrant grow and improve, benefiting both the community and the platform itself.","---

title: Contribution Guidelines

weight: 35

draft: true

---



# How to contribute



If you are a Qdrant user - Data Scientist, ML Engineer, or MLOps, the best contribution would be the feedback on your experience with Qdrant.

Let us know whenever you have a problem, face an unexpected behavior, or see a lack of documentation.
You can do it in any convenient way - create an [issue](https://github.com/qdrant/qdrant/issues), start a [discussion](https://github.com/qdrant/qdrant/discussions), or drop up a [message](https://discord.gg/tdtYvXjC4h).

If you use Qdrant or Metric Learning in your projects, we'd love to hear your story! Feel free to share articles and demos in our community.



For those familiar with Rust - check out our [contribution guide](https://github.com/qdrant/qdrant/blob/master/CONTRIBUTING.md).
Without a doubt, I'm eager to continue growing alongside this community and contribute to new features and enhancements that elevate the product. I've also become an advocate for Qdrant, introducing this project to numerous coworkers and friends in the tech industry. I'm excited to witness new users and contributors emerge from within my own network!
But I've explored Qdrant and as I said with Spotify web API there are a lot of things to be done with this specific user created recommendations. So with Qdrant, the Python client is quite good. The getting started helps a lot. So I wrote a bit of code. I think for production use cases it's really great. So for my use case here, as you can see on the right, I just read the text from a column and then I encode with the model. So the sentence transformer is the model that I encode with
If you have problems with code or architecture understanding - reach us at any time.

Feeling confident and want to contribute more? - Come to [work with us](https://qdrant.join.com/)!","['---\n\ntitle: Contribution Guidelines\n\nweight: 35\n\ndraft: true\n\n---\n\n\n\n# How to contribute\n\n\n\nIf you are a Qdrant user - Data Scientist, ML Engineer, or MLOps, the best contribution would be the feedback on your experience with Qdrant.\n\nLet us know whenever you have a problem, face an unexpected behavior, or see a lack of documentation.', ""You can do it in any convenient way - create an [issue](https://github.com/qdrant/qdrant/issues), start a [discussion](https://github.com/qdrant/qdrant/discussions), or drop up a [message](https://discord.gg/tdtYvXjC4h).\n\nIf you use Qdrant or Metric Learning in your projects, we'd love to hear your story! Feel free to share articles and demos in our community.\n\n\n\nFor those familiar with Rust - check out our [contribution guide](https://github.com/qdrant/qdrant/blob/master/CONTRIBUTING.md)."", ""Without a doubt, I'm eager to continue growing alongside this community and contribute to new features and enhancements that elevate the product. I've also become an advocate for Qdrant, introducing this project to numerous coworkers and friends in the tech industry. I'm excited to witness new users and contributors emerge from within my own network!"", ""But I've explored Qdrant and as I said with Spotify web API there are a lot of things to be done with this specific user created recommendations. So with Qdrant, the Python client is quite good. The getting started helps a lot. So I wrote a bit of code. I think for production use cases it's really great. So for my use case here, as you can see on the right, I just read the text from a column and then I encode with the model. So the sentence transformer is the model that I encode with"", 'If you have problems with code or architecture understanding - reach us at any time.\n\nFeeling confident and want to contribute more? - Come to [work with us](https://qdrant.join.com/)!']","Question: What are the recommended ways for Qdrant users to provide feedback or contribute to the project?\n\nContext: ---

title: Contribution Guidelines

weight: 35

draft: true

---



# How to contribute



If you are a Qdrant user - Data Scientist, ML Engineer, or MLOps, the best contribution would be the feedback on your experience with Qdrant.

Let us know whenever you have a problem, face an unexpected behavior, or see a lack of documentation.
You can do it in any convenient way - create an [issue](https://github.com/qdrant/qdrant/issues), start a [discussion](https://github.com/qdrant/qdrant/discussions), or drop up a [message](https://discord.gg/tdtYvXjC4h).

If you use Qdrant or Metric Learning in your projects, we'd love to hear your story! Feel free to share articles and demos in our community.



For those familiar with Rust - check out our [contribution guide](https://github.com/qdrant/qdrant/blob/master/CONTRIBUTING.md).
Without a doubt, I'm eager to continue growing alongside this community and contribute to new features and enhancements that elevate the product. I've also become an advocate for Qdrant, introducing this project to numerous coworkers and friends in the tech industry. I'm excited to witness new users and contributors emerge from within my own network!
But I've explored Qdrant and as I said with Spotify web API there are a lot of things to be done with this specific user created recommendations. So with Qdrant, the Python client is quite good. The getting started helps a lot. So I wrote a bit of code. I think for production use cases it's really great. So for my use case here, as you can see on the right, I just read the text from a column and then I encode with the model. So the sentence transformer is the model that I encode with
If you have problems with code or architecture understanding - reach us at any time.

Feeling confident and want to contribute more? - Come to [work with us](https://qdrant.join.com/)!\n\nAnswer:",What are the recommended ways for Qdrant users to provide feedback or contribute to the project?,"Qdrant encourages feedback and contributions from its users, specifically Data Scientists, ML Engineers, and MLOps professionals. The best way for Qdrant users to contribute is by providing feedback on their experience with Qdrant. This can include reporting problems, unexpected behaviors, or suggesting improvements in documentation. Users can share their feedback through various channels such as creating an issue on the Qdrant GitHub repository, starting a discussion on GitHub, or sending a message on Discord. Additionally, users who use Qdrant or Metric Learning in their projects are encouraged to share their stories, articles, and demos with the Qdrant community. For those familiar with Rust, there is a specific contribution guide available on the Qdrant GitHub repository. If users encounter problems with understanding the code or architecture, they can reach out to the Qdrant team at any time for assistance.","['---\n\ntitle: Contribution Guidelines\n\nweight: 35\n\ndraft: true\n\n---\n\n\n\n# How to contribute\n\n\n\nIf you are a Qdrant user - Data Scientist, ML Engineer, or MLOps, the best contribution would be the feedback on your experience with Qdrant.\n\nLet us know whenever you have a problem, face an unexpected behavior, or see a lack of documentation.', ""You can do it in any convenient way - create an [issue](https://github.com/qdrant/qdrant/issues), start a [discussion](https://github.com/qdrant/qdrant/discussions), or drop up a [message](https://discord.gg/tdtYvXjC4h).\n\nIf you use Qdrant or Metric Learning in your projects, we'd love to hear your story! Feel free to share articles and demos in our community.\n\n\n\nFor those familiar with Rust - check out our [contribution guide](https://github.com/qdrant/qdrant/blob/master/CONTRIBUTING.md)."", ""Without a doubt, I'm eager to continue growing alongside this community and contribute to new features and enhancements that elevate the product. I've also become an advocate for Qdrant, introducing this project to numerous coworkers and friends in the tech industry. I'm excited to witness new users and contributors emerge from within my own network!"", ""But I've explored Qdrant and as I said with Spotify web API there are a lot of things to be done with this specific user created recommendations. So with Qdrant, the Python client is quite good. The getting started helps a lot. So I wrote a bit of code. I think for production use cases it's really great. So for my use case here, as you can see on the right, I just read the text from a column and then I encode with the model. So the sentence transformer is the model that I encode with"", 'If you have problems with code or architecture understanding - reach us at any time.\n\nFeeling confident and want to contribute more? - Come to [work with us](https://qdrant.join.com/)!']","---

title: Contribution Guidelines

weight: 35

draft: true

---



# How to contribute



If you are a Qdrant user - Data Scientist, ML Engineer, or MLOps, the best contribution would be the feedback on your experience with Qdrant.

Let us know whenever you have a problem, face an unexpected behavior, or see a lack of documentation.
You can do it in any convenient way - create an [issue](https://github.com/qdrant/qdrant/issues), start a [discussion](https://github.com/qdrant/qdrant/discussions), or drop up a [message](https://discord.gg/tdtYvXjC4h).

If you use Qdrant or Metric Learning in your projects, we'd love to hear your story! Feel free to share articles and demos in our community.



For those familiar with Rust - check out our [contribution guide](https://github.com/qdrant/qdrant/blob/master/CONTRIBUTING.md).
Without a doubt, I'm eager to continue growing alongside this community and contribute to new features and enhancements that elevate the product. I've also become an advocate for Qdrant, introducing this project to numerous coworkers and friends in the tech industry. I'm excited to witness new users and contributors emerge from within my own network!
But I've explored Qdrant and as I said with Spotify web API there are a lot of things to be done with this specific user created recommendations. So with Qdrant, the Python client is quite good. The getting started helps a lot. So I wrote a bit of code. I think for production use cases it's really great. So for my use case here, as you can see on the right, I just read the text from a column and then I encode with the model. So the sentence transformer is the model that I encode with
If you have problems with code or architecture understanding - reach us at any time.

Feeling confident and want to contribute more? - Come to [work with us](https://qdrant.join.com/)!",0.3815789473684211,0.6796875,0.4887640449438202,0.1894273127753304,0.33858267716535434,0.24293785310734467,0.2850877192982456,0.5078125,0.3651685393258427,0.36403508771929827,0.6484375,0.46629213483146065,0.827109158039093,0.6798588037490845,0.7463628053665161,0.7115602493286133,0.6930717672595554,0.9992945939863732,228,1.6521739130434783,0.6995092325886375
True,,2839.131,dcc6decf,What is Aleph Alpha and what capabilities does their API offer?,"Aleph Alpha is a multimodal and multilingual embeddings provider. Their API allows for the creation of embeddings for both text and images, placing them in the same latent space. They offer an official Python client that can be installed using pip. The API provides both synchronous and asynchronous clients. Users can obtain embeddings for images and store them into Qdrant by utilizing the provided Python client and following the specified steps in the documentation.","Aleph Alpha is a multimodal and multilingual embeddings provider. Their API allows users to create embeddings for text and images in the same latent space. The API offers capabilities for generating embeddings for various types of data and integrating them into search and recommendation systems. 

Users need to have a registered Aleph Alpha account and obtain an API key to access the API. The official Python client provided by Aleph Alpha simplifies the process of interacting with their API. By using the client, users can vectorize datasets, obtain embeddings for images, and incorporate them into their applications seamlessly. The API supports both synchronous and asynchronous requests, making it flexible for different use cases.","---

title: Aleph Alpha

weight: 900

aliases: [ ../integrations/aleph-alpha/ ]

---



Aleph Alpha is a multimodal and multilingual embeddings' provider. Their API allows creating the embeddings for text and images, both 

in the same latent space. They maintain an [official Python client](https://github.com/Aleph-Alpha/aleph-alpha-client) that might be 

installed with pip:



```bash

pip install aleph-alpha-client

```
[Docker is the fastest way to do that](https://qdrant.tech/documentation/quick_start/#installation).

2. You need to have a registered [Aleph Alpha account](https://app.aleph-alpha.com/). 

3. Upon registration, create an API key (see: [API Tokens](https://app.aleph-alpha.com/profile)).



Now you can store the Aleph Alpha API key in a variable and choose the model your are going to use.



```python

aa_token = ""<< your_token >>""

model = ""luminous-base""

```



## Vectorize the dataset
```bash

pip install aleph-alpha-client

```



There is both synchronous and asynchronous client available. Obtaining the embeddings for an image and storing it into Qdrant might 

be done in the following way:



```python

import qdrant_client



from aleph_alpha_client import (

    Prompt,

    AsyncClient,

    SemanticEmbeddingRequest,

    SemanticRepresentation,

    ImagePrompt

)

from qdrant_client.http.models import Batch



aa_token = ""<< your_token >>""

model = ""luminous-base""
| [Build a Search with Aleph Alpha](tutorials/aleph-alpha-search/)           | Build a simple semantic search that combines text and image data.                  | Qdrant, Aleph Alpha | 

| [Developing Recommendations Systems](https://githubtocolab.com/qdrant/examples/blob/master/qdrant_101_getting_started/getting_started.ipynb)    | Learn how to get started building semantic search and recommendation systems. | Qdrant |
---

title: Aleph Alpha Search

weight: 16

---



# Multimodal Semantic Search with Aleph Alpha



| Time: 30 min | Level: Beginner |  |    |

| --- | ----------- | ----------- |----------- |



This tutorial shows you how to run a proper multimodal semantic search system with a few lines of code, without the need to annotate the data or train your networks.","[""---\n\ntitle: Aleph Alpha\n\nweight: 900\n\naliases: [ ../integrations/aleph-alpha/ ]\n\n---\n\n\n\nAleph Alpha is a multimodal and multilingual embeddings' provider. Their API allows creating the embeddings for text and images, both \n\nin the same latent space. They maintain an [official Python client](https://github.com/Aleph-Alpha/aleph-alpha-client) that might be \n\ninstalled with pip:\n\n\n\n```bash\n\npip install aleph-alpha-client\n\n```"", '[Docker is the fastest way to do that](https://qdrant.tech/documentation/quick_start/#installation).\n\n2. You need to have a registered [Aleph Alpha account](https://app.aleph-alpha.com/). \n\n3. Upon registration, create an API key (see: [API Tokens](https://app.aleph-alpha.com/profile)).\n\n\n\nNow you can store the Aleph Alpha API key in a variable and choose the model your are going to use.\n\n\n\n```python\n\naa_token = ""<< your_token >>""\n\nmodel = ""luminous-base""\n\n```\n\n\n\n## Vectorize the dataset', '```bash\n\npip install aleph-alpha-client\n\n```\n\n\n\nThere is both synchronous and asynchronous client available. Obtaining the embeddings for an image and storing it into Qdrant might \n\nbe done in the following way:\n\n\n\n```python\n\nimport qdrant_client\n\n\n\nfrom aleph_alpha_client import (\n\n    Prompt,\n\n    AsyncClient,\n\n    SemanticEmbeddingRequest,\n\n    SemanticRepresentation,\n\n    ImagePrompt\n\n)\n\nfrom qdrant_client.http.models import Batch\n\n\n\naa_token = ""<< your_token >>""\n\nmodel = ""luminous-base""', '| [Build a Search with Aleph Alpha](tutorials/aleph-alpha-search/)           | Build a simple semantic search that combines text and image data.                  | Qdrant, Aleph Alpha | \n\n| [Developing Recommendations Systems](https://githubtocolab.com/qdrant/examples/blob/master/qdrant_101_getting_started/getting_started.ipynb)    | Learn how to get started building semantic search and recommendation systems. | Qdrant |', '---\n\ntitle: Aleph Alpha Search\n\nweight: 16\n\n---\n\n\n\n# Multimodal Semantic Search with Aleph Alpha\n\n\n\n| Time: 30 min | Level: Beginner |  |    |\n\n| --- | ----------- | ----------- |----------- |\n\n\n\nThis tutorial shows you how to run a proper multimodal semantic search system with a few lines of code, without the need to annotate the data or train your networks.']","Question: What is Aleph Alpha and what capabilities does their API offer?\n\nContext: ---

title: Aleph Alpha

weight: 900

aliases: [ ../integrations/aleph-alpha/ ]

---



Aleph Alpha is a multimodal and multilingual embeddings' provider. Their API allows creating the embeddings for text and images, both 

in the same latent space. They maintain an [official Python client](https://github.com/Aleph-Alpha/aleph-alpha-client) that might be 

installed with pip:



```bash

pip install aleph-alpha-client

```
[Docker is the fastest way to do that](https://qdrant.tech/documentation/quick_start/#installation).

2. You need to have a registered [Aleph Alpha account](https://app.aleph-alpha.com/). 

3. Upon registration, create an API key (see: [API Tokens](https://app.aleph-alpha.com/profile)).



Now you can store the Aleph Alpha API key in a variable and choose the model your are going to use.



```python

aa_token = ""<< your_token >>""

model = ""luminous-base""

```



## Vectorize the dataset
```bash

pip install aleph-alpha-client

```



There is both synchronous and asynchronous client available. Obtaining the embeddings for an image and storing it into Qdrant might 

be done in the following way:



```python

import qdrant_client



from aleph_alpha_client import (

Prompt,

AsyncClient,

SemanticEmbeddingRequest,

SemanticRepresentation,

ImagePrompt

)

from qdrant_client.http.models import Batch



aa_token = ""<< your_token >>""

model = ""luminous-base""
| [Build a Search with Aleph Alpha](tutorials/aleph-alpha-search/)           | Build a simple semantic search that combines text and image data.                  | Qdrant, Aleph Alpha | 

| [Developing Recommendations Systems](https://githubtocolab.com/qdrant/examples/blob/master/qdrant_101_getting_started/getting_started.ipynb)    | Learn how to get started building semantic search and recommendation systems. | Qdrant |
---

title: Aleph Alpha Search

weight: 16

---



# Multimodal Semantic Search with Aleph Alpha



| Time: 30 min | Level: Beginner |  |    |

| --- | ----------- | ----------- |----------- |



This tutorial shows you how to run a proper multimodal semantic search system with a few lines of code, without the need to annotate the data or train your networks.\n\nAnswer:",What is Aleph Alpha and what capabilities does their API offer?,"Aleph Alpha is a multimodal and multilingual embeddings provider. Their API allows for the creation of embeddings for both text and images, placing them in the same latent space. They offer an official Python client that can be installed using pip. The API provides both synchronous and asynchronous clients. Users can obtain embeddings for images and store them into Qdrant by utilizing the provided Python client and following the specified steps in the documentation.","[""---\n\ntitle: Aleph Alpha\n\nweight: 900\n\naliases: [ ../integrations/aleph-alpha/ ]\n\n---\n\n\n\nAleph Alpha is a multimodal and multilingual embeddings' provider. Their API allows creating the embeddings for text and images, both \n\nin the same latent space. They maintain an [official Python client](https://github.com/Aleph-Alpha/aleph-alpha-client) that might be \n\ninstalled with pip:\n\n\n\n```bash\n\npip install aleph-alpha-client\n\n```"", '[Docker is the fastest way to do that](https://qdrant.tech/documentation/quick_start/#installation).\n\n2. You need to have a registered [Aleph Alpha account](https://app.aleph-alpha.com/). \n\n3. Upon registration, create an API key (see: [API Tokens](https://app.aleph-alpha.com/profile)).\n\n\n\nNow you can store the Aleph Alpha API key in a variable and choose the model your are going to use.\n\n\n\n```python\n\naa_token = ""<< your_token >>""\n\nmodel = ""luminous-base""\n\n```\n\n\n\n## Vectorize the dataset', '```bash\n\npip install aleph-alpha-client\n\n```\n\n\n\nThere is both synchronous and asynchronous client available. Obtaining the embeddings for an image and storing it into Qdrant might \n\nbe done in the following way:\n\n\n\n```python\n\nimport qdrant_client\n\n\n\nfrom aleph_alpha_client import (\n\n    Prompt,\n\n    AsyncClient,\n\n    SemanticEmbeddingRequest,\n\n    SemanticRepresentation,\n\n    ImagePrompt\n\n)\n\nfrom qdrant_client.http.models import Batch\n\n\n\naa_token = ""<< your_token >>""\n\nmodel = ""luminous-base""', '| [Build a Search with Aleph Alpha](tutorials/aleph-alpha-search/)           | Build a simple semantic search that combines text and image data.                  | Qdrant, Aleph Alpha | \n\n| [Developing Recommendations Systems](https://githubtocolab.com/qdrant/examples/blob/master/qdrant_101_getting_started/getting_started.ipynb)    | Learn how to get started building semantic search and recommendation systems. | Qdrant |', '---\n\ntitle: Aleph Alpha Search\n\nweight: 16\n\n---\n\n\n\n# Multimodal Semantic Search with Aleph Alpha\n\n\n\n| Time: 30 min | Level: Beginner |  |    |\n\n| --- | ----------- | ----------- |----------- |\n\n\n\nThis tutorial shows you how to run a proper multimodal semantic search system with a few lines of code, without the need to annotate the data or train your networks.']","---

title: Aleph Alpha

weight: 900

aliases: [ ../integrations/aleph-alpha/ ]

---



Aleph Alpha is a multimodal and multilingual embeddings' provider. Their API allows creating the embeddings for text and images, both 

in the same latent space. They maintain an [official Python client](https://github.com/Aleph-Alpha/aleph-alpha-client) that might be 

installed with pip:



```bash

pip install aleph-alpha-client

```
[Docker is the fastest way to do that](https://qdrant.tech/documentation/quick_start/#installation).

2. You need to have a registered [Aleph Alpha account](https://app.aleph-alpha.com/). 

3. Upon registration, create an API key (see: [API Tokens](https://app.aleph-alpha.com/profile)).



Now you can store the Aleph Alpha API key in a variable and choose the model your are going to use.



```python

aa_token = ""<< your_token >>""

model = ""luminous-base""

```



## Vectorize the dataset
```bash

pip install aleph-alpha-client

```



There is both synchronous and asynchronous client available. Obtaining the embeddings for an image and storing it into Qdrant might 

be done in the following way:



```python

import qdrant_client



from aleph_alpha_client import (

    Prompt,

    AsyncClient,

    SemanticEmbeddingRequest,

    SemanticRepresentation,

    ImagePrompt

)

from qdrant_client.http.models import Batch



aa_token = ""<< your_token >>""

model = ""luminous-base""
| [Build a Search with Aleph Alpha](tutorials/aleph-alpha-search/)           | Build a simple semantic search that combines text and image data.                  | Qdrant, Aleph Alpha | 

| [Developing Recommendations Systems](https://githubtocolab.com/qdrant/examples/blob/master/qdrant_101_getting_started/getting_started.ipynb)    | Learn how to get started building semantic search and recommendation systems. | Qdrant |
---

title: Aleph Alpha Search

weight: 16

---



# Multimodal Semantic Search with Aleph Alpha



| Time: 30 min | Level: Beginner |  |    |

| --- | ----------- | ----------- |----------- |



This tutorial shows you how to run a proper multimodal semantic search system with a few lines of code, without the need to annotate the data or train your networks.",0.44660194174757284,0.696969696969697,0.5443786982248521,0.27450980392156865,0.4307692307692308,0.33532934131736525,0.34951456310679613,0.5454545454545454,0.42603550295857984,0.42718446601941745,0.6666666666666666,0.5207100591715976,0.8819156289100647,0.7205172181129456,0.7768034934997559,0.7476024627685547,0.812105412661497,0.8542127233929933,113,1.527027027027027,0.6909456516621837
True,,2563.65,0e85f6c9,What is the purpose of the `task_type` parameter when obtaining Nomic embeddings?,"The `task_type` parameter in the `nomic-embed-text-v1` model is used to define the type of embeddings that are obtained for documents. When obtaining Nomic embeddings for documents, you need to set the `task_type` parameter to `search_document`. This ensures that the embeddings generated are specifically tailored for document search purposes. By specifying the `task_type` as `search_document`, you are instructing the model to encode the text in a way that is optimized for searching and retrieving relevant documents based on the input query. This parameter helps customize the embeddings to suit the specific requirements of document retrieval tasks within the Nomic framework.","The purpose of the `task_type` parameter when obtaining Nomic embeddings is to specify the type of task you want to use the embeddings for. This parameter helps define the context in which the embeddings will be utilized, such as for storing documents in Qdrant, performing search queries, classification tasks, text clustering, semantic text similarity, and other related tasks.

By setting the `task_type` parameter accordingly, you can tailor the embeddings generated by Nomic to suit the specific requirements of your application, whether it involves semantic search, document retrieval, classification, clustering, or other tasks. The `task_type` parameter ensures that the embeddings are optimized for the intended usage, leading to more accurate and relevant results in your text-based applications.","Once installed, you can configure it with the official Python client or through direct HTTP requests.



<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>



You can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings

are obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.

For documents, set the `task_type` to `search_document`:



```python
parameter to the API call: `input_type`. It determines the type of task you want to use the embeddings for.



- `input_type=""search_document""` - for documents to store in Qdrant

- `input_type=""search_query""` - for search queries to find the most relevant documents

- `input_type=""classification""` - for classification tasks

- `input_type=""clustering""` - for text clustering



While implementing semantic search applications, such as RAG, you should use `input_type=""search_document""` for the
The Embedding Model API supports various task types, outlined as follows:



1. `retrieval_query`: Specifies the given text is a query in a search/retrieval setting.

2. `retrieval_document`: Specifies the given text is a document from the corpus being searched.

3. `semantic_similarity`: Specifies the given text will be used for Semantic Text Similarity.

4. `classification`: Specifies that the given text will be classified.

5. `clustering`: Specifies that the embeddings will be used for clustering.
```python

from qdrant_client import QdrantClient, models

from nomic import embed



output = embed.text(

    texts=[""Qdrant is the best vector database!""],

    model=""nomic-embed-text-v1"",

    task_type=""search_document"",

)



qdrant_client = QdrantClient()

qdrant_client.upsert(

    collection_name=""my-collection"",

    points=models.Batch(

        ids=[1],

        vectors=output[""embeddings""],

    ),

)

```



To query the collection, set the `task_type` to `search_query`:



```python
```python

output = embed.text(

    texts=[""What is the best vector database?""],

    model=""nomic-embed-text-v1"",

    task_type=""search_query"",

)



qdrant_client.search(

    collection_name=""my-collection"",

    query=output[""embeddings""][0],

)

```



For more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text).","['Once installed, you can configure it with the official Python client or through direct HTTP requests.\n\n\n\n<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>\n\n\n\nYou can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings\n\nare obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.\n\nFor documents, set the `task_type` to `search_document`:\n\n\n\n```python', 'parameter to the API call: `input_type`. It determines the type of task you want to use the embeddings for.\n\n\n\n- `input_type=""search_document""` - for documents to store in Qdrant\n\n- `input_type=""search_query""` - for search queries to find the most relevant documents\n\n- `input_type=""classification""` - for classification tasks\n\n- `input_type=""clustering""` - for text clustering\n\n\n\nWhile implementing semantic search applications, such as RAG, you should use `input_type=""search_document""` for the', 'The Embedding Model API supports various task types, outlined as follows:\n\n\n\n1. `retrieval_query`: Specifies the given text is a query in a search/retrieval setting.\n\n2. `retrieval_document`: Specifies the given text is a document from the corpus being searched.\n\n3. `semantic_similarity`: Specifies the given text will be used for Semantic Text Similarity.\n\n4. `classification`: Specifies that the given text will be classified.\n\n5. `clustering`: Specifies that the embeddings will be used for clustering.', '```python\n\nfrom qdrant_client import QdrantClient, models\n\nfrom nomic import embed\n\n\n\noutput = embed.text(\n\n    texts=[""Qdrant is the best vector database!""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_document"",\n\n)\n\n\n\nqdrant_client = QdrantClient()\n\nqdrant_client.upsert(\n\n    collection_name=""my-collection"",\n\n    points=models.Batch(\n\n        ids=[1],\n\n        vectors=output[""embeddings""],\n\n    ),\n\n)\n\n```\n\n\n\nTo query the collection, set the `task_type` to `search_query`:\n\n\n\n```python', '```python\n\noutput = embed.text(\n\n    texts=[""What is the best vector database?""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_query"",\n\n)\n\n\n\nqdrant_client.search(\n\n    collection_name=""my-collection"",\n\n    query=output[""embeddings""][0],\n\n)\n\n```\n\n\n\nFor more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text).']","Question: What is the purpose of the `task_type` parameter when obtaining Nomic embeddings?\n\nContext: Once installed, you can configure it with the official Python client or through direct HTTP requests.



<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>



You can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings

are obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.

For documents, set the `task_type` to `search_document`:



```python
parameter to the API call: `input_type`. It determines the type of task you want to use the embeddings for.



- `input_type=""search_document""` - for documents to store in Qdrant

- `input_type=""search_query""` - for search queries to find the most relevant documents

- `input_type=""classification""` - for classification tasks

- `input_type=""clustering""` - for text clustering



While implementing semantic search applications, such as RAG, you should use `input_type=""search_document""` for the
The Embedding Model API supports various task types, outlined as follows:



1. `retrieval_query`: Specifies the given text is a query in a search/retrieval setting.

2. `retrieval_document`: Specifies the given text is a document from the corpus being searched.

3. `semantic_similarity`: Specifies the given text will be used for Semantic Text Similarity.

4. `classification`: Specifies that the given text will be classified.

5. `clustering`: Specifies that the embeddings will be used for clustering.
```python

from qdrant_client import QdrantClient, models

from nomic import embed



output = embed.text(

texts=[""Qdrant is the best vector database!""],

model=""nomic-embed-text-v1"",

task_type=""search_document"",

)



qdrant_client = QdrantClient()

qdrant_client.upsert(

collection_name=""my-collection"",

points=models.Batch(

ids=[1],

vectors=output[""embeddings""],

),

)

```



To query the collection, set the `task_type` to `search_query`:



```python
```python

output = embed.text(

texts=[""What is the best vector database?""],

model=""nomic-embed-text-v1"",

task_type=""search_query"",

)



qdrant_client.search(

collection_name=""my-collection"",

query=output[""embeddings""][0],

)

```



For more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text).\n\nAnswer:",What is the purpose of the `task_type` parameter when obtaining Nomic embeddings?,"The `task_type` parameter in the `nomic-embed-text-v1` model is used to define the type of embeddings that are obtained for documents. When obtaining Nomic embeddings for documents, you need to set the `task_type` parameter to `search_document`. This ensures that the embeddings generated are specifically tailored for document search purposes. By specifying the `task_type` as `search_document`, you are instructing the model to encode the text in a way that is optimized for searching and retrieving relevant documents based on the input query. This parameter helps customize the embeddings to suit the specific requirements of document retrieval tasks within the Nomic framework.","['Once installed, you can configure it with the official Python client or through direct HTTP requests.\n\n\n\n<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>\n\n\n\nYou can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings\n\nare obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.\n\nFor documents, set the `task_type` to `search_document`:\n\n\n\n```python', 'parameter to the API call: `input_type`. It determines the type of task you want to use the embeddings for.\n\n\n\n- `input_type=""search_document""` - for documents to store in Qdrant\n\n- `input_type=""search_query""` - for search queries to find the most relevant documents\n\n- `input_type=""classification""` - for classification tasks\n\n- `input_type=""clustering""` - for text clustering\n\n\n\nWhile implementing semantic search applications, such as RAG, you should use `input_type=""search_document""` for the', 'The Embedding Model API supports various task types, outlined as follows:\n\n\n\n1. `retrieval_query`: Specifies the given text is a query in a search/retrieval setting.\n\n2. `retrieval_document`: Specifies the given text is a document from the corpus being searched.\n\n3. `semantic_similarity`: Specifies the given text will be used for Semantic Text Similarity.\n\n4. `classification`: Specifies that the given text will be classified.\n\n5. `clustering`: Specifies that the embeddings will be used for clustering.', '```python\n\nfrom qdrant_client import QdrantClient, models\n\nfrom nomic import embed\n\n\n\noutput = embed.text(\n\n    texts=[""Qdrant is the best vector database!""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_document"",\n\n)\n\n\n\nqdrant_client = QdrantClient()\n\nqdrant_client.upsert(\n\n    collection_name=""my-collection"",\n\n    points=models.Batch(\n\n        ids=[1],\n\n        vectors=output[""embeddings""],\n\n    ),\n\n)\n\n```\n\n\n\nTo query the collection, set the `task_type` to `search_query`:\n\n\n\n```python', '```python\n\noutput = embed.text(\n\n    texts=[""What is the best vector database?""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_query"",\n\n)\n\n\n\nqdrant_client.search(\n\n    collection_name=""my-collection"",\n\n    query=output[""embeddings""][0],\n\n)\n\n```\n\n\n\nFor more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text).']","Once installed, you can configure it with the official Python client or through direct HTTP requests.



<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>



You can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings

are obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.

For documents, set the `task_type` to `search_document`:



```python
parameter to the API call: `input_type`. It determines the type of task you want to use the embeddings for.



- `input_type=""search_document""` - for documents to store in Qdrant

- `input_type=""search_query""` - for search queries to find the most relevant documents

- `input_type=""classification""` - for classification tasks

- `input_type=""clustering""` - for text clustering



While implementing semantic search applications, such as RAG, you should use `input_type=""search_document""` for the
The Embedding Model API supports various task types, outlined as follows:



1. `retrieval_query`: Specifies the given text is a query in a search/retrieval setting.

2. `retrieval_document`: Specifies the given text is a document from the corpus being searched.

3. `semantic_similarity`: Specifies the given text will be used for Semantic Text Similarity.

4. `classification`: Specifies that the given text will be classified.

5. `clustering`: Specifies that the embeddings will be used for clustering.
```python

from qdrant_client import QdrantClient, models

from nomic import embed



output = embed.text(

    texts=[""Qdrant is the best vector database!""],

    model=""nomic-embed-text-v1"",

    task_type=""search_document"",

)



qdrant_client = QdrantClient()

qdrant_client.upsert(

    collection_name=""my-collection"",

    points=models.Batch(

        ids=[1],

        vectors=output[""embeddings""],

    ),

)

```



To query the collection, set the `task_type` to `search_query`:



```python
```python

output = embed.text(

    texts=[""What is the best vector database?""],

    model=""nomic-embed-text-v1"",

    task_type=""search_query"",

)



qdrant_client.search(

    collection_name=""my-collection"",

    query=output[""embeddings""][0],

)

```



For more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text).",0.5740740740740741,0.6595744680851063,0.613861386138614,0.21495327102803738,0.24731182795698925,0.22999999999999998,0.26851851851851855,0.30851063829787234,0.28712871287128716,0.5,0.574468085106383,0.5346534653465347,0.8941271901130676,0.6704717874526978,0.6958644986152649,0.6829321384429932,0.9728027577511966,0.9498446077108383,116,1.1717171717171717,0.450750981747086
True,,6508.262000000001,863b1044,How can you use the Nomic library to upsert data into a collection and query it using text embeddings?,"To upsert data into a collection and query it using text embeddings with the Nomic library, you first need to use the `embed.text` method with the `task_type` set to `search_document` to generate embeddings for the text data you want to upsert. After obtaining the embeddings, you can use the `QdrantClient` to upsert the data into a specific collection by providing the collection name and the batch of points containing the IDs and corresponding vectors.

To query the collection, you need to set the `task_type` to `search_query` in the `embed.text` method with the query text. Once you have the query embeddings, you can use the `QdrantClient` to search the collection by providing the collection name and the query embedding to retrieve relevant results based on similarity.

For more detailed information and examples on using text , refer to : https://qdrant.tech/documentation/embeddings/nomic/","To use the Nomic library to upsert data into a collection and query it using text embeddings, you can follow these steps:

1. Generate text embeddings for your data using the Nomic library's `embed.text` function with the `task_type` set to `search_document`.
2. Use the generated embeddings to upsert the data into a collection in Qdrant using the QdrantClient's `upsert` method.
3. To query the collection using text embeddings, set the `task_type` to `search_query` when generating embeddings for your query text.
4. Use the generated embeddings for the query text to search the collection using the QdrantClient's `search` method.

Here's a summary of the code snippets provided in the context:

1. Upsert data into a collection using Nomic and Qdrant:

```python
output = embed.text(
    texts=[""Qdrant is the best vector database!""],
    model=""nomic-embed-text-v1"",
    task_type=""search_document"",
)

qdrant_client = QdrantClient()
qdrant_client.upsert(
    collection_name=""my-collection"",
    points=models.Batch(
        ids=[1],
        vectors=output[""embeddings""],
    ),
)
```

2. Query the collection using text embeddings:

```python
output = embed.text(
    texts=[""What is the best vector database?""],
    model=""nomic-embed-text-v1"",
    task_type=""search_query"",
)

qdrant_client.search(
    collection_name=""my-collection"",
    query=output[""embeddings""][0],
)
```

Remember to configure your Nomic API token for using Nomic Text Embeddings. Additionally, you can refer to the Nomic documentation on Text embeddings for more information.

For querying text embeddings using OpenAI's models, you can follow the provided code snippet using the OpenAI Python client to generate embeddings and then upsert the data into a collection in Qdrant.

Ensure you have the necessary API keys and configurations set up for both Nomic and OpenAI services.","```python

from qdrant_client import QdrantClient, models

from nomic import embed



output = embed.text(

    texts=[""Qdrant is the best vector database!""],

    model=""nomic-embed-text-v1"",

    task_type=""search_document"",

)



qdrant_client = QdrantClient()

qdrant_client.upsert(

    collection_name=""my-collection"",

    points=models.Batch(

        ids=[1],

        vectors=output[""embeddings""],

    ),

)

```



To query the collection, set the `task_type` to `search_query`:



```python
```python

output = embed.text(

    texts=[""What is the best vector database?""],

    model=""nomic-embed-text-v1"",

    task_type=""search_query"",

)



qdrant_client.search(

    collection_name=""my-collection"",

    query=output[""embeddings""][0],

)

```



For more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text).
Once installed, you can configure it with the official Python client or through direct HTTP requests.



<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>



You can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings

are obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.

For documents, set the `task_type` to `search_document`:



```python
let points = data.map(|(text, payload)| {

        let id = std::mem::replace(&mut id_counter, *id_counter + 1);

        let vectors = Some(embed(embed_client, text, embed_api_key).unwrap());

        PointStruct { id, vectors, payload }

    }).collect();

    client.upsert_points(collection_name, points, None).await?;

    Ok(())

}

```
# https://platform.openai.com/docs/models/embeddings

embedding_model = ""text-embedding-ada-002""



openai_client = openai.Client(

    api_key=""<< your_api_key >>""

)

response = openai_client.embeddings.create(

    input=""The best vector database"",

    model=embedding_model,

)



qdrant_client = qdrant_client.QdrantClient()

qdrant_client.upsert(

    collection_name=""MyCollection"",

    points=Batch(

        ids=[1],

        vectors=[response.data[0].embedding],

    ),

)

```","['```python\n\nfrom qdrant_client import QdrantClient, models\n\nfrom nomic import embed\n\n\n\noutput = embed.text(\n\n    texts=[""Qdrant is the best vector database!""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_document"",\n\n)\n\n\n\nqdrant_client = QdrantClient()\n\nqdrant_client.upsert(\n\n    collection_name=""my-collection"",\n\n    points=models.Batch(\n\n        ids=[1],\n\n        vectors=output[""embeddings""],\n\n    ),\n\n)\n\n```\n\n\n\nTo query the collection, set the `task_type` to `search_query`:\n\n\n\n```python', '```python\n\noutput = embed.text(\n\n    texts=[""What is the best vector database?""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_query"",\n\n)\n\n\n\nqdrant_client.search(\n\n    collection_name=""my-collection"",\n\n    query=output[""embeddings""][0],\n\n)\n\n```\n\n\n\nFor more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text).', 'Once installed, you can configure it with the official Python client or through direct HTTP requests.\n\n\n\n<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>\n\n\n\nYou can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings\n\nare obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.\n\nFor documents, set the `task_type` to `search_document`:\n\n\n\n```python', 'let points = data.map(|(text, payload)| {\n\n        let id = std::mem::replace(&mut id_counter, *id_counter + 1);\n\n        let vectors = Some(embed(embed_client, text, embed_api_key).unwrap());\n\n        PointStruct { id, vectors, payload }\n\n    }).collect();\n\n    client.upsert_points(collection_name, points, None).await?;\n\n    Ok(())\n\n}\n\n```', '# https://platform.openai.com/docs/models/embeddings\n\nembedding_model = ""text-embedding-ada-002""\n\n\n\nopenai_client = openai.Client(\n\n    api_key=""<< your_api_key >>""\n\n)\n\nresponse = openai_client.embeddings.create(\n\n    input=""The best vector database"",\n\n    model=embedding_model,\n\n)\n\n\n\nqdrant_client = qdrant_client.QdrantClient()\n\nqdrant_client.upsert(\n\n    collection_name=""MyCollection"",\n\n    points=Batch(\n\n        ids=[1],\n\n        vectors=[response.data[0].embedding],\n\n    ),\n\n)\n\n```']","Question: How can you use the Nomic library to upsert data into a collection and query it using text embeddings?\n\nContext: ```python

from qdrant_client import QdrantClient, models

from nomic import embed



output = embed.text(

texts=[""Qdrant is the best vector database!""],

model=""nomic-embed-text-v1"",

task_type=""search_document"",

)



qdrant_client = QdrantClient()

qdrant_client.upsert(

collection_name=""my-collection"",

points=models.Batch(

ids=[1],

vectors=output[""embeddings""],

),

)

```



To query the collection, set the `task_type` to `search_query`:



```python
```python

output = embed.text(

texts=[""What is the best vector database?""],

model=""nomic-embed-text-v1"",

task_type=""search_query"",

)



qdrant_client.search(

collection_name=""my-collection"",

query=output[""embeddings""][0],

)

```



For more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text).
Once installed, you can configure it with the official Python client or through direct HTTP requests.



<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>



You can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings

are obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.

For documents, set the `task_type` to `search_document`:



```python
let points = data.map(|(text, payload)| {

let id = std::mem::replace(&mut id_counter, *id_counter + 1);

let vectors = Some(embed(embed_client, text, embed_api_key).unwrap());

PointStruct { id, vectors, payload }

}).collect();

client.upsert_points(collection_name, points, None).await?;

Ok(())

}

```
# https://platform.openai.com/docs/models/embeddings

embedding_model = ""text-embedding-ada-002""



openai_client = openai.Client(

api_key=""<< your_api_key >>""

)

response = openai_client.embeddings.create(

input=""The best vector database"",

model=embedding_model,

)



qdrant_client = qdrant_client.QdrantClient()

qdrant_client.upsert(

collection_name=""MyCollection"",

points=Batch(

ids=[1],

vectors=[response.data[0].embedding],

),

)

```\n\nAnswer:",How can you use the Nomic library to upsert data into a collection and query it using text embeddings?,"To upsert data into a collection and query it using text embeddings with the Nomic library, you first need to use the `embed.text` method with the `task_type` set to `search_document` to generate embeddings for the text data you want to upsert. After obtaining the embeddings, you can use the `QdrantClient` to upsert the data into a specific collection by providing the collection name and the batch of points containing the IDs and corresponding vectors.

To query the collection, you need to set the `task_type` to `search_query` in the `embed.text` method with the query text. Once you have the query embeddings, you can use the `QdrantClient` to search the collection by providing the collection name and the query embedding to retrieve relevant results based on similarity.

For more detailed information and examples on using text , refer to : https://qdrant.tech/documentation/embeddings/nomic/","['```python\n\nfrom qdrant_client import QdrantClient, models\n\nfrom nomic import embed\n\n\n\noutput = embed.text(\n\n    texts=[""Qdrant is the best vector database!""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_document"",\n\n)\n\n\n\nqdrant_client = QdrantClient()\n\nqdrant_client.upsert(\n\n    collection_name=""my-collection"",\n\n    points=models.Batch(\n\n        ids=[1],\n\n        vectors=output[""embeddings""],\n\n    ),\n\n)\n\n```\n\n\n\nTo query the collection, set the `task_type` to `search_query`:\n\n\n\n```python', '```python\n\noutput = embed.text(\n\n    texts=[""What is the best vector database?""],\n\n    model=""nomic-embed-text-v1"",\n\n    task_type=""search_query"",\n\n)\n\n\n\nqdrant_client.search(\n\n    collection_name=""my-collection"",\n\n    query=output[""embeddings""][0],\n\n)\n\n```\n\n\n\nFor more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text).', 'Once installed, you can configure it with the official Python client or through direct HTTP requests.\n\n\n\n<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>\n\n\n\nYou can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings\n\nare obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.\n\nFor documents, set the `task_type` to `search_document`:\n\n\n\n```python', 'let points = data.map(|(text, payload)| {\n\n        let id = std::mem::replace(&mut id_counter, *id_counter + 1);\n\n        let vectors = Some(embed(embed_client, text, embed_api_key).unwrap());\n\n        PointStruct { id, vectors, payload }\n\n    }).collect();\n\n    client.upsert_points(collection_name, points, None).await?;\n\n    Ok(())\n\n}\n\n```', '# https://platform.openai.com/docs/models/embeddings\n\nembedding_model = ""text-embedding-ada-002""\n\n\n\nopenai_client = openai.Client(\n\n    api_key=""<< your_api_key >>""\n\n)\n\nresponse = openai_client.embeddings.create(\n\n    input=""The best vector database"",\n\n    model=embedding_model,\n\n)\n\n\n\nqdrant_client = qdrant_client.QdrantClient()\n\nqdrant_client.upsert(\n\n    collection_name=""MyCollection"",\n\n    points=Batch(\n\n        ids=[1],\n\n        vectors=[response.data[0].embedding],\n\n    ),\n\n)\n\n```']","```python

from qdrant_client import QdrantClient, models

from nomic import embed



output = embed.text(

    texts=[""Qdrant is the best vector database!""],

    model=""nomic-embed-text-v1"",

    task_type=""search_document"",

)



qdrant_client = QdrantClient()

qdrant_client.upsert(

    collection_name=""my-collection"",

    points=models.Batch(

        ids=[1],

        vectors=output[""embeddings""],

    ),

)

```



To query the collection, set the `task_type` to `search_query`:



```python
```python

output = embed.text(

    texts=[""What is the best vector database?""],

    model=""nomic-embed-text-v1"",

    task_type=""search_query"",

)



qdrant_client.search(

    collection_name=""my-collection"",

    query=output[""embeddings""][0],

)

```



For more information, see the Nomic documentation on [Text embeddings](https://docs.nomic.ai/reference/endpoints/nomic-embed-text).
Once installed, you can configure it with the official Python client or through direct HTTP requests.



<aside role=""status"">Using Nomic Text Embeddings requires configuring the Nomic API token</aside>



You can use Nomic embeddings directly in Qdrant client calls. There is a difference in the way the embeddings

are obtained for documents and queries. The `task_type` parameter defines the embeddings that you get.

For documents, set the `task_type` to `search_document`:



```python
let points = data.map(|(text, payload)| {

        let id = std::mem::replace(&mut id_counter, *id_counter + 1);

        let vectors = Some(embed(embed_client, text, embed_api_key).unwrap());

        PointStruct { id, vectors, payload }

    }).collect();

    client.upsert_points(collection_name, points, None).await?;

    Ok(())

}

```
# https://platform.openai.com/docs/models/embeddings

embedding_model = ""text-embedding-ada-002""



openai_client = openai.Client(

    api_key=""<< your_api_key >>""

)

response = openai_client.embeddings.create(

    input=""The best vector database"",

    model=embedding_model,

)



qdrant_client = qdrant_client.QdrantClient()

qdrant_client.upsert(

    collection_name=""MyCollection"",

    points=Batch(

        ids=[1],

        vectors=[response.data[0].embedding],

    ),

)

```",0.391304347826087,0.7795275590551181,0.5210526315789474,0.19047619047619047,0.38095238095238093,0.25396825396825395,0.233201581027668,0.4645669291338583,0.3105263157894737,0.35177865612648224,0.7007874015748031,0.46842105263157896,0.9631438255310059,0.6558868885040283,0.6941763758659363,0.6744886636734009,0.6083342323545367,0.8139846205711365,250,1.8115942028985508,0.378392555075054
True,,1992.4740000000002,f6d54716,What is the purpose of the `task_type` parameter in the Gemini Embedding Model API?,"The `task_type` parameter in the Gemini Embedding Model API serves to designate the intended purpose for the embeddings utilized. It allows users to specify the type of task they want to perform with the given text. The supported task types include `retrieval_query` for search/retrieval queries, `retrieval_document` for documents from the corpus being searched, `semantic_similarity` for Semantic Text Similarity, and `classification` for text classification. This parameter helps in customizing the functionality of the Gemini Embedding Model API based on the specific task requirements.","The purpose of the `task_type` parameter in the Gemini Embedding Model API is to designate the intended purpose for the embeddings being utilized. It specifies how the given text will be used or processed. The `task_type` parameter supports various task types, such as retrieval queries, retrieval documents, semantic similarity, classification, and clustering. By specifying the `task_type`, you can inform the API about the specific task or application for which the embeddings are being generated.","---

title: Gemini

weight: 700

---



# Gemini



Qdrant is compatible with Gemini Embedding Model API and its official Python SDK that can be installed as any other package:



Gemini is a new family of Google PaLM models, released in December 2023. The new embedding models succeed the previous Gecko Embedding Model. 



In the latest models, an additional parameter, `task_type`, can be passed to the API call. This parameter serves to designate the intended purpose for the embeddings utilized.
The Embedding Model API supports various task types, outlined as follows:



1. `retrieval_query`: Specifies the given text is a query in a search/retrieval setting.

2. `retrieval_document`: Specifies the given text is a document from the corpus being searched.

3. `semantic_similarity`: Specifies the given text will be used for Semantic Text Similarity.

4. `classification`: Specifies that the given text will be classified.

5. `clustering`: Specifies that the embeddings will be used for clustering.
The following example shows how to embed a document with the `models/embedding-001` with the `retrieval_document` task type:



## Embedding a document



```python

import pathlib

import google.generativeai as genai

import qdrant_client



GEMINI_API_KEY = ""YOUR GEMINI API KEY""  # add your key here



genai.configure(api_key=GEMINI_API_KEY)



result = genai.embed_content(

    model=""models/embedding-001"",

    content=""Qdrant is the best vector search engine to use with Gemini"",
ids=[1],

        vectors=genai.embed_content(

            model=""models/embedding-001"",

            content=""Qdrant is the best vector search engine to use with Gemini"",

            task_type=""retrieval_document"",

            title=""Qdrant x Gemini"",

        )[""embedding""],

    ),

)

```



## Searching for documents with Qdrant



Once the documents are indexed, you can search for the most relevant documents using the same model with the `retrieval_query` task type:



```python
parameter to the API call: `input_type`. It determines the type of task you want to use the embeddings for.



- `input_type=""search_document""` - for documents to store in Qdrant

- `input_type=""search_query""` - for search queries to find the most relevant documents

- `input_type=""classification""` - for classification tasks

- `input_type=""clustering""` - for text clustering



While implementing semantic search applications, such as RAG, you should use `input_type=""search_document""` for the","['---\n\ntitle: Gemini\n\nweight: 700\n\n---\n\n\n\n# Gemini\n\n\n\nQdrant is compatible with Gemini Embedding Model API and its official Python SDK that can be installed as any other package:\n\n\n\nGemini is a new family of Google PaLM models, released in December 2023. The new embedding models succeed the previous Gecko Embedding Model. \n\n\n\nIn the latest models, an additional parameter, `task_type`, can be passed to the API call. This parameter serves to designate the intended purpose for the embeddings utilized.', 'The Embedding Model API supports various task types, outlined as follows:\n\n\n\n1. `retrieval_query`: Specifies the given text is a query in a search/retrieval setting.\n\n2. `retrieval_document`: Specifies the given text is a document from the corpus being searched.\n\n3. `semantic_similarity`: Specifies the given text will be used for Semantic Text Similarity.\n\n4. `classification`: Specifies that the given text will be classified.\n\n5. `clustering`: Specifies that the embeddings will be used for clustering.', 'The following example shows how to embed a document with the `models/embedding-001` with the `retrieval_document` task type:\n\n\n\n## Embedding a document\n\n\n\n```python\n\nimport pathlib\n\nimport google.generativeai as genai\n\nimport qdrant_client\n\n\n\nGEMINI_API_KEY = ""YOUR GEMINI API KEY""  # add your key here\n\n\n\ngenai.configure(api_key=GEMINI_API_KEY)\n\n\n\nresult = genai.embed_content(\n\n    model=""models/embedding-001"",\n\n    content=""Qdrant is the best vector search engine to use with Gemini"",', 'ids=[1],\n\n        vectors=genai.embed_content(\n\n            model=""models/embedding-001"",\n\n            content=""Qdrant is the best vector search engine to use with Gemini"",\n\n            task_type=""retrieval_document"",\n\n            title=""Qdrant x Gemini"",\n\n        )[""embedding""],\n\n    ),\n\n)\n\n```\n\n\n\n## Searching for documents with Qdrant\n\n\n\nOnce the documents are indexed, you can search for the most relevant documents using the same model with the `retrieval_query` task type:\n\n\n\n```python', 'parameter to the API call: `input_type`. It determines the type of task you want to use the embeddings for.\n\n\n\n- `input_type=""search_document""` - for documents to store in Qdrant\n\n- `input_type=""search_query""` - for search queries to find the most relevant documents\n\n- `input_type=""classification""` - for classification tasks\n\n- `input_type=""clustering""` - for text clustering\n\n\n\nWhile implementing semantic search applications, such as RAG, you should use `input_type=""search_document""` for the']","Question: What is the purpose of the `task_type` parameter in the Gemini Embedding Model API?\n\nContext: ---

title: Gemini

weight: 700

---



# Gemini



Qdrant is compatible with Gemini Embedding Model API and its official Python SDK that can be installed as any other package:



Gemini is a new family of Google PaLM models, released in December 2023. The new embedding models succeed the previous Gecko Embedding Model. 



In the latest models, an additional parameter, `task_type`, can be passed to the API call. This parameter serves to designate the intended purpose for the embeddings utilized.
The Embedding Model API supports various task types, outlined as follows:



1. `retrieval_query`: Specifies the given text is a query in a search/retrieval setting.

2. `retrieval_document`: Specifies the given text is a document from the corpus being searched.

3. `semantic_similarity`: Specifies the given text will be used for Semantic Text Similarity.

4. `classification`: Specifies that the given text will be classified.

5. `clustering`: Specifies that the embeddings will be used for clustering.
The following example shows how to embed a document with the `models/embedding-001` with the `retrieval_document` task type:



## Embedding a document



```python

import pathlib

import google.generativeai as genai

import qdrant_client



GEMINI_API_KEY = ""YOUR GEMINI API KEY""  # add your key here



genai.configure(api_key=GEMINI_API_KEY)



result = genai.embed_content(

model=""models/embedding-001"",

content=""Qdrant is the best vector search engine to use with Gemini"",
ids=[1],

vectors=genai.embed_content(

model=""models/embedding-001"",

content=""Qdrant is the best vector search engine to use with Gemini"",

task_type=""retrieval_document"",

title=""Qdrant x Gemini"",

)[""embedding""],

),

)

```



## Searching for documents with Qdrant



Once the documents are indexed, you can search for the most relevant documents using the same model with the `retrieval_query` task type:



```python
parameter to the API call: `input_type`. It determines the type of task you want to use the embeddings for.



- `input_type=""search_document""` - for documents to store in Qdrant

- `input_type=""search_query""` - for search queries to find the most relevant documents

- `input_type=""classification""` - for classification tasks

- `input_type=""clustering""` - for text clustering



While implementing semantic search applications, such as RAG, you should use `input_type=""search_document""` for the\n\nAnswer:",What is the purpose of the `task_type` parameter in the Gemini Embedding Model API?,"The `task_type` parameter in the Gemini Embedding Model API serves to designate the intended purpose for the embeddings utilized. It allows users to specify the type of task they want to perform with the given text. The supported task types include `retrieval_query` for search/retrieval queries, `retrieval_document` for documents from the corpus being searched, `semantic_similarity` for Semantic Text Similarity, and `classification` for text classification. This parameter helps in customizing the functionality of the Gemini Embedding Model API based on the specific task requirements.","['---\n\ntitle: Gemini\n\nweight: 700\n\n---\n\n\n\n# Gemini\n\n\n\nQdrant is compatible with Gemini Embedding Model API and its official Python SDK that can be installed as any other package:\n\n\n\nGemini is a new family of Google PaLM models, released in December 2023. The new embedding models succeed the previous Gecko Embedding Model. \n\n\n\nIn the latest models, an additional parameter, `task_type`, can be passed to the API call. This parameter serves to designate the intended purpose for the embeddings utilized.', 'The Embedding Model API supports various task types, outlined as follows:\n\n\n\n1. `retrieval_query`: Specifies the given text is a query in a search/retrieval setting.\n\n2. `retrieval_document`: Specifies the given text is a document from the corpus being searched.\n\n3. `semantic_similarity`: Specifies the given text will be used for Semantic Text Similarity.\n\n4. `classification`: Specifies that the given text will be classified.\n\n5. `clustering`: Specifies that the embeddings will be used for clustering.', 'The following example shows how to embed a document with the `models/embedding-001` with the `retrieval_document` task type:\n\n\n\n## Embedding a document\n\n\n\n```python\n\nimport pathlib\n\nimport google.generativeai as genai\n\nimport qdrant_client\n\n\n\nGEMINI_API_KEY = ""YOUR GEMINI API KEY""  # add your key here\n\n\n\ngenai.configure(api_key=GEMINI_API_KEY)\n\n\n\nresult = genai.embed_content(\n\n    model=""models/embedding-001"",\n\n    content=""Qdrant is the best vector search engine to use with Gemini"",', 'ids=[1],\n\n        vectors=genai.embed_content(\n\n            model=""models/embedding-001"",\n\n            content=""Qdrant is the best vector search engine to use with Gemini"",\n\n            task_type=""retrieval_document"",\n\n            title=""Qdrant x Gemini"",\n\n        )[""embedding""],\n\n    ),\n\n)\n\n```\n\n\n\n## Searching for documents with Qdrant\n\n\n\nOnce the documents are indexed, you can search for the most relevant documents using the same model with the `retrieval_query` task type:\n\n\n\n```python', 'parameter to the API call: `input_type`. It determines the type of task you want to use the embeddings for.\n\n\n\n- `input_type=""search_document""` - for documents to store in Qdrant\n\n- `input_type=""search_query""` - for search queries to find the most relevant documents\n\n- `input_type=""classification""` - for classification tasks\n\n- `input_type=""clustering""` - for text clustering\n\n\n\nWhile implementing semantic search applications, such as RAG, you should use `input_type=""search_document""` for the']","---

title: Gemini

weight: 700

---



# Gemini



Qdrant is compatible with Gemini Embedding Model API and its official Python SDK that can be installed as any other package:



Gemini is a new family of Google PaLM models, released in December 2023. The new embedding models succeed the previous Gecko Embedding Model. 



In the latest models, an additional parameter, `task_type`, can be passed to the API call. This parameter serves to designate the intended purpose for the embeddings utilized.
The Embedding Model API supports various task types, outlined as follows:



1. `retrieval_query`: Specifies the given text is a query in a search/retrieval setting.

2. `retrieval_document`: Specifies the given text is a document from the corpus being searched.

3. `semantic_similarity`: Specifies the given text will be used for Semantic Text Similarity.

4. `classification`: Specifies that the given text will be classified.

5. `clustering`: Specifies that the embeddings will be used for clustering.
The following example shows how to embed a document with the `models/embedding-001` with the `retrieval_document` task type:



## Embedding a document



```python

import pathlib

import google.generativeai as genai

import qdrant_client



GEMINI_API_KEY = ""YOUR GEMINI API KEY""  # add your key here



genai.configure(api_key=GEMINI_API_KEY)



result = genai.embed_content(

    model=""models/embedding-001"",

    content=""Qdrant is the best vector search engine to use with Gemini"",
ids=[1],

        vectors=genai.embed_content(

            model=""models/embedding-001"",

            content=""Qdrant is the best vector search engine to use with Gemini"",

            task_type=""retrieval_document"",

            title=""Qdrant x Gemini"",

        )[""embedding""],

    ),

)

```



## Searching for documents with Qdrant



Once the documents are indexed, you can search for the most relevant documents using the same model with the `retrieval_query` task type:



```python
parameter to the API call: `input_type`. It determines the type of task you want to use the embeddings for.



- `input_type=""search_document""` - for documents to store in Qdrant

- `input_type=""search_query""` - for search queries to find the most relevant documents

- `input_type=""classification""` - for classification tasks

- `input_type=""clustering""` - for text clustering



While implementing semantic search applications, such as RAG, you should use `input_type=""search_document""` for the",0.6060606060606061,0.5263157894736842,0.5633802816901409,0.3230769230769231,0.28,0.3000000000000001,0.48484848484848486,0.42105263157894735,0.4507042253521127,0.5909090909090909,0.5131578947368421,0.5492957746478874,0.902955174446106,0.6994655132293701,0.686187207698822,0.6927627325057983,0.9715936160646379,0.9933637334033847,74,0.9024390243902439,0.6964673101682601
True,,736.214,58151199,What is the maximum number of tokens that Jina embeddings allow for model input lengths?,"Jina embeddings allow for model input lengths of up to 8192 tokens. This means that the models utilizing Jina embeddings can process sequences with a maximum length of 8192 tokens, providing flexibility and capability for handling large amounts of text data efficiently.",The maximum number of tokens that Jina embeddings allow for model input lengths is up to 8192 tokens.,"---

title: Jina Embeddings

weight: 800

aliases: [ ../integrations/jina-embeddings/ ]

---



# Jina Embeddings



Qdrant can also easily work with [Jina embeddings](https://jina.ai/embeddings/) which allow for model input lengths of up to 8192 tokens.
The default model and several other models have a context window of maximum 512 tokens. This maximum limit comes from the embedding model training and design itself.If you'd like to embed sequences larger than that, we'd recommend using some pooling strategy to get a single vector out of the sequence. For example, you can use the mean of the embeddings of different chunks of a document. This is also what the [SBERT Paper recommends](https://lilianweng.github.io/posts/2021-05-31-contrastive/#sentence-bert)
. The other caveat is that we pass on the token limits or context windows from the embedding model creators themselves. So in the case of this model, which is BGE base, that is 512 BGE tokens.
This expansion has a direct relationship with what we can control when making a SPLADE model: Sparsity via Regularisation. The number of tokens (BERT wordpieces) we use to represent each document. If we use more tokens, we can represent more terms, but the vectors become denser. This number is typically between 20 to 200 per document. As a reference point, the dense BERT vector is 768 dimensions, OpenAI Embedding is 1536 dimensions, and the sparse vector is 30 dimensions.
""""""

    tokens = tokenizer(text, return_tensors=""pt"")

    output = model(**tokens)

    logits, attention_mask = output.logits, tokens.attention_mask

    relu_log = torch.log(1 + torch.relu(logits))

    weighted_log = relu_log * attention_mask.unsqueeze(-1)

    max_val, _ = torch.max(weighted_log, dim=1)

    vec = max_val.squeeze()



    return vec, tokens





vec, tokens = compute_vector(text)

print(vec.shape)

```","['---\n\ntitle: Jina Embeddings\n\nweight: 800\n\naliases: [ ../integrations/jina-embeddings/ ]\n\n---\n\n\n\n# Jina Embeddings\n\n\n\nQdrant can also easily work with [Jina embeddings](https://jina.ai/embeddings/) which allow for model input lengths of up to 8192 tokens.', ""The default model and several other models have a context window of maximum 512 tokens. This maximum limit comes from the embedding model training and design itself.If you'd like to embed sequences larger than that, we'd recommend using some pooling strategy to get a single vector out of the sequence. For example, you can use the mean of the embeddings of different chunks of a document. This is also what the [SBERT Paper recommends](https://lilianweng.github.io/posts/2021-05-31-contrastive/#sentence-bert)"", '. The other caveat is that we pass on the token limits or context windows from the embedding model creators themselves. So in the case of this model, which is BGE base, that is 512 BGE tokens.', 'This expansion has a direct relationship with what we can control when making a SPLADE model: Sparsity via Regularisation. The number of tokens (BERT wordpieces) we use to represent each document. If we use more tokens, we can represent more terms, but the vectors become denser. This number is typically between 20 to 200 per document. As a reference point, the dense BERT vector is 768 dimensions, OpenAI Embedding is 1536 dimensions, and the sparse vector is 30 dimensions.', '""""""\n\n    tokens = tokenizer(text, return_tensors=""pt"")\n\n    output = model(**tokens)\n\n    logits, attention_mask = output.logits, tokens.attention_mask\n\n    relu_log = torch.log(1 + torch.relu(logits))\n\n    weighted_log = relu_log * attention_mask.unsqueeze(-1)\n\n    max_val, _ = torch.max(weighted_log, dim=1)\n\n    vec = max_val.squeeze()\n\n\n\n    return vec, tokens\n\n\n\n\n\nvec, tokens = compute_vector(text)\n\nprint(vec.shape)\n\n```']","Question: What is the maximum number of tokens that Jina embeddings allow for model input lengths?\n\nContext: ---

title: Jina Embeddings

weight: 800

aliases: [ ../integrations/jina-embeddings/ ]

---



# Jina Embeddings



Qdrant can also easily work with [Jina embeddings](https://jina.ai/embeddings/) which allow for model input lengths of up to 8192 tokens.
The default model and several other models have a context window of maximum 512 tokens. This maximum limit comes from the embedding model training and design itself.If you'd like to embed sequences larger than that, we'd recommend using some pooling strategy to get a single vector out of the sequence. For example, you can use the mean of the embeddings of different chunks of a document. This is also what the [SBERT Paper recommends](https://lilianweng.github.io/posts/2021-05-31-contrastive/#sentence-bert)
. The other caveat is that we pass on the token limits or context windows from the embedding model creators themselves. So in the case of this model, which is BGE base, that is 512 BGE tokens.
This expansion has a direct relationship with what we can control when making a SPLADE model: Sparsity via Regularisation. The number of tokens (BERT wordpieces) we use to represent each document. If we use more tokens, we can represent more terms, but the vectors become denser. This number is typically between 20 to 200 per document. As a reference point, the dense BERT vector is 768 dimensions, OpenAI Embedding is 1536 dimensions, and the sparse vector is 30 dimensions.
""""""

tokens = tokenizer(text, return_tensors=""pt"")

output = model(**tokens)

logits, attention_mask = output.logits, tokens.attention_mask

relu_log = torch.log(1 + torch.relu(logits))

weighted_log = relu_log * attention_mask.unsqueeze(-1)

max_val, _ = torch.max(weighted_log, dim=1)

vec = max_val.squeeze()



return vec, tokens





vec, tokens = compute_vector(text)

print(vec.shape)

```\n\nAnswer:",What is the maximum number of tokens that Jina embeddings allow for model input lengths?,"Jina embeddings allow for model input lengths of up to 8192 tokens. This means that the models utilizing Jina embeddings can process sequences with a maximum length of 8192 tokens, providing flexibility and capability for handling large amounts of text data efficiently.","['---\n\ntitle: Jina Embeddings\n\nweight: 800\n\naliases: [ ../integrations/jina-embeddings/ ]\n\n---\n\n\n\n# Jina Embeddings\n\n\n\nQdrant can also easily work with [Jina embeddings](https://jina.ai/embeddings/) which allow for model input lengths of up to 8192 tokens.', ""The default model and several other models have a context window of maximum 512 tokens. This maximum limit comes from the embedding model training and design itself.If you'd like to embed sequences larger than that, we'd recommend using some pooling strategy to get a single vector out of the sequence. For example, you can use the mean of the embeddings of different chunks of a document. This is also what the [SBERT Paper recommends](https://lilianweng.github.io/posts/2021-05-31-contrastive/#sentence-bert)"", '. The other caveat is that we pass on the token limits or context windows from the embedding model creators themselves. So in the case of this model, which is BGE base, that is 512 BGE tokens.', 'This expansion has a direct relationship with what we can control when making a SPLADE model: Sparsity via Regularisation. The number of tokens (BERT wordpieces) we use to represent each document. If we use more tokens, we can represent more terms, but the vectors become denser. This number is typically between 20 to 200 per document. As a reference point, the dense BERT vector is 768 dimensions, OpenAI Embedding is 1536 dimensions, and the sparse vector is 30 dimensions.', '""""""\n\n    tokens = tokenizer(text, return_tensors=""pt"")\n\n    output = model(**tokens)\n\n    logits, attention_mask = output.logits, tokens.attention_mask\n\n    relu_log = torch.log(1 + torch.relu(logits))\n\n    weighted_log = relu_log * attention_mask.unsqueeze(-1)\n\n    max_val, _ = torch.max(weighted_log, dim=1)\n\n    vec = max_val.squeeze()\n\n\n\n    return vec, tokens\n\n\n\n\n\nvec, tokens = compute_vector(text)\n\nprint(vec.shape)\n\n```']","---

title: Jina Embeddings

weight: 800

aliases: [ ../integrations/jina-embeddings/ ]

---



# Jina Embeddings



Qdrant can also easily work with [Jina embeddings](https://jina.ai/embeddings/) which allow for model input lengths of up to 8192 tokens.
The default model and several other models have a context window of maximum 512 tokens. This maximum limit comes from the embedding model training and design itself.If you'd like to embed sequences larger than that, we'd recommend using some pooling strategy to get a single vector out of the sequence. For example, you can use the mean of the embeddings of different chunks of a document. This is also what the [SBERT Paper recommends](https://lilianweng.github.io/posts/2021-05-31-contrastive/#sentence-bert)
. The other caveat is that we pass on the token limits or context windows from the embedding model creators themselves. So in the case of this model, which is BGE base, that is 512 BGE tokens.
This expansion has a direct relationship with what we can control when making a SPLADE model: Sparsity via Regularisation. The number of tokens (BERT wordpieces) we use to represent each document. If we use more tokens, we can represent more terms, but the vectors become denser. This number is typically between 20 to 200 per document. As a reference point, the dense BERT vector is 768 dimensions, OpenAI Embedding is 1536 dimensions, and the sparse vector is 30 dimensions.
""""""

    tokens = tokenizer(text, return_tensors=""pt"")

    output = model(**tokens)

    logits, attention_mask = output.logits, tokens.attention_mask

    relu_log = torch.log(1 + torch.relu(logits))

    weighted_log = relu_log * attention_mask.unsqueeze(-1)

    max_val, _ = torch.max(weighted_log, dim=1)

    vec = max_val.squeeze()



    return vec, tokens





vec, tokens = compute_vector(text)

print(vec.shape)

```",0.8823529411764706,0.375,0.5263157894736842,0.5625,0.23076923076923078,0.32727272727272727,0.6470588235294118,0.275,0.3859649122807018,0.7647058823529411,0.325,0.456140350877193,0.9264309406280518,0.6830343008041382,0.6052727103233337,0.6418067216873169,0.9992045030812733,0.9976610423764214,18,0.42857142857142855,0.42185196821749665
True,,2454.814,66bda700,Why does Qdrant by default not return vectors in search results?,"By default, Qdrant tries to minimize network traffic and doesn't return vectors in search results. This default behavior is in place to optimize performance and reduce unnecessary data transfer. However, if you specifically require the vectors to be included in the search results, you can override this default setting by setting the `with_vector` parameter of the Search/Scroll to `true`. This allows you to retrieve the vectors along with other search results, providing you with the option to access the vector data when needed.","Qdrant does not return vectors in search results by default to minimize network traffic. However, you can force Qdrant to include vectors in search results by setting the `with_vector` parameter to `true` when performing a search.

If you are still seeing vectors with null values in your search results, it could be due to issues with the format of the vectors you are passing or how you are calling the upsert method.

If you need to search without providing a vector, you can use the scroll method in Qdrant. The scroll method allows you to retrieve records based on filters or iterate over all the records in the collection.

Regarding full-text search or hybrid search capabilities, Qdrant primarily focuses on vector similarity search. If you need full-text search or hybrid search functionalities, you may need to integrate Qdrant with other tools or services that provide those features.","Please read more about collections, isolation, and multiple users in our [Multitenancy](../../tutorials/multiple-partitions/) tutorial.



### My search results contain vectors with null values. Why?



By default, Qdrant tries to minimize network traffic and doesn't return vectors in search results.

But you can force Qdrant to do so by setting the `with_vector` parameter of the Search/Scroll to `true`.
qdrant: &QdrantClient,

) -> Result<Vec<ScoredPoint>> {

    Ok(qdrant.search_points(&SearchPoints {

        collection_name,

        limit: 5, // use what fits your use case here

        with_payload: Some(true.into()),

        vector: embed(client, text, api_key)?,

        ..Default::default()

    }).await?.result)

}

```
qdrant_client

        .search_points(&SearchPoints {

            collection_name: COLLECTION_NAME.to_string(),

            vector,

            limit: SEARCH_LIMIT,

            with_payload: Some(true.into()),

            ..Default::default()

        })

        .await

        .map_err(|err| anyhow!(""Failed to search Qdrant: {}"", err))

}

```
If you're still seeing `""vector"": null` in your results, it might be that the vector you're passing is not in the correct format, or there's an issue with how you're calling the upsert method.



### How can I search without a vector?



You are likely looking for the [scroll](../../concepts/points/#scroll-points) method. It allows you to retrieve the records based on filters or even iterate over all the records in the collection.



### Does Qdrant support a full-text search or a hybrid search?
vector: vec![0.2, 0.1, 0.9, 0.7],

        params: Some(SearchParams {

            quantization: Some(QuantizationSearchParams {

                rescore: Some(false),

                ..Default::default()

            }),

            ..Default::default()

        }),

        limit: 3,

        ..Default::default()

    })

    .await?;

```



```java

import java.util.List;



import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;","[""Please read more about collections, isolation, and multiple users in our [Multitenancy](../../tutorials/multiple-partitions/) tutorial.\n\n\n\n### My search results contain vectors with null values. Why?\n\n\n\nBy default, Qdrant tries to minimize network traffic and doesn't return vectors in search results.\n\nBut you can force Qdrant to do so by setting the `with_vector` parameter of the Search/Scroll to `true`."", 'qdrant: &QdrantClient,\n\n) -> Result<Vec<ScoredPoint>> {\n\n    Ok(qdrant.search_points(&SearchPoints {\n\n        collection_name,\n\n        limit: 5, // use what fits your use case here\n\n        with_payload: Some(true.into()),\n\n        vector: embed(client, text, api_key)?,\n\n        ..Default::default()\n\n    }).await?.result)\n\n}\n\n```', 'qdrant_client\n\n        .search_points(&SearchPoints {\n\n            collection_name: COLLECTION_NAME.to_string(),\n\n            vector,\n\n            limit: SEARCH_LIMIT,\n\n            with_payload: Some(true.into()),\n\n            ..Default::default()\n\n        })\n\n        .await\n\n        .map_err(|err| anyhow!(""Failed to search Qdrant: {}"", err))\n\n}\n\n```', 'If you\'re still seeing `""vector"": null` in your results, it might be that the vector you\'re passing is not in the correct format, or there\'s an issue with how you\'re calling the upsert method.\n\n\n\n### How can I search without a vector?\n\n\n\nYou are likely looking for the [scroll](../../concepts/points/#scroll-points) method. It allows you to retrieve the records based on filters or even iterate over all the records in the collection.\n\n\n\n### Does Qdrant support a full-text search or a hybrid search?', 'vector: vec![0.2, 0.1, 0.9, 0.7],\n\n        params: Some(SearchParams {\n\n            quantization: Some(QuantizationSearchParams {\n\n                rescore: Some(false),\n\n                ..Default::default()\n\n            }),\n\n            ..Default::default()\n\n        }),\n\n        limit: 3,\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;']","Question: Why does Qdrant by default not return vectors in search results?\n\nContext: Please read more about collections, isolation, and multiple users in our [Multitenancy](../../tutorials/multiple-partitions/) tutorial.



### My search results contain vectors with null values. Why?



By default, Qdrant tries to minimize network traffic and doesn't return vectors in search results.

But you can force Qdrant to do so by setting the `with_vector` parameter of the Search/Scroll to `true`.
qdrant: &QdrantClient,

) -> Result<Vec<ScoredPoint>> {

Ok(qdrant.search_points(&SearchPoints {

collection_name,

limit: 5, // use what fits your use case here

with_payload: Some(true.into()),

vector: embed(client, text, api_key)?,

..Default::default()

}).await?.result)

}

```
qdrant_client

.search_points(&SearchPoints {

collection_name: COLLECTION_NAME.to_string(),

vector,

limit: SEARCH_LIMIT,

with_payload: Some(true.into()),

..Default::default()

})

.await

.map_err(|err| anyhow!(""Failed to search Qdrant: {}"", err))

}

```
If you're still seeing `""vector"": null` in your results, it might be that the vector you're passing is not in the correct format, or there's an issue with how you're calling the upsert method.



### How can I search without a vector?



You are likely looking for the [scroll](../../concepts/points/#scroll-points) method. It allows you to retrieve the records based on filters or even iterate over all the records in the collection.



### Does Qdrant support a full-text search or a hybrid search?
vector: vec![0.2, 0.1, 0.9, 0.7],

params: Some(SearchParams {

quantization: Some(QuantizationSearchParams {

rescore: Some(false),

..Default::default()

}),

..Default::default()

}),

limit: 3,

..Default::default()

})

.await?;

```



```java

import java.util.List;



import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;\n\nAnswer:",Why does Qdrant by default not return vectors in search results?,"By default, Qdrant tries to minimize network traffic and doesn't return vectors in search results. This default behavior is in place to optimize performance and reduce unnecessary data transfer. However, if you specifically require the vectors to be included in the search results, you can override this default setting by setting the `with_vector` parameter of the Search/Scroll to `true`. This allows you to retrieve the vectors along with other search results, providing you with the option to access the vector data when needed.","[""Please read more about collections, isolation, and multiple users in our [Multitenancy](../../tutorials/multiple-partitions/) tutorial.\n\n\n\n### My search results contain vectors with null values. Why?\n\n\n\nBy default, Qdrant tries to minimize network traffic and doesn't return vectors in search results.\n\nBut you can force Qdrant to do so by setting the `with_vector` parameter of the Search/Scroll to `true`."", 'qdrant: &QdrantClient,\n\n) -> Result<Vec<ScoredPoint>> {\n\n    Ok(qdrant.search_points(&SearchPoints {\n\n        collection_name,\n\n        limit: 5, // use what fits your use case here\n\n        with_payload: Some(true.into()),\n\n        vector: embed(client, text, api_key)?,\n\n        ..Default::default()\n\n    }).await?.result)\n\n}\n\n```', 'qdrant_client\n\n        .search_points(&SearchPoints {\n\n            collection_name: COLLECTION_NAME.to_string(),\n\n            vector,\n\n            limit: SEARCH_LIMIT,\n\n            with_payload: Some(true.into()),\n\n            ..Default::default()\n\n        })\n\n        .await\n\n        .map_err(|err| anyhow!(""Failed to search Qdrant: {}"", err))\n\n}\n\n```', 'If you\'re still seeing `""vector"": null` in your results, it might be that the vector you\'re passing is not in the correct format, or there\'s an issue with how you\'re calling the upsert method.\n\n\n\n### How can I search without a vector?\n\n\n\nYou are likely looking for the [scroll](../../concepts/points/#scroll-points) method. It allows you to retrieve the records based on filters or even iterate over all the records in the collection.\n\n\n\n### Does Qdrant support a full-text search or a hybrid search?', 'vector: vec![0.2, 0.1, 0.9, 0.7],\n\n        params: Some(SearchParams {\n\n            quantization: Some(QuantizationSearchParams {\n\n                rescore: Some(false),\n\n                ..Default::default()\n\n            }),\n\n            ..Default::default()\n\n        }),\n\n        limit: 3,\n\n        ..Default::default()\n\n    })\n\n    .await?;\n\n```\n\n\n\n```java\n\nimport java.util.List;\n\n\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;']","Please read more about collections, isolation, and multiple users in our [Multitenancy](../../tutorials/multiple-partitions/) tutorial.



### My search results contain vectors with null values. Why?



By default, Qdrant tries to minimize network traffic and doesn't return vectors in search results.

But you can force Qdrant to do so by setting the `with_vector` parameter of the Search/Scroll to `true`.
qdrant: &QdrantClient,

) -> Result<Vec<ScoredPoint>> {

    Ok(qdrant.search_points(&SearchPoints {

        collection_name,

        limit: 5, // use what fits your use case here

        with_payload: Some(true.into()),

        vector: embed(client, text, api_key)?,

        ..Default::default()

    }).await?.result)

}

```
qdrant_client

        .search_points(&SearchPoints {

            collection_name: COLLECTION_NAME.to_string(),

            vector,

            limit: SEARCH_LIMIT,

            with_payload: Some(true.into()),

            ..Default::default()

        })

        .await

        .map_err(|err| anyhow!(""Failed to search Qdrant: {}"", err))

}

```
If you're still seeing `""vector"": null` in your results, it might be that the vector you're passing is not in the correct format, or there's an issue with how you're calling the upsert method.



### How can I search without a vector?



You are likely looking for the [scroll](../../concepts/points/#scroll-points) method. It allows you to retrieve the records based on filters or even iterate over all the records in the collection.



### Does Qdrant support a full-text search or a hybrid search?
vector: vec![0.2, 0.1, 0.9, 0.7],

        params: Some(SearchParams {

            quantization: Some(QuantizationSearchParams {

                rescore: Some(false),

                ..Default::default()

            }),

            ..Default::default()

        }),

        limit: 3,

        ..Default::default()

    })

    .await?;

```



```java

import java.util.List;



import io.qdrant.client.QdrantClient;

import io.qdrant.client.QdrantGrpcClient;",0.37857142857142856,0.6708860759493671,0.4840182648401827,0.15827338129496402,0.28205128205128205,0.20276497695852533,0.22857142857142856,0.4050632911392405,0.2922374429223744,0.35,0.620253164556962,0.4474885844748859,0.9173853397369385,0.6378220915794373,0.6995519995689392,0.6672624349594116,0.8642667081772483,0.9044068042421713,147,1.75,0.3670695216144764
True,,578.2230000000001,cf24a2c0,What does Qdrant not plan to support in the future?,"In the future, Qdrant does not plan to support BM25 or other non-vector-based retrieval or ranking functions, built-in ontologies or knowledge graphs, and query analyzers and other NLP tools. Qdrant aims to introduce support for sparse vectors, as used in SPLADE or similar models, but does not intend to incorporate the aforementioned features into its functionality. Users can combine Qdrant with specialized tools, including full-text search engines, to complement its capabilities.",Qdrant does not plan to support code interpretation in the future.,"To keep the human in the loop.

But obviously some stuff that are on our roadmap.

And another thing that we don't support, which is one type of action would.

Be the first we will be working on is obviously code interpretation, which is I think is one of the things that all users ask because they use.

It on Chat GPT.

And so we'll be looking into that as well.





Demetrios:

What made you choose Qdrant?





Stanislas Polu:

So the decision was made, if I.
Other than as expressly set out in these terms, Qdrant does not make any commitments about the Solution and Website’s availability or ability to meet your expectations.





### 15. Liability



In no event shall Qdrant be liable for:





* any indirect damages of any kind, including any potential loss of business;

* any damage or loss which is not caused by a breach of its obligations under the T&Cs;

* disruptions or damage inherent in an electronic communications network;
Qdrant undertakes, in particular, to carry out regular checks to verify the operation and accessibility of the Solution. In this regard, Qdrant reserves the right to interrupt access to the Solution momentarily for reasons of maintenance. Similarly, Qdrant may not be held responsible for momentary difficulties or impossibilities in accessing the Solution and/or Website, the origin of which is external to it, “force majeure”, or which are due to disruptions in the telecommunications network.
You further declare and guarantee that by creating, installing, downloading or transmitting the Content through the Solution, you do not infringe third parties’ rights.



You acknowledge and accept that Qdrant cannot be held responsible for the Content.



### 9. Accessibility of the Solution
* unauthorized access to the Solution by a third-party caused by you, including through your negligence;

* your failure to fulfill your obligations under the T&Cs;

* implementation of any software package, software or operating system not compatible with the Solution;

* failure of the electronic communication networks which is not the fault of Qdrant;

* your refusal to collaborate with Qdrant in the resolution of the anomalies and in particular to answer questions and requests for information;","[""To keep the human in the loop.\n\nBut obviously some stuff that are on our roadmap.\n\nAnd another thing that we don't support, which is one type of action would.\n\nBe the first we will be working on is obviously code interpretation, which is I think is one of the things that all users ask because they use.\n\nIt on Chat GPT.\n\nAnd so we'll be looking into that as well.\n\n\n\n\n\nDemetrios:\n\nWhat made you choose Qdrant?\n\n\n\n\n\nStanislas Polu:\n\nSo the decision was made, if I."", 'Other than as expressly set out in these terms, Qdrant does not make any commitments about the Solution and Website’s availability or ability to meet your expectations.\n\n\n\n\n\n### 15. Liability\n\n\n\nIn no event shall Qdrant be liable for:\n\n\n\n\n\n* any indirect damages of any kind, including any potential loss of business;\n\n* any damage or loss which is not caused by a breach of its obligations under the T&Cs;\n\n* disruptions or damage inherent in an electronic communications network;', 'Qdrant undertakes, in particular, to carry out regular checks to verify the operation and accessibility of the Solution. In this regard, Qdrant reserves the right to interrupt access to the Solution momentarily for reasons of maintenance. Similarly, Qdrant may not be held responsible for momentary difficulties or impossibilities in accessing the Solution and/or Website, the origin of which is external to it, “force majeure”, or which are due to disruptions in the telecommunications network.', 'You further declare and guarantee that by creating, installing, downloading or transmitting the Content through the Solution, you do not infringe third parties’ rights.\n\n\n\nYou acknowledge and accept that Qdrant cannot be held responsible for the Content.\n\n\n\n### 9. Accessibility of the Solution', '* unauthorized access to the Solution by a third-party caused by you, including through your negligence;\n\n* your failure to fulfill your obligations under the T&Cs;\n\n* implementation of any software package, software or operating system not compatible with the Solution;\n\n* failure of the electronic communication networks which is not the fault of Qdrant;\n\n* your refusal to collaborate with Qdrant in the resolution of the anomalies and in particular to answer questions and requests for information;']","Question: What does Qdrant not plan to support in the future?\n\nContext: To keep the human in the loop.

But obviously some stuff that are on our roadmap.

And another thing that we don't support, which is one type of action would.

Be the first we will be working on is obviously code interpretation, which is I think is one of the things that all users ask because they use.

It on Chat GPT.

And so we'll be looking into that as well.





Demetrios:

What made you choose Qdrant?





Stanislas Polu:

So the decision was made, if I.
Other than as expressly set out in these terms, Qdrant does not make any commitments about the Solution and Website’s availability or ability to meet your expectations.





### 15. Liability



In no event shall Qdrant be liable for:





* any indirect damages of any kind, including any potential loss of business;

* any damage or loss which is not caused by a breach of its obligations under the T&Cs;

* disruptions or damage inherent in an electronic communications network;
Qdrant undertakes, in particular, to carry out regular checks to verify the operation and accessibility of the Solution. In this regard, Qdrant reserves the right to interrupt access to the Solution momentarily for reasons of maintenance. Similarly, Qdrant may not be held responsible for momentary difficulties or impossibilities in accessing the Solution and/or Website, the origin of which is external to it, “force majeure”, or which are due to disruptions in the telecommunications network.
You further declare and guarantee that by creating, installing, downloading or transmitting the Content through the Solution, you do not infringe third parties’ rights.



You acknowledge and accept that Qdrant cannot be held responsible for the Content.



### 9. Accessibility of the Solution
* unauthorized access to the Solution by a third-party caused by you, including through your negligence;

* your failure to fulfill your obligations under the T&Cs;

* implementation of any software package, software or operating system not compatible with the Solution;

* failure of the electronic communication networks which is not the fault of Qdrant;

* your refusal to collaborate with Qdrant in the resolution of the anomalies and in particular to answer questions and requests for information;\n\nAnswer:",What does Qdrant not plan to support in the future?,"In the future, Qdrant does not plan to support BM25 or other non-vector-based retrieval or ranking functions, built-in ontologies or knowledge graphs, and query analyzers and other NLP tools. Qdrant aims to introduce support for sparse vectors, as used in SPLADE or similar models, but does not intend to incorporate the aforementioned features into its functionality. Users can combine Qdrant with specialized tools, including full-text search engines, to complement its capabilities.","[""To keep the human in the loop.\n\nBut obviously some stuff that are on our roadmap.\n\nAnd another thing that we don't support, which is one type of action would.\n\nBe the first we will be working on is obviously code interpretation, which is I think is one of the things that all users ask because they use.\n\nIt on Chat GPT.\n\nAnd so we'll be looking into that as well.\n\n\n\n\n\nDemetrios:\n\nWhat made you choose Qdrant?\n\n\n\n\n\nStanislas Polu:\n\nSo the decision was made, if I."", 'Other than as expressly set out in these terms, Qdrant does not make any commitments about the Solution and Website’s availability or ability to meet your expectations.\n\n\n\n\n\n### 15. Liability\n\n\n\nIn no event shall Qdrant be liable for:\n\n\n\n\n\n* any indirect damages of any kind, including any potential loss of business;\n\n* any damage or loss which is not caused by a breach of its obligations under the T&Cs;\n\n* disruptions or damage inherent in an electronic communications network;', 'Qdrant undertakes, in particular, to carry out regular checks to verify the operation and accessibility of the Solution. In this regard, Qdrant reserves the right to interrupt access to the Solution momentarily for reasons of maintenance. Similarly, Qdrant may not be held responsible for momentary difficulties or impossibilities in accessing the Solution and/or Website, the origin of which is external to it, “force majeure”, or which are due to disruptions in the telecommunications network.', 'You further declare and guarantee that by creating, installing, downloading or transmitting the Content through the Solution, you do not infringe third parties’ rights.\n\n\n\nYou acknowledge and accept that Qdrant cannot be held responsible for the Content.\n\n\n\n### 9. Accessibility of the Solution', '* unauthorized access to the Solution by a third-party caused by you, including through your negligence;\n\n* your failure to fulfill your obligations under the T&Cs;\n\n* implementation of any software package, software or operating system not compatible with the Solution;\n\n* failure of the electronic communication networks which is not the fault of Qdrant;\n\n* your refusal to collaborate with Qdrant in the resolution of the anomalies and in particular to answer questions and requests for information;']","To keep the human in the loop.

But obviously some stuff that are on our roadmap.

And another thing that we don't support, which is one type of action would.

Be the first we will be working on is obviously code interpretation, which is I think is one of the things that all users ask because they use.

It on Chat GPT.

And so we'll be looking into that as well.





Demetrios:

What made you choose Qdrant?





Stanislas Polu:

So the decision was made, if I.
Other than as expressly set out in these terms, Qdrant does not make any commitments about the Solution and Website’s availability or ability to meet your expectations.





### 15. Liability



In no event shall Qdrant be liable for:





* any indirect damages of any kind, including any potential loss of business;

* any damage or loss which is not caused by a breach of its obligations under the T&Cs;

* disruptions or damage inherent in an electronic communications network;
Qdrant undertakes, in particular, to carry out regular checks to verify the operation and accessibility of the Solution. In this regard, Qdrant reserves the right to interrupt access to the Solution momentarily for reasons of maintenance. Similarly, Qdrant may not be held responsible for momentary difficulties or impossibilities in accessing the Solution and/or Website, the origin of which is external to it, “force majeure”, or which are due to disruptions in the telecommunications network.
You further declare and guarantee that by creating, installing, downloading or transmitting the Content through the Solution, you do not infringe third parties’ rights.



You acknowledge and accept that Qdrant cannot be held responsible for the Content.



### 9. Accessibility of the Solution
* unauthorized access to the Solution by a third-party caused by you, including through your negligence;

* your failure to fulfill your obligations under the T&Cs;

* implementation of any software package, software or operating system not compatible with the Solution;

* failure of the electronic communication networks which is not the fault of Qdrant;

* your refusal to collaborate with Qdrant in the resolution of the anomalies and in particular to answer questions and requests for information;",0.8,0.1095890410958904,0.19277108433734938,0.6666666666666666,0.08333333333333333,0.14814814814814814,0.7,0.0958904109589041,0.1686746987951807,0.7,0.0958904109589041,0.1686746987951807,0.34840020537376404,0.7050514817237854,0.5335484147071838,0.6074263453483582,0.10818397998809814,0.6349082986513774,11,0.15492957746478872,0.37477165940595386
True,,4724.655000000001,23a78783, What is the recommended approach for configuring multitenancy in terms of the number of collections to create?,"In most cases, the recommended approach for configuring multitenancy is to create only a single collection with payload-based partitioning. This approach, known as multitenancy, is efficient for the majority of users. By using a single collection with payload-based partitioning, each user can access their own vectors while ensuring that they cannot see the vectors of other users. However, it is important to note that this approach requires additional configuration to set up properly.","The recommended approach for configuring multitenancy in terms of the number of collections to create depends on the specific requirements of your application. 

1. **Single Collection with Payload-Based Partitioning**: For most cases, it is recommended to use a single collection with payload-based partitioning for multitenancy. This approach is efficient for most users and can help in managing data efficiently. It requires additional configuration but is generally a good choice.

2. **Multiple Collections for Limited Users Requiring Isolation**: If you have a limited number of users and require isolation between them, you can consider creating multiple collections. This approach provides flexibility but may be more resource-intensive. Creating numerous collections can result in resource overhead, so it's important to manage them properly to avoid performance issues.

In summary, if you have a large number of tenants and can manage them efficiently within a single collection with partitioning, that is the recommended approach. However, if you need strict isolation between a limited number of users, creating multiple collections can be a viable option.","---

title: Multitenancy

weight: 12

aliases:

  - ../tutorials/multiple-partitions

---

# Configure Multitenancy



**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called multitenancy. It is efficient for most of users, but it requires additional configuration. This document will show you how to set it up.
## Setting up multitenancy



**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called [multitenancy](https://en.wikipedia.org/wiki/Multitenancy). It is efficient for most of users, but it requires additional configuration. [Learn how to set it up](../../tutorials/multiple-partitions/)
**When should you create multiple collections?** When you have a limited number of users and you need isolation. This approach is flexible, but it may be more costly, since creating numerous collections may result in resource overhead. Also, you need to ensure that they do not affect each other in any way, including performance-wise. 



> Note: If you're running `curl` from the command line, the following commands

assume that you have a running instance of Qdrant on `http://localhost:6333`.
In addition to metrics and vector size, each collection uses its own set of parameters that controls collection optimization, index construction, and vacuum.

These settings can be changed at any time by a corresponding request.



## Setting up multitenancy
**Figure 3:** Users can query the collection based on two filters: the `group_id` and the individual `shard_key_selector`. This gives your data two additional levels of isolation.

![Qdrant Multitenancy](/articles_data/multitenancy/multitenancy.png)



## Create custom shards for a single collection","['---\n\ntitle: Multitenancy\n\nweight: 12\n\naliases:\n\n  - ../tutorials/multiple-partitions\n\n---\n\n# Configure Multitenancy\n\n\n\n**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called multitenancy. It is efficient for most of users, but it requires additional configuration. This document will show you how to set it up.', '## Setting up multitenancy\n\n\n\n**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called [multitenancy](https://en.wikipedia.org/wiki/Multitenancy). It is efficient for most of users, but it requires additional configuration. [Learn how to set it up](../../tutorials/multiple-partitions/)', ""**When should you create multiple collections?** When you have a limited number of users and you need isolation. This approach is flexible, but it may be more costly, since creating numerous collections may result in resource overhead. Also, you need to ensure that they do not affect each other in any way, including performance-wise. \n\n\n\n> Note: If you're running `curl` from the command line, the following commands\n\nassume that you have a running instance of Qdrant on `http://localhost:6333`."", 'In addition to metrics and vector size, each collection uses its own set of parameters that controls collection optimization, index construction, and vacuum.\n\nThese settings can be changed at any time by a corresponding request.\n\n\n\n## Setting up multitenancy', '**Figure 3:** Users can query the collection based on two filters: the `group_id` and the individual `shard_key_selector`. This gives your data two additional levels of isolation.\n\n![Qdrant Multitenancy](/articles_data/multitenancy/multitenancy.png)\n\n\n\n## Create custom shards for a single collection']","Question:  What is the recommended approach for configuring multitenancy in terms of the number of collections to create?\n\nContext: ---

title: Multitenancy

weight: 12

aliases:

- ../tutorials/multiple-partitions

---

# Configure Multitenancy



**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called multitenancy. It is efficient for most of users, but it requires additional configuration. This document will show you how to set it up.
## Setting up multitenancy



**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called [multitenancy](https://en.wikipedia.org/wiki/Multitenancy). It is efficient for most of users, but it requires additional configuration. [Learn how to set it up](../../tutorials/multiple-partitions/)
**When should you create multiple collections?** When you have a limited number of users and you need isolation. This approach is flexible, but it may be more costly, since creating numerous collections may result in resource overhead. Also, you need to ensure that they do not affect each other in any way, including performance-wise. 



> Note: If you're running `curl` from the command line, the following commands

assume that you have a running instance of Qdrant on `http://localhost:6333`.
In addition to metrics and vector size, each collection uses its own set of parameters that controls collection optimization, index construction, and vacuum.

These settings can be changed at any time by a corresponding request.



## Setting up multitenancy
**Figure 3:** Users can query the collection based on two filters: the `group_id` and the individual `shard_key_selector`. This gives your data two additional levels of isolation.

![Qdrant Multitenancy](/articles_data/multitenancy/multitenancy.png)



## Create custom shards for a single collection\n\nAnswer:", What is the recommended approach for configuring multitenancy in terms of the number of collections to create?,"In most cases, the recommended approach for configuring multitenancy is to create only a single collection with payload-based partitioning. This approach, known as multitenancy, is efficient for the majority of users. By using a single collection with payload-based partitioning, each user can access their own vectors while ensuring that they cannot see the vectors of other users. However, it is important to note that this approach requires additional configuration to set up properly.","['---\n\ntitle: Multitenancy\n\nweight: 12\n\naliases:\n\n  - ../tutorials/multiple-partitions\n\n---\n\n# Configure Multitenancy\n\n\n\n**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called multitenancy. It is efficient for most of users, but it requires additional configuration. This document will show you how to set it up.', '## Setting up multitenancy\n\n\n\n**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called [multitenancy](https://en.wikipedia.org/wiki/Multitenancy). It is efficient for most of users, but it requires additional configuration. [Learn how to set it up](../../tutorials/multiple-partitions/)', ""**When should you create multiple collections?** When you have a limited number of users and you need isolation. This approach is flexible, but it may be more costly, since creating numerous collections may result in resource overhead. Also, you need to ensure that they do not affect each other in any way, including performance-wise. \n\n\n\n> Note: If you're running `curl` from the command line, the following commands\n\nassume that you have a running instance of Qdrant on `http://localhost:6333`."", 'In addition to metrics and vector size, each collection uses its own set of parameters that controls collection optimization, index construction, and vacuum.\n\nThese settings can be changed at any time by a corresponding request.\n\n\n\n## Setting up multitenancy', '**Figure 3:** Users can query the collection based on two filters: the `group_id` and the individual `shard_key_selector`. This gives your data two additional levels of isolation.\n\n![Qdrant Multitenancy](/articles_data/multitenancy/multitenancy.png)\n\n\n\n## Create custom shards for a single collection']","---

title: Multitenancy

weight: 12

aliases:

  - ../tutorials/multiple-partitions

---

# Configure Multitenancy



**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called multitenancy. It is efficient for most of users, but it requires additional configuration. This document will show you how to set it up.
## Setting up multitenancy



**How many collections should you create?** In most cases, you should only use a single collection with payload-based partitioning. This approach is called [multitenancy](https://en.wikipedia.org/wiki/Multitenancy). It is efficient for most of users, but it requires additional configuration. [Learn how to set it up](../../tutorials/multiple-partitions/)
**When should you create multiple collections?** When you have a limited number of users and you need isolation. This approach is flexible, but it may be more costly, since creating numerous collections may result in resource overhead. Also, you need to ensure that they do not affect each other in any way, including performance-wise. 



> Note: If you're running `curl` from the command line, the following commands

assume that you have a running instance of Qdrant on `http://localhost:6333`.
In addition to metrics and vector size, each collection uses its own set of parameters that controls collection optimization, index construction, and vacuum.

These settings can be changed at any time by a corresponding request.



## Setting up multitenancy
**Figure 3:** Users can query the collection based on two filters: the `group_id` and the individual `shard_key_selector`. This gives your data two additional levels of isolation.

![Qdrant Multitenancy](/articles_data/multitenancy/multitenancy.png)



## Create custom shards for a single collection",0.3006134969325153,0.7,0.42060085836909866,0.16049382716049382,0.37681159420289856,0.22510822510822512,0.18404907975460122,0.42857142857142855,0.2575107296137339,0.294478527607362,0.6857142857142857,0.41201716738197425,0.7551465034484863,0.6048738360404968,0.6932675242424011,0.6460611820220947,0.780192140444838,0.9969563479608041,171,2.310810810810811,0.5537983119383264
True,,2007.0510000000002,873a7c41,What is the purpose of the locking feature in Qdrant administration tools?,"The locking feature in Qdrant administration tools serves the purpose of restricting the possible operations on a Qdrant process. It allows users to control the behavior of a Qdrant instance at runtime without manually changing its configuration. When a lock is applied, specific operations such as creating new collections or adding new data to the existing storage can be disabled. It is important to note that the locking configuration is not persistent, so it needs to be reapplied after a restart. Additionally, the locking feature applies to a single node only, requiring the lock to be set on all desired nodes in a distributed deployment setup. The locking API in Qdrant enables users to manage and control the access and operations on the Qdrant instance effectively.","The purpose of the locking feature in Qdrant administration tools is to restrict the possible operations on a Qdrant process. This locking API allows users to control and limit the actions that can be performed on a Qdrant instance at runtime. It is important to note that the configuration set through the locking feature is not persistent, meaning it needs to be set again after a restart of the system.

By utilizing the locking feature, users can ensure a more controlled and secure environment for their Qdrant instance, preventing unauthorized or unintended changes to the system.","---

title: Administration

weight: 10

aliases:

  - ../administration

---



# Administration



Qdrant exposes administration tools which enable to modify at runtime the behavior of a qdrant instance without changing its configuration manually.



## Locking



A locking API enables users to restrict the possible operations on a qdrant process.

It is important to mention that:

- The configuration is not persistent therefore it is necessary to lock again following a restart.
Qdrant undertakes, in particular, to carry out regular checks to verify the operation and accessibility of the Solution. In this regard, Qdrant reserves the right to interrupt access to the Solution momentarily for reasons of maintenance. Similarly, Qdrant may not be held responsible for momentary difficulties or impossibilities in accessing the Solution and/or Website, the origin of which is external to it, “force majeure”, or which are due to disruptions in the telecommunications network.
and once the queues are set up, there is no further syscall that would stop

any user thread.



Servers that use this can easily get to over 100k concurrent requests. Today

Linux allows asynchronous IO via io\_uring for network, disk and accessing

other ports, e.g. for printing or recording video.



## And what about Qdrant?



Qdrant can store everything in memory, but not all data sets may fit, which can

require storing  on disk. Before io\_uring, Qdrant used mmap to do its IO. This
The transition is even easier if you use the official client libraries. For example, the [Python Client](https://github.com/qdrant/qdrant-client) has the support of the API key already built-in, so you only need to provide it once, when the QdrantClient instance is created.



### Cluster configuration



Each instance comes pre-configured with the following tools, features and support services:



- Automatically created with the latest available version of Qdrant.
## Why Qdrant?","['---\n\ntitle: Administration\n\nweight: 10\n\naliases:\n\n  - ../administration\n\n---\n\n\n\n# Administration\n\n\n\nQdrant exposes administration tools which enable to modify at runtime the behavior of a qdrant instance without changing its configuration manually.\n\n\n\n## Locking\n\n\n\nA locking API enables users to restrict the possible operations on a qdrant process.\n\nIt is important to mention that:\n\n- The configuration is not persistent therefore it is necessary to lock again following a restart.', 'Qdrant undertakes, in particular, to carry out regular checks to verify the operation and accessibility of the Solution. In this regard, Qdrant reserves the right to interrupt access to the Solution momentarily for reasons of maintenance. Similarly, Qdrant may not be held responsible for momentary difficulties or impossibilities in accessing the Solution and/or Website, the origin of which is external to it, “force majeure”, or which are due to disruptions in the telecommunications network.', 'and once the queues are set up, there is no further syscall that would stop\n\nany user thread.\n\n\n\nServers that use this can easily get to over 100k concurrent requests. Today\n\nLinux allows asynchronous IO via io\\_uring for network, disk and accessing\n\nother ports, e.g. for printing or recording video.\n\n\n\n## And what about Qdrant?\n\n\n\nQdrant can store everything in memory, but not all data sets may fit, which can\n\nrequire storing  on disk. Before io\\_uring, Qdrant used mmap to do its IO. This', 'The transition is even easier if you use the official client libraries. For example, the [Python Client](https://github.com/qdrant/qdrant-client) has the support of the API key already built-in, so you only need to provide it once, when the QdrantClient instance is created.\n\n\n\n### Cluster configuration\n\n\n\nEach instance comes pre-configured with the following tools, features and support services:\n\n\n\n- Automatically created with the latest available version of Qdrant.', '## Why Qdrant?']","Question: What is the purpose of the locking feature in Qdrant administration tools?\n\nContext: ---

title: Administration

weight: 10

aliases:

- ../administration

---



# Administration



Qdrant exposes administration tools which enable to modify at runtime the behavior of a qdrant instance without changing its configuration manually.



## Locking



A locking API enables users to restrict the possible operations on a qdrant process.

It is important to mention that:

- The configuration is not persistent therefore it is necessary to lock again following a restart.
Qdrant undertakes, in particular, to carry out regular checks to verify the operation and accessibility of the Solution. In this regard, Qdrant reserves the right to interrupt access to the Solution momentarily for reasons of maintenance. Similarly, Qdrant may not be held responsible for momentary difficulties or impossibilities in accessing the Solution and/or Website, the origin of which is external to it, “force majeure”, or which are due to disruptions in the telecommunications network.
and once the queues are set up, there is no further syscall that would stop

any user thread.



Servers that use this can easily get to over 100k concurrent requests. Today

Linux allows asynchronous IO via io\_uring for network, disk and accessing

other ports, e.g. for printing or recording video.



## And what about Qdrant?



Qdrant can store everything in memory, but not all data sets may fit, which can

require storing  on disk. Before io\_uring, Qdrant used mmap to do its IO. This
The transition is even easier if you use the official client libraries. For example, the [Python Client](https://github.com/qdrant/qdrant-client) has the support of the API key already built-in, so you only need to provide it once, when the QdrantClient instance is created.



### Cluster configuration



Each instance comes pre-configured with the following tools, features and support services:



- Automatically created with the latest available version of Qdrant.
## Why Qdrant?\n\nAnswer:",What is the purpose of the locking feature in Qdrant administration tools?,"The locking feature in Qdrant administration tools serves the purpose of restricting the possible operations on a Qdrant process. It allows users to control the behavior of a Qdrant instance at runtime without manually changing its configuration. When a lock is applied, specific operations such as creating new collections or adding new data to the existing storage can be disabled. It is important to note that the locking configuration is not persistent, so it needs to be reapplied after a restart. Additionally, the locking feature applies to a single node only, requiring the lock to be set on all desired nodes in a distributed deployment setup. The locking API in Qdrant enables users to manage and control the access and operations on the Qdrant instance effectively.","['---\n\ntitle: Administration\n\nweight: 10\n\naliases:\n\n  - ../administration\n\n---\n\n\n\n# Administration\n\n\n\nQdrant exposes administration tools which enable to modify at runtime the behavior of a qdrant instance without changing its configuration manually.\n\n\n\n## Locking\n\n\n\nA locking API enables users to restrict the possible operations on a qdrant process.\n\nIt is important to mention that:\n\n- The configuration is not persistent therefore it is necessary to lock again following a restart.', 'Qdrant undertakes, in particular, to carry out regular checks to verify the operation and accessibility of the Solution. In this regard, Qdrant reserves the right to interrupt access to the Solution momentarily for reasons of maintenance. Similarly, Qdrant may not be held responsible for momentary difficulties or impossibilities in accessing the Solution and/or Website, the origin of which is external to it, “force majeure”, or which are due to disruptions in the telecommunications network.', 'and once the queues are set up, there is no further syscall that would stop\n\nany user thread.\n\n\n\nServers that use this can easily get to over 100k concurrent requests. Today\n\nLinux allows asynchronous IO via io\\_uring for network, disk and accessing\n\nother ports, e.g. for printing or recording video.\n\n\n\n## And what about Qdrant?\n\n\n\nQdrant can store everything in memory, but not all data sets may fit, which can\n\nrequire storing  on disk. Before io\\_uring, Qdrant used mmap to do its IO. This', 'The transition is even easier if you use the official client libraries. For example, the [Python Client](https://github.com/qdrant/qdrant-client) has the support of the API key already built-in, so you only need to provide it once, when the QdrantClient instance is created.\n\n\n\n### Cluster configuration\n\n\n\nEach instance comes pre-configured with the following tools, features and support services:\n\n\n\n- Automatically created with the latest available version of Qdrant.', '## Why Qdrant?']","---

title: Administration

weight: 10

aliases:

  - ../administration

---



# Administration



Qdrant exposes administration tools which enable to modify at runtime the behavior of a qdrant instance without changing its configuration manually.



## Locking



A locking API enables users to restrict the possible operations on a qdrant process.

It is important to mention that:

- The configuration is not persistent therefore it is necessary to lock again following a restart.
Qdrant undertakes, in particular, to carry out regular checks to verify the operation and accessibility of the Solution. In this regard, Qdrant reserves the right to interrupt access to the Solution momentarily for reasons of maintenance. Similarly, Qdrant may not be held responsible for momentary difficulties or impossibilities in accessing the Solution and/or Website, the origin of which is external to it, “force majeure”, or which are due to disruptions in the telecommunications network.
and once the queues are set up, there is no further syscall that would stop

any user thread.



Servers that use this can easily get to over 100k concurrent requests. Today

Linux allows asynchronous IO via io\_uring for network, disk and accessing

other ports, e.g. for printing or recording video.



## And what about Qdrant?



Qdrant can store everything in memory, but not all data sets may fit, which can

require storing  on disk. Before io\_uring, Qdrant used mmap to do its IO. This
The transition is even easier if you use the official client libraries. For example, the [Python Client](https://github.com/qdrant/qdrant-client) has the support of the API key already built-in, so you only need to provide it once, when the QdrantClient instance is created.



### Cluster configuration



Each instance comes pre-configured with the following tools, features and support services:



- Automatically created with the latest available version of Qdrant.
## Why Qdrant?",0.7108433734939759,0.5412844036697247,0.6145833333333333,0.4146341463414634,0.3148148148148148,0.35789473684210527,0.5180722891566265,0.3944954128440367,0.4479166666666667,0.6746987951807228,0.5137614678899083,0.5833333333333333,0.9316476583480835,0.7584100365638733,0.7185457944869995,0.7379398941993713,0.9992963126860559,0.8296420139934829,96,0.7619047619047619,0.4052968971326853
True,,1401.783,9c808cb6,What is the significance of the `on_disk_payload` setting?,"The `on_disk_payload` setting in the storage configuration determines whether a point's payload will be stored in memory or read from disk every time it is requested. When set to `true`, the point's payload will not be stored in memory, saving RAM but slightly increasing the response time as the data needs to be retrieved from disk. It is important to note that payload values involved in filtering and indexed values will still remain in RAM for efficient access. This setting allows for a balance between RAM usage and response time in handling data storage and retrieval processes.","The significance of the `on_disk_payload` setting is that it determines where the payload data should be stored. If set to `true`, the payload data will be stored on disk only. This setting can be useful for limiting RAM usage, especially in cases where the payload data is large. Storing payload data on disk can help conserve RAM and manage memory resources more efficiently.","* `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.

* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.

* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.
""on_disk_payload"": false

            },

            ""hnsw_config"": {

                ""m"": 16,

                ""ef_construct"": 100,

                ""full_scan_threshold"": 10000,

                ""max_indexing_threads"": 0

            },

            ""optimizer_config"": {

                ""deleted_threshold"": 0.2,

                ""vacuum_min_vector_number"": 1000,

                ""default_segment_number"": 0,

                ""max_segment_size"": null,
InMemory payload storage is organized in the same way as in-memory vectors.

The payload data is loaded into RAM at service startup while disk and [RocksDB](https://rocksdb.org/) are used for persistence only.

This type of storage works quite fast, but it may require a lot of space to keep all the data in RAM, especially if the payload has large values attached - abstracts of text or even images.



In the case of large payload values, it might be better to use OnDisk payload storage.
```http

POST /collections/{collection_name}/points/payload

{

    ""payload"": {

        ""property1"": ""string"",

        ""property2"": ""string""

    },

    ""filter"": {

        ""must"": [

            {

                ""key"": ""color"",

                ""match"": {

                    ""value"": ""red""

                }

            }

        ]

    }

}

```



```python

client.set_payload(

    collection_name=""{collection_name}"",

    payload={

        ""property1"": ""string"",
To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""hnsw_config"": {

        ""on_disk"": true

    }

}

```



```python","['* `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.\n\n* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.\n\n* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.', '""on_disk_payload"": false\n\n            },\n\n            ""hnsw_config"": {\n\n                ""m"": 16,\n\n                ""ef_construct"": 100,\n\n                ""full_scan_threshold"": 10000,\n\n                ""max_indexing_threads"": 0\n\n            },\n\n            ""optimizer_config"": {\n\n                ""deleted_threshold"": 0.2,\n\n                ""vacuum_min_vector_number"": 1000,\n\n                ""default_segment_number"": 0,\n\n                ""max_segment_size"": null,', 'InMemory payload storage is organized in the same way as in-memory vectors.\n\nThe payload data is loaded into RAM at service startup while disk and [RocksDB](https://rocksdb.org/) are used for persistence only.\n\nThis type of storage works quite fast, but it may require a lot of space to keep all the data in RAM, especially if the payload has large values attached - abstracts of text or even images.\n\n\n\nIn the case of large payload values, it might be better to use OnDisk payload storage.', '```http\n\nPOST /collections/{collection_name}/points/payload\n\n{\n\n    ""payload"": {\n\n        ""property1"": ""string"",\n\n        ""property2"": ""string""\n\n    },\n\n    ""filter"": {\n\n        ""must"": [\n\n            {\n\n                ""key"": ""color"",\n\n                ""match"": {\n\n                    ""value"": ""red""\n\n                }\n\n            }\n\n        ]\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.set_payload(\n\n    collection_name=""{collection_name}"",\n\n    payload={\n\n        ""property1"": ""string"",', 'To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""hnsw_config"": {\n\n        ""on_disk"": true\n\n    }\n\n}\n\n```\n\n\n\n```python']","Question: What is the significance of the `on_disk_payload` setting?\n\nContext: * `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.

* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.

* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.
""on_disk_payload"": false

},

""hnsw_config"": {

""m"": 16,

""ef_construct"": 100,

""full_scan_threshold"": 10000,

""max_indexing_threads"": 0

},

""optimizer_config"": {

""deleted_threshold"": 0.2,

""vacuum_min_vector_number"": 1000,

""default_segment_number"": 0,

""max_segment_size"": null,
InMemory payload storage is organized in the same way as in-memory vectors.

The payload data is loaded into RAM at service startup while disk and [RocksDB](https://rocksdb.org/) are used for persistence only.

This type of storage works quite fast, but it may require a lot of space to keep all the data in RAM, especially if the payload has large values attached - abstracts of text or even images.



In the case of large payload values, it might be better to use OnDisk payload storage.
```http

POST /collections/{collection_name}/points/payload

{

""payload"": {

""property1"": ""string"",

""property2"": ""string""

},

""filter"": {

""must"": [

{

""key"": ""color"",

""match"": {

""value"": ""red""

}

}

]

}

}

```



```python

client.set_payload(

collection_name=""{collection_name}"",

payload={

""property1"": ""string"",
To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,

""distance"": ""Cosine""

},

""optimizers_config"": {

""memmap_threshold"": 20000

},

""hnsw_config"": {

""on_disk"": true

}

}

```



```python\n\nAnswer:",What is the significance of the `on_disk_payload` setting?,"The `on_disk_payload` setting in the storage configuration determines whether a point's payload will be stored in memory or read from disk every time it is requested. When set to `true`, the point's payload will not be stored in memory, saving RAM but slightly increasing the response time as the data needs to be retrieved from disk. It is important to note that payload values involved in filtering and indexed values will still remain in RAM for efficient access. This setting allows for a balance between RAM usage and response time in handling data storage and retrieval processes.","['* `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.\n\n* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.\n\n* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.', '""on_disk_payload"": false\n\n            },\n\n            ""hnsw_config"": {\n\n                ""m"": 16,\n\n                ""ef_construct"": 100,\n\n                ""full_scan_threshold"": 10000,\n\n                ""max_indexing_threads"": 0\n\n            },\n\n            ""optimizer_config"": {\n\n                ""deleted_threshold"": 0.2,\n\n                ""vacuum_min_vector_number"": 1000,\n\n                ""default_segment_number"": 0,\n\n                ""max_segment_size"": null,', 'InMemory payload storage is organized in the same way as in-memory vectors.\n\nThe payload data is loaded into RAM at service startup while disk and [RocksDB](https://rocksdb.org/) are used for persistence only.\n\nThis type of storage works quite fast, but it may require a lot of space to keep all the data in RAM, especially if the payload has large values attached - abstracts of text or even images.\n\n\n\nIn the case of large payload values, it might be better to use OnDisk payload storage.', '```http\n\nPOST /collections/{collection_name}/points/payload\n\n{\n\n    ""payload"": {\n\n        ""property1"": ""string"",\n\n        ""property2"": ""string""\n\n    },\n\n    ""filter"": {\n\n        ""must"": [\n\n            {\n\n                ""key"": ""color"",\n\n                ""match"": {\n\n                    ""value"": ""red""\n\n                }\n\n            }\n\n        ]\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.set_payload(\n\n    collection_name=""{collection_name}"",\n\n    payload={\n\n        ""property1"": ""string"",', 'To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""optimizers_config"": {\n\n        ""memmap_threshold"": 20000\n\n    },\n\n    ""hnsw_config"": {\n\n        ""on_disk"": true\n\n    }\n\n}\n\n```\n\n\n\n```python']","* `shard_number` - which defines how many shards the collection should have. See [distributed deployment](../../guides/distributed_deployment#sharding) section for details.

* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.

* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.
""on_disk_payload"": false

            },

            ""hnsw_config"": {

                ""m"": 16,

                ""ef_construct"": 100,

                ""full_scan_threshold"": 10000,

                ""max_indexing_threads"": 0

            },

            ""optimizer_config"": {

                ""deleted_threshold"": 0.2,

                ""vacuum_min_vector_number"": 1000,

                ""default_segment_number"": 0,

                ""max_segment_size"": null,
InMemory payload storage is organized in the same way as in-memory vectors.

The payload data is loaded into RAM at service startup while disk and [RocksDB](https://rocksdb.org/) are used for persistence only.

This type of storage works quite fast, but it may require a lot of space to keep all the data in RAM, especially if the payload has large values attached - abstracts of text or even images.



In the case of large payload values, it might be better to use OnDisk payload storage.
```http

POST /collections/{collection_name}/points/payload

{

    ""payload"": {

        ""property1"": ""string"",

        ""property2"": ""string""

    },

    ""filter"": {

        ""must"": [

            {

                ""key"": ""color"",

                ""match"": {

                    ""value"": ""red""

                }

            }

        ]

    }

}

```



```python

client.set_payload(

    collection_name=""{collection_name}"",

    payload={

        ""property1"": ""string"",
To enable this, you need to set the `hnsw_config.on_disk` parameter to `true` during collection [creation](../collections/#create-a-collection) or [updating](../collections/#update-collection-parameters).



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""optimizers_config"": {

        ""memmap_threshold"": 20000

    },

    ""hnsw_config"": {

        ""on_disk"": true

    }

}

```



```python",0.5833333333333334,0.3723404255319149,0.45454545454545453,0.1694915254237288,0.10752688172043011,0.13157894736842105,0.4,0.2553191489361702,0.3116883116883116,0.5333333333333333,0.3404255319148936,0.41558441558441556,0.8243668079376221,0.6743136048316956,0.6358129978179932,0.6544976234436035,0.9343489508610219,0.5033755153417587,63,0.6363636363636364,0.40772546354721056
True,,2455.834,bb6db833,What is the significance of the parameter `max_segment_size_kb` in the context of vector indexation?,"The `max_segment_size_kb` parameter in the context of vector indexation determines the maximum size, in kilobytes, that a segment can have. Segments larger than this specified size might lead to disproportionately long indexation times. Therefore, it is essential to limit the size of segments to optimize the indexation process. The choice of this parameter should be based on the priority between indexation speed and search speed. If indexation speed is more critical, the parameter should be set lower. Conversely, if search speed is more important, the parameter should be set higher. It is important to note that 1Kb is equivalent to 1 vector of size 256. If the `max_segment_size_kb` parameter is not explicitly set, it will be automatically selected based on the number of available CPUs.","In the context of vector indexation, the parameter `max_segment_size_kb` is significant because it determines the maximum size (in kilobytes) of vectors to store in-memory per segment. 

Segments larger than the specified `max_segment_size_kb` threshold will be stored as read-only memmaped files. This can be beneficial for memory management, as it allows for more efficient storage of large segments by offloading them to disk, thereby reducing the memory footprint of the system.

By adjusting the `max_segment_size_kb` parameter, you can control how vectors are stored in memory and on disk, optimizing the balance between search speed and memory usage based on your specific requirements.","# If search speed is more important - make this parameter higher.

    # Note: 1Kb = 1 vector of size 256

    # If not set, will be automatically selected considering the number of available CPUs.

    max_segment_size_kb: null



    # Maximum size (in KiloBytes) of vectors to store in-memory per segment.

    # Segments larger than this threshold will be stored as read-only memmaped file.

    # To enable memmap storage, lower the threshold

    # Note: 1Kb = 1 vector of size 256
# Segments larger than this threshold will be stored as read-only memmaped file.

    # Memmap storage is disabled by default, to enable it, set this threshold to a reasonable value.

    # To disable memmap storage, set this to `0`.

    # Note: 1Kb = 1 vector of size 256

    memmap_threshold_kb: 200000



    # Maximum size (in kilobytes) of vectors allowed for plain index, exceeding this threshold will enable vector indexing
""max_segment_size"": null,

                ""memmap_threshold"": null,

                ""indexing_threshold"": 20000,

                ""flush_interval_sec"": 5,

                ""max_optimization_threads"": 1

            },

            ""wal_config"": {

                ""wal_capacity_mb"": 32,

                ""wal_segments_ahead"": 0

            }

        },

        ""payload_schema"": {}

    },

    ""status"": ""ok"",

    ""time"": 0.00010143

}

```



</details>

<br/>







```csharp
We're changing the `default_segment_number` to 5. Segment numbers influence the number of graph nodes in the underlying HNSW index, thereby indirectly influencing the memory efficiency. 



#### Next, we upload our vectors to this and then enable indexing: 



```python

batch_size = 10000

client.upload_collection(

    collection_name=collection_name,

    ids=range(len(dataset)),

    vectors=dataset[""openai""],

    payload=[

        {""text"": x} for x in dataset[""text""]

    ],

    parallel=10,

)
```text

memory_size = number_of_vectors * vector_dimension * 4 bytes * 1.5

```



Extra 50% is needed for metadata (indexes, point versions, etc.) as well as for temporary segments constructed during the optimization process.



If you need to have payloads along with the vectors, it is recommended to store it on the disc, and only keep [indexed fields](../../concepts/indexing/#payload-index) in RAM.","['# If search speed is more important - make this parameter higher.\n\n    # Note: 1Kb = 1 vector of size 256\n\n    # If not set, will be automatically selected considering the number of available CPUs.\n\n    max_segment_size_kb: null\n\n\n\n    # Maximum size (in KiloBytes) of vectors to store in-memory per segment.\n\n    # Segments larger than this threshold will be stored as read-only memmaped file.\n\n    # To enable memmap storage, lower the threshold\n\n    # Note: 1Kb = 1 vector of size 256', '# Segments larger than this threshold will be stored as read-only memmaped file.\n\n    # Memmap storage is disabled by default, to enable it, set this threshold to a reasonable value.\n\n    # To disable memmap storage, set this to `0`.\n\n    # Note: 1Kb = 1 vector of size 256\n\n    memmap_threshold_kb: 200000\n\n\n\n    # Maximum size (in kilobytes) of vectors allowed for plain index, exceeding this threshold will enable vector indexing', '""max_segment_size"": null,\n\n                ""memmap_threshold"": null,\n\n                ""indexing_threshold"": 20000,\n\n                ""flush_interval_sec"": 5,\n\n                ""max_optimization_threads"": 1\n\n            },\n\n            ""wal_config"": {\n\n                ""wal_capacity_mb"": 32,\n\n                ""wal_segments_ahead"": 0\n\n            }\n\n        },\n\n        ""payload_schema"": {}\n\n    },\n\n    ""status"": ""ok"",\n\n    ""time"": 0.00010143\n\n}\n\n```\n\n\n\n</details>\n\n<br/>\n\n\n\n\n\n\n\n```csharp', 'We\'re changing the `default_segment_number` to 5. Segment numbers influence the number of graph nodes in the underlying HNSW index, thereby indirectly influencing the memory efficiency. \n\n\n\n#### Next, we upload our vectors to this and then enable indexing: \n\n\n\n```python\n\nbatch_size = 10000\n\nclient.upload_collection(\n\n    collection_name=collection_name,\n\n    ids=range(len(dataset)),\n\n    vectors=dataset[""openai""],\n\n    payload=[\n\n        {""text"": x} for x in dataset[""text""]\n\n    ],\n\n    parallel=10,\n\n)', '```text\n\nmemory_size = number_of_vectors * vector_dimension * 4 bytes * 1.5\n\n```\n\n\n\nExtra 50% is needed for metadata (indexes, point versions, etc.) as well as for temporary segments constructed during the optimization process.\n\n\n\nIf you need to have payloads along with the vectors, it is recommended to store it on the disc, and only keep [indexed fields](../../concepts/indexing/#payload-index) in RAM.']","Question: What is the significance of the parameter `max_segment_size_kb` in the context of vector indexation?\n\nContext: # If search speed is more important - make this parameter higher.

# Note: 1Kb = 1 vector of size 256

# If not set, will be automatically selected considering the number of available CPUs.

max_segment_size_kb: null



# Maximum size (in KiloBytes) of vectors to store in-memory per segment.

# Segments larger than this threshold will be stored as read-only memmaped file.

# To enable memmap storage, lower the threshold

# Note: 1Kb = 1 vector of size 256
# Segments larger than this threshold will be stored as read-only memmaped file.

# Memmap storage is disabled by default, to enable it, set this threshold to a reasonable value.

# To disable memmap storage, set this to `0`.

# Note: 1Kb = 1 vector of size 256

memmap_threshold_kb: 200000



# Maximum size (in kilobytes) of vectors allowed for plain index, exceeding this threshold will enable vector indexing
""max_segment_size"": null,

""memmap_threshold"": null,

""indexing_threshold"": 20000,

""flush_interval_sec"": 5,

""max_optimization_threads"": 1

},

""wal_config"": {

""wal_capacity_mb"": 32,

""wal_segments_ahead"": 0

}

},

""payload_schema"": {}

},

""status"": ""ok"",

""time"": 0.00010143

}

```



</details>

<br/>







```csharp
We're changing the `default_segment_number` to 5. Segment numbers influence the number of graph nodes in the underlying HNSW index, thereby indirectly influencing the memory efficiency. 



#### Next, we upload our vectors to this and then enable indexing: 



```python

batch_size = 10000

client.upload_collection(

collection_name=collection_name,

ids=range(len(dataset)),

vectors=dataset[""openai""],

payload=[

{""text"": x} for x in dataset[""text""]

],

parallel=10,

)
```text

memory_size = number_of_vectors * vector_dimension * 4 bytes * 1.5

```



Extra 50% is needed for metadata (indexes, point versions, etc.) as well as for temporary segments constructed during the optimization process.



If you need to have payloads along with the vectors, it is recommended to store it on the disc, and only keep [indexed fields](../../concepts/indexing/#payload-index) in RAM.\n\nAnswer:",What is the significance of the parameter `max_segment_size_kb` in the context of vector indexation?,"The `max_segment_size_kb` parameter in the context of vector indexation determines the maximum size, in kilobytes, that a segment can have. Segments larger than this specified size might lead to disproportionately long indexation times. Therefore, it is essential to limit the size of segments to optimize the indexation process. The choice of this parameter should be based on the priority between indexation speed and search speed. If indexation speed is more critical, the parameter should be set lower. Conversely, if search speed is more important, the parameter should be set higher. It is important to note that 1Kb is equivalent to 1 vector of size 256. If the `max_segment_size_kb` parameter is not explicitly set, it will be automatically selected based on the number of available CPUs.","['# If search speed is more important - make this parameter higher.\n\n    # Note: 1Kb = 1 vector of size 256\n\n    # If not set, will be automatically selected considering the number of available CPUs.\n\n    max_segment_size_kb: null\n\n\n\n    # Maximum size (in KiloBytes) of vectors to store in-memory per segment.\n\n    # Segments larger than this threshold will be stored as read-only memmaped file.\n\n    # To enable memmap storage, lower the threshold\n\n    # Note: 1Kb = 1 vector of size 256', '# Segments larger than this threshold will be stored as read-only memmaped file.\n\n    # Memmap storage is disabled by default, to enable it, set this threshold to a reasonable value.\n\n    # To disable memmap storage, set this to `0`.\n\n    # Note: 1Kb = 1 vector of size 256\n\n    memmap_threshold_kb: 200000\n\n\n\n    # Maximum size (in kilobytes) of vectors allowed for plain index, exceeding this threshold will enable vector indexing', '""max_segment_size"": null,\n\n                ""memmap_threshold"": null,\n\n                ""indexing_threshold"": 20000,\n\n                ""flush_interval_sec"": 5,\n\n                ""max_optimization_threads"": 1\n\n            },\n\n            ""wal_config"": {\n\n                ""wal_capacity_mb"": 32,\n\n                ""wal_segments_ahead"": 0\n\n            }\n\n        },\n\n        ""payload_schema"": {}\n\n    },\n\n    ""status"": ""ok"",\n\n    ""time"": 0.00010143\n\n}\n\n```\n\n\n\n</details>\n\n<br/>\n\n\n\n\n\n\n\n```csharp', 'We\'re changing the `default_segment_number` to 5. Segment numbers influence the number of graph nodes in the underlying HNSW index, thereby indirectly influencing the memory efficiency. \n\n\n\n#### Next, we upload our vectors to this and then enable indexing: \n\n\n\n```python\n\nbatch_size = 10000\n\nclient.upload_collection(\n\n    collection_name=collection_name,\n\n    ids=range(len(dataset)),\n\n    vectors=dataset[""openai""],\n\n    payload=[\n\n        {""text"": x} for x in dataset[""text""]\n\n    ],\n\n    parallel=10,\n\n)', '```text\n\nmemory_size = number_of_vectors * vector_dimension * 4 bytes * 1.5\n\n```\n\n\n\nExtra 50% is needed for metadata (indexes, point versions, etc.) as well as for temporary segments constructed during the optimization process.\n\n\n\nIf you need to have payloads along with the vectors, it is recommended to store it on the disc, and only keep [indexed fields](../../concepts/indexing/#payload-index) in RAM.']","# If search speed is more important - make this parameter higher.

    # Note: 1Kb = 1 vector of size 256

    # If not set, will be automatically selected considering the number of available CPUs.

    max_segment_size_kb: null



    # Maximum size (in KiloBytes) of vectors to store in-memory per segment.

    # Segments larger than this threshold will be stored as read-only memmaped file.

    # To enable memmap storage, lower the threshold

    # Note: 1Kb = 1 vector of size 256
# Segments larger than this threshold will be stored as read-only memmaped file.

    # Memmap storage is disabled by default, to enable it, set this threshold to a reasonable value.

    # To disable memmap storage, set this to `0`.

    # Note: 1Kb = 1 vector of size 256

    memmap_threshold_kb: 200000



    # Maximum size (in kilobytes) of vectors allowed for plain index, exceeding this threshold will enable vector indexing
""max_segment_size"": null,

                ""memmap_threshold"": null,

                ""indexing_threshold"": 20000,

                ""flush_interval_sec"": 5,

                ""max_optimization_threads"": 1

            },

            ""wal_config"": {

                ""wal_capacity_mb"": 32,

                ""wal_segments_ahead"": 0

            }

        },

        ""payload_schema"": {}

    },

    ""status"": ""ok"",

    ""time"": 0.00010143

}

```



</details>

<br/>







```csharp
We're changing the `default_segment_number` to 5. Segment numbers influence the number of graph nodes in the underlying HNSW index, thereby indirectly influencing the memory efficiency. 



#### Next, we upload our vectors to this and then enable indexing: 



```python

batch_size = 10000

client.upload_collection(

    collection_name=collection_name,

    ids=range(len(dataset)),

    vectors=dataset[""openai""],

    payload=[

        {""text"": x} for x in dataset[""text""]

    ],

    parallel=10,

)
```text

memory_size = number_of_vectors * vector_dimension * 4 bytes * 1.5

```



Extra 50% is needed for metadata (indexes, point versions, etc.) as well as for temporary segments constructed during the optimization process.



If you need to have payloads along with the vectors, it is recommended to store it on the disc, and only keep [indexed fields](../../concepts/indexing/#payload-index) in RAM.",0.4807692307692308,0.42016806722689076,0.4484304932735426,0.20388349514563106,0.17796610169491525,0.19004524886877827,0.2692307692307692,0.23529411764705882,0.25112107623318386,0.47115384615384615,0.4117647058823529,0.4394618834080717,0.8976647853851318,0.6345095634460449,0.6142889261245728,0.6242355704307556,0.5339754447340965,0.6365055346063205,101,0.808,0.2864814134965778
True,,2627.1330000000003,bd90171a,What is the significance of the `indexing_threshold_kb` parameter?,"The `indexing_threshold_kb` parameter specifies the maximum size, in Kilobytes, allowed for vectors for plain index. The default value for this parameter is set to 20000 KB. It is important to note that 1 KB is equivalent to 1 vector of size 256. This parameter plays a crucial role in determining the maximum size of vectors that can be used for indexing. If the `indexing_threshold_kb` parameter is not explicitly set, the default value will be used. Additionally, setting this parameter to `0` will explicitly disable vector indexing. This parameter directly impacts the efficiency and performance of the indexing process for the given vectors.","The `indexing_threshold_kb` parameter is significant in determining the threshold at which vector indexing is enabled or disabled. When this parameter is set to a value greater than 0, vector indexing is enabled for segments that have more vectors stored than the threshold specified in kilobytes. 

In the provided context, the `indexing_threshold_kb` parameter is set to 20000, which means that indexing will be enabled for segments that have more than 20000 kilobytes of vectors stored. This parameter allows for efficient management of indexing based on the size of stored vectors, optimizing the indexing process for better performance. 

Additionally, the parameter can be adjusted or set to 0 to explicitly disable vector indexing, which may be useful for specific optimization or performance requirements.","# Default value is 20,000, based on <https://github.com/google-research/google-research/blob/master/scann/docs/algorithms.md>.

    # To disable vector indexing, set to `0`.

    # Note: 1kB = 1 vector of size 256.

    indexing_threshold_kb: 20000

```



In addition to the configuration file, you can also set optimizer parameters separately for each [collection](../collections).
# To explicitly disable vector indexing, set to `0`.

    # If not set, the default value will be used.

    indexing_threshold_kb: 20000



    # Interval between forced flushes.

    flush_interval_sec: 5



    # Max number of threads, which can be used for optimization per collection.

    # Note: Each optimization thread will also use `max_indexing_threads` for index building.

    # So total number of threads used for optimization will be `max_optimization_threads * max_indexing_threads`
The following command enables indexing for segments that have more than 10000 kB of vectors stored:





```http

PATCH /collections/{collection_name}

{

    ""optimizers_config"": {

        ""indexing_threshold"": 10000

    }

}

```



```bash

curl -X PATCH http://localhost:6333/collections/test_collection1 \

  -H 'Content-Type: application/json' \

  --data-raw '{

    ""optimizers_config"": {

        ""indexing_threshold"": 10000

    }

  }'

```



```python

client.update_collection(
default_segment_number=5,

        indexing_threshold=0,

    ),

    quantization_config=models.BinaryQuantization(

        binary=models.BinaryQuantizationConfig(always_ram=True),

    ),

)

```



#### What is happening in the OptimizerConfig? 



We're setting `indexing_threshold` to 0 i.e. disabling the indexing to zero. This allows faster uploads of vectors and payloads. We will turn it back on down below, once all the data is loaded
""max_segment_size"": null,

                ""memmap_threshold"": null,

                ""indexing_threshold"": 20000,

                ""flush_interval_sec"": 5,

                ""max_optimization_threads"": 1

            },

            ""wal_config"": {

                ""wal_capacity_mb"": 32,

                ""wal_segments_ahead"": 0

            }

        },

        ""payload_schema"": {}

    },

    ""status"": ""ok"",

    ""time"": 0.00010143

}

```



</details>

<br/>







```csharp","['# Default value is 20,000, based on <https://github.com/google-research/google-research/blob/master/scann/docs/algorithms.md>.\n\n    # To disable vector indexing, set to `0`.\n\n    # Note: 1kB = 1 vector of size 256.\n\n    indexing_threshold_kb: 20000\n\n```\n\n\n\nIn addition to the configuration file, you can also set optimizer parameters separately for each [collection](../collections).', '# To explicitly disable vector indexing, set to `0`.\n\n    # If not set, the default value will be used.\n\n    indexing_threshold_kb: 20000\n\n\n\n    # Interval between forced flushes.\n\n    flush_interval_sec: 5\n\n\n\n    # Max number of threads, which can be used for optimization per collection.\n\n    # Note: Each optimization thread will also use `max_indexing_threads` for index building.\n\n    # So total number of threads used for optimization will be `max_optimization_threads * max_indexing_threads`', 'The following command enables indexing for segments that have more than 10000 kB of vectors stored:\n\n\n\n\n\n```http\n\nPATCH /collections/{collection_name}\n\n{\n\n    ""optimizers_config"": {\n\n        ""indexing_threshold"": 10000\n\n    }\n\n}\n\n```\n\n\n\n```bash\n\ncurl -X PATCH http://localhost:6333/collections/test_collection1 \\\n\n  -H \'Content-Type: application/json\' \\\n\n  --data-raw \'{\n\n    ""optimizers_config"": {\n\n        ""indexing_threshold"": 10000\n\n    }\n\n  }\'\n\n```\n\n\n\n```python\n\nclient.update_collection(', ""default_segment_number=5,\n\n        indexing_threshold=0,\n\n    ),\n\n    quantization_config=models.BinaryQuantization(\n\n        binary=models.BinaryQuantizationConfig(always_ram=True),\n\n    ),\n\n)\n\n```\n\n\n\n#### What is happening in the OptimizerConfig? \n\n\n\nWe're setting `indexing_threshold` to 0 i.e. disabling the indexing to zero. This allows faster uploads of vectors and payloads. We will turn it back on down below, once all the data is loaded"", '""max_segment_size"": null,\n\n                ""memmap_threshold"": null,\n\n                ""indexing_threshold"": 20000,\n\n                ""flush_interval_sec"": 5,\n\n                ""max_optimization_threads"": 1\n\n            },\n\n            ""wal_config"": {\n\n                ""wal_capacity_mb"": 32,\n\n                ""wal_segments_ahead"": 0\n\n            }\n\n        },\n\n        ""payload_schema"": {}\n\n    },\n\n    ""status"": ""ok"",\n\n    ""time"": 0.00010143\n\n}\n\n```\n\n\n\n</details>\n\n<br/>\n\n\n\n\n\n\n\n```csharp']","Question: What is the significance of the `indexing_threshold_kb` parameter?\n\nContext: # Default value is 20,000, based on <https://github.com/google-research/google-research/blob/master/scann/docs/algorithms.md>.

# To disable vector indexing, set to `0`.

# Note: 1kB = 1 vector of size 256.

indexing_threshold_kb: 20000

```



In addition to the configuration file, you can also set optimizer parameters separately for each [collection](../collections).
# To explicitly disable vector indexing, set to `0`.

# If not set, the default value will be used.

indexing_threshold_kb: 20000



# Interval between forced flushes.

flush_interval_sec: 5



# Max number of threads, which can be used for optimization per collection.

# Note: Each optimization thread will also use `max_indexing_threads` for index building.

# So total number of threads used for optimization will be `max_optimization_threads * max_indexing_threads`
The following command enables indexing for segments that have more than 10000 kB of vectors stored:





```http

PATCH /collections/{collection_name}

{

""optimizers_config"": {

""indexing_threshold"": 10000

}

}

```



```bash

curl -X PATCH http://localhost:6333/collections/test_collection1 \

-H 'Content-Type: application/json' \

--data-raw '{

""optimizers_config"": {

""indexing_threshold"": 10000

}

}'

```



```python

client.update_collection(
default_segment_number=5,

indexing_threshold=0,

),

quantization_config=models.BinaryQuantization(

binary=models.BinaryQuantizationConfig(always_ram=True),

),

)

```



#### What is happening in the OptimizerConfig? 



We're setting `indexing_threshold` to 0 i.e. disabling the indexing to zero. This allows faster uploads of vectors and payloads. We will turn it back on down below, once all the data is loaded
""max_segment_size"": null,

""memmap_threshold"": null,

""indexing_threshold"": 20000,

""flush_interval_sec"": 5,

""max_optimization_threads"": 1

},

""wal_config"": {

""wal_capacity_mb"": 32,

""wal_segments_ahead"": 0

}

},

""payload_schema"": {}

},

""status"": ""ok"",

""time"": 0.00010143

}

```



</details>

<br/>







```csharp\n\nAnswer:",What is the significance of the `indexing_threshold_kb` parameter?,"The `indexing_threshold_kb` parameter specifies the maximum size, in Kilobytes, allowed for vectors for plain index. The default value for this parameter is set to 20000 KB. It is important to note that 1 KB is equivalent to 1 vector of size 256. This parameter plays a crucial role in determining the maximum size of vectors that can be used for indexing. If the `indexing_threshold_kb` parameter is not explicitly set, the default value will be used. Additionally, setting this parameter to `0` will explicitly disable vector indexing. This parameter directly impacts the efficiency and performance of the indexing process for the given vectors.","['# Default value is 20,000, based on <https://github.com/google-research/google-research/blob/master/scann/docs/algorithms.md>.\n\n    # To disable vector indexing, set to `0`.\n\n    # Note: 1kB = 1 vector of size 256.\n\n    indexing_threshold_kb: 20000\n\n```\n\n\n\nIn addition to the configuration file, you can also set optimizer parameters separately for each [collection](../collections).', '# To explicitly disable vector indexing, set to `0`.\n\n    # If not set, the default value will be used.\n\n    indexing_threshold_kb: 20000\n\n\n\n    # Interval between forced flushes.\n\n    flush_interval_sec: 5\n\n\n\n    # Max number of threads, which can be used for optimization per collection.\n\n    # Note: Each optimization thread will also use `max_indexing_threads` for index building.\n\n    # So total number of threads used for optimization will be `max_optimization_threads * max_indexing_threads`', 'The following command enables indexing for segments that have more than 10000 kB of vectors stored:\n\n\n\n\n\n```http\n\nPATCH /collections/{collection_name}\n\n{\n\n    ""optimizers_config"": {\n\n        ""indexing_threshold"": 10000\n\n    }\n\n}\n\n```\n\n\n\n```bash\n\ncurl -X PATCH http://localhost:6333/collections/test_collection1 \\\n\n  -H \'Content-Type: application/json\' \\\n\n  --data-raw \'{\n\n    ""optimizers_config"": {\n\n        ""indexing_threshold"": 10000\n\n    }\n\n  }\'\n\n```\n\n\n\n```python\n\nclient.update_collection(', ""default_segment_number=5,\n\n        indexing_threshold=0,\n\n    ),\n\n    quantization_config=models.BinaryQuantization(\n\n        binary=models.BinaryQuantizationConfig(always_ram=True),\n\n    ),\n\n)\n\n```\n\n\n\n#### What is happening in the OptimizerConfig? \n\n\n\nWe're setting `indexing_threshold` to 0 i.e. disabling the indexing to zero. This allows faster uploads of vectors and payloads. We will turn it back on down below, once all the data is loaded"", '""max_segment_size"": null,\n\n                ""memmap_threshold"": null,\n\n                ""indexing_threshold"": 20000,\n\n                ""flush_interval_sec"": 5,\n\n                ""max_optimization_threads"": 1\n\n            },\n\n            ""wal_config"": {\n\n                ""wal_capacity_mb"": 32,\n\n                ""wal_segments_ahead"": 0\n\n            }\n\n        },\n\n        ""payload_schema"": {}\n\n    },\n\n    ""status"": ""ok"",\n\n    ""time"": 0.00010143\n\n}\n\n```\n\n\n\n</details>\n\n<br/>\n\n\n\n\n\n\n\n```csharp']","# Default value is 20,000, based on <https://github.com/google-research/google-research/blob/master/scann/docs/algorithms.md>.

    # To disable vector indexing, set to `0`.

    # Note: 1kB = 1 vector of size 256.

    indexing_threshold_kb: 20000

```



In addition to the configuration file, you can also set optimizer parameters separately for each [collection](../collections).
# To explicitly disable vector indexing, set to `0`.

    # If not set, the default value will be used.

    indexing_threshold_kb: 20000



    # Interval between forced flushes.

    flush_interval_sec: 5



    # Max number of threads, which can be used for optimization per collection.

    # Note: Each optimization thread will also use `max_indexing_threads` for index building.

    # So total number of threads used for optimization will be `max_optimization_threads * max_indexing_threads`
The following command enables indexing for segments that have more than 10000 kB of vectors stored:





```http

PATCH /collections/{collection_name}

{

    ""optimizers_config"": {

        ""indexing_threshold"": 10000

    }

}

```



```bash

curl -X PATCH http://localhost:6333/collections/test_collection1 \

  -H 'Content-Type: application/json' \

  --data-raw '{

    ""optimizers_config"": {

        ""indexing_threshold"": 10000

    }

  }'

```



```python

client.update_collection(
default_segment_number=5,

        indexing_threshold=0,

    ),

    quantization_config=models.BinaryQuantization(

        binary=models.BinaryQuantizationConfig(always_ram=True),

    ),

)

```



#### What is happening in the OptimizerConfig? 



We're setting `indexing_threshold` to 0 i.e. disabling the indexing to zero. This allows faster uploads of vectors and payloads. We will turn it back on down below, once all the data is loaded
""max_segment_size"": null,

                ""memmap_threshold"": null,

                ""indexing_threshold"": 20000,

                ""flush_interval_sec"": 5,

                ""max_optimization_threads"": 1

            },

            ""wal_config"": {

                ""wal_capacity_mb"": 32,

                ""wal_segments_ahead"": 0

            }

        },

        ""payload_schema"": {}

    },

    ""status"": ""ok"",

    ""time"": 0.00010143

}

```



</details>

<br/>







```csharp",0.5517241379310345,0.6666666666666666,0.6037735849056604,0.25217391304347825,0.30526315789473685,0.2761904761904762,0.29310344827586204,0.3541666666666667,0.32075471698113206,0.5172413793103449,0.625,0.5660377358490567,0.910735547542572,0.6547247767448425,0.6724294424057007,0.663459062576294,0.7929603278636932,0.7550630408028761,121,1.1862745098039216,0.4382560706401856
True,,4649.968000000001,8ccc4ac5,How can you optimize Qdrant for minimizing latency in search requests?,"To optimize Qdrant for minimizing latency in search requests, you can set up the system to use as many cores as possible for a single request. This can be achieved by setting the number of segments in the collection to be equal to the number of cores in the system. By doing this, each segment will be processed in parallel, leading to a faster final result. This approach allows for the efficient utilization of system resources and can significantly reduce the time taken from the moment a request is submitted to the moment a response is received. By optimizing for latency in this manner, you can enhance the overall speed and responsiveness of the search functionality in Qdrant.","To optimize Qdrant for minimizing latency in search requests, you can consider the following approaches:

1. Utilize Parallel Processing: Set up Qdrant to use as many cores as possible for a single request by configuring the number of segments in the collection to be equal to the number of cores in the system. This allows each segment to be processed in parallel, resulting in faster search results.

2. Disable Rescoring: In a system with high disk latency, the rescoring step may become a bottleneck. To improve search speed, consider disabling rescoring by setting `""rescore"": false` in the search parameters.

3. Batch Searching: Implement batch searching to save time and reduce latency. By sending multiple search requests in a batch, you can leverage the benefits of parallel processing and minimize overhead.

4. Distributed Deployment: In a distributed deployment of Qdrant, the need for extensive inter-cluster requests can be reduced. By specifying shards in your search requests, Qdrant can efficiently locate the required data without querying all machines in the cluster, thus minimizing overhead and improving performance.

5. Query Optimization: If your search requests share the same filtering conditions, Qdrant's query optimizer can reuse these conditions among batch requests, further optimizing search performance.

By implementing these strategies and considering the specific characteristics of your system and workload, you can optimize Qdrant to minimize latency in search requests and improve overall search performance.","Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.



To prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\.

You can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.



```http

PUT /collections/{collection_name}

{
In a system with high disk latency, the re-scoring step may become a bottleneck.



Consider disabling `rescore` to improve the search speed:



```http

POST /collections/{collection_name}/points/search

{

    ""params"": {

        ""quantization"": {

            ""rescore"": false

        }

    },

    ""vector"": [0.2, 0.1, 0.9, 0.7],

    ""limit"": 10

}

```



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""localhost"", port=6333)



client.search(
![sequential vs. concurrent flow](/articles_data/search-as-you-type/sayt_concurrency.png)



While this means more load for the Qdrant vector search engine, this is not the limiting factor. The relevant data is already in cache in many cases, so the overhead stays within acceptable bounds, and the maximum latency in case of prefix cache misses is measurably reduced.



The code is available on the [Qdrant github](https://github.com/qdrant/page-search)
The results you may achieve on a specific setup may vary depending on the hardware, however, at the first glance, it seems that batch searching may save you quite a lot of time.



Additional improvements could be achieved in the case of distributed deployment, as Qdrant won’t need to make extensive inter-cluster requests. Moreover, if your requests share the same filtering condition, the query optimizer would be able to reuse it among batch requests.



## Summary
This works in the other direction as well. Whenever you search for something, you can specify a shard or several shards and Qdrant will know where to find them. It will avoid asking all machines in your cluster for results. This will minimize overhead and maximize performance. 



### Common use cases","['Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.\n\n\n\nTo prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\\.\n\nYou can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{', 'In a system with high disk latency, the re-scoring step may become a bottleneck.\n\n\n\nConsider disabling `rescore` to improve the search speed:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/search\n\n{\n\n    ""params"": {\n\n        ""quantization"": {\n\n            ""rescore"": false\n\n        }\n\n    },\n\n    ""vector"": [0.2, 0.1, 0.9, 0.7],\n\n    ""limit"": 10\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.search(', '![sequential vs. concurrent flow](/articles_data/search-as-you-type/sayt_concurrency.png)\n\n\n\nWhile this means more load for the Qdrant vector search engine, this is not the limiting factor. The relevant data is already in cache in many cases, so the overhead stays within acceptable bounds, and the maximum latency in case of prefix cache misses is measurably reduced.\n\n\n\nThe code is available on the [Qdrant github](https://github.com/qdrant/page-search)', 'The results you may achieve on a specific setup may vary depending on the hardware, however, at the first glance, it seems that batch searching may save you quite a lot of time.\n\n\n\nAdditional improvements could be achieved in the case of distributed deployment, as Qdrant won’t need to make extensive inter-cluster requests. Moreover, if your requests share the same filtering condition, the query optimizer would be able to reuse it among batch requests.\n\n\n\n## Summary', 'This works in the other direction as well. Whenever you search for something, you can specify a shard or several shards and Qdrant will know where to find them. It will avoid asking all machines in your cluster for results. This will minimize overhead and maximize performance. \n\n\n\n### Common use cases']","Question: How can you optimize Qdrant for minimizing latency in search requests?\n\nContext: Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.



To prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\.

You can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.



```http

PUT /collections/{collection_name}

{
In a system with high disk latency, the re-scoring step may become a bottleneck.



Consider disabling `rescore` to improve the search speed:



```http

POST /collections/{collection_name}/points/search

{

""params"": {

""quantization"": {

""rescore"": false

}

},

""vector"": [0.2, 0.1, 0.9, 0.7],

""limit"": 10

}

```



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""localhost"", port=6333)



client.search(
![sequential vs. concurrent flow](/articles_data/search-as-you-type/sayt_concurrency.png)



While this means more load for the Qdrant vector search engine, this is not the limiting factor. The relevant data is already in cache in many cases, so the overhead stays within acceptable bounds, and the maximum latency in case of prefix cache misses is measurably reduced.



The code is available on the [Qdrant github](https://github.com/qdrant/page-search)
The results you may achieve on a specific setup may vary depending on the hardware, however, at the first glance, it seems that batch searching may save you quite a lot of time.



Additional improvements could be achieved in the case of distributed deployment, as Qdrant won’t need to make extensive inter-cluster requests. Moreover, if your requests share the same filtering condition, the query optimizer would be able to reuse it among batch requests.



## Summary
This works in the other direction as well. Whenever you search for something, you can specify a shard or several shards and Qdrant will know where to find them. It will avoid asking all machines in your cluster for results. This will minimize overhead and maximize performance. 



### Common use cases\n\nAnswer:",How can you optimize Qdrant for minimizing latency in search requests?,"To optimize Qdrant for minimizing latency in search requests, you can set up the system to use as many cores as possible for a single request. This can be achieved by setting the number of segments in the collection to be equal to the number of cores in the system. By doing this, each segment will be processed in parallel, leading to a faster final result. This approach allows for the efficient utilization of system resources and can significantly reduce the time taken from the moment a request is submitted to the moment a response is received. By optimizing for latency in this manner, you can enhance the overall speed and responsiveness of the search functionality in Qdrant.","['Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.\n\n\n\nTo prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\\.\n\nYou can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{', 'In a system with high disk latency, the re-scoring step may become a bottleneck.\n\n\n\nConsider disabling `rescore` to improve the search speed:\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/search\n\n{\n\n    ""params"": {\n\n        ""quantization"": {\n\n            ""rescore"": false\n\n        }\n\n    },\n\n    ""vector"": [0.2, 0.1, 0.9, 0.7],\n\n    ""limit"": 10\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.search(', '![sequential vs. concurrent flow](/articles_data/search-as-you-type/sayt_concurrency.png)\n\n\n\nWhile this means more load for the Qdrant vector search engine, this is not the limiting factor. The relevant data is already in cache in many cases, so the overhead stays within acceptable bounds, and the maximum latency in case of prefix cache misses is measurably reduced.\n\n\n\nThe code is available on the [Qdrant github](https://github.com/qdrant/page-search)', 'The results you may achieve on a specific setup may vary depending on the hardware, however, at the first glance, it seems that batch searching may save you quite a lot of time.\n\n\n\nAdditional improvements could be achieved in the case of distributed deployment, as Qdrant won’t need to make extensive inter-cluster requests. Moreover, if your requests share the same filtering condition, the query optimizer would be able to reuse it among batch requests.\n\n\n\n## Summary', 'This works in the other direction as well. Whenever you search for something, you can specify a shard or several shards and Qdrant will know where to find them. It will avoid asking all machines in your cluster for results. This will minimize overhead and maximize performance. \n\n\n\n### Common use cases']","Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.



To prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\.

You can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.



```http

PUT /collections/{collection_name}

{
In a system with high disk latency, the re-scoring step may become a bottleneck.



Consider disabling `rescore` to improve the search speed:



```http

POST /collections/{collection_name}/points/search

{

    ""params"": {

        ""quantization"": {

            ""rescore"": false

        }

    },

    ""vector"": [0.2, 0.1, 0.9, 0.7],

    ""limit"": 10

}

```



```python

from qdrant_client import QdrantClient, models



client = QdrantClient(""localhost"", port=6333)



client.search(
![sequential vs. concurrent flow](/articles_data/search-as-you-type/sayt_concurrency.png)



While this means more load for the Qdrant vector search engine, this is not the limiting factor. The relevant data is already in cache in many cases, so the overhead stays within acceptable bounds, and the maximum latency in case of prefix cache misses is measurably reduced.



The code is available on the [Qdrant github](https://github.com/qdrant/page-search)
The results you may achieve on a specific setup may vary depending on the hardware, however, at the first glance, it seems that batch searching may save you quite a lot of time.



Additional improvements could be achieved in the case of distributed deployment, as Qdrant won’t need to make extensive inter-cluster requests. Moreover, if your requests share the same filtering condition, the query optimizer would be able to reuse it among batch requests.



## Summary
This works in the other direction as well. Whenever you search for something, you can specify a shard or several shards and Qdrant will know where to find them. It will avoid asking all machines in your cluster for results. This will minimize overhead and maximize performance. 



### Common use cases",0.3691588785046729,0.7669902912621359,0.49842271293375395,0.19248826291079812,0.4019607843137255,0.26031746031746034,0.2757009345794392,0.5728155339805825,0.3722397476340694,0.35514018691588783,0.7378640776699029,0.4794952681388012,0.9483309984207153,0.6446107625961304,0.7408705949783325,0.6893967390060425,0.9592470333911478,0.9807389748282731,231,1.9576271186440677,0.5360583142407257
True,,2682.185,42f7388e,How can Qdrant be configured to optimize throughput by utilizing multiple cores for parallel processing?,"To optimize throughput in Qdrant and utilize multiple cores for parallel processing, you can configure the system to use minimal number of segments, typically set to 2. By setting the default_segment_number to 2 in the optimizers_config section of the PUT request for creating a collection, you can instruct Qdrant to use a smaller number of segments. This approach benefits from the size of the index and reduces the overall number of vector comparisons needed to find the nearest neighbors. However, it is important to note that larger segments require more time to build the index. By adjusting this configuration parameter, you can strike a balance between maximizing throughput and optimizing the efficiency of vector search operations in Qdrant.","To configure Qdrant to optimize throughput by utilizing multiple cores for parallel processing, you can follow these steps:

1. Set up Qdrant to use minimal number of segments, typically 2. This allows Qdrant to leverage the benefits of larger segments while still processing requests in parallel.

2. Configure the number of segments in the collection to be equal to the number of cores in the system. This way, each segment will be processed in parallel, maximizing the utilization of multiple cores for a single request.

3. Monitor the performance of Qdrant using internal heuristics and collect timings and counters of various code pieces to identify bottlenecks and areas for improvement.

By following these steps, you can effectively optimize Qdrant's resource usage for throughput and scale the infrastructure efficiently.",");

```



To prefer throughput, you can set up Qdrant to use as many cores as possible for processing multiple requests in parallel.

To do that, you can configure qdrant to use minimal number of segments, which is usually 2.

Large segments benefit from the size of the index and overall smaller number of vector comparisons required to find the nearest neighbors. But at the same time require more time to build index.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,
Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.



To prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\.

You can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.



```http

PUT /collections/{collection_name}

{
| [Optimization](tutorials/optimize/)           | Optimize Qdrant's resource usage. | [Multitenancy](tutorials/multiple-partitions/) | Setup Qdrant for multiple independent users. |                  



## Common Use Cases:
We do a lot of benchmarking internally, but it is impossible to cover all possible use cases, hardware, and configurations.



In order to identify bottlenecks and improve Qdrant, we need to collect information about how it is used.



Additionally, Qdrant uses a bunch of internal heuristics to optimize the performance.

To better set up parameters for these heuristics, we need to collect timings and counters of various pieces of code.

With this information, we can make Qdrant faster for everyone.
. Qdrant basically optimizes a lot using for the compute resources and this also helped us to scale the whole infrastructure in a really efficient manner.","[');\n\n```\n\n\n\nTo prefer throughput, you can set up Qdrant to use as many cores as possible for processing multiple requests in parallel.\n\nTo do that, you can configure qdrant to use minimal number of segments, which is usually 2.\n\nLarge segments benefit from the size of the index and overall smaller number of vector comparisons required to find the nearest neighbors. But at the same time require more time to build index.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,', 'Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.\n\n\n\nTo prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\\.\n\nYou can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{', ""| [Optimization](tutorials/optimize/)           | Optimize Qdrant's resource usage. | [Multitenancy](tutorials/multiple-partitions/) | Setup Qdrant for multiple independent users. |                  \n\n\n\n## Common Use Cases:"", 'We do a lot of benchmarking internally, but it is impossible to cover all possible use cases, hardware, and configurations.\n\n\n\nIn order to identify bottlenecks and improve Qdrant, we need to collect information about how it is used.\n\n\n\nAdditionally, Qdrant uses a bunch of internal heuristics to optimize the performance.\n\nTo better set up parameters for these heuristics, we need to collect timings and counters of various pieces of code.\n\nWith this information, we can make Qdrant faster for everyone.', '. Qdrant basically optimizes a lot using for the compute resources and this also helped us to scale the whole infrastructure in a really efficient manner.']","Question: How can Qdrant be configured to optimize throughput by utilizing multiple cores for parallel processing?\n\nContext: );

```



To prefer throughput, you can set up Qdrant to use as many cores as possible for processing multiple requests in parallel.

To do that, you can configure qdrant to use minimal number of segments, which is usually 2.

Large segments benefit from the size of the index and overall smaller number of vector comparisons required to find the nearest neighbors. But at the same time require more time to build index.



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,
Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.



To prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\.

You can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.



```http

PUT /collections/{collection_name}

{
| [Optimization](tutorials/optimize/)           | Optimize Qdrant's resource usage. | [Multitenancy](tutorials/multiple-partitions/) | Setup Qdrant for multiple independent users. |                  



## Common Use Cases:
We do a lot of benchmarking internally, but it is impossible to cover all possible use cases, hardware, and configurations.



In order to identify bottlenecks and improve Qdrant, we need to collect information about how it is used.



Additionally, Qdrant uses a bunch of internal heuristics to optimize the performance.

To better set up parameters for these heuristics, we need to collect timings and counters of various pieces of code.

With this information, we can make Qdrant faster for everyone.
. Qdrant basically optimizes a lot using for the compute resources and this also helped us to scale the whole infrastructure in a really efficient manner.\n\nAnswer:",How can Qdrant be configured to optimize throughput by utilizing multiple cores for parallel processing?,"To optimize throughput in Qdrant and utilize multiple cores for parallel processing, you can configure the system to use minimal number of segments, typically set to 2. By setting the default_segment_number to 2 in the optimizers_config section of the PUT request for creating a collection, you can instruct Qdrant to use a smaller number of segments. This approach benefits from the size of the index and reduces the overall number of vector comparisons needed to find the nearest neighbors. However, it is important to note that larger segments require more time to build the index. By adjusting this configuration parameter, you can strike a balance between maximizing throughput and optimizing the efficiency of vector search operations in Qdrant.","[');\n\n```\n\n\n\nTo prefer throughput, you can set up Qdrant to use as many cores as possible for processing multiple requests in parallel.\n\nTo do that, you can configure qdrant to use minimal number of segments, which is usually 2.\n\nLarge segments benefit from the size of the index and overall smaller number of vector comparisons required to find the nearest neighbors. But at the same time require more time to build index.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,', 'Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.\n\n\n\nTo prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\\.\n\nYou can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{', ""| [Optimization](tutorials/optimize/)           | Optimize Qdrant's resource usage. | [Multitenancy](tutorials/multiple-partitions/) | Setup Qdrant for multiple independent users. |                  \n\n\n\n## Common Use Cases:"", 'We do a lot of benchmarking internally, but it is impossible to cover all possible use cases, hardware, and configurations.\n\n\n\nIn order to identify bottlenecks and improve Qdrant, we need to collect information about how it is used.\n\n\n\nAdditionally, Qdrant uses a bunch of internal heuristics to optimize the performance.\n\nTo better set up parameters for these heuristics, we need to collect timings and counters of various pieces of code.\n\nWith this information, we can make Qdrant faster for everyone.', '. Qdrant basically optimizes a lot using for the compute resources and this also helped us to scale the whole infrastructure in a really efficient manner.']",");

```



To prefer throughput, you can set up Qdrant to use as many cores as possible for processing multiple requests in parallel.

To do that, you can configure qdrant to use minimal number of segments, which is usually 2.

Large segments benefit from the size of the index and overall smaller number of vector comparisons required to find the nearest neighbors. But at the same time require more time to build index.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,
Those approaches are not mutually exclusive, but in some cases it might be preferable to optimize for one or another.



To prefer minimizing latency, you can set up Qdrant to use as many cores as possible for a single request\.

You can do this by setting the number of segments in the collection to be equal to the number of cores in the system. In this case, each segment will be processed in parallel, and the final result will be obtained faster.



```http

PUT /collections/{collection_name}

{
| [Optimization](tutorials/optimize/)           | Optimize Qdrant's resource usage. | [Multitenancy](tutorials/multiple-partitions/) | Setup Qdrant for multiple independent users. |                  



## Common Use Cases:
We do a lot of benchmarking internally, but it is impossible to cover all possible use cases, hardware, and configurations.



In order to identify bottlenecks and improve Qdrant, we need to collect information about how it is used.



Additionally, Qdrant uses a bunch of internal heuristics to optimize the performance.

To better set up parameters for these heuristics, we need to collect timings and counters of various pieces of code.

With this information, we can make Qdrant faster for everyone.
. Qdrant basically optimizes a lot using for the compute resources and this also helped us to scale the whole infrastructure in a really efficient manner.",0.5416666666666666,0.6018518518518519,0.5701754385964911,0.18487394957983194,0.205607476635514,0.19469026548672566,0.30833333333333335,0.3425925925925926,0.32456140350877194,0.48333333333333334,0.5370370370370371,0.5087719298245614,0.812960147857666,0.6301490068435669,0.6294212341308594,0.629784882068634,0.8280773791950196,0.9678576057776809,129,1.0932203389830508,0.503773611050773
True,,3938.3849999999998,5c8799b8,How can one enable distributed deployment mode in Qdrant?,"To enable distributed deployment mode in Qdrant, one needs to enable the cluster mode in the configuration or set the ENV variable `QDRANT__CLUSTER__ENABLED=true`. This allows multiple Qdrant services to communicate with each other, distributing data across peers to extend storage capabilities and increase stability. In the configuration file, under the `cluster` section, set `enabled: true` to run Qdrant in distributed deployment mode. Additionally, configure the internal communication port between peers using the `p2p` section with the specified port number. Furthermore, adjust the parameters related to the distributed consensus algorithm as needed for optimal performance.","To enable distributed deployment mode in Qdrant, you need to configure the cluster settings in the Qdrant configuration file. Here's how you can do it:

1. Open the Qdrant configuration file.

2. Find the section related to cluster settings. It should look something like this:

```yaml
cluster:
  enabled: false
  p2p:
    port: 6335
```

3. Change the `enabled` value to `true` to enable distributed deployment mode:

```yaml
cluster:
  enabled: true
  p2p:
    port: 6335
```

4. Save the configuration file.

Alternatively, you can also enable distributed deployment mode using an environment variable. Set the `QDRANT__CLUSTER__ENABLED` variable to `true`:

```
export QDRANT__CLUSTER__ENABLED=true
```

By enabling distributed deployment mode, Qdrant will run in a distributed mode where multiple Qdrant services communicate with each other to distribute data across peers, extending storage capabilities and increasing stability. This mode is particularly useful for large enterprises dealing with massive data volumes and ensures scalability without compromising performance.","To enable distributed deployment - enable the cluster mode in the [configuration](../configuration) or using the ENV variable: `QDRANT__CLUSTER__ENABLED=true`.



```yaml

cluster:

  # Use `enabled: true` to run Qdrant in distributed deployment mode

  enabled: true

  # Configuration of the inter-cluster communication

  p2p:

    # Port for internal communication between peers

    port: 6335



  # Configuration related to distributed consensus algorithm

  consensus:
#

  # If you enable this you should also enable TLS.

  # (Either above or via an external service like nginx.)

  # Sending an api-key over an unencrypted channel is insecure.

  #

  # Uncomment to enable.

  # read_only_api_key: your_secret_read_only_api_key_here



cluster:

  # Use `enabled: true` to run Qdrant in distributed deployment mode

  enabled: false



  # Configuration of the inter-cluster communication

  p2p:

    # Port for internal communication between peers

    port: 6335
Qdrant’s distributed deployment mode plays a vital role in empowering large enterprises dealing with massive data volumes. It ensures that increasing data volumes do not hinder performance but rather enrich the model’s capabilities, making scalability a seamless process. Moreover, Qdrant is well-suited for Pienso’s enterprise customers as it operates best on bare metal infrastructure, enabling them to maintain complete control over their data sovereignty and autonomous LLM regimes
Qdrant's distributed deployment mode plays a vital role in empowering large enterprises dealing with massive data volumes. It ensures that increasing data volumes do not hinder performance but rather enrich the model's capabilities, making scalability a seamless process. Moreover, Qdrant is well-suited for Pienso’s enterprise customers as it operates best on bare metal infrastructure, enabling them to maintain complete control over their data sovereignty and autonomous LLM regimes
---

title: Distributed Deployment

weight: 100

aliases:

  - ../distributed_deployment

---



# Distributed deployment



Since version v0.8.0 Qdrant supports a distributed deployment mode.

In this mode, multiple Qdrant services communicate with each other to distribute the data across the peers to extend the storage capabilities and increase stability.","['To enable distributed deployment - enable the cluster mode in the [configuration](../configuration) or using the ENV variable: `QDRANT__CLUSTER__ENABLED=true`.\n\n\n\n```yaml\n\ncluster:\n\n  # Use `enabled: true` to run Qdrant in distributed deployment mode\n\n  enabled: true\n\n  # Configuration of the inter-cluster communication\n\n  p2p:\n\n    # Port for internal communication between peers\n\n    port: 6335\n\n\n\n  # Configuration related to distributed consensus algorithm\n\n  consensus:', '#\n\n  # If you enable this you should also enable TLS.\n\n  # (Either above or via an external service like nginx.)\n\n  # Sending an api-key over an unencrypted channel is insecure.\n\n  #\n\n  # Uncomment to enable.\n\n  # read_only_api_key: your_secret_read_only_api_key_here\n\n\n\ncluster:\n\n  # Use `enabled: true` to run Qdrant in distributed deployment mode\n\n  enabled: false\n\n\n\n  # Configuration of the inter-cluster communication\n\n  p2p:\n\n    # Port for internal communication between peers\n\n    port: 6335', 'Qdrant’s distributed deployment mode plays a vital role in empowering large enterprises dealing with massive data volumes. It ensures that increasing data volumes do not hinder performance but rather enrich the model’s capabilities, making scalability a seamless process. Moreover, Qdrant is well-suited for Pienso’s enterprise customers as it operates best on bare metal infrastructure, enabling them to maintain complete control over their data sovereignty and autonomous LLM regimes', ""Qdrant's distributed deployment mode plays a vital role in empowering large enterprises dealing with massive data volumes. It ensures that increasing data volumes do not hinder performance but rather enrich the model's capabilities, making scalability a seamless process. Moreover, Qdrant is well-suited for Pienso’s enterprise customers as it operates best on bare metal infrastructure, enabling them to maintain complete control over their data sovereignty and autonomous LLM regimes"", '---\n\ntitle: Distributed Deployment\n\nweight: 100\n\naliases:\n\n  - ../distributed_deployment\n\n---\n\n\n\n# Distributed deployment\n\n\n\nSince version v0.8.0 Qdrant supports a distributed deployment mode.\n\nIn this mode, multiple Qdrant services communicate with each other to distribute the data across the peers to extend the storage capabilities and increase stability.']","Question: How can one enable distributed deployment mode in Qdrant?\n\nContext: To enable distributed deployment - enable the cluster mode in the [configuration](../configuration) or using the ENV variable: `QDRANT__CLUSTER__ENABLED=true`.



```yaml

cluster:

# Use `enabled: true` to run Qdrant in distributed deployment mode

enabled: true

# Configuration of the inter-cluster communication

p2p:

# Port for internal communication between peers

port: 6335



# Configuration related to distributed consensus algorithm

consensus:
#

# If you enable this you should also enable TLS.

# (Either above or via an external service like nginx.)

# Sending an api-key over an unencrypted channel is insecure.

#

# Uncomment to enable.

# read_only_api_key: your_secret_read_only_api_key_here



cluster:

# Use `enabled: true` to run Qdrant in distributed deployment mode

enabled: false



# Configuration of the inter-cluster communication

p2p:

# Port for internal communication between peers

port: 6335
Qdrant’s distributed deployment mode plays a vital role in empowering large enterprises dealing with massive data volumes. It ensures that increasing data volumes do not hinder performance but rather enrich the model’s capabilities, making scalability a seamless process. Moreover, Qdrant is well-suited for Pienso’s enterprise customers as it operates best on bare metal infrastructure, enabling them to maintain complete control over their data sovereignty and autonomous LLM regimes
Qdrant's distributed deployment mode plays a vital role in empowering large enterprises dealing with massive data volumes. It ensures that increasing data volumes do not hinder performance but rather enrich the model's capabilities, making scalability a seamless process. Moreover, Qdrant is well-suited for Pienso’s enterprise customers as it operates best on bare metal infrastructure, enabling them to maintain complete control over their data sovereignty and autonomous LLM regimes
---

title: Distributed Deployment

weight: 100

aliases:

- ../distributed_deployment

---



# Distributed deployment



Since version v0.8.0 Qdrant supports a distributed deployment mode.

In this mode, multiple Qdrant services communicate with each other to distribute the data across the peers to extend the storage capabilities and increase stability.\n\nAnswer:",How can one enable distributed deployment mode in Qdrant?,"To enable distributed deployment mode in Qdrant, one needs to enable the cluster mode in the configuration or set the ENV variable `QDRANT__CLUSTER__ENABLED=true`. This allows multiple Qdrant services to communicate with each other, distributing data across peers to extend storage capabilities and increase stability. In the configuration file, under the `cluster` section, set `enabled: true` to run Qdrant in distributed deployment mode. Additionally, configure the internal communication port between peers using the `p2p` section with the specified port number. Furthermore, adjust the parameters related to the distributed consensus algorithm as needed for optimal performance.","['To enable distributed deployment - enable the cluster mode in the [configuration](../configuration) or using the ENV variable: `QDRANT__CLUSTER__ENABLED=true`.\n\n\n\n```yaml\n\ncluster:\n\n  # Use `enabled: true` to run Qdrant in distributed deployment mode\n\n  enabled: true\n\n  # Configuration of the inter-cluster communication\n\n  p2p:\n\n    # Port for internal communication between peers\n\n    port: 6335\n\n\n\n  # Configuration related to distributed consensus algorithm\n\n  consensus:', '#\n\n  # If you enable this you should also enable TLS.\n\n  # (Either above or via an external service like nginx.)\n\n  # Sending an api-key over an unencrypted channel is insecure.\n\n  #\n\n  # Uncomment to enable.\n\n  # read_only_api_key: your_secret_read_only_api_key_here\n\n\n\ncluster:\n\n  # Use `enabled: true` to run Qdrant in distributed deployment mode\n\n  enabled: false\n\n\n\n  # Configuration of the inter-cluster communication\n\n  p2p:\n\n    # Port for internal communication between peers\n\n    port: 6335', 'Qdrant’s distributed deployment mode plays a vital role in empowering large enterprises dealing with massive data volumes. It ensures that increasing data volumes do not hinder performance but rather enrich the model’s capabilities, making scalability a seamless process. Moreover, Qdrant is well-suited for Pienso’s enterprise customers as it operates best on bare metal infrastructure, enabling them to maintain complete control over their data sovereignty and autonomous LLM regimes', ""Qdrant's distributed deployment mode plays a vital role in empowering large enterprises dealing with massive data volumes. It ensures that increasing data volumes do not hinder performance but rather enrich the model's capabilities, making scalability a seamless process. Moreover, Qdrant is well-suited for Pienso’s enterprise customers as it operates best on bare metal infrastructure, enabling them to maintain complete control over their data sovereignty and autonomous LLM regimes"", '---\n\ntitle: Distributed Deployment\n\nweight: 100\n\naliases:\n\n  - ../distributed_deployment\n\n---\n\n\n\n# Distributed deployment\n\n\n\nSince version v0.8.0 Qdrant supports a distributed deployment mode.\n\nIn this mode, multiple Qdrant services communicate with each other to distribute the data across the peers to extend the storage capabilities and increase stability.']","To enable distributed deployment - enable the cluster mode in the [configuration](../configuration) or using the ENV variable: `QDRANT__CLUSTER__ENABLED=true`.



```yaml

cluster:

  # Use `enabled: true` to run Qdrant in distributed deployment mode

  enabled: true

  # Configuration of the inter-cluster communication

  p2p:

    # Port for internal communication between peers

    port: 6335



  # Configuration related to distributed consensus algorithm

  consensus:
#

  # If you enable this you should also enable TLS.

  # (Either above or via an external service like nginx.)

  # Sending an api-key over an unencrypted channel is insecure.

  #

  # Uncomment to enable.

  # read_only_api_key: your_secret_read_only_api_key_here



cluster:

  # Use `enabled: true` to run Qdrant in distributed deployment mode

  enabled: false



  # Configuration of the inter-cluster communication

  p2p:

    # Port for internal communication between peers

    port: 6335
Qdrant’s distributed deployment mode plays a vital role in empowering large enterprises dealing with massive data volumes. It ensures that increasing data volumes do not hinder performance but rather enrich the model’s capabilities, making scalability a seamless process. Moreover, Qdrant is well-suited for Pienso’s enterprise customers as it operates best on bare metal infrastructure, enabling them to maintain complete control over their data sovereignty and autonomous LLM regimes
Qdrant's distributed deployment mode plays a vital role in empowering large enterprises dealing with massive data volumes. It ensures that increasing data volumes do not hinder performance but rather enrich the model's capabilities, making scalability a seamless process. Moreover, Qdrant is well-suited for Pienso’s enterprise customers as it operates best on bare metal infrastructure, enabling them to maintain complete control over their data sovereignty and autonomous LLM regimes
---

title: Distributed Deployment

weight: 100

aliases:

  - ../distributed_deployment

---



# Distributed deployment



Since version v0.8.0 Qdrant supports a distributed deployment mode.

In this mode, multiple Qdrant services communicate with each other to distribute the data across the peers to extend the storage capabilities and increase stability.",0.45454545454545453,0.7471264367816092,0.5652173913043478,0.22535211267605634,0.37209302325581395,0.2807017543859649,0.2727272727272727,0.4482758620689655,0.3391304347826087,0.43356643356643354,0.7126436781609196,0.5391304347826087,0.9509228467941284,0.6701698303222656,0.7290165424346924,0.6983556747436523,0.7713611011900606,0.9098854493582621,147,1.5638297872340425,0.47180603210533395
True,,4913.614,6f6adb45,What is the recommended approach for determining the number of shards when creating a collection using Qdrant?,"When creating a collection using Qdrant, it is recommended to set the number of shards to be a multiple of the number of nodes currently running in your cluster. For example, if you have 3 nodes in your cluster, setting the number of shards to 6 could be a good option. Shards are evenly distributed across all existing nodes when a collection is first created. It is important to note that Qdrant does not automatically rebalance shards if your cluster size or replication factor changes, as this operation can be expensive on large clusters. If scaling operations require moving shards, there are specific procedures outlined for this purpose, available as of version 0.9.0 of Qdrant.","When determining the number of shards for creating a collection using Qdrant, it is recommended to consider the following approach:

1. **Parallelization of Upload**: To efficiently handle the upload of a large dataset, it is advisable to create multiple shards. A reasonable number of shards per machine in Qdrant is typically between 2 to 4.

2. **Consensus Protocol**: Qdrant utilizes a consensus protocol to ensure that each node in the cluster knows where all parts of the collection are stored. This enables efficient search requests as the nodes automatically query each other to obtain the full search result.

3. **Specifying Shard Number**: When creating a collection in Qdrant, you can specify the number of shards (`shard_number`) into which the collection will be split. If the `shard_number` is not set, it will default to the number of nodes in your cluster.

4. **Optimizing Search Performance**: By specifying shards in search requests, Qdrant can directly retrieve the required data without querying all machines in the cluster. This minimizes overhead and enhances performance.

5. **Common Use Cases**: Qdrant is designed to perform exceptionally well with a single collection containing a large number of tenants. It is recommended to create multiple collections only when necessary, such as when dealing with non-homogenous data or vectors created by different embedding models. Creating too many collections can lead to resource overhead, dependencies, increased costs, and reduced performance.

Overall, the key considerations for determining the number of shards in Qdrant involve balancing parallelization of operations, optimizing search performance, and aligning with the specific requirements of your data and use cases.","## Parallel upload into multiple shards



In Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.

By creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""shard_number"": 2

}

```



```python
Each node knows where all parts of the collection are stored through the [consensus protocol](./#raft), so when you send a search request to one Qdrant node, it automatically queries all other nodes to obtain the full search result.



When you create a collection, Qdrant splits the collection into `shard_number` shards. If left unset, `shard_number` is set to the number of nodes in your cluster:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 300,
```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.CreateCollectionAsync(

	collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

	shardNumber: 6,

	replicationFactor: 2

);

```



This code sample creates a collection with a total of 6 logical shards backed by a total of 12 physical shards.
This works in the other direction as well. Whenever you search for something, you can specify a shard or several shards and Qdrant will know where to find them. It will avoid asking all machines in your cluster for results. This will minimize overhead and maximize performance. 



### Common use cases
Qdrant is built to excel in a single collection with a vast number of tenants. You should only create multiple collections when your data is not homogenous or if users' vectors are created by different embedding models. Creating too many collections may result in resource overhead and cause dependencies. This can increase costs and affect overall performance. 



## Sharding your database","['## Parallel upload into multiple shards\n\n\n\nIn Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.\n\nBy creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 2\n\n}\n\n```\n\n\n\n```python', 'Each node knows where all parts of the collection are stored through the [consensus protocol](./#raft), so when you send a search request to one Qdrant node, it automatically queries all other nodes to obtain the full search result.\n\n\n\nWhen you create a collection, Qdrant splits the collection into `shard_number` shards. If left unset, `shard_number` is set to the number of nodes in your cluster:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 300,', '```csharp\n\nusing Qdrant.Client;\n\nusing Qdrant.Client.Grpc;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreateCollectionAsync(\n\n\tcollectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\n\tshardNumber: 6,\n\n\treplicationFactor: 2\n\n);\n\n```\n\n\n\nThis code sample creates a collection with a total of 6 logical shards backed by a total of 12 physical shards.', 'This works in the other direction as well. Whenever you search for something, you can specify a shard or several shards and Qdrant will know where to find them. It will avoid asking all machines in your cluster for results. This will minimize overhead and maximize performance. \n\n\n\n### Common use cases', ""Qdrant is built to excel in a single collection with a vast number of tenants. You should only create multiple collections when your data is not homogenous or if users' vectors are created by different embedding models. Creating too many collections may result in resource overhead and cause dependencies. This can increase costs and affect overall performance. \n\n\n\n## Sharding your database""]","Question: What is the recommended approach for determining the number of shards when creating a collection using Qdrant?\n\nContext: ## Parallel upload into multiple shards



In Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.

By creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,

""distance"": ""Cosine""

},

""shard_number"": 2

}

```



```python
Each node knows where all parts of the collection are stored through the [consensus protocol](./#raft), so when you send a search request to one Qdrant node, it automatically queries all other nodes to obtain the full search result.



When you create a collection, Qdrant splits the collection into `shard_number` shards. If left unset, `shard_number` is set to the number of nodes in your cluster:



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 300,
```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.CreateCollectionAsync(

collectionName: ""{collection_name}"",

vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

shardNumber: 6,

replicationFactor: 2

);

```



This code sample creates a collection with a total of 6 logical shards backed by a total of 12 physical shards.
This works in the other direction as well. Whenever you search for something, you can specify a shard or several shards and Qdrant will know where to find them. It will avoid asking all machines in your cluster for results. This will minimize overhead and maximize performance. 



### Common use cases
Qdrant is built to excel in a single collection with a vast number of tenants. You should only create multiple collections when your data is not homogenous or if users' vectors are created by different embedding models. Creating too many collections may result in resource overhead and cause dependencies. This can increase costs and affect overall performance. 



## Sharding your database\n\nAnswer:",What is the recommended approach for determining the number of shards when creating a collection using Qdrant?,"When creating a collection using Qdrant, it is recommended to set the number of shards to be a multiple of the number of nodes currently running in your cluster. For example, if you have 3 nodes in your cluster, setting the number of shards to 6 could be a good option. Shards are evenly distributed across all existing nodes when a collection is first created. It is important to note that Qdrant does not automatically rebalance shards if your cluster size or replication factor changes, as this operation can be expensive on large clusters. If scaling operations require moving shards, there are specific procedures outlined for this purpose, available as of version 0.9.0 of Qdrant.","['## Parallel upload into multiple shards\n\n\n\nIn Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.\n\nBy creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 2\n\n}\n\n```\n\n\n\n```python', 'Each node knows where all parts of the collection are stored through the [consensus protocol](./#raft), so when you send a search request to one Qdrant node, it automatically queries all other nodes to obtain the full search result.\n\n\n\nWhen you create a collection, Qdrant splits the collection into `shard_number` shards. If left unset, `shard_number` is set to the number of nodes in your cluster:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 300,', '```csharp\n\nusing Qdrant.Client;\n\nusing Qdrant.Client.Grpc;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);\n\n\n\nawait client.CreateCollectionAsync(\n\n\tcollectionName: ""{collection_name}"",\n\n\tvectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },\n\n\tshardNumber: 6,\n\n\treplicationFactor: 2\n\n);\n\n```\n\n\n\nThis code sample creates a collection with a total of 6 logical shards backed by a total of 12 physical shards.', 'This works in the other direction as well. Whenever you search for something, you can specify a shard or several shards and Qdrant will know where to find them. It will avoid asking all machines in your cluster for results. This will minimize overhead and maximize performance. \n\n\n\n### Common use cases', ""Qdrant is built to excel in a single collection with a vast number of tenants. You should only create multiple collections when your data is not homogenous or if users' vectors are created by different embedding models. Creating too many collections may result in resource overhead and cause dependencies. This can increase costs and affect overall performance. \n\n\n\n## Sharding your database""]","## Parallel upload into multiple shards



In Qdrant, each collection is split into shards. Each shard has a separate Write-Ahead-Log (WAL), which is responsible for ordering operations.

By creating multiple shards, you can parallelize upload of a large dataset. From 2 to 4 shards per one machine is a reasonable number.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""shard_number"": 2

}

```



```python
Each node knows where all parts of the collection are stored through the [consensus protocol](./#raft), so when you send a search request to one Qdrant node, it automatically queries all other nodes to obtain the full search result.



When you create a collection, Qdrant splits the collection into `shard_number` shards. If left unset, `shard_number` is set to the number of nodes in your cluster:



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 300,
```csharp

using Qdrant.Client;

using Qdrant.Client.Grpc;



var client = new QdrantClient(""localhost"", 6334);



await client.CreateCollectionAsync(

	collectionName: ""{collection_name}"",

	vectorsConfig: new VectorParams { Size = 300, Distance = Distance.Cosine },

	shardNumber: 6,

	replicationFactor: 2

);

```



This code sample creates a collection with a total of 6 logical shards backed by a total of 12 physical shards.
This works in the other direction as well. Whenever you search for something, you can specify a shard or several shards and Qdrant will know where to find them. It will avoid asking all machines in your cluster for results. This will minimize overhead and maximize performance. 



### Common use cases
Qdrant is built to excel in a single collection with a vast number of tenants. You should only create multiple collections when your data is not homogenous or if users' vectors are created by different embedding models. Creating too many collections may result in resource overhead and cause dependencies. This can increase costs and affect overall performance. 



## Sharding your database",0.2768595041322314,0.6090909090909091,0.38068181818181823,0.07468879668049792,0.1651376146788991,0.10285714285714286,0.1446280991735537,0.3181818181818182,0.19886363636363633,0.2603305785123967,0.5727272727272728,0.35795454545454547,0.8647803664207458,0.575911283493042,0.6244428157806396,0.5991959571838379,0.7648229795740917,0.2816823244094848,262,2.2782608695652176,0.33078566761712735
True,,5157.975,ec9e898c,How is the discovery score computed in the context provided?,"In the context provided, the discovery score is computed using the formula: 

Discovery Score = sigmoid(s(v_t)) + Σ rank(v_i^+, v_i^-)

Here, s(v_t) represents the similarity function of the target vector, and v_i^+ and v_i^- represent the positive and negative examples, respectively. The sigmoid function is utilized to normalize the score within the range of 0 to 1. The sum of ranks is used to penalize vectors that are closer to negative examples than to positive ones. This means that the sum of individual ranks determines how many positive zones a point is in, while the closeness hierarchy serves as a secondary factor in the computation of the discovery score.","The discovery score is computed in the provided context as follows:

1. The rank between a positive example $v^+$ and a negative example $v^-$ is determined based on their similarity scores: 
   - If $s(v^+) \geq s(v^-)$, the rank is 1.
   - If $s(v^+) < s(v^-)$, the rank is -1.

2. The discovery score is then calculated using the sigmoid function applied to the similarity score of the target vector $v_t$ and the sum of ranks for all positive-negative pairs in the context:
   
   $$\text{discovery score} = \text{sigmoid}(s(v_t)) + \sum \text{rank}(v_i^+, v_i^-),$$

   where $v_i^+$ and $v_i^-$ represent positive and negative examples in the context, respectively.

This computation allows for evaluating the relevance of points in the collection to a target vector while considering the specified positive-negative pairs as constraints in the search.","$$

\text{rank}(v^+, v^-) = \begin{cases}

    1, &\quad s(v^+) \geq s(v^-) \\\\

    -1, &\quad s(v^+) < s(v^-)

\end{cases}

$$

where $v^+$ represents a positive example, $v^-$ represents a negative example, and $s(v)$ is the similarity score of a vector $v$ to the target vector. The discovery score is then computed as:

$$

 \text{discovery score} = \text{sigmoid}(s(v_t))+ \sum \text{rank}(v_i^+, v_i^-),

$$
The interface for providing context is similar to the recommendation API (ids or raw vectors). Still, in this case, they need to be provided in the form of positive-negative pairs.



Discovery API lets you do two new types of search:

- **Discovery search**: Uses the context (the pairs of positive-negative vectors) and a target to return the points more similar to the target, but constrained by the context.
client

    .discover(&DiscoverPoints {

        collection_name: ""{collection_name}"".to_string(),

        context: vec![

            ContextExamplePair {

                positive: Some(VectorExample {

                    example: Some(Example::Id(100.into())),

                }),

                negative: Some(VectorExample {

                    example: Some(Example::Id(718.into())),

                }),

            },

            ContextExamplePair {
The Discovery API can be used in two ways - either with or without the target point. The first case is called a **discovery search**, while the second is called a **context search**.



#### Discovery search



*Discovery search* is an operation that uses a target point to find the most relevant points in the collection, while performing the search in the preferred areas only. That is basically a search operation with more control over the search space.
```json

{

  ""result"": [

    [

        { ""id"": 10, ""score"": 0.81 },

        { ""id"": 14, ""score"": 0.75 },

        { ""id"": 11, ""score"": 0.73 }

    ],

    [

        { ""id"": 1, ""score"": 0.92 },

        { ""id"": 3, ""score"": 0.89 },

        { ""id"": 9, ""score"": 0.75 }

    ]

  ],

  ""status"": ""ok"",

  ""time"": 0.001

}

```



## Discovery API



*Available as of v1.7*



REST API Schema definition available [here](https://qdrant.github.io/qdrant/redoc/index.html#tag/points/operation/discover_points)","['$$\n\n\\text{rank}(v^+, v^-) = \\begin{cases}\n\n    1, &\\quad s(v^+) \\geq s(v^-) \\\\\\\\\n\n    -1, &\\quad s(v^+) < s(v^-)\n\n\\end{cases}\n\n$$\n\nwhere $v^+$ represents a positive example, $v^-$ represents a negative example, and $s(v)$ is the similarity score of a vector $v$ to the target vector. The discovery score is then computed as:\n\n$$\n\n \\text{discovery score} = \\text{sigmoid}(s(v_t))+ \\sum \\text{rank}(v_i^+, v_i^-),\n\n$$', 'The interface for providing context is similar to the recommendation API (ids or raw vectors). Still, in this case, they need to be provided in the form of positive-negative pairs.\n\n\n\nDiscovery API lets you do two new types of search:\n\n- **Discovery search**: Uses the context (the pairs of positive-negative vectors) and a target to return the points more similar to the target, but constrained by the context.', 'client\n\n    .discover(&DiscoverPoints {\n\n        collection_name: ""{collection_name}"".to_string(),\n\n        context: vec![\n\n            ContextExamplePair {\n\n                positive: Some(VectorExample {\n\n                    example: Some(Example::Id(100.into())),\n\n                }),\n\n                negative: Some(VectorExample {\n\n                    example: Some(Example::Id(718.into())),\n\n                }),\n\n            },\n\n            ContextExamplePair {', 'The Discovery API can be used in two ways - either with or without the target point. The first case is called a **discovery search**, while the second is called a **context search**.\n\n\n\n#### Discovery search\n\n\n\n*Discovery search* is an operation that uses a target point to find the most relevant points in the collection, while performing the search in the preferred areas only. That is basically a search operation with more control over the search space.', '```json\n\n{\n\n  ""result"": [\n\n    [\n\n        { ""id"": 10, ""score"": 0.81 },\n\n        { ""id"": 14, ""score"": 0.75 },\n\n        { ""id"": 11, ""score"": 0.73 }\n\n    ],\n\n    [\n\n        { ""id"": 1, ""score"": 0.92 },\n\n        { ""id"": 3, ""score"": 0.89 },\n\n        { ""id"": 9, ""score"": 0.75 }\n\n    ]\n\n  ],\n\n  ""status"": ""ok"",\n\n  ""time"": 0.001\n\n}\n\n```\n\n\n\n## Discovery API\n\n\n\n*Available as of v1.7*\n\n\n\nREST API Schema definition available [here](https://qdrant.github.io/qdrant/redoc/index.html#tag/points/operation/discover_points)']","Question: How is the discovery score computed in the context provided?\n\nContext: $$

\text{rank}(v^+, v^-) = \begin{cases}

1, &\quad s(v^+) \geq s(v^-) \\\\

-1, &\quad s(v^+) < s(v^-)

\end{cases}

$$

where $v^+$ represents a positive example, $v^-$ represents a negative example, and $s(v)$ is the similarity score of a vector $v$ to the target vector. The discovery score is then computed as:

$$

\text{discovery score} = \text{sigmoid}(s(v_t))+ \sum \text{rank}(v_i^+, v_i^-),

$$
The interface for providing context is similar to the recommendation API (ids or raw vectors). Still, in this case, they need to be provided in the form of positive-negative pairs.



Discovery API lets you do two new types of search:

- **Discovery search**: Uses the context (the pairs of positive-negative vectors) and a target to return the points more similar to the target, but constrained by the context.
client

.discover(&DiscoverPoints {

collection_name: ""{collection_name}"".to_string(),

context: vec![

ContextExamplePair {

positive: Some(VectorExample {

example: Some(Example::Id(100.into())),

}),

negative: Some(VectorExample {

example: Some(Example::Id(718.into())),

}),

},

ContextExamplePair {
The Discovery API can be used in two ways - either with or without the target point. The first case is called a **discovery search**, while the second is called a **context search**.



#### Discovery search



*Discovery search* is an operation that uses a target point to find the most relevant points in the collection, while performing the search in the preferred areas only. That is basically a search operation with more control over the search space.
```json

{

""result"": [

[

{ ""id"": 10, ""score"": 0.81 },

{ ""id"": 14, ""score"": 0.75 },

{ ""id"": 11, ""score"": 0.73 }

],

[

{ ""id"": 1, ""score"": 0.92 },

{ ""id"": 3, ""score"": 0.89 },

{ ""id"": 9, ""score"": 0.75 }

]

],

""status"": ""ok"",

""time"": 0.001

}

```



## Discovery API



*Available as of v1.7*



REST API Schema definition available [here](https://qdrant.github.io/qdrant/redoc/index.html#tag/points/operation/discover_points)\n\nAnswer:",How is the discovery score computed in the context provided?,"In the context provided, the discovery score is computed using the formula: 

Discovery Score = sigmoid(s(v_t)) + Σ rank(v_i^+, v_i^-)

Here, s(v_t) represents the similarity function of the target vector, and v_i^+ and v_i^- represent the positive and negative examples, respectively. The sigmoid function is utilized to normalize the score within the range of 0 to 1. The sum of ranks is used to penalize vectors that are closer to negative examples than to positive ones. This means that the sum of individual ranks determines how many positive zones a point is in, while the closeness hierarchy serves as a secondary factor in the computation of the discovery score.","['$$\n\n\\text{rank}(v^+, v^-) = \\begin{cases}\n\n    1, &\\quad s(v^+) \\geq s(v^-) \\\\\\\\\n\n    -1, &\\quad s(v^+) < s(v^-)\n\n\\end{cases}\n\n$$\n\nwhere $v^+$ represents a positive example, $v^-$ represents a negative example, and $s(v)$ is the similarity score of a vector $v$ to the target vector. The discovery score is then computed as:\n\n$$\n\n \\text{discovery score} = \\text{sigmoid}(s(v_t))+ \\sum \\text{rank}(v_i^+, v_i^-),\n\n$$', 'The interface for providing context is similar to the recommendation API (ids or raw vectors). Still, in this case, they need to be provided in the form of positive-negative pairs.\n\n\n\nDiscovery API lets you do two new types of search:\n\n- **Discovery search**: Uses the context (the pairs of positive-negative vectors) and a target to return the points more similar to the target, but constrained by the context.', 'client\n\n    .discover(&DiscoverPoints {\n\n        collection_name: ""{collection_name}"".to_string(),\n\n        context: vec![\n\n            ContextExamplePair {\n\n                positive: Some(VectorExample {\n\n                    example: Some(Example::Id(100.into())),\n\n                }),\n\n                negative: Some(VectorExample {\n\n                    example: Some(Example::Id(718.into())),\n\n                }),\n\n            },\n\n            ContextExamplePair {', 'The Discovery API can be used in two ways - either with or without the target point. The first case is called a **discovery search**, while the second is called a **context search**.\n\n\n\n#### Discovery search\n\n\n\n*Discovery search* is an operation that uses a target point to find the most relevant points in the collection, while performing the search in the preferred areas only. That is basically a search operation with more control over the search space.', '```json\n\n{\n\n  ""result"": [\n\n    [\n\n        { ""id"": 10, ""score"": 0.81 },\n\n        { ""id"": 14, ""score"": 0.75 },\n\n        { ""id"": 11, ""score"": 0.73 }\n\n    ],\n\n    [\n\n        { ""id"": 1, ""score"": 0.92 },\n\n        { ""id"": 3, ""score"": 0.89 },\n\n        { ""id"": 9, ""score"": 0.75 }\n\n    ]\n\n  ],\n\n  ""status"": ""ok"",\n\n  ""time"": 0.001\n\n}\n\n```\n\n\n\n## Discovery API\n\n\n\n*Available as of v1.7*\n\n\n\nREST API Schema definition available [here](https://qdrant.github.io/qdrant/redoc/index.html#tag/points/operation/discover_points)']","$$

\text{rank}(v^+, v^-) = \begin{cases}

    1, &\quad s(v^+) \geq s(v^-) \\\\

    -1, &\quad s(v^+) < s(v^-)

\end{cases}

$$

where $v^+$ represents a positive example, $v^-$ represents a negative example, and $s(v)$ is the similarity score of a vector $v$ to the target vector. The discovery score is then computed as:

$$

 \text{discovery score} = \text{sigmoid}(s(v_t))+ \sum \text{rank}(v_i^+, v_i^-),

$$
The interface for providing context is similar to the recommendation API (ids or raw vectors). Still, in this case, they need to be provided in the form of positive-negative pairs.



Discovery API lets you do two new types of search:

- **Discovery search**: Uses the context (the pairs of positive-negative vectors) and a target to return the points more similar to the target, but constrained by the context.
client

    .discover(&DiscoverPoints {

        collection_name: ""{collection_name}"".to_string(),

        context: vec![

            ContextExamplePair {

                positive: Some(VectorExample {

                    example: Some(Example::Id(100.into())),

                }),

                negative: Some(VectorExample {

                    example: Some(Example::Id(718.into())),

                }),

            },

            ContextExamplePair {
The Discovery API can be used in two ways - either with or without the target point. The first case is called a **discovery search**, while the second is called a **context search**.



#### Discovery search



*Discovery search* is an operation that uses a target point to find the most relevant points in the collection, while performing the search in the preferred areas only. That is basically a search operation with more control over the search space.
```json

{

  ""result"": [

    [

        { ""id"": 10, ""score"": 0.81 },

        { ""id"": 14, ""score"": 0.75 },

        { ""id"": 11, ""score"": 0.73 }

    ],

    [

        { ""id"": 1, ""score"": 0.92 },

        { ""id"": 3, ""score"": 0.89 },

        { ""id"": 9, ""score"": 0.75 }

    ]

  ],

  ""status"": ""ok"",

  ""time"": 0.001

}

```



## Discovery API



*Available as of v1.7*



REST API Schema definition available [here](https://qdrant.github.io/qdrant/redoc/index.html#tag/points/operation/discover_points)",0.5483870967741935,0.68,0.6071428571428571,0.25203252032520324,0.31313131313131315,0.2792792792792793,0.28225806451612906,0.35,0.3125,0.46774193548387094,0.58,0.5178571428571428,0.9377396702766418,0.6338024735450745,0.6386867165565491,0.636235237121582,0.8036862686276436,0.8696578262994686,135,1.2162162162162162,0.52241467296129
True,,4030.1059999999998,c530638f,How does Qdrant optimize storage at the segment level?,"Qdrant optimizes storage at the segment level by applying changes in batches rather than individually. When optimization is needed, the segment to be optimized remains readable during the rebuild process. This is achieved by wrapping the segment into a proxy that handles data changes transparently. Changed data is placed in a copy-on-write segment, prioritizing retrieval and subsequent updates. This approach ensures efficiency in storage optimization within Qdrant.","Qdrant optimizes storage at the segment level by utilizing various techniques such as creating temporary segments, implementing copy-on-write segments during optimization, and maintaining at least one small segment for frequently updated data. However, too many small segments can lead to suboptimal search performance. To address this issue, Qdrant employs the Merge Optimizer to combine the smallest segments into larger ones when too many segments are created.

Starting from version 1.1.0, Qdrant offers the optimization of memory by compressing embeddings using Scalar Quantization. This technique reduces the memory footprint by a factor of 4 and speeds up the search process by leveraging SIMD CPU instructions for fast vector comparison with 8-bit integers. This optimization not only positively impacts memory usage but also enhances performance.

Qdrant also provides the option to enable io_uring for asynchronous operations in the configuration, which can further improve disk IO performance. By leveraging these storage efficiency optimizations, Qdrant can efficiently store large amounts of data while delivering cost savings on hardware and maintaining a responsive system even with extensive datasets.","The service may require the creation of temporary segments.

Such segments, for example, are created as copy-on-write segments during optimization itself.



It is also essential to have at least one small segment that Qdrant will use to store frequently updated data.

On the other hand, too many small segments lead to suboptimal search performance.



There is the Merge Optimizer, which combines the smallest segments into one large segment. It is used if too many segments are created.
```



While Qdrant offers various options to store some parts of the data on disk, starting 

from version 1.1.0, you can also optimize your memory by compressing the embeddings. 

We've implemented the mechanism of **Scalar Quantization**! It turns out to have not 

only a positive impact on memory but also on the performance. 



## Scalar Quantization



Scalar quantization is a data compression technique that converts floating point values
However unless the collection resides fully in memory, this optimization

method generates significant disk IO, so it is a prime candidate for possible

improvements.



If you run Qdrant on Linux, you can enable io\_uring with the following in your

configuration:



```yaml

# within the storage config

storage:

	# enable the async scorer which uses io_uring

	async_scorer: true

```



You can return to the mmap based backend by either deleting the `async_scorer`
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
Qdrant’s storage efficiency delivers cost savings on hardware while ensuring a responsive system even with extensive data sets. In an independent benchmark stress test, Pienso discovered that Qdrant could efficiently store 128 million documents, consuming a mere 20.4GB of storage and only 1.25GB of memory","['The service may require the creation of temporary segments.\n\nSuch segments, for example, are created as copy-on-write segments during optimization itself.\n\n\n\nIt is also essential to have at least one small segment that Qdrant will use to store frequently updated data.\n\nOn the other hand, too many small segments lead to suboptimal search performance.\n\n\n\nThere is the Merge Optimizer, which combines the smallest segments into one large segment. It is used if too many segments are created.', ""```\n\n\n\nWhile Qdrant offers various options to store some parts of the data on disk, starting \n\nfrom version 1.1.0, you can also optimize your memory by compressing the embeddings. \n\nWe've implemented the mechanism of **Scalar Quantization**! It turns out to have not \n\nonly a positive impact on memory but also on the performance. \n\n\n\n## Scalar Quantization\n\n\n\nScalar quantization is a data compression technique that converts floating point values"", 'However unless the collection resides fully in memory, this optimization\n\nmethod generates significant disk IO, so it is a prime candidate for possible\n\nimprovements.\n\n\n\nIf you run Qdrant on Linux, you can enable io\\_uring with the following in your\n\nconfiguration:\n\n\n\n```yaml\n\n# within the storage config\n\nstorage:\n\n\t# enable the async scorer which uses io_uring\n\n\tasync_scorer: true\n\n```\n\n\n\nYou can return to the mmap based backend by either deleting the `async_scorer`', 'Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.\n\n\n\nIn addition to reducing the memory footprint, scalar quantization also speeds up the search process.\n\nQdrant uses a special SIMD CPU instruction to perform fast vector comparison.\n\nThis instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.', 'Qdrant’s storage efficiency delivers cost savings on hardware while ensuring a responsive system even with extensive data sets. In an independent benchmark stress test, Pienso discovered that Qdrant could efficiently store 128 million documents, consuming a mere 20.4GB of storage and only 1.25GB of memory']","Question: How does Qdrant optimize storage at the segment level?\n\nContext: The service may require the creation of temporary segments.

Such segments, for example, are created as copy-on-write segments during optimization itself.



It is also essential to have at least one small segment that Qdrant will use to store frequently updated data.

On the other hand, too many small segments lead to suboptimal search performance.



There is the Merge Optimizer, which combines the smallest segments into one large segment. It is used if too many segments are created.
```



While Qdrant offers various options to store some parts of the data on disk, starting 

from version 1.1.0, you can also optimize your memory by compressing the embeddings. 

We've implemented the mechanism of **Scalar Quantization**! It turns out to have not 

only a positive impact on memory but also on the performance. 



## Scalar Quantization



Scalar quantization is a data compression technique that converts floating point values
However unless the collection resides fully in memory, this optimization

method generates significant disk IO, so it is a prime candidate for possible

improvements.



If you run Qdrant on Linux, you can enable io\_uring with the following in your

configuration:



```yaml

# within the storage config

storage:

# enable the async scorer which uses io_uring

async_scorer: true

```



You can return to the mmap based backend by either deleting the `async_scorer`
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
Qdrant’s storage efficiency delivers cost savings on hardware while ensuring a responsive system even with extensive data sets. In an independent benchmark stress test, Pienso discovered that Qdrant could efficiently store 128 million documents, consuming a mere 20.4GB of storage and only 1.25GB of memory\n\nAnswer:",How does Qdrant optimize storage at the segment level?,"Qdrant optimizes storage at the segment level by applying changes in batches rather than individually. When optimization is needed, the segment to be optimized remains readable during the rebuild process. This is achieved by wrapping the segment into a proxy that handles data changes transparently. Changed data is placed in a copy-on-write segment, prioritizing retrieval and subsequent updates. This approach ensures efficiency in storage optimization within Qdrant.","['The service may require the creation of temporary segments.\n\nSuch segments, for example, are created as copy-on-write segments during optimization itself.\n\n\n\nIt is also essential to have at least one small segment that Qdrant will use to store frequently updated data.\n\nOn the other hand, too many small segments lead to suboptimal search performance.\n\n\n\nThere is the Merge Optimizer, which combines the smallest segments into one large segment. It is used if too many segments are created.', ""```\n\n\n\nWhile Qdrant offers various options to store some parts of the data on disk, starting \n\nfrom version 1.1.0, you can also optimize your memory by compressing the embeddings. \n\nWe've implemented the mechanism of **Scalar Quantization**! It turns out to have not \n\nonly a positive impact on memory but also on the performance. \n\n\n\n## Scalar Quantization\n\n\n\nScalar quantization is a data compression technique that converts floating point values"", 'However unless the collection resides fully in memory, this optimization\n\nmethod generates significant disk IO, so it is a prime candidate for possible\n\nimprovements.\n\n\n\nIf you run Qdrant on Linux, you can enable io\\_uring with the following in your\n\nconfiguration:\n\n\n\n```yaml\n\n# within the storage config\n\nstorage:\n\n\t# enable the async scorer which uses io_uring\n\n\tasync_scorer: true\n\n```\n\n\n\nYou can return to the mmap based backend by either deleting the `async_scorer`', 'Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.\n\n\n\nIn addition to reducing the memory footprint, scalar quantization also speeds up the search process.\n\nQdrant uses a special SIMD CPU instruction to perform fast vector comparison.\n\nThis instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.', 'Qdrant’s storage efficiency delivers cost savings on hardware while ensuring a responsive system even with extensive data sets. In an independent benchmark stress test, Pienso discovered that Qdrant could efficiently store 128 million documents, consuming a mere 20.4GB of storage and only 1.25GB of memory']","The service may require the creation of temporary segments.

Such segments, for example, are created as copy-on-write segments during optimization itself.



It is also essential to have at least one small segment that Qdrant will use to store frequently updated data.

On the other hand, too many small segments lead to suboptimal search performance.



There is the Merge Optimizer, which combines the smallest segments into one large segment. It is used if too many segments are created.
```



While Qdrant offers various options to store some parts of the data on disk, starting 

from version 1.1.0, you can also optimize your memory by compressing the embeddings. 

We've implemented the mechanism of **Scalar Quantization**! It turns out to have not 

only a positive impact on memory but also on the performance. 



## Scalar Quantization



Scalar quantization is a data compression technique that converts floating point values
However unless the collection resides fully in memory, this optimization

method generates significant disk IO, so it is a prime candidate for possible

improvements.



If you run Qdrant on Linux, you can enable io\_uring with the following in your

configuration:



```yaml

# within the storage config

storage:

	# enable the async scorer which uses io_uring

	async_scorer: true

```



You can return to the mmap based backend by either deleting the `async_scorer`
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
Qdrant’s storage efficiency delivers cost savings on hardware while ensuring a responsive system even with extensive data sets. In an independent benchmark stress test, Pienso discovered that Qdrant could efficiently store 128 million documents, consuming a mere 20.4GB of storage and only 1.25GB of memory",0.1893491124260355,0.5079365079365079,0.27586206896551724,0.05952380952380952,0.16129032258064516,0.08695652173913043,0.11834319526627218,0.31746031746031744,0.1724137931034483,0.1834319526627219,0.49206349206349204,0.2672413793103448,0.797453761100769,0.5700231194496155,0.6529420018196106,0.6086715459823608,0.9868870644422714,0.5737205293029547,173,2.582089552238806,0.2366950223122576
True,,1315.364,9ba2701d,What is the purpose of the Vacuum Optimizer in the Qdrant database system?,"The Vacuum Optimizer in the Qdrant database system is utilized to address the issue of accumulated deleted records within segments. When records are marked as deleted instead of being immediately removed, they can accumulate over time, occupying memory and slowing down the system. The Vacuum Optimizer is triggered when a segment has accumulated a significant number of deleted records, as defined by the criteria set in the configuration file. This optimizer helps in optimizing segments by removing these accumulated deleted records, thereby improving system performance and efficiency. The configuration file specifies parameters such as the minimal fraction of deleted vectors and the minimal number of vectors in a segment required to trigger the Vacuum Optimizer. By running the Vacuum Optimizer, the system can effectively manage and optimize segments to prevent performance degradation due to accumulated deleted records.","The purpose of the Vacuum Optimizer in the Qdrant database system is to address the accumulation of deleted records in segments over time. This accumulation of deleted records can occupy memory and slow down the system. The Vacuum Optimizer is used to reclaim memory by removing these deleted records from segments, thereby optimizing storage and improving system performance.","Like many other databases, Qdrant does not delete entries immediately after a query.

Instead, it marks records as deleted and ignores them for future queries.



This strategy allows us to minimize disk access - one of the slowest operations.

However, a side effect of this strategy is that, over time, deleted records accumulate, occupy memory and slow down the system.



To avoid these adverse effects, Vacuum Optimizer is used.

It is used if the segment has accumulated too many deleted records.
---

title: Optimizer

weight: 70

aliases:

  - ../optimizer

---



# Optimizer



It is much more efficient to apply changes in batches than perform each change individually, as many other databases do. Qdrant here is no exception. Since Qdrant operates with data structures that are not always easy to change, it is sometimes necessary to rebuild those structures completely.



Storage optimization in Qdrant occurs at the segment level (see [storage](../storage)).
Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.





### Efficient Query Processing
Conversely, the only up-front investment with vector databases is the indexing (which requires more compute). After this step, everything else is a breeze. Once setup, Qdrant easily scales via [features like Multitenancy and Sharding](https://qdrant.tech/articles/multitenancy/). This lets you scale up your reliance on the vector retrieval process and minimize your use of the compute-heavy LLMs. As an optimization  measure, Qdrant is irreplaceable. 



Julien Simon from HuggingFace says it best:
Qdrant is designed to handle large-scale datasets with billions of data points. Its architecture employs techniques like binary and scalar quantization for efficient storage and retrieval. When you inject FastEmbed’s CPU-first design and lightweight nature into this equation, you end up with a system that can scale seamlessly while maintaining low latency.



## Summary","['Like many other databases, Qdrant does not delete entries immediately after a query.\n\nInstead, it marks records as deleted and ignores them for future queries.\n\n\n\nThis strategy allows us to minimize disk access - one of the slowest operations.\n\nHowever, a side effect of this strategy is that, over time, deleted records accumulate, occupy memory and slow down the system.\n\n\n\nTo avoid these adverse effects, Vacuum Optimizer is used.\n\nIt is used if the segment has accumulated too many deleted records.', '---\n\ntitle: Optimizer\n\nweight: 70\n\naliases:\n\n  - ../optimizer\n\n---\n\n\n\n# Optimizer\n\n\n\nIt is much more efficient to apply changes in batches than perform each change individually, as many other databases do. Qdrant here is no exception. Since Qdrant operates with data structures that are not always easy to change, it is sometimes necessary to rebuild those structures completely.\n\n\n\nStorage optimization in Qdrant occurs at the segment level (see [storage](../storage)).', ""Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.\n\n\n\n\n\n### Efficient Query Processing"", 'Conversely, the only up-front investment with vector databases is the indexing (which requires more compute). After this step, everything else is a breeze. Once setup, Qdrant easily scales via [features like Multitenancy and Sharding](https://qdrant.tech/articles/multitenancy/). This lets you scale up your reliance on the vector retrieval process and minimize your use of the compute-heavy LLMs. As an optimization  measure, Qdrant is irreplaceable. \n\n\n\nJulien Simon from HuggingFace says it best:', 'Qdrant is designed to handle large-scale datasets with billions of data points. Its architecture employs techniques like binary and scalar quantization for efficient storage and retrieval. When you inject FastEmbed’s CPU-first design and lightweight nature into this equation, you end up with a system that can scale seamlessly while maintaining low latency.\n\n\n\n## Summary']","Question: What is the purpose of the Vacuum Optimizer in the Qdrant database system?\n\nContext: Like many other databases, Qdrant does not delete entries immediately after a query.

Instead, it marks records as deleted and ignores them for future queries.



This strategy allows us to minimize disk access - one of the slowest operations.

However, a side effect of this strategy is that, over time, deleted records accumulate, occupy memory and slow down the system.



To avoid these adverse effects, Vacuum Optimizer is used.

It is used if the segment has accumulated too many deleted records.
---

title: Optimizer

weight: 70

aliases:

- ../optimizer

---



# Optimizer



It is much more efficient to apply changes in batches than perform each change individually, as many other databases do. Qdrant here is no exception. Since Qdrant operates with data structures that are not always easy to change, it is sometimes necessary to rebuild those structures completely.



Storage optimization in Qdrant occurs at the segment level (see [storage](../storage)).
Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.





### Efficient Query Processing
Conversely, the only up-front investment with vector databases is the indexing (which requires more compute). After this step, everything else is a breeze. Once setup, Qdrant easily scales via [features like Multitenancy and Sharding](https://qdrant.tech/articles/multitenancy/). This lets you scale up your reliance on the vector retrieval process and minimize your use of the compute-heavy LLMs. As an optimization  measure, Qdrant is irreplaceable. 



Julien Simon from HuggingFace says it best:
Qdrant is designed to handle large-scale datasets with billions of data points. Its architecture employs techniques like binary and scalar quantization for efficient storage and retrieval. When you inject FastEmbed’s CPU-first design and lightweight nature into this equation, you end up with a system that can scale seamlessly while maintaining low latency.



## Summary\n\nAnswer:",What is the purpose of the Vacuum Optimizer in the Qdrant database system?,"The Vacuum Optimizer in the Qdrant database system is utilized to address the issue of accumulated deleted records within segments. When records are marked as deleted instead of being immediately removed, they can accumulate over time, occupying memory and slowing down the system. The Vacuum Optimizer is triggered when a segment has accumulated a significant number of deleted records, as defined by the criteria set in the configuration file. This optimizer helps in optimizing segments by removing these accumulated deleted records, thereby improving system performance and efficiency. The configuration file specifies parameters such as the minimal fraction of deleted vectors and the minimal number of vectors in a segment required to trigger the Vacuum Optimizer. By running the Vacuum Optimizer, the system can effectively manage and optimize segments to prevent performance degradation due to accumulated deleted records.","['Like many other databases, Qdrant does not delete entries immediately after a query.\n\nInstead, it marks records as deleted and ignores them for future queries.\n\n\n\nThis strategy allows us to minimize disk access - one of the slowest operations.\n\nHowever, a side effect of this strategy is that, over time, deleted records accumulate, occupy memory and slow down the system.\n\n\n\nTo avoid these adverse effects, Vacuum Optimizer is used.\n\nIt is used if the segment has accumulated too many deleted records.', '---\n\ntitle: Optimizer\n\nweight: 70\n\naliases:\n\n  - ../optimizer\n\n---\n\n\n\n# Optimizer\n\n\n\nIt is much more efficient to apply changes in batches than perform each change individually, as many other databases do. Qdrant here is no exception. Since Qdrant operates with data structures that are not always easy to change, it is sometimes necessary to rebuild those structures completely.\n\n\n\nStorage optimization in Qdrant occurs at the segment level (see [storage](../storage)).', ""Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.\n\n\n\n\n\n### Efficient Query Processing"", 'Conversely, the only up-front investment with vector databases is the indexing (which requires more compute). After this step, everything else is a breeze. Once setup, Qdrant easily scales via [features like Multitenancy and Sharding](https://qdrant.tech/articles/multitenancy/). This lets you scale up your reliance on the vector retrieval process and minimize your use of the compute-heavy LLMs. As an optimization  measure, Qdrant is irreplaceable. \n\n\n\nJulien Simon from HuggingFace says it best:', 'Qdrant is designed to handle large-scale datasets with billions of data points. Its architecture employs techniques like binary and scalar quantization for efficient storage and retrieval. When you inject FastEmbed’s CPU-first design and lightweight nature into this equation, you end up with a system that can scale seamlessly while maintaining low latency.\n\n\n\n## Summary']","Like many other databases, Qdrant does not delete entries immediately after a query.

Instead, it marks records as deleted and ignores them for future queries.



This strategy allows us to minimize disk access - one of the slowest operations.

However, a side effect of this strategy is that, over time, deleted records accumulate, occupy memory and slow down the system.



To avoid these adverse effects, Vacuum Optimizer is used.

It is used if the segment has accumulated too many deleted records.
---

title: Optimizer

weight: 70

aliases:

  - ../optimizer

---



# Optimizer



It is much more efficient to apply changes in batches than perform each change individually, as many other databases do. Qdrant here is no exception. Since Qdrant operates with data structures that are not always easy to change, it is sometimes necessary to rebuild those structures completely.



Storage optimization in Qdrant occurs at the segment level (see [storage](../storage)).
Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.





### Efficient Query Processing
Conversely, the only up-front investment with vector databases is the indexing (which requires more compute). After this step, everything else is a breeze. Once setup, Qdrant easily scales via [features like Multitenancy and Sharding](https://qdrant.tech/articles/multitenancy/). This lets you scale up your reliance on the vector retrieval process and minimize your use of the compute-heavy LLMs. As an optimization  measure, Qdrant is irreplaceable. 



Julien Simon from HuggingFace says it best:
Qdrant is designed to handle large-scale datasets with billions of data points. Its architecture employs techniques like binary and scalar quantization for efficient storage and retrieval. When you inject FastEmbed’s CPU-first design and lightweight nature into this equation, you end up with a system that can scale seamlessly while maintaining low latency.



## Summary",0.8846153846153846,0.38016528925619836,0.5317919075144508,0.5098039215686274,0.21666666666666667,0.30409356725146197,0.6346153846153846,0.2727272727272727,0.3815028901734104,0.8846153846153846,0.38016528925619836,0.5317919075144508,0.9202863574028015,0.7859674692153931,0.6706036329269409,0.7237170338630676,0.9984356672503054,0.8472523484233534,58,0.4233576642335766,0.4866169672028085
True,,1829.3200000000002,7722a10d,What is the purpose of the `payload` field in the data points?,"The `payload` field in the data points being upserted using the QdrantClient serves as a container for additional metadata or information related to the vector data being stored. It allows users to associate supplementary details with each data point, such as the city name, price, or any other custom attributes that provide context or additional insights into the vector data. This metadata can be used for filtering, searching, or categorizing the vectors during retrieval or query operations, enabling more efficient and targeted data analysis and retrieval processes. In the examples given, the `payload` field includes information like city names, prices, and other relevant details specific to each data point, enhancing the overall utility and relevance of the stored vector data.","The purpose of the `payload` field in the data points is to store additional information that is associated with the vectors. This information can be used to provide context or metadata about the vectors, which can then be used in searches, grouping, or any other operations that require additional data beyond the vectors themselves. The payload allows for more flexibility and customization in how data points are managed and manipulated within the system.","## Payload



A [Payload](/documentation/concepts/payload/) describes information that you can store with vectors.



## Points



[Points](/documentation/concepts/points/) are a record which consists of a vector and an optional payload. 



## Search



[Search](/documentation/concepts/search/) describes _similarity search_, which set up related objects close to each other in vector space.



## Explore
""with_payload"": [""title"", ""text""],



        // Options for specifying what to bring from the vector(s) 

        // of the looked up point, true by default

        ""with_vectors: false

    }

}

```



```python

client.search_groups(

    collection_name=""chunks"",

    # Same as in the regular search() API

    query_vector=[1.1],

    # Grouping parameters

    group_by=""document_id"",  # Path of the field to group by

    limit=2,  # Max amount of groups
```http

POST /collections/{collection_name}/points/payload

{

    ""payload"": {

        ""property1"": ""string"",

        ""property2"": ""string""

    },

    ""filter"": {

        ""must"": [

            {

                ""key"": ""color"",

                ""match"": {

                    ""value"": ""red""

                }

            }

        ]

    }

}

```



```python

client.set_payload(

    collection_name=""{collection_name}"",

    payload={

        ""property1"": ""string"",
and



```http

PUT /collections/{collection_name}/points

{

    ""points"": [

        {

            ""id"": 1,

            ""payload"": {""color"": ""red""},

            ""vector"": [0.9, 0.1, 0.1]

        }

    ]

}

```



```python

client.upsert(

    collection_name=""{collection_name}"",

    points=[

        models.PointStruct(

            id=1,

            payload={

                ""color"": ""red"",

            },

            vector=[0.9, 0.1, 0.1],

        ),

    ],

)

```



```typescript
```http

PUT /collections/{collection_name}/points

{

    ""points"": [

        {

            ""id"": 1,

            ""vector"": [0.05, 0.61, 0.76, 0.74],

            ""payload"": {""city"": ""Berlin"", ""price"": 1.99}

        },

        {

            ""id"": 2,

            ""vector"": [0.19, 0.81, 0.75, 0.11],

            ""payload"": {""city"": [""Berlin"", ""London""], ""price"": 1.99}

        },

        {

            ""id"": 3,

            ""vector"": [0.36, 0.55, 0.47, 0.94],","['## Payload\n\n\n\nA [Payload](/documentation/concepts/payload/) describes information that you can store with vectors.\n\n\n\n## Points\n\n\n\n[Points](/documentation/concepts/points/) are a record which consists of a vector and an optional payload. \n\n\n\n## Search\n\n\n\n[Search](/documentation/concepts/search/) describes _similarity search_, which set up related objects close to each other in vector space.\n\n\n\n## Explore', '""with_payload"": [""title"", ""text""],\n\n\n\n        // Options for specifying what to bring from the vector(s) \n\n        // of the looked up point, true by default\n\n        ""with_vectors: false\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.search_groups(\n\n    collection_name=""chunks"",\n\n    # Same as in the regular search() API\n\n    query_vector=[1.1],\n\n    # Grouping parameters\n\n    group_by=""document_id"",  # Path of the field to group by\n\n    limit=2,  # Max amount of groups', '```http\n\nPOST /collections/{collection_name}/points/payload\n\n{\n\n    ""payload"": {\n\n        ""property1"": ""string"",\n\n        ""property2"": ""string""\n\n    },\n\n    ""filter"": {\n\n        ""must"": [\n\n            {\n\n                ""key"": ""color"",\n\n                ""match"": {\n\n                    ""value"": ""red""\n\n                }\n\n            }\n\n        ]\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.set_payload(\n\n    collection_name=""{collection_name}"",\n\n    payload={\n\n        ""property1"": ""string"",', 'and\n\n\n\n```http\n\nPUT /collections/{collection_name}/points\n\n{\n\n    ""points"": [\n\n        {\n\n            ""id"": 1,\n\n            ""payload"": {""color"": ""red""},\n\n            ""vector"": [0.9, 0.1, 0.1]\n\n        }\n\n    ]\n\n}\n\n```\n\n\n\n```python\n\nclient.upsert(\n\n    collection_name=""{collection_name}"",\n\n    points=[\n\n        models.PointStruct(\n\n            id=1,\n\n            payload={\n\n                ""color"": ""red"",\n\n            },\n\n            vector=[0.9, 0.1, 0.1],\n\n        ),\n\n    ],\n\n)\n\n```\n\n\n\n```typescript', '```http\n\nPUT /collections/{collection_name}/points\n\n{\n\n    ""points"": [\n\n        {\n\n            ""id"": 1,\n\n            ""vector"": [0.05, 0.61, 0.76, 0.74],\n\n            ""payload"": {""city"": ""Berlin"", ""price"": 1.99}\n\n        },\n\n        {\n\n            ""id"": 2,\n\n            ""vector"": [0.19, 0.81, 0.75, 0.11],\n\n            ""payload"": {""city"": [""Berlin"", ""London""], ""price"": 1.99}\n\n        },\n\n        {\n\n            ""id"": 3,\n\n            ""vector"": [0.36, 0.55, 0.47, 0.94],']","Question: What is the purpose of the `payload` field in the data points?\n\nContext: ## Payload



A [Payload](/documentation/concepts/payload/) describes information that you can store with vectors.



## Points



[Points](/documentation/concepts/points/) are a record which consists of a vector and an optional payload. 



## Search



[Search](/documentation/concepts/search/) describes _similarity search_, which set up related objects close to each other in vector space.



## Explore
""with_payload"": [""title"", ""text""],



// Options for specifying what to bring from the vector(s) 

// of the looked up point, true by default

""with_vectors: false

}

}

```



```python

client.search_groups(

collection_name=""chunks"",

# Same as in the regular search() API

query_vector=[1.1],

# Grouping parameters

group_by=""document_id"",  # Path of the field to group by

limit=2,  # Max amount of groups
```http

POST /collections/{collection_name}/points/payload

{

""payload"": {

""property1"": ""string"",

""property2"": ""string""

},

""filter"": {

""must"": [

{

""key"": ""color"",

""match"": {

""value"": ""red""

}

}

]

}

}

```



```python

client.set_payload(

collection_name=""{collection_name}"",

payload={

""property1"": ""string"",
and



```http

PUT /collections/{collection_name}/points

{

""points"": [

{

""id"": 1,

""payload"": {""color"": ""red""},

""vector"": [0.9, 0.1, 0.1]

}

]

}

```



```python

client.upsert(

collection_name=""{collection_name}"",

points=[

models.PointStruct(

id=1,

payload={

""color"": ""red"",

},

vector=[0.9, 0.1, 0.1],

),

],

)

```



```typescript
```http

PUT /collections/{collection_name}/points

{

""points"": [

{

""id"": 1,

""vector"": [0.05, 0.61, 0.76, 0.74],

""payload"": {""city"": ""Berlin"", ""price"": 1.99}

},

{

""id"": 2,

""vector"": [0.19, 0.81, 0.75, 0.11],

""payload"": {""city"": [""Berlin"", ""London""], ""price"": 1.99}

},

{

""id"": 3,

""vector"": [0.36, 0.55, 0.47, 0.94],\n\nAnswer:",What is the purpose of the `payload` field in the data points?,"The `payload` field in the data points being upserted using the QdrantClient serves as a container for additional metadata or information related to the vector data being stored. It allows users to associate supplementary details with each data point, such as the city name, price, or any other custom attributes that provide context or additional insights into the vector data. This metadata can be used for filtering, searching, or categorizing the vectors during retrieval or query operations, enabling more efficient and targeted data analysis and retrieval processes. In the examples given, the `payload` field includes information like city names, prices, and other relevant details specific to each data point, enhancing the overall utility and relevance of the stored vector data.","['## Payload\n\n\n\nA [Payload](/documentation/concepts/payload/) describes information that you can store with vectors.\n\n\n\n## Points\n\n\n\n[Points](/documentation/concepts/points/) are a record which consists of a vector and an optional payload. \n\n\n\n## Search\n\n\n\n[Search](/documentation/concepts/search/) describes _similarity search_, which set up related objects close to each other in vector space.\n\n\n\n## Explore', '""with_payload"": [""title"", ""text""],\n\n\n\n        // Options for specifying what to bring from the vector(s) \n\n        // of the looked up point, true by default\n\n        ""with_vectors: false\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.search_groups(\n\n    collection_name=""chunks"",\n\n    # Same as in the regular search() API\n\n    query_vector=[1.1],\n\n    # Grouping parameters\n\n    group_by=""document_id"",  # Path of the field to group by\n\n    limit=2,  # Max amount of groups', '```http\n\nPOST /collections/{collection_name}/points/payload\n\n{\n\n    ""payload"": {\n\n        ""property1"": ""string"",\n\n        ""property2"": ""string""\n\n    },\n\n    ""filter"": {\n\n        ""must"": [\n\n            {\n\n                ""key"": ""color"",\n\n                ""match"": {\n\n                    ""value"": ""red""\n\n                }\n\n            }\n\n        ]\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.set_payload(\n\n    collection_name=""{collection_name}"",\n\n    payload={\n\n        ""property1"": ""string"",', 'and\n\n\n\n```http\n\nPUT /collections/{collection_name}/points\n\n{\n\n    ""points"": [\n\n        {\n\n            ""id"": 1,\n\n            ""payload"": {""color"": ""red""},\n\n            ""vector"": [0.9, 0.1, 0.1]\n\n        }\n\n    ]\n\n}\n\n```\n\n\n\n```python\n\nclient.upsert(\n\n    collection_name=""{collection_name}"",\n\n    points=[\n\n        models.PointStruct(\n\n            id=1,\n\n            payload={\n\n                ""color"": ""red"",\n\n            },\n\n            vector=[0.9, 0.1, 0.1],\n\n        ),\n\n    ],\n\n)\n\n```\n\n\n\n```typescript', '```http\n\nPUT /collections/{collection_name}/points\n\n{\n\n    ""points"": [\n\n        {\n\n            ""id"": 1,\n\n            ""vector"": [0.05, 0.61, 0.76, 0.74],\n\n            ""payload"": {""city"": ""Berlin"", ""price"": 1.99}\n\n        },\n\n        {\n\n            ""id"": 2,\n\n            ""vector"": [0.19, 0.81, 0.75, 0.11],\n\n            ""payload"": {""city"": [""Berlin"", ""London""], ""price"": 1.99}\n\n        },\n\n        {\n\n            ""id"": 3,\n\n            ""vector"": [0.36, 0.55, 0.47, 0.94],']","## Payload



A [Payload](/documentation/concepts/payload/) describes information that you can store with vectors.



## Points



[Points](/documentation/concepts/points/) are a record which consists of a vector and an optional payload. 



## Search



[Search](/documentation/concepts/search/) describes _similarity search_, which set up related objects close to each other in vector space.



## Explore
""with_payload"": [""title"", ""text""],



        // Options for specifying what to bring from the vector(s) 

        // of the looked up point, true by default

        ""with_vectors: false

    }

}

```



```python

client.search_groups(

    collection_name=""chunks"",

    # Same as in the regular search() API

    query_vector=[1.1],

    # Grouping parameters

    group_by=""document_id"",  # Path of the field to group by

    limit=2,  # Max amount of groups
```http

POST /collections/{collection_name}/points/payload

{

    ""payload"": {

        ""property1"": ""string"",

        ""property2"": ""string""

    },

    ""filter"": {

        ""must"": [

            {

                ""key"": ""color"",

                ""match"": {

                    ""value"": ""red""

                }

            }

        ]

    }

}

```



```python

client.set_payload(

    collection_name=""{collection_name}"",

    payload={

        ""property1"": ""string"",
and



```http

PUT /collections/{collection_name}/points

{

    ""points"": [

        {

            ""id"": 1,

            ""payload"": {""color"": ""red""},

            ""vector"": [0.9, 0.1, 0.1]

        }

    ]

}

```



```python

client.upsert(

    collection_name=""{collection_name}"",

    points=[

        models.PointStruct(

            id=1,

            payload={

                ""color"": ""red"",

            },

            vector=[0.9, 0.1, 0.1],

        ),

    ],

)

```



```typescript
```http

PUT /collections/{collection_name}/points

{

    ""points"": [

        {

            ""id"": 1,

            ""vector"": [0.05, 0.61, 0.76, 0.74],

            ""payload"": {""city"": ""Berlin"", ""price"": 1.99}

        },

        {

            ""id"": 2,

            ""vector"": [0.19, 0.81, 0.75, 0.11],

            ""payload"": {""city"": [""Berlin"", ""London""], ""price"": 1.99}

        },

        {

            ""id"": 3,

            ""vector"": [0.36, 0.55, 0.47, 0.94],",0.6923076923076923,0.4166666666666667,0.5202312138728324,0.171875,0.102803738317757,0.1286549707602339,0.4,0.24074074074074073,0.30057803468208094,0.6,0.3611111111111111,0.4508670520231214,0.7530191540718079,0.7289045453071594,0.6600165367126465,0.6927522420883179,0.8283427308003107,0.6400246694684029,73,0.6083333333333333,0.3429641827697724
True,,1966.289,2f95f471,What is the purpose of shard replication in Qdrant?,"Shard replication in Qdrant increases the reliability of the cluster by keeping several copies of a shard spread across the cluster. This ensures the availability of the data in case of node failures, except if all replicas are lost.","The purpose of shard replication in Qdrant is to increase the reliability of the cluster by keeping several copies of a shard spread across the cluster. This helps in maintaining data consistency and ensures that even if a node fails, there are other active replicas of the shard available to maintain the integrity of the data. Shard replication also helps in improving performance by providing immediate access to index and quantization data on the target node without the need for optimization, resulting in better performance especially with large shards.","ordering guarantees can be `strong`[^ordered], required for some applications.



The `stream_records` method is currently used as default. This may change in the

future.



## Replication



*Available as of v0.11.0*



Qdrant allows you to replicate shards between nodes in the cluster.



Shard replication increases the reliability of the cluster by keeping several copies of a shard spread across the cluster.
Regardless of the method used, Qdrant will extract the shard data from the snapshot and properly register shards in the cluster.

If there are other active replicas of the recovered shards in the cluster, Qdrant will replicate them to the newly recovered node by default to maintain data consistency.



### Recover from a URL or local file



*Available as of v0.11.3*
Since a replication factor of ""2"" would require twice as much storage space, it is advised to make sure the hardware can host the additional shard replicas beforehand.



### Creating new shard replicas



It is possible to create or delete replicas manually on an existing collection using the [Update collection cluster setup API](https://qdrant.github.io/qdrant/redoc/index.html?v=v0.11.0#tag/cluster/operation/update_collection_cluster).
Currently, the replication factor of a collection can only be configured at creation time.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 300,

        ""distance"": ""Cosine""

    },

    ""shard_number"": 6,

    ""replication_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",
order to the target shard to bring it into the same state as the source. There

are two important benefits: 1. It transfers index and quantization data, so that

the shard does not have to be optimized again on the target node, making them

immediately available. This way, Qdrant ensures that there will be no

degradation in performance at the end of the transfer. Especially on large

shards, this can give a huge performance improvement. 2. The consistency and","['ordering guarantees can be `strong`[^ordered], required for some applications.\n\n\n\nThe `stream_records` method is currently used as default. This may change in the\n\nfuture.\n\n\n\n## Replication\n\n\n\n*Available as of v0.11.0*\n\n\n\nQdrant allows you to replicate shards between nodes in the cluster.\n\n\n\nShard replication increases the reliability of the cluster by keeping several copies of a shard spread across the cluster.', 'Regardless of the method used, Qdrant will extract the shard data from the snapshot and properly register shards in the cluster.\n\nIf there are other active replicas of the recovered shards in the cluster, Qdrant will replicate them to the newly recovered node by default to maintain data consistency.\n\n\n\n### Recover from a URL or local file\n\n\n\n*Available as of v0.11.3*', 'Since a replication factor of ""2"" would require twice as much storage space, it is advised to make sure the hardware can host the additional shard replicas beforehand.\n\n\n\n### Creating new shard replicas\n\n\n\nIt is possible to create or delete replicas manually on an existing collection using the [Update collection cluster setup API](https://qdrant.github.io/qdrant/redoc/index.html?v=v0.11.0#tag/cluster/operation/update_collection_cluster).', 'Currently, the replication factor of a collection can only be configured at creation time.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""size"": 300,\n\n        ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 6,\n\n    ""replication_factor"": 2,\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",', 'order to the target shard to bring it into the same state as the source. There\n\nare two important benefits: 1. It transfers index and quantization data, so that\n\nthe shard does not have to be optimized again on the target node, making them\n\nimmediately available. This way, Qdrant ensures that there will be no\n\ndegradation in performance at the end of the transfer. Especially on large\n\nshards, this can give a huge performance improvement. 2. The consistency and']","Question: What is the purpose of shard replication in Qdrant?\n\nContext: ordering guarantees can be `strong`[^ordered], required for some applications.



The `stream_records` method is currently used as default. This may change in the

future.



## Replication



*Available as of v0.11.0*



Qdrant allows you to replicate shards between nodes in the cluster.



Shard replication increases the reliability of the cluster by keeping several copies of a shard spread across the cluster.
Regardless of the method used, Qdrant will extract the shard data from the snapshot and properly register shards in the cluster.

If there are other active replicas of the recovered shards in the cluster, Qdrant will replicate them to the newly recovered node by default to maintain data consistency.



### Recover from a URL or local file



*Available as of v0.11.3*
Since a replication factor of ""2"" would require twice as much storage space, it is advised to make sure the hardware can host the additional shard replicas beforehand.



### Creating new shard replicas



It is possible to create or delete replicas manually on an existing collection using the [Update collection cluster setup API](https://qdrant.github.io/qdrant/redoc/index.html?v=v0.11.0#tag/cluster/operation/update_collection_cluster).
Currently, the replication factor of a collection can only be configured at creation time.



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 300,

""distance"": ""Cosine""

},

""shard_number"": 6,

""replication_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

collection_name=""{collection_name}"",
order to the target shard to bring it into the same state as the source. There

are two important benefits: 1. It transfers index and quantization data, so that

the shard does not have to be optimized again on the target node, making them

immediately available. This way, Qdrant ensures that there will be no

degradation in performance at the end of the transfer. Especially on large

shards, this can give a huge performance improvement. 2. The consistency and\n\nAnswer:",What is the purpose of shard replication in Qdrant?,"Shard replication in Qdrant increases the reliability of the cluster by keeping several copies of a shard spread across the cluster. This ensures the availability of the data in case of node failures, except if all replicas are lost.","['ordering guarantees can be `strong`[^ordered], required for some applications.\n\n\n\nThe `stream_records` method is currently used as default. This may change in the\n\nfuture.\n\n\n\n## Replication\n\n\n\n*Available as of v0.11.0*\n\n\n\nQdrant allows you to replicate shards between nodes in the cluster.\n\n\n\nShard replication increases the reliability of the cluster by keeping several copies of a shard spread across the cluster.', 'Regardless of the method used, Qdrant will extract the shard data from the snapshot and properly register shards in the cluster.\n\nIf there are other active replicas of the recovered shards in the cluster, Qdrant will replicate them to the newly recovered node by default to maintain data consistency.\n\n\n\n### Recover from a URL or local file\n\n\n\n*Available as of v0.11.3*', 'Since a replication factor of ""2"" would require twice as much storage space, it is advised to make sure the hardware can host the additional shard replicas beforehand.\n\n\n\n### Creating new shard replicas\n\n\n\nIt is possible to create or delete replicas manually on an existing collection using the [Update collection cluster setup API](https://qdrant.github.io/qdrant/redoc/index.html?v=v0.11.0#tag/cluster/operation/update_collection_cluster).', 'Currently, the replication factor of a collection can only be configured at creation time.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""size"": 300,\n\n        ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 6,\n\n    ""replication_factor"": 2,\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",', 'order to the target shard to bring it into the same state as the source. There\n\nare two important benefits: 1. It transfers index and quantization data, so that\n\nthe shard does not have to be optimized again on the target node, making them\n\nimmediately available. This way, Qdrant ensures that there will be no\n\ndegradation in performance at the end of the transfer. Especially on large\n\nshards, this can give a huge performance improvement. 2. The consistency and']","ordering guarantees can be `strong`[^ordered], required for some applications.



The `stream_records` method is currently used as default. This may change in the

future.



## Replication



*Available as of v0.11.0*



Qdrant allows you to replicate shards between nodes in the cluster.



Shard replication increases the reliability of the cluster by keeping several copies of a shard spread across the cluster.
Regardless of the method used, Qdrant will extract the shard data from the snapshot and properly register shards in the cluster.

If there are other active replicas of the recovered shards in the cluster, Qdrant will replicate them to the newly recovered node by default to maintain data consistency.



### Recover from a URL or local file



*Available as of v0.11.3*
Since a replication factor of ""2"" would require twice as much storage space, it is advised to make sure the hardware can host the additional shard replicas beforehand.



### Creating new shard replicas



It is possible to create or delete replicas manually on an existing collection using the [Update collection cluster setup API](https://qdrant.github.io/qdrant/redoc/index.html?v=v0.11.0#tag/cluster/operation/update_collection_cluster).
Currently, the replication factor of a collection can only be configured at creation time.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

        ""size"": 300,

        ""distance"": ""Cosine""

    },

    ""shard_number"": 6,

    ""replication_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",
order to the target shard to bring it into the same state as the source. There

are two important benefits: 1. It transfers index and quantization data, so that

the shard does not have to be optimized again on the target node, making them

immediately available. This way, Qdrant ensures that there will be no

degradation in performance at the end of the transfer. Especially on large

shards, this can give a huge performance improvement. 2. The consistency and",0.358974358974359,0.8484848484848485,0.5045045045045045,0.22077922077922077,0.53125,0.3119266055045872,0.3076923076923077,0.7272727272727273,0.43243243243243246,0.3076923076923077,0.7272727272727273,0.43243243243243246,0.9539039134979248,0.7047744393348694,0.8113979697227478,0.7543371319770813,0.959539000565807,0.5988446772098541,89,2.282051282051282,0.37972149234476155
True,,6478.706,f76d8cfd,What are the steps to set up product quantization in QdrantClient?,"To set up product quantization in QdrantClient, you need to specify the quantization parameters in the quantization_config section of the collection configuration. The compression ratio can be set to x16 and the always_ram parameter can be set to true to store quantized vectors in RAM. The vectors_config section should also be specified with the desired vector size and distance metric. Finally, you can use the create_collection method of the QdrantClient to create the collection with the specified configurations.","To set up product quantization in QdrantClient, follow these steps:

1. Specify the quantization parameters in the `quantization_config` section of the collection configuration.
2. Use the provided code snippets based on your preferred programming language:

Python:
```python
import io.qdrant.client.grpc.Collections.ProductQuantization;
import io.qdrant.client.grpc.Collections.QuantizationConfig;
import io.qdrant.client.grpc.Collections.VectorParams;
import io.qdrant.client.grpc.Collections.VectorsConfig;

QdrantClient client = new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());

client.createCollectionAsync(CreateCollection.newBuilder()
    .setCollectionName(""{collection_name}"")
    .setVectorsConfig(VectorsConfig.newBuilder()
        .setQuantizationConfig(QuantizationConfig.newBuilder()
            .setProduct(ProductQuantization.newBuilder()
                .setCompression(""x16"")
                .setAlwaysRam(true)
            )
        )
        .build()
    )
    .build()
);
```

Rust:
```rust
use qdrant_client::{
    client::QdrantClient,
    qdrant::{
        quantization_config::Quantization, 
        vectors_config::Config, 
        CompressionRatio, 
        CreateCollection, 
        Distance, 
        ProductQuantization, 
        QuantizationConfig, 
        VectorParams, 
        VectorsConfig,
    },
};

let client = QdrantClient::from_url(""http://localhost:6334"").build()?;

client.create_collection(&CreateCollection {
    collection_name: ""{collection_name}"".to_string(),
    vectors_config: Some(VectorsConfig {
        quantization_config: QuantizationConfig::Product(ProductQuantization {
            compression: CompressionRatio::X16,
            always_ram: true,
        }),
    }),
});
```

JavaScript/TypeScript:
```typescript
import { QdrantClient } from ""@qdrant/js-client-rest"";

const client = new QdrantClient({ host: ""localhost"", port: 6333 });

client.createCollection(""{collection_name}"", {
    vectors: {
        size: 1536,
        distance: ""Cosine"",
    },
    quantization_config: {
        product: {
            always_ram: true,
        },
    },
});
```

Make sure to replace `{collection_name}` with the actual name of your collection.","### Setting up Product Quantization



To enable product quantization, you need to specify the quantization parameters in the `quantization_config` section of the collection configuration.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""quantization_config"": {

        ""product"": {

            ""compression"": ""x16"",

            ""always_ram"": true

        }

    }

}

```



```python
import io.qdrant.client.grpc.Collections.ProductQuantization;

import io.qdrant.client.grpc.Collections.QuantizationConfig;

import io.qdrant.client.grpc.Collections.VectorParams;

import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createCollectionAsync(

        CreateCollection.newBuilder()

            .setCollectionName(""{collection_name}"")

            .setVectorsConfig(
use qdrant_client::{

    client::QdrantClient,

    qdrant::{

        quantization_config::Quantization, vectors_config::Config, CompressionRatio,

        CreateCollection, Distance, ProductQuantization, QuantizationConfig, VectorParams,

        VectorsConfig,

    },

};



let client = QdrantClient::from_url(""http://localhost:6334"").build()?;



client

    .create_collection(&CreateCollection {

        collection_name: ""{collection_name}"".to_string(),

        vectors_config: Some(VectorsConfig {
quantization_config=models.BinaryQuantization(

        binary=models.BinaryQuantizationConfig(

            always_ram=True,

        ),

    ),

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({ host: ""localhost"", port: 6333 });



client.createCollection(""{collection_name}"", {

  vectors: {

    size: 1536,

    distance: ""Cosine"",

  },

  quantization_config: {

    binary: {

      always_ram: true,

    },

  },

});

```
use qdrant_client::{

    client::QdrantClient,

    qdrant::{

        quantization_config::Quantization, vectors_config::Config, CreateCollection, Distance,

        OptimizersConfigDiff, QuantizationConfig, QuantizationType, ScalarQuantization,

        VectorParams, VectorsConfig,

    },

};



let client = QdrantClient::from_url(""http://localhost:6334"").build()?;



client

    .create_collection(&CreateCollection {

        collection_name: ""{collection_name}"".to_string(),","['### Setting up Product Quantization\n\n\n\nTo enable product quantization, you need to specify the quantization parameters in the `quantization_config` section of the collection configuration.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""quantization_config"": {\n\n        ""product"": {\n\n            ""compression"": ""x16"",\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python', 'import io.qdrant.client.grpc.Collections.ProductQuantization;\n\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;\n\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createCollectionAsync(\n\n        CreateCollection.newBuilder()\n\n            .setCollectionName(""{collection_name}"")\n\n            .setVectorsConfig(', 'use qdrant_client::{\n\n    client::QdrantClient,\n\n    qdrant::{\n\n        quantization_config::Quantization, vectors_config::Config, CompressionRatio,\n\n        CreateCollection, Distance, ProductQuantization, QuantizationConfig, VectorParams,\n\n        VectorsConfig,\n\n    },\n\n};\n\n\n\nlet client = QdrantClient::from_url(""http://localhost:6334"").build()?;\n\n\n\nclient\n\n    .create_collection(&CreateCollection {\n\n        collection_name: ""{collection_name}"".to_string(),\n\n        vectors_config: Some(VectorsConfig {', 'quantization_config=models.BinaryQuantization(\n\n        binary=models.BinaryQuantizationConfig(\n\n            always_ram=True,\n\n        ),\n\n    ),\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";\n\n\n\nconst client = new QdrantClient({ host: ""localhost"", port: 6333 });\n\n\n\nclient.createCollection(""{collection_name}"", {\n\n  vectors: {\n\n    size: 1536,\n\n    distance: ""Cosine"",\n\n  },\n\n  quantization_config: {\n\n    binary: {\n\n      always_ram: true,\n\n    },\n\n  },\n\n});\n\n```', 'use qdrant_client::{\n\n    client::QdrantClient,\n\n    qdrant::{\n\n        quantization_config::Quantization, vectors_config::Config, CreateCollection, Distance,\n\n        OptimizersConfigDiff, QuantizationConfig, QuantizationType, ScalarQuantization,\n\n        VectorParams, VectorsConfig,\n\n    },\n\n};\n\n\n\nlet client = QdrantClient::from_url(""http://localhost:6334"").build()?;\n\n\n\nclient\n\n    .create_collection(&CreateCollection {\n\n        collection_name: ""{collection_name}"".to_string(),']","Question: What are the steps to set up product quantization in QdrantClient?\n\nContext: ### Setting up Product Quantization



To enable product quantization, you need to specify the quantization parameters in the `quantization_config` section of the collection configuration.



```http

PUT /collections/{collection_name}

{

""vectors"": {

""size"": 768,

""distance"": ""Cosine""

},

""quantization_config"": {

""product"": {

""compression"": ""x16"",

""always_ram"": true

}

}

}

```



```python
import io.qdrant.client.grpc.Collections.ProductQuantization;

import io.qdrant.client.grpc.Collections.QuantizationConfig;

import io.qdrant.client.grpc.Collections.VectorParams;

import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

.createCollectionAsync(

CreateCollection.newBuilder()

.setCollectionName(""{collection_name}"")

.setVectorsConfig(
use qdrant_client::{

client::QdrantClient,

qdrant::{

quantization_config::Quantization, vectors_config::Config, CompressionRatio,

CreateCollection, Distance, ProductQuantization, QuantizationConfig, VectorParams,

VectorsConfig,

},

};



let client = QdrantClient::from_url(""http://localhost:6334"").build()?;



client

.create_collection(&CreateCollection {

collection_name: ""{collection_name}"".to_string(),

vectors_config: Some(VectorsConfig {
quantization_config=models.BinaryQuantization(

binary=models.BinaryQuantizationConfig(

always_ram=True,

),

),

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({ host: ""localhost"", port: 6333 });



client.createCollection(""{collection_name}"", {

vectors: {

size: 1536,

distance: ""Cosine"",

},

quantization_config: {

binary: {

always_ram: true,

},

},

});

```
use qdrant_client::{

client::QdrantClient,

qdrant::{

quantization_config::Quantization, vectors_config::Config, CreateCollection, Distance,

OptimizersConfigDiff, QuantizationConfig, QuantizationType, ScalarQuantization,

VectorParams, VectorsConfig,

},

};



let client = QdrantClient::from_url(""http://localhost:6334"").build()?;



client

.create_collection(&CreateCollection {

collection_name: ""{collection_name}"".to_string(),\n\nAnswer:",What are the steps to set up product quantization in QdrantClient?,"To set up product quantization in QdrantClient, you need to specify the quantization parameters in the quantization_config section of the collection configuration. The compression ratio can be set to x16 and the always_ram parameter can be set to true to store quantized vectors in RAM. The vectors_config section should also be specified with the desired vector size and distance metric. Finally, you can use the create_collection method of the QdrantClient to create the collection with the specified configurations.","['### Setting up Product Quantization\n\n\n\nTo enable product quantization, you need to specify the quantization parameters in the `quantization_config` section of the collection configuration.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine""\n\n    },\n\n    ""quantization_config"": {\n\n        ""product"": {\n\n            ""compression"": ""x16"",\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python', 'import io.qdrant.client.grpc.Collections.ProductQuantization;\n\nimport io.qdrant.client.grpc.Collections.QuantizationConfig;\n\nimport io.qdrant.client.grpc.Collections.VectorParams;\n\nimport io.qdrant.client.grpc.Collections.VectorsConfig;\n\n\n\nQdrantClient client =\n\n    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());\n\n\n\nclient\n\n    .createCollectionAsync(\n\n        CreateCollection.newBuilder()\n\n            .setCollectionName(""{collection_name}"")\n\n            .setVectorsConfig(', 'use qdrant_client::{\n\n    client::QdrantClient,\n\n    qdrant::{\n\n        quantization_config::Quantization, vectors_config::Config, CompressionRatio,\n\n        CreateCollection, Distance, ProductQuantization, QuantizationConfig, VectorParams,\n\n        VectorsConfig,\n\n    },\n\n};\n\n\n\nlet client = QdrantClient::from_url(""http://localhost:6334"").build()?;\n\n\n\nclient\n\n    .create_collection(&CreateCollection {\n\n        collection_name: ""{collection_name}"".to_string(),\n\n        vectors_config: Some(VectorsConfig {', 'quantization_config=models.BinaryQuantization(\n\n        binary=models.BinaryQuantizationConfig(\n\n            always_ram=True,\n\n        ),\n\n    ),\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";\n\n\n\nconst client = new QdrantClient({ host: ""localhost"", port: 6333 });\n\n\n\nclient.createCollection(""{collection_name}"", {\n\n  vectors: {\n\n    size: 1536,\n\n    distance: ""Cosine"",\n\n  },\n\n  quantization_config: {\n\n    binary: {\n\n      always_ram: true,\n\n    },\n\n  },\n\n});\n\n```', 'use qdrant_client::{\n\n    client::QdrantClient,\n\n    qdrant::{\n\n        quantization_config::Quantization, vectors_config::Config, CreateCollection, Distance,\n\n        OptimizersConfigDiff, QuantizationConfig, QuantizationType, ScalarQuantization,\n\n        VectorParams, VectorsConfig,\n\n    },\n\n};\n\n\n\nlet client = QdrantClient::from_url(""http://localhost:6334"").build()?;\n\n\n\nclient\n\n    .create_collection(&CreateCollection {\n\n        collection_name: ""{collection_name}"".to_string(),']","### Setting up Product Quantization



To enable product quantization, you need to specify the quantization parameters in the `quantization_config` section of the collection configuration.



```http

PUT /collections/{collection_name}

{

    ""vectors"": {

      ""size"": 768,

      ""distance"": ""Cosine""

    },

    ""quantization_config"": {

        ""product"": {

            ""compression"": ""x16"",

            ""always_ram"": true

        }

    }

}

```



```python
import io.qdrant.client.grpc.Collections.ProductQuantization;

import io.qdrant.client.grpc.Collections.QuantizationConfig;

import io.qdrant.client.grpc.Collections.VectorParams;

import io.qdrant.client.grpc.Collections.VectorsConfig;



QdrantClient client =

    new QdrantClient(QdrantGrpcClient.newBuilder(""localhost"", 6334, false).build());



client

    .createCollectionAsync(

        CreateCollection.newBuilder()

            .setCollectionName(""{collection_name}"")

            .setVectorsConfig(
use qdrant_client::{

    client::QdrantClient,

    qdrant::{

        quantization_config::Quantization, vectors_config::Config, CompressionRatio,

        CreateCollection, Distance, ProductQuantization, QuantizationConfig, VectorParams,

        VectorsConfig,

    },

};



let client = QdrantClient::from_url(""http://localhost:6334"").build()?;



client

    .create_collection(&CreateCollection {

        collection_name: ""{collection_name}"".to_string(),

        vectors_config: Some(VectorsConfig {
quantization_config=models.BinaryQuantization(

        binary=models.BinaryQuantizationConfig(

            always_ram=True,

        ),

    ),

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";



const client = new QdrantClient({ host: ""localhost"", port: 6333 });



client.createCollection(""{collection_name}"", {

  vectors: {

    size: 1536,

    distance: ""Cosine"",

  },

  quantization_config: {

    binary: {

      always_ram: true,

    },

  },

});

```
use qdrant_client::{

    client::QdrantClient,

    qdrant::{

        quantization_config::Quantization, vectors_config::Config, CreateCollection, Distance,

        OptimizersConfigDiff, QuantizationConfig, QuantizationType, ScalarQuantization,

        VectorParams, VectorsConfig,

    },

};



let client = QdrantClient::from_url(""http://localhost:6334"").build()?;



client

    .create_collection(&CreateCollection {

        collection_name: ""{collection_name}"".to_string(),",0.20103092783505155,0.5492957746478874,0.2943396226415094,0.10362694300518134,0.2857142857142857,0.1520912547528517,0.14948453608247422,0.4084507042253521,0.2188679245283019,0.20103092783505155,0.5492957746478874,0.2943396226415094,0.8718782067298889,0.5387501120567322,0.6341132521629333,0.5825547575950623,0.7416667863726616,0.833638689480722,149,1.9102564102564104,0.5396405922824089
True,,3940.011,19781bd5,What are the different write ordering options available in Qdrant?,"Qdrant provides three different write ordering options: weak, medium, and strong. Weak ordering does not provide any additional guarantees and allows write operations to be freely reordered. Medium ordering serializes write operations through a dynamically elected leader, which may cause minor inconsistencies in case of leader change. Strong ordering serializes write operations through the permanent leader, providing strong consistency but may result in write operations being unavailable if the leader is down.","In Qdrant, there are different write ordering options available to ensure consistency and avoid data inconsistency in case of concurrent updates. The `write_consistency_factor` parameter can be used with update and delete operations to control the order in which operations are executed across replicas.

By setting the `write_consistency_factor` to a specific value, you can specify the number of replicas that must acknowledge the write operation before it is considered successful. This ensures that the write operation is executed in the same order on all replicas, preventing data inconsistencies.

Additionally, Qdrant provides options such as applying payload filters, shard keys, and other advanced features to make working with sparse vectors easier. The indexing and sorting of indices and values are handled by Qdrant internally, simplifying the process for users.

Furthermore, Qdrant allows for disabling rescoring with search parameters, which can reduce the number of disk reads and improve performance, albeit potentially with a slight decrease in precision.

Overall, these features and options in Qdrant help maintain data consistency, improve performance, and provide flexibility in managing write operations across replicas.","- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents
Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk.
Optionally, you can disable rescoring with search `params`, which will reduce the number of disk reads even further, but potentially slightly decrease the precision.



```http

POST /collections/{collection_name}/points/search

{

    ""params"": {

        ""quantization"": {

            ""rescore"": false

        }

    },

    ""vector"": [0.2, 0.1, 0.9, 0.7],

    ""limit"": 10

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models
""write_consistency_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),

    shard_number=6,

    replication_factor=2,

    write_consistency_factor=2,

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";
## What sets Qdrant apart?","['- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents', ""Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk."", 'Optionally, you can disable rescoring with search `params`, which will reduce the number of disk reads even further, but potentially slightly decrease the precision.\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/search\n\n{\n\n    ""params"": {\n\n        ""quantization"": {\n\n            ""rescore"": false\n\n        }\n\n    },\n\n    ""vector"": [0.2, 0.1, 0.9, 0.7],\n\n    ""limit"": 10\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models', '""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n\n    shard_number=6,\n\n    replication_factor=2,\n\n    write_consistency_factor=2,\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";', '## What sets Qdrant apart?']","Question: What are the different write ordering options available in Qdrant?\n\nContext: - Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents
Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk.
Optionally, you can disable rescoring with search `params`, which will reduce the number of disk reads even further, but potentially slightly decrease the precision.



```http

POST /collections/{collection_name}/points/search

{

""params"": {

""quantization"": {

""rescore"": false

}

},

""vector"": [0.2, 0.1, 0.9, 0.7],

""limit"": 10

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models
""write_consistency_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

collection_name=""{collection_name}"",

vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),

shard_number=6,

replication_factor=2,

write_consistency_factor=2,

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";
## What sets Qdrant apart?\n\nAnswer:",What are the different write ordering options available in Qdrant?,"Qdrant provides three different write ordering options: weak, medium, and strong. Weak ordering does not provide any additional guarantees and allows write operations to be freely reordered. Medium ordering serializes write operations through a dynamically elected leader, which may cause minor inconsistencies in case of leader change. Strong ordering serializes write operations through the permanent leader, providing strong consistency but may result in write operations being unavailable if the leader is down.","['- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents', ""Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk."", 'Optionally, you can disable rescoring with search `params`, which will reduce the number of disk reads even further, but potentially slightly decrease the precision.\n\n\n\n```http\n\nPOST /collections/{collection_name}/points/search\n\n{\n\n    ""params"": {\n\n        ""quantization"": {\n\n            ""rescore"": false\n\n        }\n\n    },\n\n    ""vector"": [0.2, 0.1, 0.9, 0.7],\n\n    ""limit"": 10\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models', '""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\nfrom qdrant_client.http import models\n\n\n\nclient = QdrantClient(""localhost"", port=6333)\n\n\n\nclient.create_collection(\n\n    collection_name=""{collection_name}"",\n\n    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),\n\n    shard_number=6,\n\n    replication_factor=2,\n\n    write_consistency_factor=2,\n\n)\n\n```\n\n\n\n```typescript\n\nimport { QdrantClient } from ""@qdrant/js-client-rest"";', '## What sets Qdrant apart?']","- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents
Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk.
Optionally, you can disable rescoring with search `params`, which will reduce the number of disk reads even further, but potentially slightly decrease the precision.



```http

POST /collections/{collection_name}/points/search

{

    ""params"": {

        ""quantization"": {

            ""rescore"": false

        }

    },

    ""vector"": [0.2, 0.1, 0.9, 0.7],

    ""limit"": 10

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models
""write_consistency_factor"": 2,

}

```



```python

from qdrant_client import QdrantClient

from qdrant_client.http import models



client = QdrantClient(""localhost"", port=6333)



client.create_collection(

    collection_name=""{collection_name}"",

    vectors_config=models.VectorParams(size=300, distance=models.Distance.COSINE),

    shard_number=6,

    replication_factor=2,

    write_consistency_factor=2,

)

```



```typescript

import { QdrantClient } from ""@qdrant/js-client-rest"";
## What sets Qdrant apart?",0.1834319526627219,0.4492753623188406,0.26050420168067223,0.06547619047619048,0.16176470588235295,0.09322033898305083,0.11242603550295859,0.2753623188405797,0.15966386554621848,0.16568047337278108,0.4057971014492754,0.23529411764705885,0.6989883184432983,0.545466423034668,0.5851446986198425,0.5646092891693115,0.9275794159802899,0.3961404114961624,177,2.4583333333333335,0.5416644750052058
True,,3851.87,4cc2a523,How can Qdrant be optimized for low memory footprint and high speed search?,"To optimize Qdrant for low memory footprint and high speed search, you can use vector quantization. This involves converting vectors into a more compact representation that can be stored in memory and used for search. By using smaller vectors, you can cache more in RAM and reduce the number of disk reads. To configure in-memory quantization with on-disk original vectors, you need to create a collection with the specified configuration.","To optimize Qdrant for low memory footprint and high-speed search, you can follow these strategies:

1. **Reduce Memory Footprint**:
   - Implement scalar quantization to reduce the memory required to store a vector by a factor of 4.
   - Convert data to `uint8` to leverage special SIMD CPU instructions for fast vector comparison.

2. **Enhance Search Speed**:
   - Utilize local SSDs to boost search speed significantly. With the right configurations, SSDs can provide high IOPS, leading to improved search performance.
   - Consider using production-grade disks for even higher search speeds.

3. **Efficient Query Processing**:
   - Implement batch searching to save time and optimize query processing.
   - Explore distributed deployment options to reduce inter-cluster requests and improve efficiency.
   - Leverage query optimization techniques to reuse filtering conditions among batch requests.

By implementing these strategies, you can optimize Qdrant for low memory footprint and high-speed search, making it efficient for handling large datasets with low search latency.","---

title: Optimize Resources

weight: 11

aliases:

  - ../tutorials/optimize

---



# Optimize Qdrant



Different use cases have different requirements for balancing between memory, speed, and precision.

Qdrant is designed to be flexible and customizable so you can tune it to your needs.



![Trafeoff](/docs/tradeoff.png)



Let's look deeper into each of those possible optimization scenarios.



## Prefer low memory footprint with high speed search
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
With a local SSD, we were able to increase the search speed by 10x!



With the production-grade disk, the search speed could be even higher. 

Some configurations of the SSDs can reach 1M IOPS and more.



Which might be an interesting option to serve large datasets with low search latency in Qdrant.





## Conclusion



In this article, we showed that Qdrant have flexibility in terms of RAM usage and can be used to serve large datasets.
Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.





### Efficient Query Processing
The results you may achieve on a specific setup may vary depending on the hardware, however, at the first glance, it seems that batch searching may save you quite a lot of time.



Additional improvements could be achieved in the case of distributed deployment, as Qdrant won’t need to make extensive inter-cluster requests. Moreover, if your requests share the same filtering condition, the query optimizer would be able to reuse it among batch requests.



## Summary","[""---\n\ntitle: Optimize Resources\n\nweight: 11\n\naliases:\n\n  - ../tutorials/optimize\n\n---\n\n\n\n# Optimize Qdrant\n\n\n\nDifferent use cases have different requirements for balancing between memory, speed, and precision.\n\nQdrant is designed to be flexible and customizable so you can tune it to your needs.\n\n\n\n![Trafeoff](/docs/tradeoff.png)\n\n\n\nLet's look deeper into each of those possible optimization scenarios.\n\n\n\n## Prefer low memory footprint with high speed search"", 'Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.\n\n\n\nIn addition to reducing the memory footprint, scalar quantization also speeds up the search process.\n\nQdrant uses a special SIMD CPU instruction to perform fast vector comparison.\n\nThis instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.', 'With a local SSD, we were able to increase the search speed by 10x!\n\n\n\nWith the production-grade disk, the search speed could be even higher. \n\nSome configurations of the SSDs can reach 1M IOPS and more.\n\n\n\nWhich might be an interesting option to serve large datasets with low search latency in Qdrant.\n\n\n\n\n\n## Conclusion\n\n\n\nIn this article, we showed that Qdrant have flexibility in terms of RAM usage and can be used to serve large datasets.', ""Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.\n\n\n\n\n\n### Efficient Query Processing"", 'The results you may achieve on a specific setup may vary depending on the hardware, however, at the first glance, it seems that batch searching may save you quite a lot of time.\n\n\n\nAdditional improvements could be achieved in the case of distributed deployment, as Qdrant won’t need to make extensive inter-cluster requests. Moreover, if your requests share the same filtering condition, the query optimizer would be able to reuse it among batch requests.\n\n\n\n## Summary']","Question: How can Qdrant be optimized for low memory footprint and high speed search?\n\nContext: ---

title: Optimize Resources

weight: 11

aliases:

- ../tutorials/optimize

---



# Optimize Qdrant



Different use cases have different requirements for balancing between memory, speed, and precision.

Qdrant is designed to be flexible and customizable so you can tune it to your needs.



![Trafeoff](/docs/tradeoff.png)



Let's look deeper into each of those possible optimization scenarios.



## Prefer low memory footprint with high speed search
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
With a local SSD, we were able to increase the search speed by 10x!



With the production-grade disk, the search speed could be even higher. 

Some configurations of the SSDs can reach 1M IOPS and more.



Which might be an interesting option to serve large datasets with low search latency in Qdrant.





## Conclusion



In this article, we showed that Qdrant have flexibility in terms of RAM usage and can be used to serve large datasets.
Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.





### Efficient Query Processing
The results you may achieve on a specific setup may vary depending on the hardware, however, at the first glance, it seems that batch searching may save you quite a lot of time.



Additional improvements could be achieved in the case of distributed deployment, as Qdrant won’t need to make extensive inter-cluster requests. Moreover, if your requests share the same filtering condition, the query optimizer would be able to reuse it among batch requests.



## Summary\n\nAnswer:",How can Qdrant be optimized for low memory footprint and high speed search?,"To optimize Qdrant for low memory footprint and high speed search, you can use vector quantization. This involves converting vectors into a more compact representation that can be stored in memory and used for search. By using smaller vectors, you can cache more in RAM and reduce the number of disk reads. To configure in-memory quantization with on-disk original vectors, you need to create a collection with the specified configuration.","[""---\n\ntitle: Optimize Resources\n\nweight: 11\n\naliases:\n\n  - ../tutorials/optimize\n\n---\n\n\n\n# Optimize Qdrant\n\n\n\nDifferent use cases have different requirements for balancing between memory, speed, and precision.\n\nQdrant is designed to be flexible and customizable so you can tune it to your needs.\n\n\n\n![Trafeoff](/docs/tradeoff.png)\n\n\n\nLet's look deeper into each of those possible optimization scenarios.\n\n\n\n## Prefer low memory footprint with high speed search"", 'Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.\n\n\n\nIn addition to reducing the memory footprint, scalar quantization also speeds up the search process.\n\nQdrant uses a special SIMD CPU instruction to perform fast vector comparison.\n\nThis instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.', 'With a local SSD, we were able to increase the search speed by 10x!\n\n\n\nWith the production-grade disk, the search speed could be even higher. \n\nSome configurations of the SSDs can reach 1M IOPS and more.\n\n\n\nWhich might be an interesting option to serve large datasets with low search latency in Qdrant.\n\n\n\n\n\n## Conclusion\n\n\n\nIn this article, we showed that Qdrant have flexibility in terms of RAM usage and can be used to serve large datasets.', ""Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.\n\n\n\n\n\n### Efficient Query Processing"", 'The results you may achieve on a specific setup may vary depending on the hardware, however, at the first glance, it seems that batch searching may save you quite a lot of time.\n\n\n\nAdditional improvements could be achieved in the case of distributed deployment, as Qdrant won’t need to make extensive inter-cluster requests. Moreover, if your requests share the same filtering condition, the query optimizer would be able to reuse it among batch requests.\n\n\n\n## Summary']","---

title: Optimize Resources

weight: 11

aliases:

  - ../tutorials/optimize

---



# Optimize Qdrant



Different use cases have different requirements for balancing between memory, speed, and precision.

Qdrant is designed to be flexible and customizable so you can tune it to your needs.



![Trafeoff](/docs/tradeoff.png)



Let's look deeper into each of those possible optimization scenarios.



## Prefer low memory footprint with high speed search
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
With a local SSD, we were able to increase the search speed by 10x!



With the production-grade disk, the search speed could be even higher. 

Some configurations of the SSDs can reach 1M IOPS and more.



Which might be an interesting option to serve large datasets with low search latency in Qdrant.





## Conclusion



In this article, we showed that Qdrant have flexibility in terms of RAM usage and can be used to serve large datasets.
Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.





### Efficient Query Processing
The results you may achieve on a specific setup may vary depending on the hardware, however, at the first glance, it seems that batch searching may save you quite a lot of time.



Additional improvements could be achieved in the case of distributed deployment, as Qdrant won’t need to make extensive inter-cluster requests. Moreover, if your requests share the same filtering condition, the query optimizer would be able to reuse it among batch requests.



## Summary",0.25170068027210885,0.5441176470588235,0.3441860465116279,0.08904109589041095,0.19402985074626866,0.12206572769953052,0.17006802721088435,0.36764705882352944,0.23255813953488372,0.22448979591836735,0.4852941176470588,0.3069767441860465,0.9420371055603027,0.5750473141670227,0.6281209588050842,0.6004135608673096,0.8271684310069153,0.844695684616454,147,2.1,0.4750920611068027
True,,5628.697,3c44ad5d,How does Qdrant optimize memory and search speed for sparse vectors?,"Qdrant optimizes memory and search speed for sparse vectors by utilizing an inverted index structure to store vectors for each non-zero dimension. This approach allows Qdrant to efficiently represent sparse vectors, which are characterized by a high proportion of zeroes. By only storing information about non-zero dimensions, Qdrant reduces the memory footprint required to store sparse vectors and also speeds up search operations by focusing only on relevant dimensions during indexing and querying processes. This optimization ensures that Qdrant can handle sparse vectors effectively while maintaining efficient memory usage and search performance.","Qdrant optimizes memory and search speed for sparse vectors through the following mechanisms:

1. **Support for Sparse Vectors:** Qdrant is designed to efficiently handle sparse vectors, which have a high proportion of zero values. This optimization allows Qdrant to reduce the memory footprint required to store vectors.

2. **Inverted Index Structure:** Qdrant utilizes an inverted index structure to store vectors for each non-zero dimension. This structure helps optimize memory usage and search speed by efficiently identifying vectors with non-zero values in query dimensions during a search.

3. **Scalar Quantization:** Qdrant uses scalar quantization to further reduce memory usage and speed up the search process. By converting vectors to `uint8` and leveraging a special SIMD CPU instruction for fast vector comparison with 8-bit integers, Qdrant can perform comparisons more quickly.

4. **Enable Rescore:** Qdrant can re-evaluate top-k search results using the original vectors, which can improve search quality on large collections with only minor performance impact.

5. **Upcoming Enhancements:** Qdrant's roadmap includes upcoming enhancements like Product Quantization, which will introduce another option for more memory savings, further improving both memory usage and search speed. 

Overall, Qdrant's efficient query processing capabilities, combined with its support for sparse vectors and innovative indexing techniques, enable it to optimize memory usage and search speed for handling large-scale data effectively.","performance.



## Sparse Vector Index



*Available as of v1.7.0*



### Key Features of Sparse Vector Index

- **Support for Sparse Vectors:** Qdrant supports sparse vectors, characterized by a high proportion of zeroes.

- **Efficient Indexing:** Utilizes an inverted index structure to store vectors for each non-zero dimension, optimizing memory and search speed.



### Search Mechanism

- **Index Usage:** The index identifies vectors with non-zero values in query dimensions during a search.
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
- **Enable rescore**: Having the original vectors available, Qdrant can re-evaluate top-k search results using the original vectors. On large collections, this can improve the search quality, with just minor performance impact.





#### Memory and speed tuning



In this section, we will discuss how to tune the memory and speed of the search process with quantization.



There are 3 possible modes to place storage of vectors within the qdrant collection:
Our plan for the current [open-source roadmap](https://github.com/qdrant/qdrant/blob/master/docs/roadmap/README.md) is to make billion-scale vector search affordable. Our recent release of the [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/) improves both memory usage (x4) as well as speed (x2). Upcoming [Product Quantization](https://www.irisa.fr/texmex/people/jegou/papers/jegou_searching_with_quantization.pdf) will introduce even another option with more memory saving. Stay tuned
Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.





### Efficient Query Processing","['performance.\n\n\n\n## Sparse Vector Index\n\n\n\n*Available as of v1.7.0*\n\n\n\n### Key Features of Sparse Vector Index\n\n- **Support for Sparse Vectors:** Qdrant supports sparse vectors, characterized by a high proportion of zeroes.\n\n- **Efficient Indexing:** Utilizes an inverted index structure to store vectors for each non-zero dimension, optimizing memory and search speed.\n\n\n\n### Search Mechanism\n\n- **Index Usage:** The index identifies vectors with non-zero values in query dimensions during a search.', 'Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.\n\n\n\nIn addition to reducing the memory footprint, scalar quantization also speeds up the search process.\n\nQdrant uses a special SIMD CPU instruction to perform fast vector comparison.\n\nThis instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.', '- **Enable rescore**: Having the original vectors available, Qdrant can re-evaluate top-k search results using the original vectors. On large collections, this can improve the search quality, with just minor performance impact.\n\n\n\n\n\n#### Memory and speed tuning\n\n\n\nIn this section, we will discuss how to tune the memory and speed of the search process with quantization.\n\n\n\nThere are 3 possible modes to place storage of vectors within the qdrant collection:', 'Our plan for the current [open-source roadmap](https://github.com/qdrant/qdrant/blob/master/docs/roadmap/README.md) is to make billion-scale vector search affordable. Our recent release of the [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/) improves both memory usage (x4) as well as speed (x2). Upcoming [Product Quantization](https://www.irisa.fr/texmex/people/jegou/papers/jegou_searching_with_quantization.pdf) will introduce even another option with more memory saving. Stay tuned', ""Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.\n\n\n\n\n\n### Efficient Query Processing""]","Question: How does Qdrant optimize memory and search speed for sparse vectors?\n\nContext: performance.



## Sparse Vector Index



*Available as of v1.7.0*



### Key Features of Sparse Vector Index

- **Support for Sparse Vectors:** Qdrant supports sparse vectors, characterized by a high proportion of zeroes.

- **Efficient Indexing:** Utilizes an inverted index structure to store vectors for each non-zero dimension, optimizing memory and search speed.



### Search Mechanism

- **Index Usage:** The index identifies vectors with non-zero values in query dimensions during a search.
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
- **Enable rescore**: Having the original vectors available, Qdrant can re-evaluate top-k search results using the original vectors. On large collections, this can improve the search quality, with just minor performance impact.





#### Memory and speed tuning



In this section, we will discuss how to tune the memory and speed of the search process with quantization.



There are 3 possible modes to place storage of vectors within the qdrant collection:
Our plan for the current [open-source roadmap](https://github.com/qdrant/qdrant/blob/master/docs/roadmap/README.md) is to make billion-scale vector search affordable. Our recent release of the [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/) improves both memory usage (x4) as well as speed (x2). Upcoming [Product Quantization](https://www.irisa.fr/texmex/people/jegou/papers/jegou_searching_with_quantization.pdf) will introduce even another option with more memory saving. Stay tuned
Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.





### Efficient Query Processing\n\nAnswer:",How does Qdrant optimize memory and search speed for sparse vectors?,"Qdrant optimizes memory and search speed for sparse vectors by utilizing an inverted index structure to store vectors for each non-zero dimension. This approach allows Qdrant to efficiently represent sparse vectors, which are characterized by a high proportion of zeroes. By only storing information about non-zero dimensions, Qdrant reduces the memory footprint required to store sparse vectors and also speeds up search operations by focusing only on relevant dimensions during indexing and querying processes. This optimization ensures that Qdrant can handle sparse vectors effectively while maintaining efficient memory usage and search performance.","['performance.\n\n\n\n## Sparse Vector Index\n\n\n\n*Available as of v1.7.0*\n\n\n\n### Key Features of Sparse Vector Index\n\n- **Support for Sparse Vectors:** Qdrant supports sparse vectors, characterized by a high proportion of zeroes.\n\n- **Efficient Indexing:** Utilizes an inverted index structure to store vectors for each non-zero dimension, optimizing memory and search speed.\n\n\n\n### Search Mechanism\n\n- **Index Usage:** The index identifies vectors with non-zero values in query dimensions during a search.', 'Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.\n\n\n\nIn addition to reducing the memory footprint, scalar quantization also speeds up the search process.\n\nQdrant uses a special SIMD CPU instruction to perform fast vector comparison.\n\nThis instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.', '- **Enable rescore**: Having the original vectors available, Qdrant can re-evaluate top-k search results using the original vectors. On large collections, this can improve the search quality, with just minor performance impact.\n\n\n\n\n\n#### Memory and speed tuning\n\n\n\nIn this section, we will discuss how to tune the memory and speed of the search process with quantization.\n\n\n\nThere are 3 possible modes to place storage of vectors within the qdrant collection:', 'Our plan for the current [open-source roadmap](https://github.com/qdrant/qdrant/blob/master/docs/roadmap/README.md) is to make billion-scale vector search affordable. Our recent release of the [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/) improves both memory usage (x4) as well as speed (x2). Upcoming [Product Quantization](https://www.irisa.fr/texmex/people/jegou/papers/jegou_searching_with_quantization.pdf) will introduce even another option with more memory saving. Stay tuned', ""Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.\n\n\n\n\n\n### Efficient Query Processing""]","performance.



## Sparse Vector Index



*Available as of v1.7.0*



### Key Features of Sparse Vector Index

- **Support for Sparse Vectors:** Qdrant supports sparse vectors, characterized by a high proportion of zeroes.

- **Efficient Indexing:** Utilizes an inverted index structure to store vectors for each non-zero dimension, optimizing memory and search speed.



### Search Mechanism

- **Index Usage:** The index identifies vectors with non-zero values in query dimensions during a search.
Effectively, this means that the amount of memory required to store a vector is reduced by a factor of 4.



In addition to reducing the memory footprint, scalar quantization also speeds up the search process.

Qdrant uses a special SIMD CPU instruction to perform fast vector comparison.

This instruction works with 8-bit integers, so the conversion to `uint8` allows Qdrant to perform the comparison faster.
- **Enable rescore**: Having the original vectors available, Qdrant can re-evaluate top-k search results using the original vectors. On large collections, this can improve the search quality, with just minor performance impact.





#### Memory and speed tuning



In this section, we will discuss how to tune the memory and speed of the search process with quantization.



There are 3 possible modes to place storage of vectors within the qdrant collection:
Our plan for the current [open-source roadmap](https://github.com/qdrant/qdrant/blob/master/docs/roadmap/README.md) is to make billion-scale vector search affordable. Our recent release of the [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/) improves both memory usage (x4) as well as speed (x2). Upcoming [Product Quantization](https://www.irisa.fr/texmex/people/jegou/papers/jegou_searching_with_quantization.pdf) will introduce even another option with more memory saving. Stay tuned
Systems like Qdrant exemplify scalability in vector databases. It leverages Rust's efficiency in **memory management** and **performance**, which allows handling of large-scale data with optimized resource usage.





### Efficient Query Processing",0.3364485981308411,0.7912087912087912,0.47213114754098356,0.22065727699530516,0.5222222222222223,0.31023102310231027,0.2102803738317757,0.4945054945054945,0.29508196721311475,0.308411214953271,0.7252747252747253,0.4327868852459016,0.9039942026138306,0.6546027660369873,0.7473756670951843,0.6979196667671204,0.7252893593894052,0.9834282093215734,216,2.347826086956522,0.46812924462342514
True,,2301.6079999999997,57377b8e,How does Qdrant address the limitations faced by the HNSW index when dealing with cases in the middle of weak and stringent filters?,"Qdrant addresses the limitations faced by the HNSW index when dealing with cases in the middle of weak and stringent filters by extending the HNSW graph with additional edges based on the stored payload values. This extension allows for more efficient searching of nearby vectors using the HNSW index while applying filters during the search in the graph. By adding extra edges, Qdrant minimizes the overhead on condition checks since the conditions only need to be calculated for a small fraction of the points involved in the search. This approach improves the performance of the HNSW index in cases where the traditional methods of weak filters or complete rescore are not optimal, providing a more balanced solution for scenarios that fall in between.","Qdrant addresses the limitations faced by the HNSW index when dealing with cases in the middle of weak and stringent filters by implementing additional filters during the search process. These filters enable users to incorporate custom logic on top of semantic similarity. Qdrant checks the conditions over the values that match the type of the filtering condition. If the stored value type does not fit the filtering condition, it will be considered not satisfied, potentially resulting in an empty output. This approach allows for more flexibility and control in querying and filtering data, ensuring accurate results while maintaining high performance and scalability.",".tech/articles/filtrable-hnsw/) and unique [filtering](https://qdrant.tech/documentation/concepts/filtering/) capabilities consistently lead to [highest RPS](https://qdrant.tech/benchmarks/), minimal latency, and high control with accuracy when running large-scale, high-dimensional operations.
Our unique custom modification of the [HNSW algorithm](https://qdrant.tech/articles/filtrable-hnsw/) for Approximate Nearest Neighbor Search (ANN) allows querying the result with a state-of-the-art speed and applying filters without compromising on results. Cloud-native support for distributed deployment and replications makes the engine suitable for high-throughput applications with real-time latency requirements
All right, keep going. I like it.



Rishabh Bhardwaj:

Yeah. So initially, during the experimentations, we begin with the default values for the HNSW algorithm that Qdrant ships with. And these benchmarks that I just told you about, it was based on those parameters. But as our use cases evolved, we also experimented on multiple values of basically M and EF construct that Qdrant allow us to specify in the indexing algorithm.



Demetrios:

Right.



Rishabh Bhardwaj:
This feature is implemented as additional filters during the search and will enable you to incorporate custom logic on top of semantic similarity.



During the filtering, Qdrant will check the conditions over those values that match the type of the filtering condition. If the stored value type does not fit the filtering condition - it will be considered not satisfied.



For example, you will get an empty output if you apply the [range condition](../filtering/#range) on the string data.
2. Learn how Qdrant, an open-source vector database, outperformed other solutions and provided an efficient solution for high-speed matching.

3. Explore the unique modification of the HNSW algorithm in Qdrant and how it optimized the performance of the solution.

4. Dive into the crucial role of geofiltering and how it ensures accurate matching based on hotel locations.

5. Gain insights into the considerations surrounding GDPR compliance and the secure handling of hotel data.","['.tech/articles/filtrable-hnsw/) and unique [filtering](https://qdrant.tech/documentation/concepts/filtering/) capabilities consistently lead to [highest RPS](https://qdrant.tech/benchmarks/), minimal latency, and high control with accuracy when running large-scale, high-dimensional operations.', 'Our unique custom modification of the [HNSW algorithm](https://qdrant.tech/articles/filtrable-hnsw/) for Approximate Nearest Neighbor Search (ANN) allows querying the result with a state-of-the-art speed and applying filters without compromising on results. Cloud-native support for distributed deployment and replications makes the engine suitable for high-throughput applications with real-time latency requirements', 'All right, keep going. I like it.\n\n\n\nRishabh Bhardwaj:\n\nYeah. So initially, during the experimentations, we begin with the default values for the HNSW algorithm that Qdrant ships with. And these benchmarks that I just told you about, it was based on those parameters. But as our use cases evolved, we also experimented on multiple values of basically M and EF construct that Qdrant allow us to specify in the indexing algorithm.\n\n\n\nDemetrios:\n\nRight.\n\n\n\nRishabh Bhardwaj:', 'This feature is implemented as additional filters during the search and will enable you to incorporate custom logic on top of semantic similarity.\n\n\n\nDuring the filtering, Qdrant will check the conditions over those values that match the type of the filtering condition. If the stored value type does not fit the filtering condition - it will be considered not satisfied.\n\n\n\nFor example, you will get an empty output if you apply the [range condition](../filtering/#range) on the string data.', '2. Learn how Qdrant, an open-source vector database, outperformed other solutions and provided an efficient solution for high-speed matching.\n\n3. Explore the unique modification of the HNSW algorithm in Qdrant and how it optimized the performance of the solution.\n\n4. Dive into the crucial role of geofiltering and how it ensures accurate matching based on hotel locations.\n\n5. Gain insights into the considerations surrounding GDPR compliance and the secure handling of hotel data.']","Question: How does Qdrant address the limitations faced by the HNSW index when dealing with cases in the middle of weak and stringent filters?\n\nContext: .tech/articles/filtrable-hnsw/) and unique [filtering](https://qdrant.tech/documentation/concepts/filtering/) capabilities consistently lead to [highest RPS](https://qdrant.tech/benchmarks/), minimal latency, and high control with accuracy when running large-scale, high-dimensional operations.
Our unique custom modification of the [HNSW algorithm](https://qdrant.tech/articles/filtrable-hnsw/) for Approximate Nearest Neighbor Search (ANN) allows querying the result with a state-of-the-art speed and applying filters without compromising on results. Cloud-native support for distributed deployment and replications makes the engine suitable for high-throughput applications with real-time latency requirements
All right, keep going. I like it.



Rishabh Bhardwaj:

Yeah. So initially, during the experimentations, we begin with the default values for the HNSW algorithm that Qdrant ships with. And these benchmarks that I just told you about, it was based on those parameters. But as our use cases evolved, we also experimented on multiple values of basically M and EF construct that Qdrant allow us to specify in the indexing algorithm.



Demetrios:

Right.



Rishabh Bhardwaj:
This feature is implemented as additional filters during the search and will enable you to incorporate custom logic on top of semantic similarity.



During the filtering, Qdrant will check the conditions over those values that match the type of the filtering condition. If the stored value type does not fit the filtering condition - it will be considered not satisfied.



For example, you will get an empty output if you apply the [range condition](../filtering/#range) on the string data.
2. Learn how Qdrant, an open-source vector database, outperformed other solutions and provided an efficient solution for high-speed matching.

3. Explore the unique modification of the HNSW algorithm in Qdrant and how it optimized the performance of the solution.

4. Dive into the crucial role of geofiltering and how it ensures accurate matching based on hotel locations.

5. Gain insights into the considerations surrounding GDPR compliance and the secure handling of hotel data.\n\nAnswer:",How does Qdrant address the limitations faced by the HNSW index when dealing with cases in the middle of weak and stringent filters?,"Qdrant addresses the limitations faced by the HNSW index when dealing with cases in the middle of weak and stringent filters by extending the HNSW graph with additional edges based on the stored payload values. This extension allows for more efficient searching of nearby vectors using the HNSW index while applying filters during the search in the graph. By adding extra edges, Qdrant minimizes the overhead on condition checks since the conditions only need to be calculated for a small fraction of the points involved in the search. This approach improves the performance of the HNSW index in cases where the traditional methods of weak filters or complete rescore are not optimal, providing a more balanced solution for scenarios that fall in between.","['.tech/articles/filtrable-hnsw/) and unique [filtering](https://qdrant.tech/documentation/concepts/filtering/) capabilities consistently lead to [highest RPS](https://qdrant.tech/benchmarks/), minimal latency, and high control with accuracy when running large-scale, high-dimensional operations.', 'Our unique custom modification of the [HNSW algorithm](https://qdrant.tech/articles/filtrable-hnsw/) for Approximate Nearest Neighbor Search (ANN) allows querying the result with a state-of-the-art speed and applying filters without compromising on results. Cloud-native support for distributed deployment and replications makes the engine suitable for high-throughput applications with real-time latency requirements', 'All right, keep going. I like it.\n\n\n\nRishabh Bhardwaj:\n\nYeah. So initially, during the experimentations, we begin with the default values for the HNSW algorithm that Qdrant ships with. And these benchmarks that I just told you about, it was based on those parameters. But as our use cases evolved, we also experimented on multiple values of basically M and EF construct that Qdrant allow us to specify in the indexing algorithm.\n\n\n\nDemetrios:\n\nRight.\n\n\n\nRishabh Bhardwaj:', 'This feature is implemented as additional filters during the search and will enable you to incorporate custom logic on top of semantic similarity.\n\n\n\nDuring the filtering, Qdrant will check the conditions over those values that match the type of the filtering condition. If the stored value type does not fit the filtering condition - it will be considered not satisfied.\n\n\n\nFor example, you will get an empty output if you apply the [range condition](../filtering/#range) on the string data.', '2. Learn how Qdrant, an open-source vector database, outperformed other solutions and provided an efficient solution for high-speed matching.\n\n3. Explore the unique modification of the HNSW algorithm in Qdrant and how it optimized the performance of the solution.\n\n4. Dive into the crucial role of geofiltering and how it ensures accurate matching based on hotel locations.\n\n5. Gain insights into the considerations surrounding GDPR compliance and the secure handling of hotel data.']",".tech/articles/filtrable-hnsw/) and unique [filtering](https://qdrant.tech/documentation/concepts/filtering/) capabilities consistently lead to [highest RPS](https://qdrant.tech/benchmarks/), minimal latency, and high control with accuracy when running large-scale, high-dimensional operations.
Our unique custom modification of the [HNSW algorithm](https://qdrant.tech/articles/filtrable-hnsw/) for Approximate Nearest Neighbor Search (ANN) allows querying the result with a state-of-the-art speed and applying filters without compromising on results. Cloud-native support for distributed deployment and replications makes the engine suitable for high-throughput applications with real-time latency requirements
All right, keep going. I like it.



Rishabh Bhardwaj:

Yeah. So initially, during the experimentations, we begin with the default values for the HNSW algorithm that Qdrant ships with. And these benchmarks that I just told you about, it was based on those parameters. But as our use cases evolved, we also experimented on multiple values of basically M and EF construct that Qdrant allow us to specify in the indexing algorithm.



Demetrios:

Right.



Rishabh Bhardwaj:
This feature is implemented as additional filters during the search and will enable you to incorporate custom logic on top of semantic similarity.



During the filtering, Qdrant will check the conditions over those values that match the type of the filtering condition. If the stored value type does not fit the filtering condition - it will be considered not satisfied.



For example, you will get an empty output if you apply the [range condition](../filtering/#range) on the string data.
2. Learn how Qdrant, an open-source vector database, outperformed other solutions and provided an efficient solution for high-speed matching.

3. Explore the unique modification of the HNSW algorithm in Qdrant and how it optimized the performance of the solution.

4. Dive into the crucial role of geofiltering and how it ensures accurate matching based on hotel locations.

5. Gain insights into the considerations surrounding GDPR compliance and the secure handling of hotel data.",0.5054945054945055,0.4339622641509434,0.467005076142132,0.25555555555555554,0.21904761904761905,0.2358974358974359,0.3516483516483517,0.3018867924528302,0.32487309644670054,0.4725274725274725,0.4056603773584906,0.4365482233502538,0.7781713008880615,0.6704431176185608,0.6652013063430786,0.6678118705749512,0.9900638501043432,0.824019433464855,102,0.8292682926829268,0.3662802608922196
True,,2967.48,8948d40d,How is metric learning utilized in addressing the challenge of detecting anomalies in coffee beans?,"Metric learning is utilized in addressing the challenge of detecting anomalies in coffee beans by encoding images in an n-dimensional vector space and using learned similarities to label images during the inference process. This approach involves representing the images in a vector space where similar images are closer together in the space. By doing so, the model can effectively classify and detect anomalies in coffee beans based on the similarities learned during training. The KNN (K-Nearest Neighbors) classification method is commonly used in this approach as it simplifies the process of determining the class label of an image based on the labels of its nearest neighbors in the vector space. This method allows for the adaptation to new types of defects and changing shooting conditions, making the model more robust and accurate in detecting anomalies in coffee beans.","Metric learning is utilized in addressing the challenge of detecting anomalies in coffee beans by using a similarity learning approach. This approach allows for the detection of anomalies in coffee beans with just 200 labeled samples, which is a small amount of data compared to traditional supervised classification methods. By leveraging metric learning, the system can benefit from unlabeled data, reducing the need for extensive labeling which can be time-consuming and expensive. Additionally, the relevant metric, such as precision or recall, can be adjusted based on changing requirements without the need for re-training the model. Queries labeled with high scores can also be dynamically added to the KNN classifier as new data points are encountered, enhancing the anomaly detection capabilities of the system. This method provides a more efficient and adaptive way to detect anomalies in coffee beans, especially in situations where new types of defects appear, and shooting conditions change, making traditional supervised approaches insufficient.","{{< figure src=/articles_data/detecting-coffee-anomalies/detection.gif caption=""Anomalies in coffee"" width=""400px"" >}}



We should note that anomalies are very diverse, so the enumeration of all possible anomalies is a challenging task on it's own.

In the course of work, new types of defects appear, and shooting conditions change. Thus, a one-time labeled dataset becomes insufficient.



Let's find out how metric learning might help to address this challenge.



## Metric Learning Approach
---

title: Metric Learning for Anomaly Detection

short_description: ""How to use metric learning to detect anomalies: quality assessment of coffee beans with just 200 labelled samples""

description: Practical use of metric learning for anomaly detection. A way to match the results of a classification-based approach with only ~0.6% of the labeled data.

social_preview_image: /articles_data/detecting-coffee-anomalies/preview/social_preview.jpg

preview_dir: /articles_data/detecting-coffee-anomalies/preview
{{< figure src=/articles_data/detecting-coffee-anomalies/anomalies_detection.png caption=""Production deployment"" >}}



This approach has the following advantages:



* We can benefit from unlabeled data, considering labeling is time-consuming and expensive.

* The relevant metric, e.g., precision or recall, can be tuned according to changing requirements during the inference without re-training.

* Queries labeled with a high score can be added to the KNN classifier on the fly as new data points.
We will describe our approach in the further articles.



This time it converged smoothly, and our evaluation metrics also improved considerably to match the supervised classification approach.



{{< figure src=/articles_data/detecting-coffee-anomalies/ae_report_knn.png caption=""Metrics for the autoencoder model with KNN classifier"" >}}



{{< figure src=/articles_data/detecting-coffee-anomalies/ft_report_knn.png caption=""Metrics for the finetuned model with KNN classifier"" >}}
---

title: Anomalies Detection

icon: bot

tabid: anomalies

image: /content/images/solutions/anomaly_detection.svg

image_caption: Automated FAQ

default_link: /articles/detecting-coffee-anomalies/

default_link_name: 

weight: 60

draft: false

short_description: |

    Anomaly detection is one of the non-obvious applications of Similarity Learning.

    However, it has a number of properties that make it an excellent way to [approach anomaly detection](/articles/detecting-coffee-anomalies/).","['{{< figure src=/articles_data/detecting-coffee-anomalies/detection.gif caption=""Anomalies in coffee"" width=""400px"" >}}\n\n\n\nWe should note that anomalies are very diverse, so the enumeration of all possible anomalies is a challenging task on it\'s own.\n\nIn the course of work, new types of defects appear, and shooting conditions change. Thus, a one-time labeled dataset becomes insufficient.\n\n\n\nLet\'s find out how metric learning might help to address this challenge.\n\n\n\n## Metric Learning Approach', '---\n\ntitle: Metric Learning for Anomaly Detection\n\nshort_description: ""How to use metric learning to detect anomalies: quality assessment of coffee beans with just 200 labelled samples""\n\ndescription: Practical use of metric learning for anomaly detection. A way to match the results of a classification-based approach with only ~0.6% of the labeled data.\n\nsocial_preview_image: /articles_data/detecting-coffee-anomalies/preview/social_preview.jpg\n\npreview_dir: /articles_data/detecting-coffee-anomalies/preview', '{{< figure src=/articles_data/detecting-coffee-anomalies/anomalies_detection.png caption=""Production deployment"" >}}\n\n\n\nThis approach has the following advantages:\n\n\n\n* We can benefit from unlabeled data, considering labeling is time-consuming and expensive.\n\n* The relevant metric, e.g., precision or recall, can be tuned according to changing requirements during the inference without re-training.\n\n* Queries labeled with a high score can be added to the KNN classifier on the fly as new data points.', 'We will describe our approach in the further articles.\n\n\n\nThis time it converged smoothly, and our evaluation metrics also improved considerably to match the supervised classification approach.\n\n\n\n{{< figure src=/articles_data/detecting-coffee-anomalies/ae_report_knn.png caption=""Metrics for the autoencoder model with KNN classifier"" >}}\n\n\n\n{{< figure src=/articles_data/detecting-coffee-anomalies/ft_report_knn.png caption=""Metrics for the finetuned model with KNN classifier"" >}}', '---\n\ntitle: Anomalies Detection\n\nicon: bot\n\ntabid: anomalies\n\nimage: /content/images/solutions/anomaly_detection.svg\n\nimage_caption: Automated FAQ\n\ndefault_link: /articles/detecting-coffee-anomalies/\n\ndefault_link_name: \n\nweight: 60\n\ndraft: false\n\nshort_description: |\n\n    Anomaly detection is one of the non-obvious applications of Similarity Learning.\n\n    However, it has a number of properties that make it an excellent way to [approach anomaly detection](/articles/detecting-coffee-anomalies/).']","Question: How is metric learning utilized in addressing the challenge of detecting anomalies in coffee beans?\n\nContext: {{< figure src=/articles_data/detecting-coffee-anomalies/detection.gif caption=""Anomalies in coffee"" width=""400px"" >}}



We should note that anomalies are very diverse, so the enumeration of all possible anomalies is a challenging task on it's own.

In the course of work, new types of defects appear, and shooting conditions change. Thus, a one-time labeled dataset becomes insufficient.



Let's find out how metric learning might help to address this challenge.



## Metric Learning Approach
---

title: Metric Learning for Anomaly Detection

short_description: ""How to use metric learning to detect anomalies: quality assessment of coffee beans with just 200 labelled samples""

description: Practical use of metric learning for anomaly detection. A way to match the results of a classification-based approach with only ~0.6% of the labeled data.

social_preview_image: /articles_data/detecting-coffee-anomalies/preview/social_preview.jpg

preview_dir: /articles_data/detecting-coffee-anomalies/preview
{{< figure src=/articles_data/detecting-coffee-anomalies/anomalies_detection.png caption=""Production deployment"" >}}



This approach has the following advantages:



* We can benefit from unlabeled data, considering labeling is time-consuming and expensive.

* The relevant metric, e.g., precision or recall, can be tuned according to changing requirements during the inference without re-training.

* Queries labeled with a high score can be added to the KNN classifier on the fly as new data points.
We will describe our approach in the further articles.



This time it converged smoothly, and our evaluation metrics also improved considerably to match the supervised classification approach.



{{< figure src=/articles_data/detecting-coffee-anomalies/ae_report_knn.png caption=""Metrics for the autoencoder model with KNN classifier"" >}}



{{< figure src=/articles_data/detecting-coffee-anomalies/ft_report_knn.png caption=""Metrics for the finetuned model with KNN classifier"" >}}
---

title: Anomalies Detection

icon: bot

tabid: anomalies

image: /content/images/solutions/anomaly_detection.svg

image_caption: Automated FAQ

default_link: /articles/detecting-coffee-anomalies/

default_link_name: 

weight: 60

draft: false

short_description: |

Anomaly detection is one of the non-obvious applications of Similarity Learning.

However, it has a number of properties that make it an excellent way to [approach anomaly detection](/articles/detecting-coffee-anomalies/).\n\nAnswer:",How is metric learning utilized in addressing the challenge of detecting anomalies in coffee beans?,"Metric learning is utilized in addressing the challenge of detecting anomalies in coffee beans by encoding images in an n-dimensional vector space and using learned similarities to label images during the inference process. This approach involves representing the images in a vector space where similar images are closer together in the space. By doing so, the model can effectively classify and detect anomalies in coffee beans based on the similarities learned during training. The KNN (K-Nearest Neighbors) classification method is commonly used in this approach as it simplifies the process of determining the class label of an image based on the labels of its nearest neighbors in the vector space. This method allows for the adaptation to new types of defects and changing shooting conditions, making the model more robust and accurate in detecting anomalies in coffee beans.","['{{< figure src=/articles_data/detecting-coffee-anomalies/detection.gif caption=""Anomalies in coffee"" width=""400px"" >}}\n\n\n\nWe should note that anomalies are very diverse, so the enumeration of all possible anomalies is a challenging task on it\'s own.\n\nIn the course of work, new types of defects appear, and shooting conditions change. Thus, a one-time labeled dataset becomes insufficient.\n\n\n\nLet\'s find out how metric learning might help to address this challenge.\n\n\n\n## Metric Learning Approach', '---\n\ntitle: Metric Learning for Anomaly Detection\n\nshort_description: ""How to use metric learning to detect anomalies: quality assessment of coffee beans with just 200 labelled samples""\n\ndescription: Practical use of metric learning for anomaly detection. A way to match the results of a classification-based approach with only ~0.6% of the labeled data.\n\nsocial_preview_image: /articles_data/detecting-coffee-anomalies/preview/social_preview.jpg\n\npreview_dir: /articles_data/detecting-coffee-anomalies/preview', '{{< figure src=/articles_data/detecting-coffee-anomalies/anomalies_detection.png caption=""Production deployment"" >}}\n\n\n\nThis approach has the following advantages:\n\n\n\n* We can benefit from unlabeled data, considering labeling is time-consuming and expensive.\n\n* The relevant metric, e.g., precision or recall, can be tuned according to changing requirements during the inference without re-training.\n\n* Queries labeled with a high score can be added to the KNN classifier on the fly as new data points.', 'We will describe our approach in the further articles.\n\n\n\nThis time it converged smoothly, and our evaluation metrics also improved considerably to match the supervised classification approach.\n\n\n\n{{< figure src=/articles_data/detecting-coffee-anomalies/ae_report_knn.png caption=""Metrics for the autoencoder model with KNN classifier"" >}}\n\n\n\n{{< figure src=/articles_data/detecting-coffee-anomalies/ft_report_knn.png caption=""Metrics for the finetuned model with KNN classifier"" >}}', '---\n\ntitle: Anomalies Detection\n\nicon: bot\n\ntabid: anomalies\n\nimage: /content/images/solutions/anomaly_detection.svg\n\nimage_caption: Automated FAQ\n\ndefault_link: /articles/detecting-coffee-anomalies/\n\ndefault_link_name: \n\nweight: 60\n\ndraft: false\n\nshort_description: |\n\n    Anomaly detection is one of the non-obvious applications of Similarity Learning.\n\n    However, it has a number of properties that make it an excellent way to [approach anomaly detection](/articles/detecting-coffee-anomalies/).']","{{< figure src=/articles_data/detecting-coffee-anomalies/detection.gif caption=""Anomalies in coffee"" width=""400px"" >}}



We should note that anomalies are very diverse, so the enumeration of all possible anomalies is a challenging task on it's own.

In the course of work, new types of defects appear, and shooting conditions change. Thus, a one-time labeled dataset becomes insufficient.



Let's find out how metric learning might help to address this challenge.



## Metric Learning Approach
---

title: Metric Learning for Anomaly Detection

short_description: ""How to use metric learning to detect anomalies: quality assessment of coffee beans with just 200 labelled samples""

description: Practical use of metric learning for anomaly detection. A way to match the results of a classification-based approach with only ~0.6% of the labeled data.

social_preview_image: /articles_data/detecting-coffee-anomalies/preview/social_preview.jpg

preview_dir: /articles_data/detecting-coffee-anomalies/preview
{{< figure src=/articles_data/detecting-coffee-anomalies/anomalies_detection.png caption=""Production deployment"" >}}



This approach has the following advantages:



* We can benefit from unlabeled data, considering labeling is time-consuming and expensive.

* The relevant metric, e.g., precision or recall, can be tuned according to changing requirements during the inference without re-training.

* Queries labeled with a high score can be added to the KNN classifier on the fly as new data points.
We will describe our approach in the further articles.



This time it converged smoothly, and our evaluation metrics also improved considerably to match the supervised classification approach.



{{< figure src=/articles_data/detecting-coffee-anomalies/ae_report_knn.png caption=""Metrics for the autoencoder model with KNN classifier"" >}}



{{< figure src=/articles_data/detecting-coffee-anomalies/ft_report_knn.png caption=""Metrics for the finetuned model with KNN classifier"" >}}
---

title: Anomalies Detection

icon: bot

tabid: anomalies

image: /content/images/solutions/anomaly_detection.svg

image_caption: Automated FAQ

default_link: /articles/detecting-coffee-anomalies/

default_link_name: 

weight: 60

draft: false

short_description: |

    Anomaly detection is one of the non-obvious applications of Similarity Learning.

    However, it has a number of properties that make it an excellent way to [approach anomaly detection](/articles/detecting-coffee-anomalies/).",0.4896551724137931,0.5725806451612904,0.5278810408921933,0.20833333333333334,0.24390243902439024,0.22471910112359547,0.2896551724137931,0.3387096774193548,0.31226765799256506,0.4482758620689655,0.5241935483870968,0.483271375464684,0.832805871963501,0.6590758562088013,0.6797046661376953,0.6692313551902771,0.9924488993904864,0.7972076502628624,156,1.1304347826086956,0.5735324855381473
True,,3554.8540000000003,1ef888b8,How can one reproduce the benchmark for Open Source vector databases?,"To reproduce the benchmark for Open Source vector databases, one can access the source code available on Github at https://github.com/qdrant/vector-db-benchmark. The repository contains a `README.md` file that provides detailed instructions on how to run the benchmark for a specific engine. By following the guidelines outlined in the README file, individuals can easily replicate the benchmarks conducted on the Open Source vector databases. Additionally, the document emphasizes the importance of transparency in the benchmarking process and invites contributions from individuals who may be able to provide insights, identify misconfigurations, or suggest improvements. Interested parties can contribute to the benchmarking efforts by accessing the benchmark repository at https://github.com/qdrant/vector-db-benchmark.","To reproduce the benchmark for Open Source vector databases, you can follow these steps:

1. Access the source code on Github: Visit the repository at [https://github.com/qdrant/vector-db-benchmark](https://github.com/qdrant/vector-db-benchmark) to get the benchmarking code.

2. Review the README.md file: The README file in the repository describes the process of running the benchmark for a specific engine. It provides instructions and guidance on how to set up and execute the benchmark.

3. Experiment with configurations: You can experiment with different configurations within the benchmarking framework to compare the performance of various vector databases.

4. Contribute and improve: The benchmarks are open-sourced, so contributions are welcome. If you believe you can enhance the benchmarking process or results, feel free to participate and improve the performance of vector databases.

By following these steps, you can reproduce the benchmark for Open Source vector databases and contribute to the development and improvement of the benchmarking framework.","That makes the comparison unfair. That’s why we purely focused on testing the Open Source vector databases, so everybody may reproduce the benchmarks easily.



This is not the final list, and we’ll continue benchmarking as many different engines as possible.



## How to reproduce the benchmark?



The source code is available on [Github](https://github.com/qdrant/vector-db-benchmark) and has a `README.md` file describing the process of running the benchmark for a specific engine.
However, we tried our best, kept scrolling the docs up and down, experimented with combinations of different configurations, and gave all of them an equal chance to stand out. If you believe you can do it better than us, our **benchmarks are fully [open-sourced](https://github.com/qdrant/vector-db-benchmark), and contributions are welcome**!





## What do we measure?



There are several factors considered while deciding on which database to use.
If you're interested in testing the benchmark yourself or want to contribute to its development, head over to our [benchmark repository](https://github.com/qdrant/vector-db-benchmark). We appreciate your support and involvement in improving the performance of vector databases.
There is one important thing - **the speed of the vector databases should to be compared only if they achieve the same precision**. Otherwise, they could maximize the speed factors by providing inaccurate results, which everybody would rather avoid. Thus, our benchmark results are compared only at a specific search precision threshold.



## How we select hardware?



In our experiments, we are not focusing on the absolute values of the metrics but rather on a relative comparison of different engines.
---

title: Vector Database Benchmarks

description: The first comparative benchmark and benchmarking framework for vector search engines and vector databases.

keywords:

  - vector databases comparative benchmark

  - ANN Benchmark

  - Qdrant vs Milvus

  - Qdrant vs Weaviate

  - Qdrant vs Redis

  - Qdrant vs ElasticSearch

  - benchmark

  - performance

  - latency

  - RPS

  - comparison

  - vector search

  - embedding

preview_image: /benchmarks/benchmark-1.png","['That makes the comparison unfair. That’s why we purely focused on testing the Open Source vector databases, so everybody may reproduce the benchmarks easily.\n\n\n\nThis is not the final list, and we’ll continue benchmarking as many different engines as possible.\n\n\n\n## How to reproduce the benchmark?\n\n\n\nThe source code is available on [Github](https://github.com/qdrant/vector-db-benchmark) and has a `README.md` file describing the process of running the benchmark for a specific engine.', 'However, we tried our best, kept scrolling the docs up and down, experimented with combinations of different configurations, and gave all of them an equal chance to stand out. If you believe you can do it better than us, our **benchmarks are fully [open-sourced](https://github.com/qdrant/vector-db-benchmark), and contributions are welcome**!\n\n\n\n\n\n## What do we measure?\n\n\n\nThere are several factors considered while deciding on which database to use.', ""If you're interested in testing the benchmark yourself or want to contribute to its development, head over to our [benchmark repository](https://github.com/qdrant/vector-db-benchmark). We appreciate your support and involvement in improving the performance of vector databases."", 'There is one important thing - **the speed of the vector databases should to be compared only if they achieve the same precision**. Otherwise, they could maximize the speed factors by providing inaccurate results, which everybody would rather avoid. Thus, our benchmark results are compared only at a specific search precision threshold.\n\n\n\n## How we select hardware?\n\n\n\nIn our experiments, we are not focusing on the absolute values of the metrics but rather on a relative comparison of different engines.', '---\n\ntitle: Vector Database Benchmarks\n\ndescription: The first comparative benchmark and benchmarking framework for vector search engines and vector databases.\n\nkeywords:\n\n  - vector databases comparative benchmark\n\n  - ANN Benchmark\n\n  - Qdrant vs Milvus\n\n  - Qdrant vs Weaviate\n\n  - Qdrant vs Redis\n\n  - Qdrant vs ElasticSearch\n\n  - benchmark\n\n  - performance\n\n  - latency\n\n  - RPS\n\n  - comparison\n\n  - vector search\n\n  - embedding\n\npreview_image: /benchmarks/benchmark-1.png']","Question: How can one reproduce the benchmark for Open Source vector databases?\n\nContext: That makes the comparison unfair. That’s why we purely focused on testing the Open Source vector databases, so everybody may reproduce the benchmarks easily.



This is not the final list, and we’ll continue benchmarking as many different engines as possible.



## How to reproduce the benchmark?



The source code is available on [Github](https://github.com/qdrant/vector-db-benchmark) and has a `README.md` file describing the process of running the benchmark for a specific engine.
However, we tried our best, kept scrolling the docs up and down, experimented with combinations of different configurations, and gave all of them an equal chance to stand out. If you believe you can do it better than us, our **benchmarks are fully [open-sourced](https://github.com/qdrant/vector-db-benchmark), and contributions are welcome**!





## What do we measure?



There are several factors considered while deciding on which database to use.
If you're interested in testing the benchmark yourself or want to contribute to its development, head over to our [benchmark repository](https://github.com/qdrant/vector-db-benchmark). We appreciate your support and involvement in improving the performance of vector databases.
There is one important thing - **the speed of the vector databases should to be compared only if they achieve the same precision**. Otherwise, they could maximize the speed factors by providing inaccurate results, which everybody would rather avoid. Thus, our benchmark results are compared only at a specific search precision threshold.



## How we select hardware?



In our experiments, we are not focusing on the absolute values of the metrics but rather on a relative comparison of different engines.
---

title: Vector Database Benchmarks

description: The first comparative benchmark and benchmarking framework for vector search engines and vector databases.

keywords:

- vector databases comparative benchmark

- ANN Benchmark

- Qdrant vs Milvus

- Qdrant vs Weaviate

- Qdrant vs Redis

- Qdrant vs ElasticSearch

- benchmark

- performance

- latency

- RPS

- comparison

- vector search

- embedding

preview_image: /benchmarks/benchmark-1.png\n\nAnswer:",How can one reproduce the benchmark for Open Source vector databases?,"To reproduce the benchmark for Open Source vector databases, one can access the source code available on Github at https://github.com/qdrant/vector-db-benchmark. The repository contains a `README.md` file that provides detailed instructions on how to run the benchmark for a specific engine. By following the guidelines outlined in the README file, individuals can easily replicate the benchmarks conducted on the Open Source vector databases. Additionally, the document emphasizes the importance of transparency in the benchmarking process and invites contributions from individuals who may be able to provide insights, identify misconfigurations, or suggest improvements. Interested parties can contribute to the benchmarking efforts by accessing the benchmark repository at https://github.com/qdrant/vector-db-benchmark.","['That makes the comparison unfair. That’s why we purely focused on testing the Open Source vector databases, so everybody may reproduce the benchmarks easily.\n\n\n\nThis is not the final list, and we’ll continue benchmarking as many different engines as possible.\n\n\n\n## How to reproduce the benchmark?\n\n\n\nThe source code is available on [Github](https://github.com/qdrant/vector-db-benchmark) and has a `README.md` file describing the process of running the benchmark for a specific engine.', 'However, we tried our best, kept scrolling the docs up and down, experimented with combinations of different configurations, and gave all of them an equal chance to stand out. If you believe you can do it better than us, our **benchmarks are fully [open-sourced](https://github.com/qdrant/vector-db-benchmark), and contributions are welcome**!\n\n\n\n\n\n## What do we measure?\n\n\n\nThere are several factors considered while deciding on which database to use.', ""If you're interested in testing the benchmark yourself or want to contribute to its development, head over to our [benchmark repository](https://github.com/qdrant/vector-db-benchmark). We appreciate your support and involvement in improving the performance of vector databases."", 'There is one important thing - **the speed of the vector databases should to be compared only if they achieve the same precision**. Otherwise, they could maximize the speed factors by providing inaccurate results, which everybody would rather avoid. Thus, our benchmark results are compared only at a specific search precision threshold.\n\n\n\n## How we select hardware?\n\n\n\nIn our experiments, we are not focusing on the absolute values of the metrics but rather on a relative comparison of different engines.', '---\n\ntitle: Vector Database Benchmarks\n\ndescription: The first comparative benchmark and benchmarking framework for vector search engines and vector databases.\n\nkeywords:\n\n  - vector databases comparative benchmark\n\n  - ANN Benchmark\n\n  - Qdrant vs Milvus\n\n  - Qdrant vs Weaviate\n\n  - Qdrant vs Redis\n\n  - Qdrant vs ElasticSearch\n\n  - benchmark\n\n  - performance\n\n  - latency\n\n  - RPS\n\n  - comparison\n\n  - vector search\n\n  - embedding\n\npreview_image: /benchmarks/benchmark-1.png']","That makes the comparison unfair. That’s why we purely focused on testing the Open Source vector databases, so everybody may reproduce the benchmarks easily.



This is not the final list, and we’ll continue benchmarking as many different engines as possible.



## How to reproduce the benchmark?



The source code is available on [Github](https://github.com/qdrant/vector-db-benchmark) and has a `README.md` file describing the process of running the benchmark for a specific engine.
However, we tried our best, kept scrolling the docs up and down, experimented with combinations of different configurations, and gave all of them an equal chance to stand out. If you believe you can do it better than us, our **benchmarks are fully [open-sourced](https://github.com/qdrant/vector-db-benchmark), and contributions are welcome**!





## What do we measure?



There are several factors considered while deciding on which database to use.
If you're interested in testing the benchmark yourself or want to contribute to its development, head over to our [benchmark repository](https://github.com/qdrant/vector-db-benchmark). We appreciate your support and involvement in improving the performance of vector databases.
There is one important thing - **the speed of the vector databases should to be compared only if they achieve the same precision**. Otherwise, they could maximize the speed factors by providing inaccurate results, which everybody would rather avoid. Thus, our benchmark results are compared only at a specific search precision threshold.



## How we select hardware?



In our experiments, we are not focusing on the absolute values of the metrics but rather on a relative comparison of different engines.
---

title: Vector Database Benchmarks

description: The first comparative benchmark and benchmarking framework for vector search engines and vector databases.

keywords:

  - vector databases comparative benchmark

  - ANN Benchmark

  - Qdrant vs Milvus

  - Qdrant vs Weaviate

  - Qdrant vs Redis

  - Qdrant vs ElasticSearch

  - benchmark

  - performance

  - latency

  - RPS

  - comparison

  - vector search

  - embedding

preview_image: /benchmarks/benchmark-1.png",0.4722222222222222,0.6538461538461539,0.5483870967741936,0.2727272727272727,0.3786407766990291,0.31707317073170727,0.3055555555555556,0.4230769230769231,0.3548387096774194,0.4513888888888889,0.625,0.5241935483870969,0.9450334310531616,0.725393533706665,0.7515247464179993,0.7382279634475708,0.8561950637958944,0.9672895598749165,151,1.3981481481481481,0.5866135200635582
True,,2100.3250000000003,c1486118,What is the purpose of the `ordering` parameter in Qdrant and when should it be used?,"The `ordering` parameter in Qdrant is used with update and delete operations to ensure that the operations are executed in the same order on all replicas. When this option is enabled, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This is beneficial in preventing data inconsistency that may arise from concurrent updates of the same documents. The `ordering` parameter is particularly recommended when read operations are more frequent than updates and when search performance is critical. By enforcing a specific order of operations across replicas, the `ordering` parameter helps maintain data consistency and integrity in distributed environments.","The purpose of the `ordering` parameter in Qdrant is to ensure that update and delete operations are executed in the same order on all replicas. When the `ordering` parameter is used with these operations, Qdrant routes the operation to the leader replica of the shard and waits for the response before responding to the client. This helps to avoid data inconsistency in cases of concurrent updates to the same documents. 

In summary, the `ordering` parameter in Qdrant is used to enforce strong ordering of operations to maintain data consistency across replicas, especially in scenarios where concurrent updates need to be synchronized.","- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents
Payload = { [""city""] = ""blue"" }

		}

	},

	ordering: WriteOrderingType.Strong

);

```



## Listener mode



<aside role=""alert"">This is an experimental feature, its behavior may change in the future.</aside>



In some cases it might be useful to have a Qdrant node that only accumulates data and does not participate in search operations.

There are several scenarios where this can be useful:
. In that case, the Python client for Qdrant also provides a parameter called exact, and if we specify it as true, then it basically does not use indexing and it makes a full search on the whole vector collection, basically.
Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk.
```json

{

  ""indices"": [6, 7],

  ""values"": [1.0, 2.0]

}

```



The `indices` and `values` arrays must have the same length.

And the `indices` must be unique.



If the `indices` are not sorted, Qdrant will sort them internally so you may not rely on the order of the elements.



Sparse vectors must be named and can be uploaded in the same way as dense vectors.



```http

PUT /collections/{collection_name}/points

{

    ""points"": [

        {

            ""id"": 1,

            ""vector"": {","['- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents', 'Payload = { [""city""] = ""blue"" }\n\n\t\t}\n\n\t},\n\n\tordering: WriteOrderingType.Strong\n\n);\n\n```\n\n\n\n## Listener mode\n\n\n\n<aside role=""alert"">This is an experimental feature, its behavior may change in the future.</aside>\n\n\n\nIn some cases it might be useful to have a Qdrant node that only accumulates data and does not participate in search operations.\n\nThere are several scenarios where this can be useful:', '. In that case, the Python client for Qdrant also provides a parameter called exact, and if we specify it as true, then it basically does not use indexing and it makes a full search on the whole vector collection, basically.', ""Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk."", '```json\n\n{\n\n  ""indices"": [6, 7],\n\n  ""values"": [1.0, 2.0]\n\n}\n\n```\n\n\n\nThe `indices` and `values` arrays must have the same length.\n\nAnd the `indices` must be unique.\n\n\n\nIf the `indices` are not sorted, Qdrant will sort them internally so you may not rely on the order of the elements.\n\n\n\nSparse vectors must be named and can be uploaded in the same way as dense vectors.\n\n\n\n```http\n\nPUT /collections/{collection_name}/points\n\n{\n\n    ""points"": [\n\n        {\n\n            ""id"": 1,\n\n            ""vector"": {']","Question: What is the purpose of the `ordering` parameter in Qdrant and when should it be used?\n\nContext: - Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents
Payload = { [""city""] = ""blue"" }

}

},

ordering: WriteOrderingType.Strong

);

```



## Listener mode



<aside role=""alert"">This is an experimental feature, its behavior may change in the future.</aside>



In some cases it might be useful to have a Qdrant node that only accumulates data and does not participate in search operations.

There are several scenarios where this can be useful:
. In that case, the Python client for Qdrant also provides a parameter called exact, and if we specify it as true, then it basically does not use indexing and it makes a full search on the whole vector collection, basically.
Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk.
```json

{

""indices"": [6, 7],

""values"": [1.0, 2.0]

}

```



The `indices` and `values` arrays must have the same length.

And the `indices` must be unique.



If the `indices` are not sorted, Qdrant will sort them internally so you may not rely on the order of the elements.



Sparse vectors must be named and can be uploaded in the same way as dense vectors.



```http

PUT /collections/{collection_name}/points

{

""points"": [

{

""id"": 1,

""vector"": {\n\nAnswer:",What is the purpose of the `ordering` parameter in Qdrant and when should it be used?,"The `ordering` parameter in Qdrant is used with update and delete operations to ensure that the operations are executed in the same order on all replicas. When this option is enabled, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This is beneficial in preventing data inconsistency that may arise from concurrent updates of the same documents. The `ordering` parameter is particularly recommended when read operations are more frequent than updates and when search performance is critical. By enforcing a specific order of operations across replicas, the `ordering` parameter helps maintain data consistency and integrity in distributed environments.","['- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents', 'Payload = { [""city""] = ""blue"" }\n\n\t\t}\n\n\t},\n\n\tordering: WriteOrderingType.Strong\n\n);\n\n```\n\n\n\n## Listener mode\n\n\n\n<aside role=""alert"">This is an experimental feature, its behavior may change in the future.</aside>\n\n\n\nIn some cases it might be useful to have a Qdrant node that only accumulates data and does not participate in search operations.\n\nThere are several scenarios where this can be useful:', '. In that case, the Python client for Qdrant also provides a parameter called exact, and if we specify it as true, then it basically does not use indexing and it makes a full search on the whole vector collection, basically.', ""Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk."", '```json\n\n{\n\n  ""indices"": [6, 7],\n\n  ""values"": [1.0, 2.0]\n\n}\n\n```\n\n\n\nThe `indices` and `values` arrays must have the same length.\n\nAnd the `indices` must be unique.\n\n\n\nIf the `indices` are not sorted, Qdrant will sort them internally so you may not rely on the order of the elements.\n\n\n\nSparse vectors must be named and can be uploaded in the same way as dense vectors.\n\n\n\n```http\n\nPUT /collections/{collection_name}/points\n\n{\n\n    ""points"": [\n\n        {\n\n            ""id"": 1,\n\n            ""vector"": {']","- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents
Payload = { [""city""] = ""blue"" }

		}

	},

	ordering: WriteOrderingType.Strong

);

```



## Listener mode



<aside role=""alert"">This is an experimental feature, its behavior may change in the future.</aside>



In some cases it might be useful to have a Qdrant node that only accumulates data and does not participate in search operations.

There are several scenarios where this can be useful:
. In that case, the Python client for Qdrant also provides a parameter called exact, and if we specify it as true, then it basically does not use indexing and it makes a full search on the whole vector collection, basically.
Those familiar with the Qdrant API will notice that the extra care taken to be consistent with the existing named vectors API -- this is to make it easier to use sparse vectors in existing codebases. As always, you're able to **apply payload filters**, shard keys, and other advanced features you've come to expect from Qdrant. To make things easier for you, the indices and values don't have to be sorted before upsert. Qdrant will sort them when the index is persisted e.g. on disk.
```json

{

  ""indices"": [6, 7],

  ""values"": [1.0, 2.0]

}

```



The `indices` and `values` arrays must have the same length.

And the `indices` must be unique.



If the `indices` are not sorted, Qdrant will sort them internally so you may not rely on the order of the elements.



Sparse vectors must be named and can be uploaded in the same way as dense vectors.



```http

PUT /collections/{collection_name}/points

{

    ""points"": [

        {

            ""id"": 1,

            ""vector"": {",0.7444444444444445,0.6767676767676768,0.708994708994709,0.5280898876404494,0.47959183673469385,0.5026737967914437,0.5888888888888889,0.5353535353535354,0.5608465608465608,0.7222222222222222,0.6565656565656566,0.6878306878306878,0.9515886306762695,0.8044161200523376,0.7881002426147461,0.7961745858192444,0.9928469837177545,0.82373449637671,101,0.9099099099099099,0.5358142762575366
True,,5058.201,48583213,How can you enable API key based authentication in Qdrant instances for security purposes?,"To enable API key based authentication in Qdrant instances for security purposes, you must specify a key in the configuration. This can be done by adding the following code snippet to your configuration file:

```yaml
service:
  # Set an api-key.
  # If set, all requests must include a header with the api-key.
  # example header: `api-key: <API-KEY>`
  #
  # If you enable this you should also enable TLS.
  # (Either above or via an external service like nginx.)
  # Sending an api-key over an unencrypted channel is insecure.
  api_key: your_secret_api_key_here
```

By adding this configuration, all requests to your Qdrant instance must include a header with the specified API key. This simple form of client authentication helps secure your instance and is available starting from version 1.2.0","To enable API key based authentication in Qdrant instances for security purposes, you can follow these steps:

1. Specify the API key in the Qdrant configuration file:

```yaml
service:
  api_key: your_secret_api_key_here
```

2. Alternatively, you can set the API key using an environment variable:

```bash
export QDRANT__SERVICE__API_KEY=your_secret_api_key_here
```

3. Ensure that TLS is enabled to prevent leaking the API key over an unencrypted connection.

4. The API key must be included in the header of all REST or gRPC requests to your Qdrant instance.

5. Official Qdrant clients for Python, Go, Rust, .NET, and Java support the API key parameter.

Example of using the API key with curl:

```bash
curl -X GET https://localhost:6333 --header 'api-key: your_secret_api_key_here'
```

Example of using the API key with a Python client:

```python
from qdrant_client import QdrantClient

client = QdrantClient(url=""https://localhost"", port=6333, api_key=""your_secret_api_key_here"")
```

By following these steps, you can enable API key based authentication in your Qdrant instance to enhance security.","This can be used to secure your instance.



To enable API key based authentication in your own Qdrant instance you must

specify a key in the configuration:



```yaml

service:

  # Set an api-key.

  # If set, all requests must include a header with the api-key.

  # example header: `api-key: <API-KEY>`

  #

  # If you enable this you should also enable TLS.

  # (Either above or via an external service like nginx.)

  # Sending an api-key over an unencrypted channel is insecure.
api_key: your_secret_api_key_here

```



Or alternatively, you can use the environment variable:



```bash

export QDRANT__SERVICE__API_KEY=your_secret_api_key_here

```



<aside role=""alert""><a href=""#tls"">TLS</a> must be used to prevent leaking the API key over an unencrypted connection.</aside>



For using API key based authentication in Qdrant cloud see the cloud

[Authentication](https://qdrant.tech/documentation/cloud/authentication)

section.
#

  # If you enable this you should also enable TLS.

  # (Either above or via an external service like nginx.)

  # Sending an api-key over an unencrypted channel is insecure.

  #

  # Uncomment to enable.

  # read_only_api_key: your_secret_read_only_api_key_here



cluster:

  # Use `enabled: true` to run Qdrant in distributed deployment mode

  enabled: false



  # Configuration of the inter-cluster communication

  p2p:

    # Port for internal communication between peers

    port: 6335
Qdrant is started and ready to be used.



Regardless of whether an [API key](../security#authentication) is configured,

the endpoints are always accessible.



You can read more about Kubernetes health endpoints

[here](https://kubernetes.io/docs/reference/using-api/health-checks/).
section.



The API key then needs to be present in all REST or gRPC requests to your instance.

All official Qdrant clients for Python, Go, Rust, .NET and Java support the API key parameter.



<!---

Examples with clients

-->



```bash

curl \

  -X GET https://localhost:6333 \

  --header 'api-key: your_secret_api_key_here'

```



```python

from qdrant_client import QdrantClient



client = QdrantClient(

    url=""https://localhost"",

    port=6333,

    api_key=""your_secret_api_key_here"",

)

```","['This can be used to secure your instance.\n\n\n\nTo enable API key based authentication in your own Qdrant instance you must\n\nspecify a key in the configuration:\n\n\n\n```yaml\n\nservice:\n\n  # Set an api-key.\n\n  # If set, all requests must include a header with the api-key.\n\n  # example header: `api-key: <API-KEY>`\n\n  #\n\n  # If you enable this you should also enable TLS.\n\n  # (Either above or via an external service like nginx.)\n\n  # Sending an api-key over an unencrypted channel is insecure.', 'api_key: your_secret_api_key_here\n\n```\n\n\n\nOr alternatively, you can use the environment variable:\n\n\n\n```bash\n\nexport QDRANT__SERVICE__API_KEY=your_secret_api_key_here\n\n```\n\n\n\n<aside role=""alert""><a href=""#tls"">TLS</a> must be used to prevent leaking the API key over an unencrypted connection.</aside>\n\n\n\nFor using API key based authentication in Qdrant cloud see the cloud\n\n[Authentication](https://qdrant.tech/documentation/cloud/authentication)\n\nsection.', '#\n\n  # If you enable this you should also enable TLS.\n\n  # (Either above or via an external service like nginx.)\n\n  # Sending an api-key over an unencrypted channel is insecure.\n\n  #\n\n  # Uncomment to enable.\n\n  # read_only_api_key: your_secret_read_only_api_key_here\n\n\n\ncluster:\n\n  # Use `enabled: true` to run Qdrant in distributed deployment mode\n\n  enabled: false\n\n\n\n  # Configuration of the inter-cluster communication\n\n  p2p:\n\n    # Port for internal communication between peers\n\n    port: 6335', 'Qdrant is started and ready to be used.\n\n\n\nRegardless of whether an [API key](../security#authentication) is configured,\n\nthe endpoints are always accessible.\n\n\n\nYou can read more about Kubernetes health endpoints\n\n[here](https://kubernetes.io/docs/reference/using-api/health-checks/).', 'section.\n\n\n\nThe API key then needs to be present in all REST or gRPC requests to your instance.\n\nAll official Qdrant clients for Python, Go, Rust, .NET and Java support the API key parameter.\n\n\n\n<!---\n\nExamples with clients\n\n-->\n\n\n\n```bash\n\ncurl \\\n\n  -X GET https://localhost:6333 \\\n\n  --header \'api-key: your_secret_api_key_here\'\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\n\n\nclient = QdrantClient(\n\n    url=""https://localhost"",\n\n    port=6333,\n\n    api_key=""your_secret_api_key_here"",\n\n)\n\n```']","Question: How can you enable API key based authentication in Qdrant instances for security purposes?\n\nContext: This can be used to secure your instance.



To enable API key based authentication in your own Qdrant instance you must

specify a key in the configuration:



```yaml

service:

# Set an api-key.

# If set, all requests must include a header with the api-key.

# example header: `api-key: <API-KEY>`

#

# If you enable this you should also enable TLS.

# (Either above or via an external service like nginx.)

# Sending an api-key over an unencrypted channel is insecure.
api_key: your_secret_api_key_here

```



Or alternatively, you can use the environment variable:



```bash

export QDRANT__SERVICE__API_KEY=your_secret_api_key_here

```



<aside role=""alert""><a href=""#tls"">TLS</a> must be used to prevent leaking the API key over an unencrypted connection.</aside>



For using API key based authentication in Qdrant cloud see the cloud

[Authentication](https://qdrant.tech/documentation/cloud/authentication)

section.
#

# If you enable this you should also enable TLS.

# (Either above or via an external service like nginx.)

# Sending an api-key over an unencrypted channel is insecure.

#

# Uncomment to enable.

# read_only_api_key: your_secret_read_only_api_key_here



cluster:

# Use `enabled: true` to run Qdrant in distributed deployment mode

enabled: false



# Configuration of the inter-cluster communication

p2p:

# Port for internal communication between peers

port: 6335
Qdrant is started and ready to be used.



Regardless of whether an [API key](../security#authentication) is configured,

the endpoints are always accessible.



You can read more about Kubernetes health endpoints

[here](https://kubernetes.io/docs/reference/using-api/health-checks/).
section.



The API key then needs to be present in all REST or gRPC requests to your instance.

All official Qdrant clients for Python, Go, Rust, .NET and Java support the API key parameter.



<!---

Examples with clients

-->



```bash

curl \

-X GET https://localhost:6333 \

--header 'api-key: your_secret_api_key_here'

```



```python

from qdrant_client import QdrantClient



client = QdrantClient(

url=""https://localhost"",

port=6333,

api_key=""your_secret_api_key_here"",

)

```\n\nAnswer:",How can you enable API key based authentication in Qdrant instances for security purposes?,"To enable API key based authentication in Qdrant instances for security purposes, you must specify a key in the configuration. This can be done by adding the following code snippet to your configuration file:

```yaml
service:
  # Set an api-key.
  # If set, all requests must include a header with the api-key.
  # example header: `api-key: <API-KEY>`
  #
  # If you enable this you should also enable TLS.
  # (Either above or via an external service like nginx.)
  # Sending an api-key over an unencrypted channel is insecure.
  api_key: your_secret_api_key_here
```

By adding this configuration, all requests to your Qdrant instance must include a header with the specified API key. This simple form of client authentication helps secure your instance and is available starting from version 1.2.0","['This can be used to secure your instance.\n\n\n\nTo enable API key based authentication in your own Qdrant instance you must\n\nspecify a key in the configuration:\n\n\n\n```yaml\n\nservice:\n\n  # Set an api-key.\n\n  # If set, all requests must include a header with the api-key.\n\n  # example header: `api-key: <API-KEY>`\n\n  #\n\n  # If you enable this you should also enable TLS.\n\n  # (Either above or via an external service like nginx.)\n\n  # Sending an api-key over an unencrypted channel is insecure.', 'api_key: your_secret_api_key_here\n\n```\n\n\n\nOr alternatively, you can use the environment variable:\n\n\n\n```bash\n\nexport QDRANT__SERVICE__API_KEY=your_secret_api_key_here\n\n```\n\n\n\n<aside role=""alert""><a href=""#tls"">TLS</a> must be used to prevent leaking the API key over an unencrypted connection.</aside>\n\n\n\nFor using API key based authentication in Qdrant cloud see the cloud\n\n[Authentication](https://qdrant.tech/documentation/cloud/authentication)\n\nsection.', '#\n\n  # If you enable this you should also enable TLS.\n\n  # (Either above or via an external service like nginx.)\n\n  # Sending an api-key over an unencrypted channel is insecure.\n\n  #\n\n  # Uncomment to enable.\n\n  # read_only_api_key: your_secret_read_only_api_key_here\n\n\n\ncluster:\n\n  # Use `enabled: true` to run Qdrant in distributed deployment mode\n\n  enabled: false\n\n\n\n  # Configuration of the inter-cluster communication\n\n  p2p:\n\n    # Port for internal communication between peers\n\n    port: 6335', 'Qdrant is started and ready to be used.\n\n\n\nRegardless of whether an [API key](../security#authentication) is configured,\n\nthe endpoints are always accessible.\n\n\n\nYou can read more about Kubernetes health endpoints\n\n[here](https://kubernetes.io/docs/reference/using-api/health-checks/).', 'section.\n\n\n\nThe API key then needs to be present in all REST or gRPC requests to your instance.\n\nAll official Qdrant clients for Python, Go, Rust, .NET and Java support the API key parameter.\n\n\n\n<!---\n\nExamples with clients\n\n-->\n\n\n\n```bash\n\ncurl \\\n\n  -X GET https://localhost:6333 \\\n\n  --header \'api-key: your_secret_api_key_here\'\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient\n\n\n\nclient = QdrantClient(\n\n    url=""https://localhost"",\n\n    port=6333,\n\n    api_key=""your_secret_api_key_here"",\n\n)\n\n```']","This can be used to secure your instance.



To enable API key based authentication in your own Qdrant instance you must

specify a key in the configuration:



```yaml

service:

  # Set an api-key.

  # If set, all requests must include a header with the api-key.

  # example header: `api-key: <API-KEY>`

  #

  # If you enable this you should also enable TLS.

  # (Either above or via an external service like nginx.)

  # Sending an api-key over an unencrypted channel is insecure.
api_key: your_secret_api_key_here

```



Or alternatively, you can use the environment variable:



```bash

export QDRANT__SERVICE__API_KEY=your_secret_api_key_here

```



<aside role=""alert""><a href=""#tls"">TLS</a> must be used to prevent leaking the API key over an unencrypted connection.</aside>



For using API key based authentication in Qdrant cloud see the cloud

[Authentication](https://qdrant.tech/documentation/cloud/authentication)

section.
#

  # If you enable this you should also enable TLS.

  # (Either above or via an external service like nginx.)

  # Sending an api-key over an unencrypted channel is insecure.

  #

  # Uncomment to enable.

  # read_only_api_key: your_secret_read_only_api_key_here



cluster:

  # Use `enabled: true` to run Qdrant in distributed deployment mode

  enabled: false



  # Configuration of the inter-cluster communication

  p2p:

    # Port for internal communication between peers

    port: 6335
Qdrant is started and ready to be used.



Regardless of whether an [API key](../security#authentication) is configured,

the endpoints are always accessible.



You can read more about Kubernetes health endpoints

[here](https://kubernetes.io/docs/reference/using-api/health-checks/).
section.



The API key then needs to be present in all REST or gRPC requests to your instance.

All official Qdrant clients for Python, Go, Rust, .NET and Java support the API key parameter.



<!---

Examples with clients

-->



```bash

curl \

  -X GET https://localhost:6333 \

  --header 'api-key: your_secret_api_key_here'

```



```python

from qdrant_client import QdrantClient



client = QdrantClient(

    url=""https://localhost"",

    port=6333,

    api_key=""your_secret_api_key_here"",

)

```",0.4647058823529412,0.6583333333333333,0.5448275862068965,0.22485207100591717,0.31932773109243695,0.26388888888888884,0.29411764705882354,0.4166666666666667,0.3448275862068966,0.4235294117647059,0.6,0.496551724137931,0.9589482545852661,0.6365047693252563,0.6763322353363037,0.6558144092559814,0.6945539005100727,0.9285286950180307,156,1.3109243697478992,0.7331360579326952
