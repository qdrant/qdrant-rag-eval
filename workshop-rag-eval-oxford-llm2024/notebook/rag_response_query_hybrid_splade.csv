question,answer,contexts,ground_truth
What is vaccum optimizer ?," The vacuum optimizer is a feature in the Quaterion framework that is used to optimize the storage of data by transforming in-memory segments into memmap segments on disk. This process can be slower, but it is necessary for ingesting large amounts of data. You can read more about this feature in the documentation under the section ""Configuring Memmap Storage"".","['document:the [optimizer](../../concepts/optimizer/) to constantly\n\ntransform in-memory segments into memmap segments on disk. This process is\n\nslower, and the optimizer can be a bottleneck when ingesting a large amount of\n\ndata.\n\n\n\nRead more about this in\n\n[Configuring Memmap Storage](../../concepts/storage/#configuring-memmap-storage).\n\n\n\n## Parallel upload into multiple shards,source:documentation/tutorials/bulk-upload.md'
 'document:return optimizer\n\n```\n\n\n\nCaching in Quaterion is used for avoiding calculation of outputs of a frozen pretrained `Encoder` in every epoch.\n\nWhen it is configured, outputs will be computed once and cached in the preferred device for direct usage later on.\n\nIt provides both a considerable speedup and less memory footprint.\n\nHowever, it is quite a bit versatile and has several knobs to tune.,source:articles/cars-recognition.md'
 'document:Essentially, optimizers are designed to generate, test, and refine prompts, and ensure that the final prompt is highly optimized for the specific dataset and task at hand. Using optimizers in the DSPy framework significantly simplifies the process of developing and refining LM applications by automating the prompt engineering process.\n\n\n\n### **Building AI Applications with DSPy**\n\n\n\nA typical DSPy program requires the developer to follow the following 8 steps:,source:blog/dspy-vs-langchain.md'
 'document:},\n\n            ""optimizer_config"": {\n\n                ""deleted_threshold"": 0.2,\n\n                ""vacuum_min_vector_number"": 1000,\n\n                ""default_segment_number"": 0,\n\n                ""max_segment_size"": null,\n\n                ""memmap_threshold"": null,\n\n                ""indexing_threshold"": 20000,\n\n                ""flush_interval_sec"": 5,\n\n                ""max_optimization_threads"": 1\n\n            },\n\n            ""wal_config"": {\n\n                ""wal_capacity_mb"": 32,,source:documentation/concepts/collections.md'
 'document:So, for example, if the number of points is less than 10000, using any index would be less efficient than a brute force scan.\n\n\n\nThe Indexing Optimizer is used to implement the enabling of indexes and memmap storage when the minimal amount of records is reached.\n\n\n\nThe criteria for starting the optimizer are defined in the configuration file.\n\n\n\nHere is an example of parameter values:\n\n\n\n```yaml\n\nstorage:\n\n  optimizers:\n\n    # Maximum size (in kilobytes) of vectors to store in-memory per segment.,source:documentation/concepts/optimizer.md'
 'document:The criteria for starting the optimizer are defined in the configuration file.\n\n\n\nHere is an example of parameter values:\n\n\n\n```yaml\n\nstorage:\n\n  optimizers:\n\n    # The minimal fraction of deleted vectors in a segment, required to perform segment optimization\n\n    deleted_threshold: 0.2\n\n    # The minimal number of vectors in a segment, required to perform segment optimization\n\n    vacuum_min_vector_number: 1000\n\n```\n\n\n\n## Merge Optimizer\n\n\n\nThe service may require the creation of temporary segments.,source:documentation/concepts/optimizer.md']","The Vacuum Optimizer is a feature in the Qdrant database designed to manage and improve system performance by removing obsolete data. In Qdrant, when records are deleted, they are not immediately removed from the database. Instead, they are marked as deleted and subsequently ignored in future queries. This approach helps minimize disk access but results in accumulated deleted records that can occupy valuable memory and degrade performance over time.
The Vacuum Optimizer addresses this issue by systematically clearing out these marked-as-deleted records once they reach a certain threshold. This threshold is configurable and includes conditions such as the minimum fraction of deleted vectors in a segment and the minimum number of vectors present in a segment. "
Tell me about ‘always_ram’ parameter?," The 'always_ram' parameter is a configuration option that determines whether quantized vectors are always cached in RAM or not. By default, quantized vectors are loaded in the same way as the original vectors. However, in some setups, it may be beneficial to keep quantized vectors in RAM to speed up the search process. This can be achieved by setting 'always_ram' to 'true' in the quantization configuration. This information can be found in the 'Setting up Binary Quantization' and 'Searching with Quantization' sections of the documentation, specifically in the 'always_ram' subsection of the 'Quantization Config' section.","['document:`always_ram` - whether to keep quantized vectors always cached in RAM or not. By default, quantized vectors are loaded in the same way as the original vectors.\n\nHowever, in some setups you might want to keep quantized vectors in RAM to speed up the search process.\n\n\n\nIn this case, you can set `always_ram` to `true` to store quantized vectors in RAM.\n\n\n\n### Setting up Binary Quantization,source:documentation/guides/quantization.md'
 'document:In this case, the quantized vector will be 16 times smaller than the original vector.\n\n\n\n`always_ram` - whether to keep quantized vectors always cached in RAM or not. By default, quantized vectors are loaded in the same way as the original vectors.\n\nHowever, in some setups you might want to keep quantized vectors in RAM to speed up the search process. Then set `always_ram` to `true`.\n\n\n\n### Searching with Quantization,source:documentation/guides/quantization.md'
 'document:This mode is enabled by setting `always_ram` to `true` in the quantization config while using memmap storage:\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n      ""size"": 768,\n\n      ""distance"": ""Cosine"",\n\n      ""on_disk"": true\n\n    },\n\n    ""quantization_config"": {\n\n        ""scalar"": {\n\n            ""type"": ""int8"",\n\n            ""always_ram"": true\n\n        }\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nfrom qdrant_client import QdrantClient, models,source:documentation/guides/quantization.md'
 'document:&qdrant.BinaryQuantization{\n\n\t\t\tAlwaysRam: qdrant.PtrOf(true),\n\n\t\t},\n\n\t),\n\n})\n\n```\n\n\n\n`always_ram` - whether to keep quantized vectors always cached in RAM or not. By default, quantized vectors are loaded in the same way as the original vectors.\n\nHowever, in some setups you might want to keep quantized vectors in RAM to speed up the search process.\n\n\n\nIn this case, you can set `always_ram` to `true` to store quantized vectors in RAM.\n\n\n\n### Setting up Product Quantization,source:documentation/guides/quantization.md']","In the context of vector quantization in Qdrant, the 'always_ram' parameter determines whether quantized vectors should be kept always cached in RAM or not. By default, quantized vectors are loaded in the same manner as the original vectors. Setting 'always_ram' to true ensures that the quantized vectors are consistently cached in RAM, providing faster access times."
What is difference between scalar and product quantization?," Scalar quantization and product quantization are two different methods of compressing high-dimensional vectors in order to reduce memory usage and improve search speed. Scalar quantization is generally faster and more accurate, while product quantization offers a higher compression rate but with trade-offs in accuracy and search speed. The choice between the two methods depends on the specific use case and priorities of the user. For more information on how to choose the right quantization method, please refer to the ""Quantization Tips"" section in the documentation.","['document:## Product Quantization vs Scalar Quantization\n\n\n\nCompared to [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/), Product Quantization offers a higher compression rate. However, this comes with considerable trade-offs in accuracy, and at times, in-RAM search speed.\n\n\n\nProduct Quantization tends to be favored in certain specific scenarios:\n\n\n\n- Deployment in a low-RAM environment where the limiting factor is the number of disk reads rather than the vector comparison itself,source:articles/product-quantization.md'
 'document:But there are some tradeoffs. Product quantization distance calculations are not SIMD-friendly, so it is slower than scalar quantization.\n\nAlso, product quantization has a loss of accuracy, so it is recommended to use it only for high-dimensional vectors.\n\n\n\nPlease refer to the [Quantization Tips](#quantization-tips) section for more information on how to optimize the quantization parameters for your use case.\n\n\n\n## How to choose the right quantization method,source:documentation/guides/quantization.md'
 'document:- **Product Quantization** may provide a better compression ratio, but it has a significant loss of accuracy and is slower than scalar quantization. It is recommended if the memory footprint is the top priority and the search speed is not critical.\n\n\n\n## Setting up Quantization in Qdrant\n\n\n\nYou can configure quantization for a collection by specifying the quantization parameters in the `quantization_config` section of the collection configuration.,source:documentation/guides/quantization.md'
 ""document:method. However, the process is slightly more complicated than [Scalar Quantization](https://qdrant.tech/articles/scalar-quantization/) and is more customizable, so you can find the sweet spot between memory usage and search precision. This article \n\ncovers all the steps required to perform Product Quantization and the way it's implemented in Qdrant.\n\n\n\n## How Does Product Quantization Work?\n\n\n\nLet’s assume we have a few vectors being added to the collection and that our optimizer decided,source:articles/product-quantization.md""]","While both methods aim to reduce the memory footprint and potentially speed up operations, scalar quantization offers faster processing with SIMD-friendly operations and minimal accuracy loss, making it suitable for scenarios where speed is critical. Product quantization achieves higher compression rates and is better suited for handling very high-dimensional vectors where memory space is more of a concern than computation speed."
What is ‘best_score’ strategy?," The 'best_score' strategy is a new recommendation strategy introduced in version 1.6 of the recommendation API. It is based on the idea of finding similar vectors by selecting the ones that are closer to a positive example and avoiding the ones that are closer to a negative example. This strategy uses a more sophisticated algorithm and takes into account multiple positive and negative examples, resulting in a richer variety of results compared to the previous 'average_vector' strategy. This information can be found in the documentation under the 'Best score strategy' section of the 'Explore' page.","['document:This is the default strategy that\'s going to be set implicitly, but you can explicitly define it by setting `""strategy"": ""average_vector""` in the recommendation request.\n\n\n\n### Best score strategy\n\n\n\n*Available as of v1.6.0*\n\n\n\nA new strategy introduced in v1.6, is called `best_score`. It is based on the idea that the best way to find similar vectors is to find the ones that are closer to a positive example, while avoiding the ones that are closer to a negative one.,source:documentation/concepts/explore.md'
 'document:samples and uses a slightly more sophisticated algorithm under the hood.\n\n\n\nThe best score is chosen at every step of HNSW graph traversal. We separately calculate the distance between a traversed point \n\nand every positive and negative example. In the case of the best score strategy, **there is no single query vector anymore, but a \n\nbunch of positive and negative queries**. As a result, for each sample in the query, we have a set of distances, one for each,source:articles/new-recommendation-api.md'
 'document:The way it works is that each candidate is measured against every example, then we select the best positive and best negative scores. The final score is chosen with this step formula:\n\n\n\n```rust\n\nlet score = if best_positive_score > best_negative_score {\n\n    best_positive_score\n\n} else {\n\n    -(best_negative_score * best_negative_score)\n\n};\n\n```\n\n\n\n<aside role=""alert"">\n\nThe performance of <code>best_score</code> strategy will be linearly impacted by the amount of examples.\n\n</aside>,source:documentation/concepts/explore.md'
 'document:* **Switch between the recommendation strategies.** You can now choose between the `average_vector` and the `best_score` scoring \n\n  algorithm. \n\n\n\n### Differences between the strategies\n\n\n\nThe UI of the Food Discovery demo allows you to switch between the strategies. The `best_vector` is the default one, but with just \n\na single switch, you can see how the results differ when using the previous `average_vector` strategy.\n\n\n\nIf you select just a single positive example, both algorithms work identically.,source:articles/new-recommendation-api.md'
 'document:##### One positive and one negative example\n\n\n\n<video autoplay=""true"" loop=""true"" width=""100%"" controls><source src=""/articles_data/new-recommendation-api/one-positive-one-negative.mp4"" type=""video/mp4""></video>\n\n\n\nThe more likes and dislikes we add, the more diverse the results of the `best_score` strategy will be. In the old strategy, there \n\nis just a single vector, so all the examples are similar to it. The new one takes into account all the examples separately, making \n\nthe variety richer.,source:articles/new-recommendation-api.md']","The `best_score` strategy is based on the idea of finding similar vectors by identifying those that are closer to a positive example while avoiding those that are closer to a negative one. This strategy measures each candidate against every example and selects the best positive and best negative scores. The final score is determined using a specific formula: if the best positive score is greater than the best negative score, the final score is set as the best positive score. Otherwise, the final score is calculated as the negative of the square of the best negative score. It is important to note that the performance of the `best_score` strategy is linearly impacted by the number of examples provided."
How does oversampling helps?," Oversampling is a technique used to improve the accuracy and performance of similarity search algorithms, as mentioned in the documentation on oversampling for quantization. By creating additional samples from minority classes, oversampling helps to equalize the representation of classes in the training dataset, resulting in more fair and accurate modeling of real-world scenarios. This technique is particularly useful when one class significantly outnumbers others, as it can skew the performance of models. Additionally, oversampling can limit the loss of information inherent in quantization and preserve the semantic richness of embeddings. The documentation also suggests using an oversampling factor of 3 for the best balance between accuracy and efficiency. (Source: articles/binary-quantization-openai.md, articles/qdrant-1.3.x.md)","['document:### Oversampling for quantization\n\n\n\nWe are introducing [oversampling](/documentation/guides/quantization/#oversampling) as a new way to help you improve the accuracy and performance of similarity search algorithms. With this method, you are able to significantly compress high-dimensional vectors in memory and then compensate the accuracy loss by re-scoring additional points with the original vectors.,source:articles/qdrant-1.3.x.md'
 'document:It works well when one class significantly outnumbers others. This imbalance\n\ncan skew the performance of models, which favors the majority class at the\n\nexpense of others. By creating additional samples from the minority classes,\n\noversampling helps equalize the representation of classes in the training dataset, thus enabling more fair and accurate modeling of real-world scenarios.,source:articles/binary-quantization-openai.md'
 'document:Yeah, so oversampling is a special technique we use to control precision of the search in real time, in query time. And the thing is, we can internally retrieve from quantized storage a bit more vectors than we actually need. And when we do rescoring with original vectors, we assign more precise score. And therefore from this overselection, we can pick only those vectors which are actually good for the user,source:blog/binary-quantization-andrey-vasnetsov-vector-space-talk-001.md'
 'document:- **Oversampling**: By oversampling, we can limit the loss of information inherent in quantization. This also helps to preserve the semantic richness of your OpenAI embeddings. We experimented with different oversampling factors, and identified the impact on the accuracy and efficiency of search. Spoiler: higher oversampling factors tend to improve the accuracy of searches. However, they usually require more computational resources.,source:articles/binary-quantization-openai.md'
 'document:3. Oversampling: Use an oversampling factor of 3 for the best balance between accuracy and efficiency. This factor is suitable for a wide range of applications.\n\n4. Rescoring: Enable rescoring to improve the accuracy of search results.,source:articles/binary-quantization-openai.md']","Defines how many extra vectors should be pre-selected using quantized index, and then re-scored using original vectors. For example, if oversampling is 2.4 and limit is 100, then 240 vectors will be pre-selected using quantized index, and then top-100 will be returned after re-scoring. Oversampling is useful if you want to tune the tradeoff between search speed and search quality in the query time."
What is the purpose of ‘CreatePayloadIndexAsync’?," The 'CreatePayloadIndexAsync' function is used to create a new index for a specific field in a collection. This allows for efficient searching and retrieval of data based on that field. It also allows for customization of the index parameters, such as specifying the data type and enabling certain features like range lookup. This function is part of the QdrantClient class and is used in conjunction with other functions to manage and query collections in the Qdrant database. You can find more information about this function and its usage in the documentation under the 'Create Payload Index' section.","['document:await client.CreatePayloadIndexAsync(\n\n collectionName: ""{collection_name}"",\n\n fieldName: ""group_id"",\n\n schemaType: PayloadSchemaType.Keyword,\n\n indexParams: new PayloadIndexParams\n\n {\n\n  KeywordIndexParams = new KeywordIndexParams\n\n  {\n\n   IsTenant = true\n\n  }\n\n }\n\n);\n\n\n\n```\n\n\n\nAs a result, the storage structure will be organized in a way to co-locate vectors of the same tenant together at the next optimization.,source:blog/qdrant-1.11.x.md'
 'document:client\n\n    .createPayloadIndexAsync(\n\n        ""{collection_name}"",\n\n        ""group_id"",\n\n        PayloadSchemaType.Keyword,\n\n        PayloadIndexParams.newBuilder()\n\n            .setKeywordIndexParams(\n\n                KeywordIndexParams.newBuilder()\n\n                    .setIsTenant(true)\n\n                    .build())\n\n            .build(),\n\n        null,\n\n        null,\n\n        null)\n\n    .get();\n\n```\n\n\n\n```csharp\n\nusing Qdrant.Client;\n\n\n\nvar client = new QdrantClient(""localhost"", 6334);,source:documentation/guides/multiple-partitions.md'
 'document:await client.CreatePayloadIndexAsync(\n\n\tcollectionName: ""{collection_name}"",\n\n\tfieldName: ""group_id"",\n\n\tschemaType: PayloadSchemaType.Keyword,\n\n\tindexParams: new PayloadIndexParams\n\n\t{\n\n\t\tKeywordIndexParams = new KeywordIndexParams\n\n\t\t{\n\n\t\t\tIsTenant = true\n\n\t\t}\n\n\t}\n\n);\n\n```\n\n\n\n```go\n\nimport (\n\n\t""context""\n\n\n\n\t""github.com/qdrant/go-client/qdrant""\n\n)\n\n\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\n\tHost: ""localhost"",\n\n\tPort: 6334,\n\n}),source:documentation/guides/multiple-partitions.md'
 'document:await client.CreatePayloadIndexAsync(\n\n collectionName: ""{collection_name}"",\n\n fieldName: ""payload_field_name"",\n\n schemaType: PayloadSchemaType.Keyword,\n\n indexParams: new PayloadIndexParams\n\n {\n\n  KeywordIndexParams = new KeywordIndexParams\n\n  {\n\n   OnDisk   = true\n\n  }\n\n }\n\n);\n\n```\n\n\n\n```go\n\nimport (\n\n\t""context""\n\n\n\n\t""github.com/qdrant/go-client/qdrant""\n\n)\n\n\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\n\tHost: ""localhost"",\n\n\tPort: 6334,\n\n}),source:documentation/concepts/indexing.md'
 'document:await client.CreatePayloadIndexAsync(\n\n    collectionName: ""{collection_name}"",\n\n    fieldName: ""name_of_the_field_to_index"",\n\n    schemaType: PayloadSchemaType.Integer,\n\n    indexParams: new PayloadIndexParams\n\n    {\n\n\t    IntegerIndexParams = new()\n\n\t    {\n\n\t\t    Lookup = false,\n\n\t\t    Range = true\n\n\t    }\n\n    }\n\n);\n\n```\n\n\n\n```go\n\nimport (\n\n\t""context""\n\n\n\n\t""github.com/qdrant/go-client/qdrant""\n\n)\n\n\n\nclient, err := qdrant.NewClient(&qdrant.Config{\n\n\tHost: ""localhost"",\n\n\tPort: 6334,\n\n}),source:documentation/concepts/indexing.md']",CreatePayloadIndexAsync is a method in the Qdrant library that enables the creation of a payload index in Qdrant. A payload index is a data structure designed to store supplemental information about the data stored in Qdrant. This method requires a Qdrant instance and a payload index name as input parameters.
What is the purpose of ef_construct in HNSW ?," The `ef_construct` parameter in HNSW is used to specify the number of neighbors to consider during the index building process. This parameter affects the precision of the search, with a higher value resulting in higher precision but longer indexing time. It is mentioned in the documentation that the default value for `ef_construct` is 100, but it can be increased to improve precision. This information can be found in the documentation under the section ""HNSW Index"" in the file ""documentation/tutorials/retrieval-quality.md"".","[""document:The larger the value of it, the higher the precision of the search, but more space required. The `ef_construct` parameter is the number of \n\nneighbours to consider during the index building. Again, the larger the value, the higher the precision, but the longer the indexing time.\n\nThe default values of these parameters are `m=16` and `ef_construct=100`. Let's try to increase them to `m=32` and `ef_construct=200` and,source:documentation/tutorials/retrieval-quality.md""
 'document:In order to improve performance, HNSW limits the maximum degree of nodes on each layer of the graph to `m`. In addition, you can use `ef_construct` (when building index) or `ef` (when searching targets) to specify a search range.\n\n\n\nThe corresponding parameters could be configured in the configuration file:\n\n\n\n```yaml\n\nstorage:\n\n  # Default parameters of HNSW Index. Could be overridden for each collection or named vector individually\n\n  hnsw_index:\n\n    # Number of edges per node in the index graph.,source:documentation/concepts/indexing.md'
 ""document:Rishabh Bhardwaj:\n\nSo should I go with the slide first or should I answer your question first?\n\n\n\nDemetrios:\n\nProbably answer the question so we don't get too far off track, and then we can hit up your slides. And the slides, I'm sure, will prompt many other questions from my side and the audience's side.\n\n\n\nRishabh Bhardwaj:\n\nSo, for HNSW configuration, we have specified the value of M, which is, I think, basically the layers as 64, and the value for EF construct is 256.\n\n\n\nDemetrios:,source:blog/building-a-high-performance-entity-matching-solution-with-qdrant-rishabh-bhardwaj-vector-space-talks-005.md""
 'document:Currently, it could be:\n\n\n\n* `hnsw_ef` - value that specifies `ef` parameter of the HNSW algorithm.\n\n* `exact` - option to not use the approximate search (ANN). If set to true, the search may run for a long as it performs a full scan to retrieve exact results.,source:documentation/concepts/search.md'
 'document:# in this case full-scan search should be preferred by query planner and additional indexing is not required.\n\n    # Note: 1Kb = 1 vector of size 256\n\n    full_scan_threshold: 10000\n\n\n\n```\n\n\n\nAnd so in the process of creating a [collection](../collections/). The `ef` parameter is configured during [the search](../search/) and by default is equal to `ef_construct`.\n\n\n\nHNSW is chosen for several reasons.,source:documentation/concepts/indexing.md'
 'document:another console.\n\n\n\nFor our benchmark, we chose the laion dataset picking 5 million 768d entries.\n\nWe enabled scalar quantization + HNSW with m=16 and ef_construct=512.\n\nWe do the quantization in RAM, HNSW in RAM but keep the original vectors on\n\ndisk (which was a network drive rented from Hetzner for the benchmark).\n\n\n\nIf you want to reproduce the benchmarks, you can get snapshots containing the\n\ndatasets:,source:articles/io_uring.md']","In HNSW algorithm the ef_construct parameter is the number of neighbours to consider during the index building. The larger the value, the higher the precision, but the longer the indexing time. The default values of this parameters 100"
How do you use ‘ordering’ parameter?," To use the 'ordering' parameter, you can include it in your request when performing update or delete operations. This parameter ensures that the operations are executed in the same order on all replicas, preventing data inconsistency in case of concurrent updates of the same documents. You can also use the 'ordering' parameter with the 'strong' value to route the operation to the leader replica of the shard and wait for the response before responding to the client. This guarantees the strongest ordering guarantees. For more information on ordering, you can refer to the 'ordering' section in the documentation on distributed deployment.","['document:}\n\n```\n\n\n\n<aside role=""alert"">When you use the <code>order_by</code> parameter, pagination is disabled.</aside>\n\n\n\nWhen sorting is based on a non-unique value, it is not possible to rely on an ID offset. Thus, next_page_offset is not returned within the response. However, you can still do pagination by combining `""order_by"": { ""start_from"": ... }` with a `{ ""must_not"": [{ ""has_id"": [...] }] }` filter.\n\n\n\n## Counting points\n\n\n\n_Available as of v0.8.4_,source:documentation/concepts/points.md'
 'document:```http\n\n""order_by"": {\n\n    ""key"": ""timestamp"",\n\n    ""direction"": ""desc"" // default is ""asc""\n\n    ""start_from"": 123, // start from this value\n\n}\n\n```\n\n\n\n```python\n\norder_by=models.OrderBy(\n\n    key=""timestamp"",\n\n    direction=""desc"",  # default is ""asc""\n\n    start_from=123,  # start from this value\n\n)\n\n```\n\n\n\n```typescript\n\norder_by: {\n\n    key: ""timestamp"",\n\n    direction: ""desc"", // default is ""asc""\n\n    start_from: 123, // start from this value\n\n}\n\n```\n\n\n\n```rust,source:documentation/concepts/points.md'
 'document:(see [ordering](#order-and-priority)).\n\n\n\nAll environment variables are prefixed with `QDRANT__` and are separated with\n\n`__`.\n\n\n\nThese variables:\n\n\n\n```bash\n\nQDRANT__LOG_LEVEL=INFO\n\nQDRANT__SERVICE__HTTP_PORT=6333\n\nQDRANT__SERVICE__ENABLE_TLS=1\n\nQDRANT__TLS__CERT=./tls/cert.pem\n\nQDRANT__TLS__CERT_TTL=3600\n\n```\n\n\n\nresult in this configuration:\n\n\n\n```yaml\n\nlog_level: INFO\n\nservice:\n\n  http_port: 6333\n\n  enable_tls: true\n\ntls:\n\n  cert: ./tls/cert.pem\n\n  cert_ttl: 3600\n\n```,source:documentation/guides/configuration.md'
 'document:- Write `ordering` param, can be used with update and delete operations to ensure that the operations are executed in the same order on all replicas. If this option is used, Qdrant will route the operation to the leader replica of the shard and wait for the response before responding to the client. This option is useful to avoid data inconsistency in case of concurrent updates of the same documents,source:documentation/guides/distributed_deployment.md'
 'document:<aside role=""status"">Some <a href=""#shard-transfer-method"">shard transfer methods</a> may affect ordering guarantees.</aside>\n\n\n\n```http\n\nPUT /collections/{collection_name}/points?ordering=strong\n\n{\n\n    ""batch"": {\n\n        ""ids"": [1, 2, 3],\n\n        ""payloads"": [\n\n            {""color"": ""red""},\n\n            {""color"": ""green""},\n\n            {""color"": ""blue""}\n\n        ],\n\n        ""vectors"": [\n\n            [0.9, 0.1, 0.1],\n\n            [0.1, 0.9, 0.1],\n\n            [0.1, 0.1, 0.9]\n\n        ]\n\n    }\n\n}\n\n```,source:documentation/guides/distributed_deployment.md'
 'document:.limit(10u64)\n\n        )\n\n        .query(Query::new_order_by(""price""))\n\n).await?;\n\n```\n\n\n\n```java\n\nimport static io.qdrant.client.ConditionFactory.matchKeyword;\n\nimport static io.qdrant.client.QueryFactory.nearest;\n\nimport static io.qdrant.client.QueryFactory.orderBy;\n\n\n\nimport io.qdrant.client.QdrantClient;\n\nimport io.qdrant.client.QdrantGrpcClient;\n\nimport io.qdrant.client.grpc.Points.Filter;\n\nimport io.qdrant.client.grpc.Points.PrefetchQuery;,source:documentation/concepts/hybrid-queries.md']","Write ordering can be specified for any write request to serialize it through a single “leader” node, which ensures that all write operations (issued with the same ordering) are performed and observed sequentially. It is of 3 types weak , medium and strong and is used in python with additional param ordering=models.WriteOrdering.STRONG to upsert request."
What is significance of ‘on_disk_payload’ setting?," The 'on_disk_payload' setting is used to define where to store payload data. If set to 'true', the payload will be stored on disk only. This can be useful for limiting RAM usage, especially for large payloads. This setting is further explained in the [storage](/documentation/concepts/storage/) and [indexing](/documentation/concepts/indexing/) documentation.","['document:* `on_disk_payload` - defines where to store payload data. If `true` - payload will be stored on disk only. Might be useful for limiting the RAM usage in case of large payload.\n\n* `quantization_config` - see [quantization](../../guides/quantization/#setting-up-quantization-in-qdrant) for details.\n\n\n\nDefault parameters for the optional collection parameters are defined in [configuration file](https://github.com/qdrant/qdrant/blob/master/config/config.yaml).,source:documentation/concepts/collections.md'
 'document:InMemory payload storage is organized in the same way as in-memory vectors.\n\nThe payload data is loaded into RAM at service startup while disk and [RocksDB](https://rocksdb.org/) are used for persistence only.\n\nThis type of storage works quite fast, but it may require a lot of space to keep all the data in RAM, especially if the payload has large values attached - abstracts of text or even images.\n\n\n\nIn the case of large payload values, it might be better to use OnDisk payload storage.,source:documentation/concepts/storage.md'
 'document:<aside role=""alert"">\n\n    On-disk payload index might affect cold requests latency, as it requires additional disk I/O operations.\n\n</aside>\n\n\n\nTo configure on-disk payload index, you can use the following index parameters:\n\n\n\n```http\n\nPUT /collections/{collection_name}/index\n\n{\n\n    ""field_name"": ""payload_field_name"",\n\n    ""field_schema"": {\n\n        ""type"": ""keyword"",\n\n        ""on_disk"": true\n\n    }\n\n}\n\n```\n\n\n\n```python\n\nclient.create_payload_index(\n\n    collection_name=""{collection_name}"",,source:documentation/concepts/indexing.md'
 'document:schemaType: PayloadSchemaType.Keyword,\n\n indexParams: new PayloadIndexParams\n\n {\n\n  KeywordIndexParams = new KeywordIndexParams\n\n  {\n\n   IsTenant = true,\n\n   OnDisk   = true\n\n  }\n\n }\n\n);\n\n\n\n```\n\n\n\nBy moving the index to disk, Qdrant can handle larger datasets that exceed the capacity of RAM, making the system more scalable and capable of storing more data without being constrained by memory limitations.\n\n\n\n*To learn more about this, read the [Indexing documentation](/documentation/concepts/indexing/).*,source:blog/qdrant-1.11.x.md'
 'document:*This feature can help you manage a high number of different payload indexes, which is beneficial if you are working with large varied datasets.*\n\n\n\n**Figure 2:** By moving the data from Workspace 2 to disk, the system can free up valuable memory resources for Workspaces 1, 3 and 4, which are accessed more frequently.\n\n\n\n![on-disk-payload](/blog/qdrant-1.11.x/on-disk-payload.png)\n\n\n\n**Example:** As you create an index for Workspace 2, set the `on_disk` parameter.\n\n\n\n```http,source:blog/qdrant-1.11.x.md']","The `on_disk_payload` setting in the storage configuration determines whether a point's payload will be stored in memory or read from disk every time it is requested. When set to `true`, the point's payload will not be stored in memory, saving RAM but slightly increasing the response time as the data needs to be retrieved from disk. It is important to note that payload values involved in filtering and indexed values will still remain in RAM for efficient access. This setting allows for a balance between RAM usage and response time in handling data storage and retrieval processes."
What is the impact of ‘write_consistency_factor’ ?," The 'write_consistency_factor' determines the number of replicas that must acknowledge a write operation before responding to the client. This value can be increased to make write operations more tolerant to network partitions in the cluster, but it will require a higher number of replicas to be active in order to perform write operations. This information can be found in the documentation under the 'write_consistency_factor' section of the 'distributed_deployment' guide.","['document:- `write_consistency_factor` - defines the number of replicas that must acknowledge a write operation before responding to the client. Increasing this value will make write operations tolerant to network partitions in the cluster, but will require a higher number of replicas to be active to perform write operations.,source:documentation/guides/distributed_deployment.md'
 'document:### Write consistency factor\n\n\n\nThe `write_consistency_factor` represents the number of replicas that must acknowledge a write operation before responding to the client. It is set to one by default.\n\nIt can be configured at the collection\'s creation time.\n\n\n\n```http\n\nPUT /collections/{collection_name}\n\n{\n\n    ""vectors"": {\n\n        ""size"": 300,\n\n        ""distance"": ""Cosine""\n\n    },\n\n    ""shard_number"": 6,\n\n    ""replication_factor"": 2,\n\n    ""write_consistency_factor"": 2,\n\n}\n\n```\n\n\n\n```python,source:documentation/guides/distributed_deployment.md'
 'document:replication_factor: 1\n\n\n\n    # How many replicas should apply the operation for us to consider it successful\n\n    write_consistency_factor: 1\n\n\n\n    # Default parameters for vectors.\n\n    vectors:\n\n      # Whether vectors should be stored in memory or on disk.\n\n      on_disk: null\n\n\n\n    # shard_number_per_node: 1\n\n\n\n    # Default quantization configuration.\n\n    # More info: https://qdrant.tech/documentation/guides/quantization\n\n    quantization: null\n\n\n\nservice:,source:documentation/guides/configuration.md'
 'document:CollectionName: ""{collection_name}"",\n\n\tVectorsConfig: qdrant.NewVectorsConfig(&qdrant.VectorParams{\n\n\t\tSize:     300,\n\n\t\tDistance: qdrant.Distance_Cosine,\n\n\t}),\n\n\tShardNumber:            qdrant.PtrOf(uint32(6)),\n\n\tReplicationFactor:      qdrant.PtrOf(uint32(2)),\n\n\tWriteConsistencyFactor: qdrant.PtrOf(uint32(2)),\n\n})\n\n```\n\n\n\nWrite operations will fail if the number of active replicas is less than the `write_consistency_factor`.\n\n\n\n### Read consistency,source:documentation/guides/distributed_deployment.md']","The `write_consistency_factor` parameter in a distributed deployment using Qdrant defines the number of replicas that must acknowledge a write operation before responding to the client. By increasing this value, the write operations become more tolerant to network partitions within the cluster. However, this also means that a higher number of replicas need to be active in order to perform write operations successfully."
